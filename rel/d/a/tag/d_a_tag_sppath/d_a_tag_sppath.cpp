// 
// Generated By: dol2asm
// Translation Unit: d_a_tag_sppath
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "rel/d/a/tag/d_a_tag_sppath/d_a_tag_sppath.h"

// 
// Types:
// 

struct fopAc_ac_c {
	/* 80018B64 */ // False False
fopAc_ac_c();
	/* 80018C8C */ // False False
~fopAc_ac_c();
};

struct Vec {
};

struct cXyz {
	/* 80266AE4 */ // False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
void operator+(Vec const&) const;
	/* 80266B84 */ // False False
//  f32 False
void operator*(f32) const;
	/* 80266F48 */ // False False
void normalizeZP();
};

struct dPath {
};

struct daTagSppath_c {
	/* 80D61C18 */ // True False
void create();
	/* 80D61EC4 */ // True False
~daTagSppath_c();
	/* 80D62024 */ // True False
//  cXyz* False
// 	 cXyz False
//  dPath* False
// 	 dPath False
void getNearPathPos(cXyz*, dPath*);
	/* 80D629C0 */ // True False
void execute();
};

struct dSv_info_c {
	/* 80035360 */ // False False
//  int False
//  int False
void isSwitch(int, int) const;
};

struct dCcD_Stts {
	/* 80083860 */ // False False
//  int False
//  int False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
void Init(int, int, fopAc_ac_c*);
};

struct dCcD_SrcCyl {
};

struct dCcD_GStts {
	/* 80083760 */ // False False
dCcD_GStts();
	/* 80D61DB8 */ // True False
~dCcD_GStts();
};

struct dCcD_GObjInf {
	/* 80083A28 */ // False False
dCcD_GObjInf();
	/* 800840E4 */ // False False
~dCcD_GObjInf();
};

struct dCcD_Cyl {
	/* 800848B4 */ // False False
//  dCcD_SrcCyl const& False
// 	 dCcD_SrcCyl const False
// 		 dCcD_SrcCyl False
void Set(dCcD_SrcCyl const&);
};

struct cM3dGLin {
	/* 8026F31C */ // False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
void SetStartEnd(Vec const&, Vec const&);
	/* 80D62978 */ // True False
~cM3dGLin();
};

struct cM3dGCyl {
	/* 8026F1DC */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
void SetC(cXyz const&);
	/* 8026F1F8 */ // False False
//  f32 False
void SetH(f32);
	/* 80D61E14 */ // True False
~cM3dGCyl();
};

struct cM3dGAab {
	/* 80D61E5C */ // True False
~cM3dGAab();
};

struct cCcD_Obj {
};

struct cCcS {
	/* 80264BA8 */ // False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
void Set(cCcD_Obj*);
};

struct cCcD_GStts {
	/* 80D62BC8 */ // True False
~cCcD_GStts();
};

// 
// Forward References:
// 

// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
static void daTagSppath_Create(fopAc_ac_c*);
// True False
//  daTagSppath_c* False
// 	 daTagSppath_c False
static void daTagSppath_Delete(daTagSppath_c*);
// True False
//  daTagSppath_c* False
// 	 daTagSppath_c False
static void daTagSppath_Execute(daTagSppath_c*);
// True False
//  bool False
//  daTagSppath_c* False
// 	 daTagSppath_c False
static bool daTagSppath_Draw(daTagSppath_c*);

// True False
extern "C" void create__13daTagSppath_cFv();
// True False
extern "C" void __dt__10dCcD_GSttsFv();
// True False
extern "C" void __dt__8cM3dGCylFv();
// True False
extern "C" void __dt__8cM3dGAabFv();
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
extern "C" static void daTagSppath_Create__FP10fopAc_ac_c();
// True False
extern "C" void __dt__13daTagSppath_cFv();
// True False
//  daTagSppath_c* False
// 	 daTagSppath_c False
extern "C" static void daTagSppath_Delete__FP13daTagSppath_c();
// True False
//  cXyz* False
// 	 cXyz False
//  dPath* False
// 	 dPath False
extern "C" void getNearPathPos__13daTagSppath_cFP4cXyzP5dPath();
// True False
extern "C" void __dt__8cM3dGLinFv();
// True False
extern "C" void execute__13daTagSppath_cFv();
// True False
//  daTagSppath_c* False
// 	 daTagSppath_c False
extern "C" static void daTagSppath_Execute__FP13daTagSppath_c();
// True False
//  bool False
//  daTagSppath_c* False
// 	 daTagSppath_c False
extern "C" static bool daTagSppath_Draw__FP13daTagSppath_c();
// True False
extern "C" void __dt__10cCcD_GSttsFv();
extern "C" extern u8 const lit_4100[4 + 4 /* padding */];
extern "C" extern u8 const lit_4101[8];
extern "C" extern u8 const lit_4102[8];
extern "C" extern u8 const lit_4103[8];
extern "C" extern u32 const lit_4104;
extern "C" extern u32 const lit_4105;
extern "C" extern char const* const stringBase0;
extern "C" extern void* g_profile_Tag_Sppath[12];
extern "C" extern void* __vt__8cM3dGLin[3];
extern "C" extern void* __vt__10cCcD_GStts[3];
extern "C" extern void* __vt__10dCcD_GStts[3];
extern "C" extern void* __vt__8cM3dGCyl[3];
extern "C" extern void* __vt__8cM3dGAab[3];

// 
// External References:
// 

// False False
//  int False
//  int False
void dPath_GetRoomPath(int, int);
// False False
//  dPath const* False
// 	 dPath const False
// 		 dPath False
//  int False
void dPath_GetNextRoomPath(dPath const*, int);
// False False
//  cM3dGLin const* False
// 	 cM3dGLin const False
// 		 cM3dGLin False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  Vec* False
// 	 Vec False
//  f32* False
// 	 f32 False
void cM3d_Len3dSqPntAndSegLine(cM3dGLin const*, Vec const*, Vec*, f32*);
// False False
//  void False
//  void* False
// 	 void False
void operator delete(void*);

// False False
extern "C" void __ct__10fopAc_ac_cFv();
// False False
extern "C" void __dt__10fopAc_ac_cFv();
// False False
//  int False
//  int False
extern "C" void isSwitch__10dSv_info_cCFii();
// False False
//  int False
//  int False
extern "C" void dPath_GetRoomPath__Fii();
// False False
//  dPath const* False
// 	 dPath const False
// 		 dPath False
//  int False
extern "C" void dPath_GetNextRoomPath__FPC5dPathi();
// False False
extern "C" void __ct__10dCcD_GSttsFv();
// False False
//  int False
//  int False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
extern "C" void Init__9dCcD_SttsFiiP10fopAc_ac_c();
// False False
extern "C" void __ct__12dCcD_GObjInfFv();
// False False
extern "C" void __dt__12dCcD_GObjInfFv();
// False False
//  dCcD_SrcCyl const& False
// 	 dCcD_SrcCyl const False
// 		 dCcD_SrcCyl False
extern "C" void Set__8dCcD_CylFRC11dCcD_SrcCyl();
// False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
extern "C" void Set__4cCcSFP8cCcD_Obj();
// False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
extern "C" void __pl__4cXyzCFRC3Vec();
// False False
//  f32 False
extern "C" void __ml__4cXyzCFf();
// False False
extern "C" void normalizeZP__4cXyzFv();
// False False
//  cM3dGLin const* False
// 	 cM3dGLin const False
// 		 cM3dGLin False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  Vec* False
// 	 Vec False
//  f32* False
// 	 f32 False
extern "C" void cM3d_Len3dSqPntAndSegLine__FPC8cM3dGLinPC3VecP3VecPf();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
extern "C" void SetC__8cM3dGCylFRC4cXyz();
// False False
//  f32 False
extern "C" void SetH__8cM3dGCylFf();
// False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
extern "C" void SetStartEnd__8cM3dGLinFRC3VecRC3Vec();
// False False
//  void False
//  void* False
// 	 void False
extern "C" void __dl__FPv();
// False False
extern "C" void PSVECAdd();
// False False
extern "C" void PSVECSquareMag();
// False False
extern "C" void PSVECSquareDistance();
// False False
extern "C" void _savegpr_24();
// False False
extern "C" void _savegpr_28();
// False False
extern "C" void _savegpr_29();
// False False
extern "C" void _restgpr_24();
// False False
extern "C" void _restgpr_28();
// False False
extern "C" void _restgpr_29();
// False False
extern "C" void strcmp();
extern "C" extern void* g_fopAc_Method[8];
extern "C" extern void* g_fpcLf_Method[5 + 1 /* padding */];
extern "C" extern void* __vt__8dCcD_Cyl[36];
extern "C" extern void* __vt__9dCcD_Stts[11];
extern "C" extern void* __vt__12cCcD_CylAttr[25];
extern "C" extern void* __vt__14cCcD_ShapeAttr[22];
extern "C" extern void* __vt__9cCcD_Stts[8];
extern "C" extern u8 g_dComIfG_gameInfo[122384];
extern "C" extern u32 __float_nan;
extern "C" extern u32 __float_max;

// 
// Declarations:
// 

/* ############################################################################################## */
/* 80D62C18-80D62C1C 0004+00 s=2 e=0 z=0  None .rodata    @3694                                                        */
SECTION_RODATA static u32 const lit_3694 = 0x44160000;

/* 80D62C1C-80D62C20 0004+00 s=1 e=0 z=0  None .rodata    @3695                                                        */
SECTION_RODATA static u32 const lit_3695 = 0x42C80000;

/* 80D62C20-80D62C28 0004+04 s=0 e=0 z=0  None .rodata    @4100                                                        */
SECTION_RODATA u8 const lit_4100[4 + 4 /* padding */] = {
	0x00, 0x00, 0x00, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00,
};

/* 80D62C28-80D62C30 0008+00 s=0 e=0 z=0  None .rodata    @4101                                                        */
SECTION_RODATA u8 const lit_4101[8] = {
	0x3F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 80D62C30-80D62C38 0008+00 s=0 e=0 z=0  None .rodata    @4102                                                        */
SECTION_RODATA u8 const lit_4102[8] = {
	0x40, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 80D62C38-80D62C40 0008+00 s=0 e=0 z=0  None .rodata    @4103                                                        */
SECTION_RODATA u8 const lit_4103[8] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 80D62C40-80D62C44 0004+00 s=0 e=0 z=0  None .rodata    @4104                                                        */
SECTION_RODATA u32 const lit_4104 = 0x3A83126F;

/* 80D62C44-80D62C48 0004+00 s=0 e=0 z=0  None .rodata    @4105                                                        */
SECTION_RODATA u32 const lit_4105 = 0x41F00000;

/* 80D62C48-80D62C4C 0004+00 s=1 e=0 z=0  None .rodata    @4167                                                        */
SECTION_RODATA static u32 const lit_4167 = 0x3F000000;

/* 80D62C4C-80D62C54 0008+00 s=1 e=0 z=0  None .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char const* const stringBase_80D62C4C = "D_MN10A";
#pragma pop

/* 80D62C54-80D62C98 0044+00 s=1 e=0 z=0  None .data      l_cylSrc                                                     */
SECTION_DATA static u8 l_cylSrc[68] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xF0, 0x00, 0x00,
	0x42, 0xC8, 0x00, 0x00,
};

/* 80D62C98-80D62CB8 0020+00 s=1 e=0 z=0  None .data      l_daTagSppath_Method                                         */
SECTION_DATA static void* l_daTagSppath_Method[8] = {
	(void*)daTagSppath_Create__FP10fopAc_ac_c,
	(void*)daTagSppath_Delete__FP13daTagSppath_c,
	(void*)daTagSppath_Execute__FP13daTagSppath_c,
	(void*)NULL,
	(void*)daTagSppath_Draw__FP13daTagSppath_c,
	(void*)NULL,
	(void*)NULL,
	(void*)NULL,
};

/* 80D62CB8-80D62CE8 0030+00 s=0 e=0 z=1  None .data      g_profile_Tag_Sppath                                         */
SECTION_DATA void* g_profile_Tag_Sppath[12] = {
	(void*)0xFFFFFFFD,
	(void*)0x0007FFFD,
	(void*)0x02C60000,
	(void*)&g_fpcLf_Method,
	(void*)0x000006F4,
	(void*)NULL,
	(void*)NULL,
	(void*)&g_fopAc_Method,
	(void*)0x01020000,
	(void*)&l_daTagSppath_Method,
	(void*)0x00044000,
	(void*)0x030E0000,
};

/* 80D62CE8-80D62CF4 000C+00 s=2 e=0 z=0  None .data      __vt__8cM3dGLin                                              */
SECTION_DATA void* __vt__8cM3dGLin[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__8cM3dGLinFv,
};

/* 80D62CF4-80D62D00 000C+00 s=3 e=0 z=0  None .data      __vt__10cCcD_GStts                                           */
SECTION_DATA void* __vt__10cCcD_GStts[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__10cCcD_GSttsFv,
};

/* 80D62D00-80D62D0C 000C+00 s=2 e=0 z=0  None .data      __vt__10dCcD_GStts                                           */
SECTION_DATA void* __vt__10dCcD_GStts[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__10dCcD_GSttsFv,
};

/* 80D62D0C-80D62D18 000C+00 s=3 e=0 z=0  None .data      __vt__8cM3dGCyl                                              */
SECTION_DATA void* __vt__8cM3dGCyl[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__8cM3dGCylFv,
};

/* 80D62D18-80D62D24 000C+00 s=3 e=0 z=0  None .data      __vt__8cM3dGAab                                              */
SECTION_DATA void* __vt__8cM3dGAab[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__8cM3dGAabFv,
};

/* 80D61C18-80D61DB8 01A0+00 s=1 e=0 z=0  None .text      create__13daTagSppath_cFv                                    */
//	80D61C28: 803621DC (_savegpr_29)
//	80D61C48: 80018B64 (__ct__10fopAc_ac_cFv)
//	80D61C54: 80083A28 (__ct__12dCcD_GObjInfFv)
//	80D61C58: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	80D61C5C: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	80D61C64: 80D62D18 (__vt__8cM3dGAab)
//	80D61C68: 80D62D18 (__vt__8cM3dGAab)
//	80D61C70: 80D62D0C (__vt__8cM3dGCyl)
//	80D61C74: 80D62D0C (__vt__8cM3dGCyl)
//	80D61C7C: 803C35A4 (__vt__12cCcD_CylAttr)
//	80D61C80: 803C35A4 (__vt__12cCcD_CylAttr)
//	80D61C90: 803AC050 (__vt__8dCcD_Cyl)
//	80D61C94: 803AC050 (__vt__8dCcD_Cyl)
//	80D61CAC: 803C3728 (__vt__9cCcD_Stts)
//	80D61CB0: 803C3728 (__vt__9cCcD_Stts)
//	80D61CBC: 80083760 (__ct__10dCcD_GSttsFv)
//	80D61CC0: 803AC2E4 (__vt__9dCcD_Stts)
//	80D61CC4: 803AC2E4 (__vt__9dCcD_Stts)
//	80D61D10: 800517EC (dPath_GetRoomPath__Fii)
//	80D61D38: 80083860 (Init__9dCcD_SttsFiiP10fopAc_ac_c)
//	80D61D40: 80D62C54 (l_cylSrc)
//	80D61D44: 80D62C54 (l_cylSrc)
//	80D61D48: 800848B4 (Set__8dCcD_CylFRC11dCcD_SrcCyl)
//	80D61D54: 804061C0 (g_dComIfG_gameInfo)
//	80D61D58: 804061C0 (g_dComIfG_gameInfo)
//	80D61D60: 80D62C4C (stringBase0)
//	80D61D64: 80D62C4C (stringBase0)
//	80D61D68: 80368994 (strcmp)
//	80D61D74: 80D62C18 (lit_3694)
//	80D61D78: 80D62C18 (lit_3694)
//	80D61D88: 8026F1F8 (SetH__8cM3dGCylFf)
//	80D61D90: 80D62C1C (lit_3695)
//	80D61D94: 80D62C1C (lit_3695)
//	80D61DA4: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daTagSppath_c::create() {
	nofralloc
#include "asm/rel/d/a/tag/d_a_tag_sppath/d_a_tag_sppath/create__13daTagSppath_cFv.s"
}
#pragma pop


/* 80D61DB8-80D61E14 005C+00 s=1 e=0 z=0  None .text      __dt__10dCcD_GSttsFv                                         */
//	80D61DD0: 80D62D00 (__vt__10dCcD_GStts)
//	80D61DD4: 80D62D00 (__vt__10dCcD_GStts)
//	80D61DE0: 80D62CF4 (__vt__10cCcD_GStts)
//	80D61DE4: 80D62CF4 (__vt__10cCcD_GStts)
//	80D61DF8: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dCcD_GStts::~dCcD_GStts() {
	nofralloc
#include "asm/rel/d/a/tag/d_a_tag_sppath/d_a_tag_sppath/__dt__10dCcD_GSttsFv.s"
}
#pragma pop


/* 80D61E14-80D61E5C 0048+00 s=1 e=0 z=0  None .text      __dt__8cM3dGCylFv                                            */
//	80D61E2C: 80D62D0C (__vt__8cM3dGCyl)
//	80D61E30: 80D62D0C (__vt__8cM3dGCyl)
//	80D61E40: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cM3dGCyl::~cM3dGCyl() {
	nofralloc
#include "asm/rel/d/a/tag/d_a_tag_sppath/d_a_tag_sppath/__dt__8cM3dGCylFv.s"
}
#pragma pop


/* 80D61E5C-80D61EA4 0048+00 s=1 e=0 z=0  None .text      __dt__8cM3dGAabFv                                            */
//	80D61E74: 80D62D18 (__vt__8cM3dGAab)
//	80D61E78: 80D62D18 (__vt__8cM3dGAab)
//	80D61E88: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cM3dGAab::~cM3dGAab() {
	nofralloc
#include "asm/rel/d/a/tag/d_a_tag_sppath/d_a_tag_sppath/__dt__8cM3dGAabFv.s"
}
#pragma pop


/* 80D61EA4-80D61EC4 0020+00 s=1 e=0 z=0  None .text      daTagSppath_Create__FP10fopAc_ac_c                           */
//	80D61EB0: 80D61C18 (create__13daTagSppath_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
asm static void daTagSppath_Create(fopAc_ac_c* param_0) {
	nofralloc
#include "asm/rel/d/a/tag/d_a_tag_sppath/d_a_tag_sppath/daTagSppath_Create__FP10fopAc_ac_c.s"
}
#pragma pop


/* 80D61EC4-80D61FFC 0138+00 s=1 e=0 z=0  None .text      __dt__13daTagSppath_cFv                                      */
//	80D61EEC: 803AC2E4 (__vt__9dCcD_Stts)
//	80D61EF0: 803AC2E4 (__vt__9dCcD_Stts)
//	80D61F08: 80D62D00 (__vt__10dCcD_GStts)
//	80D61F0C: 80D62D00 (__vt__10dCcD_GStts)
//	80D61F1C: 80D62CF4 (__vt__10cCcD_GStts)
//	80D61F20: 80D62CF4 (__vt__10cCcD_GStts)
//	80D61F30: 803C3728 (__vt__9cCcD_Stts)
//	80D61F34: 803C3728 (__vt__9cCcD_Stts)
//	80D61F44: 803AC050 (__vt__8dCcD_Cyl)
//	80D61F48: 803AC050 (__vt__8dCcD_Cyl)
//	80D61F68: 803C35A4 (__vt__12cCcD_CylAttr)
//	80D61F6C: 803C35A4 (__vt__12cCcD_CylAttr)
//	80D61F84: 80D62D0C (__vt__8cM3dGCyl)
//	80D61F88: 80D62D0C (__vt__8cM3dGCyl)
//	80D61F98: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	80D61F9C: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	80D61FAC: 80D62D18 (__vt__8cM3dGAab)
//	80D61FB0: 80D62D18 (__vt__8cM3dGAab)
//	80D61FC0: 800840E4 (__dt__12dCcD_GObjInfFv)
//	80D61FCC: 80018C8C (__dt__10fopAc_ac_cFv)
//	80D61FDC: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm daTagSppath_c::~daTagSppath_c() {
	nofralloc
#include "asm/rel/d/a/tag/d_a_tag_sppath/d_a_tag_sppath/__dt__13daTagSppath_cFv.s"
}
#pragma pop


/* 80D61FFC-80D62024 0028+00 s=1 e=0 z=0  None .text      daTagSppath_Delete__FP13daTagSppath_c                        */
//	80D6200C: 80D61EC4 (__dt__13daTagSppath_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daTagSppath_c* False
// 	 daTagSppath_c False
asm static void daTagSppath_Delete(daTagSppath_c* param_0) {
	nofralloc
#include "asm/rel/d/a/tag/d_a_tag_sppath/d_a_tag_sppath/daTagSppath_Delete__FP13daTagSppath_c.s"
}
#pragma pop


/* 80D62024-80D62978 0954+00 s=1 e=0 z=0  None .text      getNearPathPos__13daTagSppath_cFP4cXyzP5dPath                */
//	80D62044: 803621C8 (_savegpr_24)
//	80D62050: 80D62C18 (lit_3694)
//	80D62054: 80D62C18 (lit_3694)
//	80D62058: 804061C0 (g_dComIfG_gameInfo)
//	80D6205C: 804061C0 (g_dComIfG_gameInfo)
//	80D6206C: 80450AE8 (__float_max)
//	80D62070: 80450AE8 (__float_max)
//	80D62074: 80D62CE8 (__vt__8cM3dGLin)
//	80D62078: 80D62CE8 (__vt__8cM3dGLin)
//	80D620A4: 8026F31C (SetStartEnd__8cM3dGLinFRC3VecRC3Vec)
//	80D620F0: 80347138 (PSVECSquareMag)
//	80D62160: 80450AE0 (__float_nan)
//	80D62164: 80450AE0 (__float_nan)
//	80D621D0: 80450AE0 (__float_nan)
//	80D621D4: 80450AE0 (__float_nan)
//	80D621E8: 80266F48 (normalizeZP__4cXyzFv)
//	80D62208: 80347138 (PSVECSquareMag)
//	80D62278: 80450AE0 (__float_nan)
//	80D6227C: 80450AE0 (__float_nan)
//	80D622E8: 80450AE0 (__float_nan)
//	80D622EC: 80450AE0 (__float_nan)
//	80D62314: 80266B84 (__ml__4cXyzCFf)
//	80D62324: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	80D62384: 80347138 (PSVECSquareMag)
//	80D623F4: 80450AE0 (__float_nan)
//	80D623F8: 80450AE0 (__float_nan)
//	80D62464: 80450AE0 (__float_nan)
//	80D62468: 80450AE0 (__float_nan)
//	80D6247C: 80266F48 (normalizeZP__4cXyzFv)
//	80D6249C: 80347138 (PSVECSquareMag)
//	80D6250C: 80450AE0 (__float_nan)
//	80D62510: 80450AE0 (__float_nan)
//	80D6257C: 80450AE0 (__float_nan)
//	80D62580: 80450AE0 (__float_nan)
//	80D625A8: 80266B84 (__ml__4cXyzCFf)
//	80D625B8: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	80D625E4: 80268710 (cM3d_Len3dSqPntAndSegLine__FPC8cM3dGLinPC3VecP3VecPf)
//	80D6260C: 8026F31C (SetStartEnd__8cM3dGLinFRC3VecRC3Vec)
//	80D62620: 80268710 (cM3d_Len3dSqPntAndSegLine__FPC8cM3dGLinPC3VecP3VecPf)
//	80D626BC: 80347138 (PSVECSquareMag)
//	80D6272C: 80450AE0 (__float_nan)
//	80D62730: 80450AE0 (__float_nan)
//	80D6279C: 80450AE0 (__float_nan)
//	80D627A0: 80450AE0 (__float_nan)
//	80D627B4: 80266F48 (normalizeZP__4cXyzFv)
//	80D627D4: 80347138 (PSVECSquareMag)
//	80D62844: 80450AE0 (__float_nan)
//	80D62848: 80450AE0 (__float_nan)
//	80D628B4: 80450AE0 (__float_nan)
//	80D628B8: 80450AE0 (__float_nan)
//	80D628E0: 80266B84 (__ml__4cXyzCFf)
//	80D628F0: 80347090 (PSVECAdd)
//	80D628FC: 8034739C (PSVECSquareDistance)
//	80D62940: 80D62CE8 (__vt__8cM3dGLin)
//	80D62944: 80D62CE8 (__vt__8cM3dGLin)
//	80D62964: 80362214 (_restgpr_24)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cXyz* False
// 	 cXyz False
//  dPath* False
// 	 dPath False
asm void daTagSppath_c::getNearPathPos(cXyz* param_0, dPath* param_1) {
	nofralloc
#include "asm/rel/d/a/tag/d_a_tag_sppath/d_a_tag_sppath/getNearPathPos__13daTagSppath_cFP4cXyzP5dPath.s"
}
#pragma pop


/* 80D62978-80D629C0 0048+00 s=1 e=0 z=0  None .text      __dt__8cM3dGLinFv                                            */
//	80D62990: 80D62CE8 (__vt__8cM3dGLin)
//	80D62994: 80D62CE8 (__vt__8cM3dGLin)
//	80D629A4: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cM3dGLin::~cM3dGLin() {
	nofralloc
#include "asm/rel/d/a/tag/d_a_tag_sppath/d_a_tag_sppath/__dt__8cM3dGLinFv.s"
}
#pragma pop


/* 80D629C0-80D62BA0 01E0+00 s=1 e=0 z=0  None .text      execute__13daTagSppath_cFv                                   */
//	80D629D8: 803621D8 (_savegpr_28)
//	80D629E0: 804061C0 (g_dComIfG_gameInfo)
//	80D629E4: 804061C0 (g_dComIfG_gameInfo)
//	80D62A14: 804061C0 (g_dComIfG_gameInfo)
//	80D62A18: 804061C0 (g_dComIfG_gameInfo)
//	80D62A24: 80035360 (isSwitch__10dSv_info_cCFii)
//	80D62A3C: 804061C0 (g_dComIfG_gameInfo)
//	80D62A40: 804061C0 (g_dComIfG_gameInfo)
//	80D62A4C: 80035360 (isSwitch__10dSv_info_cCFii)
//	80D62A64: 80450AE8 (__float_max)
//	80D62A68: 80450AE8 (__float_max)
//	80D62A7C: 80D62024 (getNearPathPos__13daTagSppath_cFP4cXyzP5dPath)
//	80D62A8C: 8034739C (PSVECSquareDistance)
//	80D62AC8: 80051898 (dPath_GetNextRoomPath__FPC5dPathi)
//	80D62AF4: 804061C0 (g_dComIfG_gameInfo)
//	80D62AF8: 804061C0 (g_dComIfG_gameInfo)
//	80D62B04: 80035360 (isSwitch__10dSv_info_cCFii)
//	80D62B38: 80D62C48 (lit_4167)
//	80D62B3C: 80D62C48 (lit_4167)
//	80D62B64: 8026F1DC (SetC__8cM3dGCylFRC4cXyz)
//	80D62B68: 804061C0 (g_dComIfG_gameInfo)
//	80D62B6C: 804061C0 (g_dComIfG_gameInfo)
//	80D62B78: 80264BA8 (Set__4cCcSFP8cCcD_Obj)
//	80D62B8C: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daTagSppath_c::execute() {
	nofralloc
#include "asm/rel/d/a/tag/d_a_tag_sppath/d_a_tag_sppath/execute__13daTagSppath_cFv.s"
}
#pragma pop


/* 80D62BA0-80D62BC0 0020+00 s=1 e=0 z=0  None .text      daTagSppath_Execute__FP13daTagSppath_c                       */
//	80D62BAC: 80D629C0 (execute__13daTagSppath_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daTagSppath_c* False
// 	 daTagSppath_c False
asm static void daTagSppath_Execute(daTagSppath_c* param_0) {
	nofralloc
#include "asm/rel/d/a/tag/d_a_tag_sppath/d_a_tag_sppath/daTagSppath_Execute__FP13daTagSppath_c.s"
}
#pragma pop


/* 80D62BC0-80D62BC8 0008+00 s=1 e=0 z=0  None .text      daTagSppath_Draw__FP13daTagSppath_c                          */
// True False
//  bool False
//  daTagSppath_c* False
// 	 daTagSppath_c False
static bool daTagSppath_Draw(daTagSppath_c* param_0) {
	return true;
}


/* 80D62BC8-80D62C10 0048+00 s=1 e=0 z=0  None .text      __dt__10cCcD_GSttsFv                                         */
//	80D62BE0: 80D62CF4 (__vt__10cCcD_GStts)
//	80D62BE4: 80D62CF4 (__vt__10cCcD_GStts)
//	80D62BF4: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cCcD_GStts::~cCcD_GStts() {
	nofralloc
#include "asm/rel/d/a/tag/d_a_tag_sppath/d_a_tag_sppath/__dt__10cCcD_GSttsFv.s"
}
#pragma pop


