// 
// Generated By: dol2asm
// Translation Unit: d_a_spinner
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "rel/d/a/d_a_spinner/d_a_spinner.h"

// 
// Types:
// 

struct Vec {
};

struct cXyz {
	/* 80266B34 */ // False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
void operator-(Vec const&) const;
	/* 80266F48 */ // False False
void normalizeZP();
	/* 80267128 */ // False False
void atan2sX_Z() const;
	/* 80267150 */ // False False
void atan2sY_XZ() const;
	/* 804D1E4C */ // True False
~cXyz();
};

struct csXyz {
};

struct mDoMtx_stack_c {
	/* 8000CD64 */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
void transS(cXyz const&);
	/* 8000CF44 */ // False False
//  csXyz const& False
// 	 csXyz const False
// 		 csXyz False
void ZXYrotM(csXyz const&);
};

struct J3DAnmTransform {
};

struct J3DModelData {
};

struct mDoExt_bckAnm {
	/* 8000D7DC */ // False False
//  J3DAnmTransform* False
// 	 J3DAnmTransform False
//  int False
//  int False
//  f32 False
//  s16 False
//  s16 False
//  bool False
void init(J3DAnmTransform*, int, int, f32, s16, s16, bool);
	/* 8000D9CC */ // False False
//  J3DModelData* False
// 	 J3DModelData False
//  f32 False
void entry(J3DModelData*, f32);
};

struct mDoExt_baseAnm {
	/* 8000D428 */ // False False
void play();
};

struct fopAc_ac_c {
	/* 80018B64 */ // False False
fopAc_ac_c();
	/* 80018C8C */ // False False
~fopAc_ac_c();
};

struct daSpinner_c {
	/* 804D198C */ // True False
void createHeap();
	/* 804D1A70 */ // True False
void create();
	/* 804D1FD0 */ // True False
~daSpinner_c();
	/* 804D21E0 */ // True False
void setRoomInfo();
	/* 804D2278 */ // True False
void setMatrix();
	/* 804D2320 */ // True False
void setEffect();
	/* 804D25F4 */ // True False
void posMove();
	/* 804D3090 */ // True False
void setReflectAngle();
	/* 804D3174 */ // True False
//  s16 False
//  u32 False
void setWallHit(s16, u32);
	/* 804D34B0 */ // True False
void setAnm();
	/* 804D3618 */ // True False
void setNextPathNum();
	/* 804D3694 */ // True False
void getPathNextPos();
	/* 804D36F4 */ // True False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
void checkLineWallHit(cXyz*, cXyz*);
	/* 804D3774 */ // True False
void checkPathMove();
	/* 804D3D60 */ // True False
void setSpreadEffect();
	/* 804D3F14 */ // True False
void clearSpreadEffect();
	/* 804D3F8C */ // True False
void execute();
	/* 804D4BB4 */ // True False
void draw();
};

struct J3DModel {
};

struct daMirror_c {
	/* 8003194C */ // False False
//  J3DModel* False
// 	 J3DModel False
void entry(J3DModel*);
};

struct daAlink_c {
	/* 8009D884 */ // False False
void getAlinkArcName();
	/* 8009DA60 */ // False False
//  char const* False
// 	 char const False
// 		 char False
void checkStageName(char const*);
	/* 8010D93C */ // False False
void getSpinnerGravity() const;
	/* 8010D94C */ // False False
void getSpinnerMaxFallSpeed() const;
	/* 8010D95C */ // False False
void getSpinnerJumpRate() const;
	/* 8010D96C */ // False False
void getSpinnerRideMoveTime();
	/* 8010D9B0 */ // False False
void getSpinnerRideSpeedF();
	/* 8010D9F4 */ // False False
void getSpinnerRideDecSpeedMax() const;
	/* 8010DA04 */ // False False
void getSpinnerRideDecSpeedMin() const;
	/* 8010DA14 */ // False False
void getSpinnerRideDecSpeedRate() const;
	/* 8010DA24 */ // False False
void getSpinnerRideRotAngleMax() const;
	/* 8010DA34 */ // False False
void getSpinnerRideRotAngleMin() const;
};

struct dVibration_c {
	/* 8006FA24 */ // False False
//  int False
//  int False
//  cXyz False
void StartShock(int, int, cXyz);
};

struct dKy_tevstr_c {
};

struct dScnKy_env_light_c {
	/* 801A37C4 */ // False False
//  int False
//  cXyz* False
// 	 cXyz False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
void settingTevStruct(int, cXyz*, dKy_tevstr_c*);
	/* 801A4DA0 */ // False False
//  J3DModelData* False
// 	 J3DModelData False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
void setLightTevColorType_MAJI(J3DModelData*, dKy_tevstr_c*);
};

struct dRes_info_c {
};

struct dRes_control_c {
	/* 8003C2EC */ // False False
//  char const* False
// 	 char const False
// 		 char False
//  s32 False
//  dRes_info_c* False
// 	 dRes_info_c False
//  int False
void getRes(char const*, s32, dRes_info_c*, int);
};

struct dPa_levelEcallBack {
};

struct _GXColor {
};

struct cBgS_PolyInfo {
	/* 802680B0 */ // False False
~cBgS_PolyInfo();
};

struct dPa_control_c {
	struct level_c {
		/* 8004B918 */ // False False
//  u32 False
void getEmitter(u32);
	};

	/* 8004C218 */ // False False
//  u16 False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u32 False
void setHitMark(u16, fopAc_ac_c*, cXyz const*, csXyz const*, cXyz const*, u32);
	/* 8004D068 */ // False False
//  u16 False
//  cBgS_PolyInfo& False
// 	 cBgS_PolyInfo False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  int False
//  dPa_levelEcallBack* False
// 	 dPa_levelEcallBack False
//  s8 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
void setPoly(u16, cBgS_PolyInfo&, cXyz const*, dKy_tevstr_c const*, csXyz const*, cXyz const*, int, dPa_levelEcallBack*, s8, cXyz const*);
	/* 8004D4CC */ // False False
//  u32 False
//  u8 False
//  u16 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u8 False
//  dPa_levelEcallBack* False
// 	 dPa_levelEcallBack False
//  s8 False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
void set(u32, u8, u16, cXyz const*, dKy_tevstr_c const*, csXyz const*, cXyz const*, u8, dPa_levelEcallBack*, s8, _GXColor const*, _GXColor const*, cXyz const*, f32);
};

struct dBgS {
	/* 80074BE8 */ // False False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
void GetPolyColor(cBgS_PolyInfo const&);
	/* 80074CBC */ // False False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
void GetSpecialCode(cBgS_PolyInfo const&);
	/* 80074E50 */ // False False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
void GetPolyAtt0(cBgS_PolyInfo const&);
	/* 80074EF0 */ // False False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
void GetGroundCode(cBgS_PolyInfo const&);
	/* 80075100 */ // False False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
void GetRoomId(cBgS_PolyInfo const&);
};

struct dBgS_AcchCir {
	/* 80075EAC */ // False False
dBgS_AcchCir();
	/* 80075F40 */ // False False
//  f32 False
void SetWallR(f32);
	/* 80075F58 */ // False False
//  f32 False
//  f32 False
void SetWall(f32, f32);
	/* 804D1EF8 */ // True False
~dBgS_AcchCir();
};

struct dBgS_Acch {
	/* 80075F94 */ // False False
~dBgS_Acch();
	/* 800760A0 */ // False False
dBgS_Acch();
	/* 80076288 */ // False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  int False
//  dBgS_AcchCir* False
// 	 dBgS_AcchCir False
void Set(fopAc_ac_c*, int, dBgS_AcchCir*);
	/* 80076AAC */ // False False
//  dBgS& False
// 	 dBgS False
void CrrPos(dBgS&);
};

struct dPaPo_c {
	/* 80050C9C */ // False False
//  dBgS_Acch* False
// 	 dBgS_Acch False
//  f32 False
//  f32 False
void init(dBgS_Acch*, f32, f32);
	/* 80051008 */ // False False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u32 False
//  u32 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  s8 False
//  f32 False
//  f32 False
void setEffectCenter(dKy_tevstr_c const*, cXyz const*, u32, u32, cXyz const*, csXyz const*, cXyz const*, s8, f32, f32);
};

struct cCcD_Obj {
};

struct dCcMassS_Mng {
	/* 80085D98 */ // False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  u8 False
void Set(cCcD_Obj*, u8);
};

struct dCcD_Stts {
	/* 80083860 */ // False False
//  int False
//  int False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
void Init(int, int, fopAc_ac_c*);
};

struct dCcD_SrcCyl {
};

struct dCcD_GStts {
	/* 80083760 */ // False False
dCcD_GStts();
	/* 804D1DF0 */ // True False
~dCcD_GStts();
};

struct dCcD_GObjInf {
	/* 80083A28 */ // False False
dCcD_GObjInf();
	/* 800840E4 */ // False False
~dCcD_GObjInf();
	/* 800842C0 */ // False False
void ChkAtHit();
	/* 800843A8 */ // False False
void GetAtHitGObj();
};

struct dCcD_GAtTgCoCommonBase {
	/* 80083688 */ // False False
void GetAc();
};

struct dCcD_Cyl {
	/* 800848B4 */ // False False
//  dCcD_SrcCyl const& False
// 	 dCcD_SrcCyl const False
// 		 dCcD_SrcCyl False
void Set(dCcD_SrcCyl const&);
	/* 80084908 */ // False False
//  cXyz& False
// 	 cXyz False
void StartCAt(cXyz&);
	/* 80084954 */ // False False
//  cXyz& False
// 	 cXyz False
void MoveCAt(cXyz&);
};

struct dBgS_PolyPassChk {
	/* 80078E98 */ // False False
void SetLink();
};

struct dBgS_LinkLinChk {
	/* 80078030 */ // False False
dBgS_LinkLinChk();
	/* 8007808C */ // False False
~dBgS_LinkLinChk();
};

struct dBgS_LinkAcch {
	/* 804D1E88 */ // True False
~dBgS_LinkAcch();
};

struct dBgS_LinChk {
	/* 80077D64 */ // False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  fopAc_ac_c const* False
// 	 fopAc_ac_c const False
// 		 fopAc_ac_c False
void Set(cXyz const*, cXyz const*, fopAc_ac_c const*);
};

struct camera_class {
};

struct cM3dGPla {
	/* 804D3468 */ // True False
~cM3dGPla();
};

struct cM3dGLin {
	/* 8026F31C */ // False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
void SetStartEnd(Vec const&, Vec const&);
	/* 804D3048 */ // True False
~cM3dGLin();
};

struct cM3dGCyl {
	/* 8026F200 */ // False False
//  f32 False
void SetR(f32);
	/* 804D1D60 */ // True False
~cM3dGCyl();
};

struct cM3dGCir {
	/* 8026EF18 */ // False False
~cM3dGCir();
};

struct cM3dGAab {
	/* 804D1DA8 */ // True False
~cM3dGAab();
};

struct cCcS {
	/* 80264BA8 */ // False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
void Set(cCcD_Obj*);
};

struct cCcD_GStts {
	/* 804D4D28 */ // True False
~cCcD_GStts();
};

struct cBgS_LinChk {
};

struct cBgS {
	/* 800743B4 */ // False False
//  cBgS_LinChk* False
// 	 cBgS_LinChk False
void LineCross(cBgS_LinChk*);
	/* 80074744 */ // False False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
//  cM3dGPla* False
// 	 cM3dGPla False
void GetTriPla(cBgS_PolyInfo const&, cM3dGPla*) const;
};

struct _GXTexObj {
};

struct Z2SoundObjSimple {
	/* 802BE844 */ // False False
Z2SoundObjSimple();
};

struct Z2SoundObjBase {
	/* 802BDF48 */ // False False
~Z2SoundObjBase();
	/* 802BDFF8 */ // False False
void deleteObject();
};

struct Z2CreatureLink {
	/* 802C4814 */ // False False
//  u32 False
//  u32 False
//  Z2SoundObjBase* False
// 	 Z2SoundObjBase False
//  f32 False
void startHitItemSE(u32, u32, Z2SoundObjBase*, f32);
};

struct JGeometry {
	template <typename A1>
	struct TVec3 { };
	/* TVec3<f32> */
	struct TVec3__template0 {
	};

};

struct J3DFrameCtrl {
	/* 803283FC */ // False False
//  s16 False
void init(s16);
	/* 804D1F68 */ // True False
~J3DFrameCtrl();
};

// 
// Forward References:
// 

// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
static void daSpinner_createHeap(fopAc_ac_c*);
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
static void daSpinner_Create(fopAc_ac_c*);
// True False
//  daSpinner_c* False
// 	 daSpinner_c False
static void daSpinner_Delete(daSpinner_c*);
// True False
//  daSpinner_c* False
// 	 daSpinner_c False
static void daSpinner_Execute(daSpinner_c*);
// True False
//  daSpinner_c* False
// 	 daSpinner_c False
static void daSpinner_Draw(daSpinner_c*);

// True False
extern "C" void createHeap__11daSpinner_cFv();
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
extern "C" static void daSpinner_createHeap__FP10fopAc_ac_c();
// True False
extern "C" void create__11daSpinner_cFv();
// True False
extern "C" void __dt__8cM3dGCylFv();
// True False
extern "C" void __dt__8cM3dGAabFv();
// True False
extern "C" void __dt__10dCcD_GSttsFv();
// True False
extern "C" void __dt__4cXyzFv();
// True False
extern "C" void __dt__13dBgS_LinkAcchFv();
// True False
extern "C" void __dt__12dBgS_AcchCirFv();
// True False
extern "C" void __dt__12J3DFrameCtrlFv();
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
extern "C" static void daSpinner_Create__FP10fopAc_ac_c();
// True False
extern "C" void __dt__11daSpinner_cFv();
// True False
//  daSpinner_c* False
// 	 daSpinner_c False
extern "C" static void daSpinner_Delete__FP11daSpinner_c();
// True False
extern "C" void setRoomInfo__11daSpinner_cFv();
// True False
extern "C" void setMatrix__11daSpinner_cFv();
// True False
extern "C" void setEffect__11daSpinner_cFv();
// True False
extern "C" void posMove__11daSpinner_cFv();
// True False
extern "C" void __dt__8cM3dGLinFv();
// True False
extern "C" void setReflectAngle__11daSpinner_cFv();
// True False
//  s16 False
//  u32 False
extern "C" void setWallHit__11daSpinner_cFsUl();
// True False
extern "C" void __dt__8cM3dGPlaFv();
// True False
extern "C" void setAnm__11daSpinner_cFv();
// True False
extern "C" void setNextPathNum__11daSpinner_cFv();
// True False
extern "C" void getPathNextPos__11daSpinner_cFv();
// True False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
extern "C" void checkLineWallHit__11daSpinner_cFP4cXyzP4cXyz();
// True False
extern "C" void checkPathMove__11daSpinner_cFv();
// True False
extern "C" void setSpreadEffect__11daSpinner_cFv();
// True False
extern "C" void clearSpreadEffect__11daSpinner_cFv();
// True False
extern "C" void execute__11daSpinner_cFv();
// True False
//  daSpinner_c* False
// 	 daSpinner_c False
extern "C" static void daSpinner_Execute__FP11daSpinner_c();
// True False
extern "C" void draw__11daSpinner_cFv();
// True False
//  daSpinner_c* False
// 	 daSpinner_c False
extern "C" static void daSpinner_Draw__FP11daSpinner_c();
// True False
extern "C" void __dt__10cCcD_GSttsFv();
// True False
extern "C" static void func_804D4D70();
// True False
extern "C" static void func_804D4D78();
extern "C" extern u32 const lit_4241;
extern "C" extern u32 const lit_4242;
extern "C" extern u32 const lit_4243;
extern "C" extern u32 const lit_4244;
extern "C" extern u32 const lit_4245;
extern "C" extern u32 const lit_4246;
extern "C" extern u8 const lit_4247[4 + 4 /* padding */];
extern "C" extern u8 const lit_4249[8];
extern "C" extern u32 const lit_4591;
extern "C" extern u32 const lit_4592;
extern "C" extern u32 const lit_4593;
extern "C" extern u32 const lit_4930;
extern "C" extern u32 const lit_4931[1 + 1 /* padding */];
extern "C" extern u8 const lit_4932[8];
extern "C" extern u8 const lit_4933[8];
extern "C" extern u8 const lit_4934[8];
extern "C" extern u32 const lit_4935;
extern "C" extern u32 const lit_4936;
extern "C" extern u32 const lit_4937;
extern "C" extern u32 const lit_4938;
extern "C" extern u32 const lit_5053;
extern "C" extern u32 const lit_5091;
extern "C" extern u8 const data_804D4E18[12];
extern "C" extern u8 const data_804D4E24[12];
extern "C" extern u8 const data_804D4E30[12];
extern "C" extern u8 const data_804D4E3C[12];
extern "C" extern u8 const data_804D4E48[12];
extern "C" extern u8 const data_804D4E54[12];
extern "C" extern u8 const lit_5295[8];
extern "C" extern u8 const data_804D4E68[4];
extern "C" extern u32 const lit_5361;
extern "C" extern u32 const lit_5671;
extern "C" extern u32 const lit_5672;
extern "C" extern u32 const lit_5673;
extern "C" extern u32 const lit_5674;
extern "C" extern u32 const lit_5675;
extern "C" extern u32 const lit_5676;
extern "C" extern u32 const lit_5677;
extern "C" extern u32 const lit_5678;
extern "C" extern u32 const lit_5679;
extern "C" extern u32 const lit_5680;
extern "C" extern u32 const lit_5723;
extern "C" extern u32 const lit_5724;
extern "C" extern char const* const stringBase0;
extern "C" extern void* g_profile_SPINNER[12];
extern "C" extern void* __vt__8cM3dGPla[3];
extern "C" extern void* __vt__8cM3dGLin[3];
extern "C" extern void* __vt__12dBgS_AcchCir[3];
extern "C" extern void* __vt__10cCcD_GStts[3];
extern "C" extern void* __vt__10dCcD_GStts[3];
extern "C" extern void* __vt__8cM3dGCyl[3];
extern "C" extern void* __vt__8cM3dGAab[3];
extern "C" extern void* __vt__13dBgS_LinkAcch[9];
extern "C" extern void* __vt__12J3DFrameCtrl[3];
extern "C" extern u8 lit_1107[1 + 3 /* padding */];
extern "C" extern u8 lit_1105[1 + 3 /* padding */];
extern "C" extern u8 lit_1104[1 + 3 /* padding */];
extern "C" extern u8 lit_1099[1 + 3 /* padding */];
extern "C" extern u8 lit_1097[1 + 3 /* padding */];
extern "C" extern u8 lit_1095[1 + 3 /* padding */];
extern "C" extern u8 lit_1094[1 + 3 /* padding */];
extern "C" extern u8 lit_1057[1 + 3 /* padding */];
extern "C" extern u8 lit_1055[1 + 3 /* padding */];
extern "C" extern u8 lit_1053[1 + 3 /* padding */];
extern "C" extern u8 lit_1052[1 + 3 /* padding */];
extern "C" extern u8 lit_1014[1 + 3 /* padding */];
extern "C" extern u8 lit_1012[1 + 3 /* padding */];
extern "C" extern u8 lit_1010[1 + 3 /* padding */];
extern "C" extern u8 lit_1009[1 + 3 /* padding */];
extern "C" extern u8 data_804D5008[12];
extern "C" extern u8 lit_4437[12 + 4 /* padding */];
extern "C" extern u8 data_804D5024[12];
extern "C" extern u8 data_804D5030[4];
extern "C" extern u8 data_804D5034[4];
extern "C" extern u8 data_804D5038[4];
extern "C" extern u8 data_804D503C[4];
extern "C" extern u8 data_804D5040[4];
extern "C" extern u8 data_804D5044[4];
extern "C" extern u8 data_804D5048[4];
extern "C" extern u8 data_804D504C[4];
extern "C" extern u8 data_804D5050[4];
extern "C" extern u8 data_804D5054[4];
extern "C" extern u8 data_804D5058[4];
extern "C" extern u8 data_804D505C[4];
extern "C" extern u8 data_804D5060[4];
extern "C" extern u8 data_804D5064[4];
extern "C" extern u8 data_804D5068[4];
extern "C" extern u8 data_804D506C[4];
extern "C" extern u8 data_804D5070[4];
extern "C" extern u8 data_804D5074[4];
extern "C" extern u8 data_804D5078[4];
extern "C" extern u8 data_804D507C[4];
extern "C" extern u8 data_804D5080[4];
extern "C" extern u8 data_804D5084[4];
extern "C" extern u8 data_804D5088[4];
extern "C" extern u8 data_804D508C[4];
extern "C" extern u8 data_804D5090[4];
extern "C" extern u8 data_804D5094[4];

// 
// External References:
// 

// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
void mDoMtx_XrotM(f32 (* )[4], s16);
// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
void mDoMtx_YrotM(f32 (* )[4], s16);
// False False
//  J3DModel* False
// 	 J3DModel False
void mDoExt_modelEntryDL(J3DModel*);
// False False
//  J3DModelData* False
// 	 J3DModelData False
//  u32 False
//  u32 False
void mDoExt_J3DModel__create(J3DModelData*, u32, u32);
// False False
//  void* False
// 	 void False
void fopAcM_setStageLayer(void*);
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
void fopAcM_delete(fopAc_ac_c*);
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  int (*)(fopAc_ac_c*) False
// 	 * False
// 		  False
// 	 int False
// 	 fopAc_ac_c* False
// 		 fopAc_ac_c False
//  u32 False
void fopAcM_entrySolidHeap(fopAc_ac_c*, int (*)(fopAc_ac_c*), u32);
// False False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
//  s16 False
void fopAcM_getPolygonAngle(cBgS_PolyInfo const&, s16);
// False False
//  int False
void dComIfGp_getReverb(int);
// False False
//  int False
//  int False
void dComIfGs_isZoneSwitch(int, int);
// False False
//  u32 False
//  s8 False
//  J3DModel* False
// 	 J3DModel False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  cBgS_PolyInfo& False
// 	 cBgS_PolyInfo False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
//  s16 False
//  f32 False
//  _GXTexObj* False
// 	 _GXTexObj False
void dComIfGd_setShadow(u32, s8, J3DModel*, cXyz*, f32, f32, f32, f32, cBgS_PolyInfo&, dKy_tevstr_c*, s16, f32, _GXTexObj*);
// False False
//  u32 False
void dComIfG_getTrigA(u32);
// False False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
void dBgS_CheckBWallPoly(cBgS_PolyInfo const&);
// False False
//  camera_class* False
// 	 camera_class False
void dCam_getControledAngleY(camera_class*);
// False False
//  cBgS_PolyInfo const* False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
void dKy_pol_sound_get(cBgS_PolyInfo const*);
// False False
//  f32 False
//  f32 False
void cM_atan2s(f32, f32);
// False False
//  f32 False
void cM_rndF(f32);
// False False
//  cM3dGLin const* False
// 	 cM3dGLin const False
// 		 cM3dGLin False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  Vec* False
// 	 Vec False
//  f32* False
// 	 f32 False
void cM3d_Len3dSqPntAndSegLine(cM3dGLin const*, Vec const*, Vec*, f32*);
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
void cLib_addCalc(f32*, f32, f32, f32, f32);
// False False
//  s16* False
// 	 s16 False
//  s16 False
//  s16 False
//  s16 False
//  s16 False
void cLib_addCalcAngleS(s16*, s16, s16, s16, s16);
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
void cLib_chaseF(f32*, f32, f32);
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
void cLib_chasePosXZ(cXyz*, cXyz const&, f32);
// False False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
void cLib_targetAngleY(Vec const*, Vec const*);
// False False
//  s16 False
//  s16 False
void cLib_distanceAngleS(s16, s16);
// False True
//  f32 const (* )[4] False
// 	 f32 const False
// 		 f32 False
// 	 * False
// 		  False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  JGeometry::TVec3<f32>* False
// 	 JGeometry::TVec3<f32> True
// 		 f32 False
void JPASetRMtxTVecfromMtx(f32 const (* )[4], f32 (* )[4], JGeometry::TVec3__template0*);
// False False
//  void False
//  void* False
// 	 void False
void operator delete(void*);

// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
extern "C" void mDoMtx_XrotM__FPA4_fs();
// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
extern "C" void mDoMtx_YrotM__FPA4_fs();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
extern "C" void transS__14mDoMtx_stack_cFRC4cXyz();
// False False
//  csXyz const& False
// 	 csXyz const False
// 		 csXyz False
extern "C" void ZXYrotM__14mDoMtx_stack_cFRC5csXyz();
// False False
extern "C" void play__14mDoExt_baseAnmFv();
// False False
//  J3DAnmTransform* False
// 	 J3DAnmTransform False
//  int False
//  int False
//  f32 False
//  s16 False
//  s16 False
//  bool False
extern "C" void init__13mDoExt_bckAnmFP15J3DAnmTransformiifssb();
// False False
//  J3DModelData* False
// 	 J3DModelData False
//  f32 False
extern "C" void entry__13mDoExt_bckAnmFP12J3DModelDataf();
// False False
//  J3DModel* False
// 	 J3DModel False
extern "C" void mDoExt_modelEntryDL__FP8J3DModel();
// False False
//  J3DModelData* False
// 	 J3DModelData False
//  u32 False
//  u32 False
extern "C" void mDoExt_J3DModel__create__FP12J3DModelDataUlUl();
// False False
extern "C" void __ct__10fopAc_ac_cFv();
// False False
extern "C" void __dt__10fopAc_ac_cFv();
// False False
//  void* False
// 	 void False
extern "C" void fopAcM_setStageLayer__FPv();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
extern "C" void fopAcM_delete__FP10fopAc_ac_c();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  int (*)(fopAc_ac_c*) False
// 	 * False
// 		  False
// 	 int False
// 	 fopAc_ac_c* False
// 		 fopAc_ac_c False
//  u32 False
extern "C" void fopAcM_entrySolidHeap__FP10fopAc_ac_cPFP10fopAc_ac_c_iUl();
// False False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
//  s16 False
extern "C" void fopAcM_getPolygonAngle__FRC13cBgS_PolyInfos();
// False False
//  int False
extern "C" void dComIfGp_getReverb__Fi();
// False False
//  int False
//  int False
extern "C" void dComIfGs_isZoneSwitch__Fii();
// False False
//  u32 False
//  s8 False
//  J3DModel* False
// 	 J3DModel False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  cBgS_PolyInfo& False
// 	 cBgS_PolyInfo False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
//  s16 False
//  f32 False
//  _GXTexObj* False
// 	 _GXTexObj False
extern "C" void dComIfGd_setShadow__FUlScP8J3DModelP4cXyzffffR13cBgS_PolyInfoP12dKy_tevstr_csfP9_GXTexObj();
// False False
//  u32 False
extern "C" void dComIfG_getTrigA__FUl();
// False False
//  J3DModel* False
// 	 J3DModel False
extern "C" void entry__10daMirror_cFP8J3DModel();
// False False
//  char const* False
// 	 char const False
// 		 char False
//  s32 False
//  dRes_info_c* False
// 	 dRes_info_c False
//  int False
extern "C" void getRes__14dRes_control_cFPCclP11dRes_info_ci();
// False False
//  u32 False
extern "C" void getEmitter__Q213dPa_control_c7level_cFUl();
// False False
//  u16 False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u32 False
extern "C" void setHitMark__13dPa_control_cFUsP10fopAc_ac_cPC4cXyzPC5csXyzPC4cXyzUl();
// False False
//  u16 False
//  cBgS_PolyInfo& False
// 	 cBgS_PolyInfo False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  int False
//  dPa_levelEcallBack* False
// 	 dPa_levelEcallBack False
//  s8 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
extern "C" void setPoly__13dPa_control_cFUsR13cBgS_PolyInfoPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyziP18dPa_levelEcallBackScPC4cXyz();
// False False
//  u32 False
//  u8 False
//  u16 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u8 False
//  dPa_levelEcallBack* False
// 	 dPa_levelEcallBack False
//  s8 False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
extern "C" void set__13dPa_control_cFUlUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf();
// False False
//  dBgS_Acch* False
// 	 dBgS_Acch False
//  f32 False
//  f32 False
extern "C" void init__7dPaPo_cFP9dBgS_Acchff();
// False False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u32 False
//  u32 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  s8 False
//  f32 False
//  f32 False
extern "C" void setEffectCenter__7dPaPo_cFPC12dKy_tevstr_cPC4cXyzUlUlPC4cXyzPC5csXyzPC4cXyzScff();
// False False
//  int False
//  int False
//  cXyz False
extern "C" void StartShock__12dVibration_cFii4cXyz();
// False False
//  cBgS_LinChk* False
// 	 cBgS_LinChk False
extern "C" void LineCross__4cBgSFP11cBgS_LinChk();
// False False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
//  cM3dGPla* False
// 	 cM3dGPla False
extern "C" void GetTriPla__4cBgSCFRC13cBgS_PolyInfoP8cM3dGPla();
// False False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
extern "C" void GetPolyColor__4dBgSFRC13cBgS_PolyInfo();
// False False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
extern "C" void GetSpecialCode__4dBgSFRC13cBgS_PolyInfo();
// False False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
extern "C" void GetPolyAtt0__4dBgSFRC13cBgS_PolyInfo();
// False False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
extern "C" void GetGroundCode__4dBgSFRC13cBgS_PolyInfo();
// False False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
extern "C" void GetRoomId__4dBgSFRC13cBgS_PolyInfo();
// False False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
extern "C" void dBgS_CheckBWallPoly__FRC13cBgS_PolyInfo();
// False False
extern "C" void __ct__12dBgS_AcchCirFv();
// False False
//  f32 False
extern "C" void SetWallR__12dBgS_AcchCirFf();
// False False
//  f32 False
//  f32 False
extern "C" void SetWall__12dBgS_AcchCirFff();
// False False
extern "C" void __dt__9dBgS_AcchFv();
// False False
extern "C" void __ct__9dBgS_AcchFv();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  int False
//  dBgS_AcchCir* False
// 	 dBgS_AcchCir False
extern "C" void Set__9dBgS_AcchFP10fopAc_ac_ciP12dBgS_AcchCir();
// False False
//  dBgS& False
// 	 dBgS False
extern "C" void CrrPos__9dBgS_AcchFR4dBgS();
// False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  fopAc_ac_c const* False
// 	 fopAc_ac_c const False
// 		 fopAc_ac_c False
extern "C" void Set__11dBgS_LinChkFPC4cXyzPC4cXyzPC10fopAc_ac_c();
// False False
extern "C" void __ct__15dBgS_LinkLinChkFv();
// False False
extern "C" void __dt__15dBgS_LinkLinChkFv();
// False False
extern "C" void SetLink__16dBgS_PolyPassChkFv();
// False False
extern "C" void GetAc__22dCcD_GAtTgCoCommonBaseFv();
// False False
extern "C" void __ct__10dCcD_GSttsFv();
// False False
//  int False
//  int False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
extern "C" void Init__9dCcD_SttsFiiP10fopAc_ac_c();
// False False
extern "C" void __ct__12dCcD_GObjInfFv();
// False False
extern "C" void __dt__12dCcD_GObjInfFv();
// False False
extern "C" void ChkAtHit__12dCcD_GObjInfFv();
// False False
extern "C" void GetAtHitGObj__12dCcD_GObjInfFv();
// False False
//  dCcD_SrcCyl const& False
// 	 dCcD_SrcCyl const False
// 		 dCcD_SrcCyl False
extern "C" void Set__8dCcD_CylFRC11dCcD_SrcCyl();
// False False
//  cXyz& False
// 	 cXyz False
extern "C" void StartCAt__8dCcD_CylFR4cXyz();
// False False
//  cXyz& False
// 	 cXyz False
extern "C" void MoveCAt__8dCcD_CylFR4cXyz();
// False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  u8 False
extern "C" void Set__12dCcMassS_MngFP8cCcD_ObjUc();
// False False
extern "C" void getAlinkArcName__9daAlink_cFv();
// False False
//  char const* False
// 	 char const False
// 		 char False
extern "C" void checkStageName__9daAlink_cFPCc();
// False False
extern "C" void getSpinnerGravity__9daAlink_cCFv();
// False False
extern "C" void getSpinnerMaxFallSpeed__9daAlink_cCFv();
// False False
extern "C" void getSpinnerJumpRate__9daAlink_cCFv();
// False False
extern "C" void getSpinnerRideMoveTime__9daAlink_cFv();
// False False
extern "C" void getSpinnerRideSpeedF__9daAlink_cFv();
// False False
extern "C" void getSpinnerRideDecSpeedMax__9daAlink_cCFv();
// False False
extern "C" void getSpinnerRideDecSpeedMin__9daAlink_cCFv();
// False False
extern "C" void getSpinnerRideDecSpeedRate__9daAlink_cCFv();
// False False
extern "C" void getSpinnerRideRotAngleMax__9daAlink_cCFv();
// False False
extern "C" void getSpinnerRideRotAngleMin__9daAlink_cCFv();
// False False
//  camera_class* False
// 	 camera_class False
extern "C" void dCam_getControledAngleY__FP12camera_class();
// False False
//  int False
//  cXyz* False
// 	 cXyz False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
extern "C" void settingTevStruct__18dScnKy_env_light_cFiP4cXyzP12dKy_tevstr_c();
// False False
//  J3DModelData* False
// 	 J3DModelData False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
extern "C" void setLightTevColorType_MAJI__18dScnKy_env_light_cFP12J3DModelDataP12dKy_tevstr_c();
// False False
//  cBgS_PolyInfo const* False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
extern "C" void dKy_pol_sound_get__FPC13cBgS_PolyInfo();
// False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
extern "C" void Set__4cCcSFP8cCcD_Obj();
// False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
extern "C" void __mi__4cXyzCFRC3Vec();
// False False
extern "C" void normalizeZP__4cXyzFv();
// False False
extern "C" void atan2sX_Z__4cXyzCFv();
// False False
extern "C" void atan2sY_XZ__4cXyzCFv();
// False False
//  f32 False
//  f32 False
extern "C" void cM_atan2s__Fff();
// False False
//  f32 False
extern "C" void cM_rndF__Ff();
// False False
extern "C" void __dt__13cBgS_PolyInfoFv();
// False False
//  cM3dGLin const* False
// 	 cM3dGLin const False
// 		 cM3dGLin False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  Vec* False
// 	 Vec False
//  f32* False
// 	 f32 False
extern "C" void cM3d_Len3dSqPntAndSegLine__FPC8cM3dGLinPC3VecP3VecPf();
// False False
extern "C" void __dt__8cM3dGCirFv();
// False False
//  f32 False
extern "C" void SetR__8cM3dGCylFf();
// False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
extern "C" void SetStartEnd__8cM3dGLinFRC3VecRC3Vec();
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
extern "C" void cLib_addCalc__FPfffff();
// False False
//  s16* False
// 	 s16 False
//  s16 False
//  s16 False
//  s16 False
//  s16 False
extern "C" void cLib_addCalcAngleS__FPsssss();
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
extern "C" void cLib_chaseF__FPfff();
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
extern "C" void cLib_chasePosXZ__FP4cXyzRC4cXyzf();
// False False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
extern "C" void cLib_targetAngleY__FPC3VecPC3Vec();
// False False
//  s16 False
//  s16 False
extern "C" void cLib_distanceAngleS__Fss();
// False True
//  f32 const (* )[4] False
// 	 f32 const False
// 		 f32 False
// 	 * False
// 		  False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  JGeometry::TVec3<f32>* False
// 	 JGeometry::TVec3<f32> True
// 		 f32 False
extern "C" void func_802807E0();
// False False
extern "C" void __dt__14Z2SoundObjBaseFv();
// False False
extern "C" void deleteObject__14Z2SoundObjBaseFv();
// False False
extern "C" void __ct__16Z2SoundObjSimpleFv();
// False False
//  u32 False
//  u32 False
//  Z2SoundObjBase* False
// 	 Z2SoundObjBase False
//  f32 False
extern "C" void startHitItemSE__14Z2CreatureLinkFUlUlP14Z2SoundObjBasef();
// False False
//  void False
//  void* False
// 	 void False
extern "C" void __dl__FPv();
// False False
//  s16 False
extern "C" void init__12J3DFrameCtrlFs();
// False False
extern "C" void PSMTXCopy();
// False False
extern "C" void PSMTXTrans();
// False False
extern "C" void PSMTXMultVec();
// False False
extern "C" void PSVECAdd();
// False False
extern "C" void PSVECScale();
// False False
extern "C" void PSVECSquareMag();
// False False
extern "C" void PSVECSquareDistance();
// False False
extern "C" void __destroy_arr();
// False False
extern "C" void __construct_array();
// False False
extern "C" void _savegpr_21();
// False False
extern "C" void _savegpr_24();
// False False
extern "C" void _savegpr_25();
// False False
extern "C" void _savegpr_26();
// False False
extern "C" void _savegpr_28();
// False False
extern "C" void _savegpr_29();
// False False
extern "C" void _restgpr_21();
// False False
extern "C" void _restgpr_24();
// False False
extern "C" void _restgpr_25();
// False False
extern "C" void _restgpr_26();
// False False
extern "C" void _restgpr_28();
// False False
extern "C" void _restgpr_29();
// False False
extern "C" void abs();
extern "C" extern void* g_fopAc_Method[8];
extern "C" extern void* g_fpcLf_Method[5 + 1 /* padding */];
extern "C" extern void* __vt__8dCcD_Cyl[36];
extern "C" extern void* __vt__9dCcD_Stts[11];
extern "C" extern void* __vt__12cCcD_CylAttr[25];
extern "C" extern void* __vt__14cCcD_ShapeAttr[22];
extern "C" extern void* __vt__9cCcD_Stts[8];
extern "C" extern void* __vt__16Z2SoundObjSimple[8];
extern "C" extern u8 m_cpadInfo__8mDoCPd_c[256];
extern "C" extern u8 now__14mDoMtx_stack_c[48];
extern "C" extern u8 g_dComIfG_gameInfo[122384];
extern "C" extern u8 mSimpleTexObj__21dDlst_shadowControl_c[32];
extern "C" extern u8 g_env_light[4880];
extern "C" extern u8 sincosTable___5JMath[65536];
extern "C" extern u32 __float_nan;
extern "C" extern u8 struct_80450D64[4];
// False False
extern "C" void __register_global_object();

// 
// Declarations:
// 

/* ############################################################################################## */
/* 804D4D90-804D4D9C 000C+00 s=9 e=0 z=0  None .rodata    @3768                                                        */
SECTION_RODATA static u8 const lit_3768[12] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 804D4D9C-804D4DA0 0004+00 s=1 e=0 z=0  None .rodata    @4168                                                        */
SECTION_RODATA static u32 const lit_4168 = 0x3F800000;

/* 804D198C-804D1A50 00C4+00 s=1 e=0 z=0  None .text      createHeap__11daSpinner_cFv                                  */
//	804D19A4: 8009D884 (getAlinkArcName__9daAlink_cFv)
//	804D19AC: 804061C0 (g_dComIfG_gameInfo)
//	804D19B0: 804061C0 (g_dComIfG_gameInfo)
//	804D19C4: 8003C2EC (getRes__14dRes_control_cFPCclP11dRes_info_ci)
//	804D19D4: 80014C54 (mDoExt_J3DModel__create__FP12J3DModelDataUlUl)
//	804D19F0: 8009D884 (getAlinkArcName__9daAlink_cFv)
//	804D1A00: 8003C2EC (getRes__14dRes_control_cFPCclP11dRes_info_ci)
//	804D1A18: 804D4D9C (lit_4168)
//	804D1A1C: 804D4D9C (lit_4168)
//	804D1A2C: 8000D7DC (init__13mDoExt_bckAnmFP15J3DAnmTransformiifssb)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinner_c::createHeap() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/createHeap__11daSpinner_cFv.s"
}
#pragma pop


/* 804D1A50-804D1A70 0020+00 s=1 e=0 z=0  None .text      daSpinner_createHeap__FP10fopAc_ac_c                         */
//	804D1A5C: 804D198C (createHeap__11daSpinner_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
asm static void daSpinner_createHeap(fopAc_ac_c* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/daSpinner_createHeap__FP10fopAc_ac_c.s"
}
#pragma pop


/* ############################################################################################## */
/* 804D4EA8-804D4EEC 0044+00 s=1 e=0 z=0  None .data      l_cylSrc                                                     */
SECTION_DATA static u8 l_cylSrc[68] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x13, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x20, 0x00, 0x00,
	0x42, 0xAA, 0x00, 0x00,
};

/* 804D4EEC-804D4F0C 0020+00 s=1 e=0 z=0  None .data      l_daSpinner_Method                                           */
SECTION_DATA static void* l_daSpinner_Method[8] = {
	(void*)daSpinner_Create__FP10fopAc_ac_c,
	(void*)daSpinner_Delete__FP11daSpinner_c,
	(void*)daSpinner_Execute__FP11daSpinner_c,
	(void*)NULL,
	(void*)daSpinner_Draw__FP11daSpinner_c,
	(void*)NULL,
	(void*)NULL,
	(void*)NULL,
};

/* 804D4F0C-804D4F3C 0030+00 s=0 e=0 z=1  None .data      g_profile_SPINNER                                            */
SECTION_DATA void* g_profile_SPINNER[12] = {
	(void*)0xFFFFFFFD,
	(void*)0x0004FFFD,
	(void*)0x00F20000,
	(void*)&g_fpcLf_Method,
	(void*)0x00000ABC,
	(void*)NULL,
	(void*)NULL,
	(void*)&g_fopAc_Method,
	(void*)0x02AF0000,
	(void*)&l_daSpinner_Method,
	(void*)0x00060000,
	(void*)0x05000000,
};

/* 804D4F3C-804D4F48 000C+00 s=4 e=0 z=0  None .data      __vt__8cM3dGPla                                              */
SECTION_DATA void* __vt__8cM3dGPla[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__8cM3dGPlaFv,
};

/* 804D4F48-804D4F54 000C+00 s=2 e=0 z=0  None .data      __vt__8cM3dGLin                                              */
SECTION_DATA void* __vt__8cM3dGLin[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__8cM3dGLinFv,
};

/* 804D4F54-804D4F60 000C+00 s=1 e=0 z=0  None .data      __vt__12dBgS_AcchCir                                         */
SECTION_DATA void* __vt__12dBgS_AcchCir[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__12dBgS_AcchCirFv,
};

/* 804D4F60-804D4F6C 000C+00 s=3 e=0 z=0  None .data      __vt__10cCcD_GStts                                           */
SECTION_DATA void* __vt__10cCcD_GStts[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__10cCcD_GSttsFv,
};

/* 804D4F6C-804D4F78 000C+00 s=2 e=0 z=0  None .data      __vt__10dCcD_GStts                                           */
SECTION_DATA void* __vt__10dCcD_GStts[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__10dCcD_GSttsFv,
};

/* 804D4F78-804D4F84 000C+00 s=3 e=0 z=0  None .data      __vt__8cM3dGCyl                                              */
SECTION_DATA void* __vt__8cM3dGCyl[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__8cM3dGCylFv,
};

/* 804D4F84-804D4F90 000C+00 s=3 e=0 z=0  None .data      __vt__8cM3dGAab                                              */
SECTION_DATA void* __vt__8cM3dGAab[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__8cM3dGAabFv,
};

/* 804D4F90-804D4FB4 0024+00 s=3 e=0 z=0  None .data      __vt__13dBgS_LinkAcch                                        */
SECTION_DATA void* __vt__13dBgS_LinkAcch[9] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__13dBgS_LinkAcchFv,
	(void*)NULL,
	(void*)NULL,
	(void*)func_804D4D78,
	(void*)NULL,
	(void*)NULL,
	(void*)func_804D4D70,
};

/* 804D4FB4-804D4FC0 000C+00 s=3 e=0 z=0  None .data      __vt__12J3DFrameCtrl                                         */
SECTION_DATA void* __vt__12J3DFrameCtrl[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__12J3DFrameCtrlFv,
};

/* 804D1A70-804D1D60 02F0+00 s=1 e=0 z=0  None .text      create__11daSpinner_cFv                                      */
//	804D1A80: 803621D8 (_savegpr_28)
//	804D1A88: 804D4D90 (lit_3768)
//	804D1A8C: 804D4D90 (lit_3768)
//	804D1AA8: 80018B64 (__ct__10fopAc_ac_cFv)
//	804D1AB0: 804D4FB4 (__vt__12J3DFrameCtrl)
//	804D1AB4: 804D4FB4 (__vt__12J3DFrameCtrl)
//	804D1AC4: 803283FC (init__12J3DFrameCtrlFs)
//	804D1AD4: 80075EAC (__ct__12dBgS_AcchCirFv)
//	804D1AD8: 80075EAC (__ct__12dBgS_AcchCirFv)
//	804D1ADC: 804D1EF8 (__dt__12dBgS_AcchCirFv)
//	804D1AE0: 804D1EF8 (__dt__12dBgS_AcchCirFv)
//	804D1AEC: 80361D60 (__construct_array)
//	804D1AF8: 800760A0 (__ct__9dBgS_AcchFv)
//	804D1AFC: 804D4F90 (__vt__13dBgS_LinkAcch)
//	804D1B00: 804D4F90 (__vt__13dBgS_LinkAcch)
//	804D1B1C: 80078E98 (SetLink__16dBgS_PolyPassChkFv)
//	804D1B24: 80078030 (__ct__15dBgS_LinkLinChkFv)
//	804D1B2C: 802BE844 (__ct__16Z2SoundObjSimpleFv)
//	804D1B30: 803C3728 (__vt__9cCcD_Stts)
//	804D1B34: 803C3728 (__vt__9cCcD_Stts)
//	804D1B40: 80083760 (__ct__10dCcD_GSttsFv)
//	804D1B44: 803AC2E4 (__vt__9dCcD_Stts)
//	804D1B48: 803AC2E4 (__vt__9dCcD_Stts)
//	804D1B60: 80083A28 (__ct__12dCcD_GObjInfFv)
//	804D1B64: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	804D1B68: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	804D1B70: 804D4F84 (__vt__8cM3dGAab)
//	804D1B74: 804D4F84 (__vt__8cM3dGAab)
//	804D1B7C: 804D4F78 (__vt__8cM3dGCyl)
//	804D1B80: 804D4F78 (__vt__8cM3dGCyl)
//	804D1B88: 803C35A4 (__vt__12cCcD_CylAttr)
//	804D1B8C: 803C35A4 (__vt__12cCcD_CylAttr)
//	804D1B9C: 803AC050 (__vt__8dCcD_Cyl)
//	804D1BA0: 803AC050 (__vt__8dCcD_Cyl)
//	804D1BC8: 804D1A50 (daSpinner_createHeap__FP10fopAc_ac_c)
//	804D1BCC: 804D1A50 (daSpinner_createHeap__FP10fopAc_ac_c)
//	804D1BD4: 8001A4B0 (fopAcM_entrySolidHeap__FP10fopAc_ac_cPFP10fopAc_ac_c_iUl)
//	804D1BE8: 804061C0 (g_dComIfG_gameInfo)
//	804D1BEC: 804061C0 (g_dComIfG_gameInfo)
//	804D1C04: 80076288 (Set__9dBgS_AcchFP10fopAc_ac_ciP12dBgS_AcchCir)
//	804D1C30: 80075F58 (SetWall__12dBgS_AcchCirFff)
//	804D1C40: 80075F58 (SetWall__12dBgS_AcchCirFff)
//	804D1C50: 80075F58 (SetWall__12dBgS_AcchCirFff)
//	804D1C64: 80050C9C (init__7dPaPo_cFP9dBgS_Acchff)
//	804D1C94: 80083860 (Init__9dCcD_SttsFiiP10fopAc_ac_c)
//	804D1C9C: 804D4EA8 (l_cylSrc)
//	804D1CA0: 804D4EA8 (l_cylSrc)
//	804D1CA4: 800848B4 (Set__8dCcD_CylFRC11dCcD_SrcCyl)
//	804D1CB8: 80084908 (StartCAt__8dCcD_CylFR4cXyz)
//	804D1CC8: 8010D93C (getSpinnerGravity__9daAlink_cCFv)
//	804D1CD4: 8010D94C (getSpinnerMaxFallSpeed__9daAlink_cCFv)
//	804D1CE8: 804061C0 (g_dComIfG_gameInfo)
//	804D1CEC: 804061C0 (g_dComIfG_gameInfo)
//	804D1CF4: 80076AAC (CrrPos__9dBgS_AcchFR4dBgS)
//	804D1CFC: 800198C4 (fopAcM_setStageLayer__FPv)
//	804D1D30: 804D2278 (setMatrix__11daSpinner_cFv)
//	804D1D38: 804D21E0 (setRoomInfo__11daSpinner_cFv)
//	804D1D4C: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinner_c::create() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/create__11daSpinner_cFv.s"
}
#pragma pop


/* 804D1D60-804D1DA8 0048+00 s=1 e=0 z=0  None .text      __dt__8cM3dGCylFv                                            */
//	804D1D78: 804D4F78 (__vt__8cM3dGCyl)
//	804D1D7C: 804D4F78 (__vt__8cM3dGCyl)
//	804D1D8C: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cM3dGCyl::~cM3dGCyl() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/__dt__8cM3dGCylFv.s"
}
#pragma pop


/* 804D1DA8-804D1DF0 0048+00 s=1 e=0 z=0  None .text      __dt__8cM3dGAabFv                                            */
//	804D1DC0: 804D4F84 (__vt__8cM3dGAab)
//	804D1DC4: 804D4F84 (__vt__8cM3dGAab)
//	804D1DD4: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cM3dGAab::~cM3dGAab() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/__dt__8cM3dGAabFv.s"
}
#pragma pop


/* 804D1DF0-804D1E4C 005C+00 s=1 e=0 z=0  None .text      __dt__10dCcD_GSttsFv                                         */
//	804D1E08: 804D4F6C (__vt__10dCcD_GStts)
//	804D1E0C: 804D4F6C (__vt__10dCcD_GStts)
//	804D1E18: 804D4F60 (__vt__10cCcD_GStts)
//	804D1E1C: 804D4F60 (__vt__10cCcD_GStts)
//	804D1E30: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dCcD_GStts::~dCcD_GStts() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/__dt__10dCcD_GSttsFv.s"
}
#pragma pop


/* 804D1E4C-804D1E88 003C+00 s=1 e=0 z=0  None .text      __dt__4cXyzFv                                                */
//	804D1E6C: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cXyz::~cXyz() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/__dt__4cXyzFv.s"
}
#pragma pop


/* 804D1E88-804D1EF8 0070+00 s=3 e=0 z=0  None .text      __dt__13dBgS_LinkAcchFv                                      */
//	804D1EA8: 804D4F90 (__vt__13dBgS_LinkAcch)
//	804D1EAC: 804D4F90 (__vt__13dBgS_LinkAcch)
//	804D1EC8: 80075F94 (__dt__9dBgS_AcchFv)
//	804D1ED8: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dBgS_LinkAcch::~dBgS_LinkAcch() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/__dt__13dBgS_LinkAcchFv.s"
}
#pragma pop


/* 804D1EF8-804D1F68 0070+00 s=3 e=0 z=0  None .text      __dt__12dBgS_AcchCirFv                                       */
//	804D1F18: 804D4F54 (__vt__12dBgS_AcchCir)
//	804D1F1C: 804D4F54 (__vt__12dBgS_AcchCir)
//	804D1F2C: 8026EF18 (__dt__8cM3dGCirFv)
//	804D1F38: 802680B0 (__dt__13cBgS_PolyInfoFv)
//	804D1F48: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dBgS_AcchCir::~dBgS_AcchCir() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/__dt__12dBgS_AcchCirFv.s"
}
#pragma pop


/* 804D1F68-804D1FB0 0048+00 s=1 e=0 z=0  None .text      __dt__12J3DFrameCtrlFv                                       */
//	804D1F80: 804D4FB4 (__vt__12J3DFrameCtrl)
//	804D1F84: 804D4FB4 (__vt__12J3DFrameCtrl)
//	804D1F94: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm J3DFrameCtrl::~J3DFrameCtrl() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/__dt__12J3DFrameCtrlFv.s"
}
#pragma pop


/* 804D1FB0-804D1FD0 0020+00 s=1 e=0 z=0  None .text      daSpinner_Create__FP10fopAc_ac_c                             */
//	804D1FBC: 804D1A70 (create__11daSpinner_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
asm static void daSpinner_Create(fopAc_ac_c* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/daSpinner_Create__FP10fopAc_ac_c.s"
}
#pragma pop


/* 804D1FD0-804D21B8 01E8+00 s=1 e=0 z=0  None .text      __dt__11daSpinner_cFv                                        */
//	804D1FF4: 802BDFF8 (deleteObject__14Z2SoundObjBaseFv)
//	804D1FFC: 804D3F14 (clearSpreadEffect__11daSpinner_cFv)
//	804D2010: 803AC050 (__vt__8dCcD_Cyl)
//	804D2014: 803AC050 (__vt__8dCcD_Cyl)
//	804D2034: 803C35A4 (__vt__12cCcD_CylAttr)
//	804D2038: 803C35A4 (__vt__12cCcD_CylAttr)
//	804D2050: 804D4F78 (__vt__8cM3dGCyl)
//	804D2054: 804D4F78 (__vt__8cM3dGCyl)
//	804D2064: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	804D2068: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	804D2078: 804D4F84 (__vt__8cM3dGAab)
//	804D207C: 804D4F84 (__vt__8cM3dGAab)
//	804D208C: 800840E4 (__dt__12dCcD_GObjInfFv)
//	804D2098: 803AC2E4 (__vt__9dCcD_Stts)
//	804D209C: 803AC2E4 (__vt__9dCcD_Stts)
//	804D20B4: 804D4F6C (__vt__10dCcD_GStts)
//	804D20B8: 804D4F6C (__vt__10dCcD_GStts)
//	804D20C8: 804D4F60 (__vt__10cCcD_GStts)
//	804D20CC: 804D4F60 (__vt__10cCcD_GStts)
//	804D20DC: 803C3728 (__vt__9cCcD_Stts)
//	804D20E0: 803C3728 (__vt__9cCcD_Stts)
//	804D20F0: 803CAD10 (__vt__16Z2SoundObjSimple)
//	804D20F4: 803CAD10 (__vt__16Z2SoundObjSimple)
//	804D2104: 802BDF48 (__dt__14Z2SoundObjBaseFv)
//	804D2110: 8007808C (__dt__15dBgS_LinkLinChkFv)
//	804D211C: 804D4F90 (__vt__13dBgS_LinkAcch)
//	804D2120: 804D4F90 (__vt__13dBgS_LinkAcch)
//	804D2140: 80075F94 (__dt__9dBgS_AcchFv)
//	804D2148: 804D1EF8 (__dt__12dBgS_AcchCirFv)
//	804D214C: 804D1EF8 (__dt__12dBgS_AcchCirFv)
//	804D2158: 80361CE8 (__destroy_arr)
//	804D2174: 804D4FB4 (__vt__12J3DFrameCtrl)
//	804D2178: 804D4FB4 (__vt__12J3DFrameCtrl)
//	804D2188: 80018C8C (__dt__10fopAc_ac_cFv)
//	804D2198: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm daSpinner_c::~daSpinner_c() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/__dt__11daSpinner_cFv.s"
}
#pragma pop


/* 804D21B8-804D21E0 0028+00 s=1 e=0 z=0  None .text      daSpinner_Delete__FP11daSpinner_c                            */
//	804D21C8: 804D1FD0 (__dt__11daSpinner_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daSpinner_c* False
// 	 daSpinner_c False
asm static void daSpinner_Delete(daSpinner_c* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/daSpinner_Delete__FP11daSpinner_c.s"
}
#pragma pop


/* ############################################################################################## */
/* 804D4DA0-804D4DA4 0004+00 s=0 e=0 z=0  None .rodata    @4241                                                        */
SECTION_RODATA u32 const lit_4241 = 0x461C4000;

/* 804D4DA4-804D4DA8 0004+00 s=0 e=0 z=0  None .rodata    @4242                                                        */
SECTION_RODATA u32 const lit_4242 = 0x42480A3D;

/* 804D4DA8-804D4DAC 0004+00 s=0 e=0 z=0  None .rodata    @4243                                                        */
SECTION_RODATA u32 const lit_4243 = 0x42680000;

/* 804D4DAC-804D4DB0 0004+00 s=0 e=0 z=0  None .rodata    @4244                                                        */
SECTION_RODATA u32 const lit_4244 = 0x4301FD71;

/* 804D4DB0-804D4DB4 0004+00 s=0 e=0 z=0  None .rodata    @4245                                                        */
SECTION_RODATA u32 const lit_4245 = 0x420C0000;

/* 804D4DB4-804D4DB8 0004+00 s=0 e=0 z=0  None .rodata    @4246                                                        */
SECTION_RODATA u32 const lit_4246 = 0x42AA0000;

/* 804D4DB8-804D4DC0 0004+04 s=0 e=0 z=0  None .rodata    @4247                                                        */
SECTION_RODATA u8 const lit_4247[4 + 4 /* padding */] = {
	0x00, 0x00, 0x00, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00,
};

/* 804D4DC0-804D4DC8 0008+00 s=0 e=0 z=0  None .rodata    @4249                                                        */
SECTION_RODATA u8 const lit_4249[8] = {
	0x43, 0x30, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
};

/* 804D4DC8-804D4DCC 0004+00 s=1 e=0 z=0  None .rodata    @4409                                                        */
SECTION_RODATA static u32 const lit_4409 = 0xCE6E6B28;

/* 804D21E0-804D2278 0098+00 s=2 e=0 z=0  None .text      setRoomInfo__11daSpinner_cFv                                 */
//	804D21F0: 803621DC (_savegpr_29)
//	804D21F8: 804D4DC8 (lit_4409)
//	804D21FC: 804D4DC8 (lit_4409)
//	804D220C: 804061C0 (g_dComIfG_gameInfo)
//	804D2210: 804061C0 (g_dComIfG_gameInfo)
//	804D2220: 80075100 (GetRoomId__4dBgSFRC13cBgS_PolyInfo)
//	804D2230: 80074BE8 (GetPolyColor__4dBgSFRC13cBgS_PolyInfo)
//	804D223C: 80450D64 (struct_80450D64)
//	804D2240: 80450D64 (struct_80450D64)
//	804D2250: 8002D06C (dComIfGp_getReverb__Fi)
//	804D2264: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinner_c::setRoomInfo() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/setRoomInfo__11daSpinner_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 804D4DCC-804D4DD0 0004+00 s=1 e=0 z=0  None .rodata    @4429                                                        */
SECTION_RODATA static u32 const lit_4429 = 0x42B40000;

/* 804D2278-804D2320 00A8+00 s=2 e=0 z=0  None .text      setMatrix__11daSpinner_cFv                                   */
//	804D228C: 803DD470 (now__14mDoMtx_stack_c)
//	804D2290: 803DD470 (now__14mDoMtx_stack_c)
//	804D2298: 804D4DCC (lit_4429)
//	804D229C: 804D4DCC (lit_4429)
//	804D22B4: 803468E8 (PSMTXTrans)
//	804D22BC: 8000CF44 (ZXYrotM__14mDoMtx_stack_cFRC5csXyz)
//	804D22C0: 803DD470 (now__14mDoMtx_stack_c)
//	804D22C4: 803DD470 (now__14mDoMtx_stack_c)
//	804D22CC: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	804D22D0: 803DD470 (now__14mDoMtx_stack_c)
//	804D22D4: 803DD470 (now__14mDoMtx_stack_c)
//	804D22E0: 803464B0 (PSMTXCopy)
//	804D22F4: 8000D9CC (entry__13mDoExt_bckAnmFP12J3DModelDataf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinner_c::setMatrix() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/setMatrix__11daSpinner_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 804D4FC8-804D4FCC 0001+03 s=1 e=0 z=0  None .bss       @1109                                                        */
static u8 lit_1109[1 + 3 /* padding */];

/* 804D2320-804D25F4 02D4+00 s=1 e=0 z=0  None .text      setEffect__11daSpinner_cFv                                   */
//	804D2330: 803621BC (_savegpr_21)
//	804D2338: 804D4FC8 (lit_1109)
//	804D233C: 804D4FC8 (lit_1109)
//	804D2340: 804D4D90 (lit_3768)
//	804D2344: 804D4D90 (lit_3768)
//	804D2394: 804D1E4C (__dt__4cXyzFv)
//	804D2398: 804D1E4C (__dt__4cXyzFv)
//	804D23A0: 804D1918 (__register_global_object)
//	804D23D4: 804061C0 (g_dComIfG_gameInfo)
//	804D23D8: 804061C0 (g_dComIfG_gameInfo)
//	804D23E4: 80074E50 (GetPolyAtt0__4dBgSFRC13cBgS_PolyInfo)
//	804D2430: 804061C0 (g_dComIfG_gameInfo)
//	804D2434: 804061C0 (g_dComIfG_gameInfo)
//	804D2440: 80074EF0 (GetGroundCode__4dBgSFRC13cBgS_PolyInfo)
//	804D248C: 80051008 (setEffectCenter__7dPaPo_cFPC12dKy_tevstr_cPC4cXyzUlUlPC4cXyzPC5csXyzPC4cXyzScff)
//	804D2498: 804061C0 (g_dComIfG_gameInfo)
//	804D249C: 804061C0 (g_dComIfG_gameInfo)
//	804D24C8: 8004B918 (getEmitter__Q213dPa_control_c7level_cFUl)
//	804D25E0: 80362208 (_restgpr_21)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinner_c::setEffect() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/setEffect__11daSpinner_cFv.s"
}
#pragma pop


/* 804D25F4-804D3048 0A54+00 s=1 e=0 z=0  None .text      posMove__11daSpinner_cFv                                     */
//	804D261C: 803621CC (_savegpr_25)
//	804D2624: 804D4D90 (lit_3768)
//	804D2628: 804D4D90 (lit_3768)
//	804D262C: 804061C0 (g_dComIfG_gameInfo)
//	804D2630: 804061C0 (g_dComIfG_gameInfo)
//	804D2688: 8010D9B0 (getSpinnerRideSpeedF__9daAlink_cFv)
//	804D2690: 80439A20 (sincosTable___5JMath)
//	804D2694: 80439A20 (sincosTable___5JMath)
//	804D26F0: 80439A20 (sincosTable___5JMath)
//	804D26F4: 80439A20 (sincosTable___5JMath)
//	804D2764: 804D4F48 (__vt__8cM3dGLin)
//	804D2768: 804D4F48 (__vt__8cM3dGLin)
//	804D2798: 804D3694 (getPathNextPos__11daSpinner_cFv)
//	804D27F0: 80267128 (atan2sX_Z__4cXyzCFv)
//	804D2800: 80266F48 (normalizeZP__4cXyzFv)
//	804D2810: 803470D8 (PSVECScale)
//	804D2850: 8026F31C (SetStartEnd__8cM3dGLinFRC3VecRC3Vec)
//	804D2864: 80268710 (cM3d_Len3dSqPntAndSegLine__FPC8cM3dGLinPC3VecP3VecPf)
//	804D2874: 804D3618 (setNextPathNum__11daSpinner_cFv)
//	804D28D0: 804D3090 (setReflectAngle__11daSpinner_cFv)
//	804D28F0: 80267674 (cM_atan2s__Fff)
//	804D2934: 80439A20 (sincosTable___5JMath)
//	804D2938: 80439A20 (sincosTable___5JMath)
//	804D2994: 8034739C (PSVECSquareDistance)
//	804D2A04: 80450AE0 (__float_nan)
//	804D2A08: 80450AE0 (__float_nan)
//	804D2A74: 80450AE0 (__float_nan)
//	804D2A78: 80450AE0 (__float_nan)
//	804D2AA4: 80266B34 (__mi__4cXyzCFRC3Vec)
//	804D2AC4: 80267128 (atan2sX_Z__4cXyzCFv)
//	804D2B08: 804D3694 (getPathNextPos__11daSpinner_cFv)
//	804D2B44: 80267128 (atan2sX_Z__4cXyzCFv)
//	804D2B50: 80267150 (atan2sY_XZ__4cXyzCFv)
//	804D2BC0: 80266F48 (normalizeZP__4cXyzFv)
//	804D2CAC: 80439A20 (sincosTable___5JMath)
//	804D2CB0: 80439A20 (sincosTable___5JMath)
//	804D2D1C: 804D4F48 (__vt__8cM3dGLin)
//	804D2D20: 804D4F48 (__vt__8cM3dGLin)
//	804D2D40: 80347090 (PSVECAdd)
//	804D2D48: 804061C0 (g_dComIfG_gameInfo)
//	804D2D4C: 804061C0 (g_dComIfG_gameInfo)
//	804D2D58: 80076AAC (CrrPos__9dBgS_AcchFR4dBgS)
//	804D2DA0: 8010D9B0 (getSpinnerRideSpeedF__9daAlink_cFv)
//	804D2DB4: 8010D9B0 (getSpinnerRideSpeedF__9daAlink_cFv)
//	804D2DC4: 80439A20 (sincosTable___5JMath)
//	804D2DC8: 80439A20 (sincosTable___5JMath)
//	804D2DD4: 8010D95C (getSpinnerJumpRate__9daAlink_cCFv)
//	804D2E30: 8034739C (PSVECSquareDistance)
//	804D2EA0: 80450AE0 (__float_nan)
//	804D2EA4: 80450AE0 (__float_nan)
//	804D2F10: 80450AE0 (__float_nan)
//	804D2F14: 80450AE0 (__float_nan)
//	804D2F28: 8001DAE4 (fopAcM_getPolygonAngle__FRC13cBgS_PolyInfos)
//	804D2F30: 80439A20 (sincosTable___5JMath)
//	804D2F34: 80439A20 (sincosTable___5JMath)
//	804D2FE8: 80074E50 (GetPolyAtt0__4dBgSFRC13cBgS_PolyInfo)
//	804D3034: 80362218 (_restgpr_25)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinner_c::posMove() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/posMove__11daSpinner_cFv.s"
}
#pragma pop


/* 804D3048-804D3090 0048+00 s=1 e=0 z=0  None .text      __dt__8cM3dGLinFv                                            */
//	804D3060: 804D4F48 (__vt__8cM3dGLin)
//	804D3064: 804D4F48 (__vt__8cM3dGLin)
//	804D3074: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cM3dGLin::~cM3dGLin() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/__dt__8cM3dGLinFv.s"
}
#pragma pop


/* 804D3090-804D3174 00E4+00 s=3 e=0 z=0  None .text      setReflectAngle__11daSpinner_cFv                             */
//	804D30D0: 804D3618 (setNextPathNum__11daSpinner_cFv)
//	804D3104: 803650D0 (abs)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinner_c::setReflectAngle() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/setReflectAngle__11daSpinner_cFv.s"
}
#pragma pop


/* 804D3174-804D3468 02F4+00 s=1 e=0 z=0  None .text      setWallHit__11daSpinner_cFsUl                                */
//	804D3184: 803621D0 (_savegpr_26)
//	804D3194: 804D4D90 (lit_3768)
//	804D3198: 804D4D90 (lit_3768)
//	804D31A0: 804D3090 (setReflectAngle__11daSpinner_cFv)
//	804D31C8: 80439A20 (sincosTable___5JMath)
//	804D31CC: 80439A20 (sincosTable___5JMath)
//	804D320C: 80077D64 (Set__11dBgS_LinChkFPC4cXyzPC4cXyzPC10fopAc_ac_c)
//	804D3210: 804061C0 (g_dComIfG_gameInfo)
//	804D3214: 804061C0 (g_dComIfG_gameInfo)
//	804D3224: 800743B4 (LineCross__4cBgSFP11cBgS_LinChk)
//	804D3230: 804D4F3C (__vt__8cM3dGPla)
//	804D3234: 804D4F3C (__vt__8cM3dGPla)
//	804D3248: 80074744 (GetTriPla__4cBgSCFRC13cBgS_PolyInfoP8cM3dGPla)
//	804D3260: 80267674 (cM_atan2s__Fff)
//	804D3284: 80347138 (PSVECSquareMag)
//	804D32F4: 80450AE0 (__float_nan)
//	804D32F8: 80450AE0 (__float_nan)
//	804D3364: 80450AE0 (__float_nan)
//	804D3368: 80450AE0 (__float_nan)
//	804D3378: 80267674 (cM_atan2s__Fff)
//	804D338C: 804D4F3C (__vt__8cM3dGPla)
//	804D3390: 804D4F3C (__vt__8cM3dGPla)
//	804D33C4: 804061C0 (g_dComIfG_gameInfo)
//	804D33C8: 804061C0 (g_dComIfG_gameInfo)
//	804D33E8: 802C4814 (startHitItemSE__14Z2CreatureLinkFUlUlP14Z2SoundObjBasef)
//	804D3424: 8006FA24 (StartShock__12dVibration_cFii4cXyz)
//	804D3428: 804061C0 (g_dComIfG_gameInfo)
//	804D342C: 804061C0 (g_dComIfG_gameInfo)
//	804D344C: 8004C218 (setHitMark__13dPa_control_cFUsP10fopAc_ac_cPC4cXyzPC5csXyzPC4cXyzUl)
//	804D3454: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  s16 False
//  u32 False
asm void daSpinner_c::setWallHit(s16 param_0, u32 param_1) {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/setWallHit__11daSpinner_cFsUl.s"
}
#pragma pop


/* 804D3468-804D34B0 0048+00 s=1 e=0 z=0  None .text      __dt__8cM3dGPlaFv                                            */
//	804D3480: 804D4F3C (__vt__8cM3dGPla)
//	804D3484: 804D4F3C (__vt__8cM3dGPla)
//	804D3494: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cM3dGPla::~cM3dGPla() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/__dt__8cM3dGPlaFv.s"
}
#pragma pop


/* 804D34B0-804D3618 0168+00 s=1 e=0 z=0  None .text      setAnm__11daSpinner_cFv                                      */
//	804D34C8: 804D4D90 (lit_3768)
//	804D34CC: 804D4D90 (lit_3768)
//	804D3528: 8000D7DC (init__13mDoExt_bckAnmFP15J3DAnmTransformiifssb)
//	804D352C: 804061C0 (g_dComIfG_gameInfo)
//	804D3530: 804061C0 (g_dComIfG_gameInfo)
//	804D3564: 804061C0 (g_dComIfG_gameInfo)
//	804D3568: 804061C0 (g_dComIfG_gameInfo)
//	804D357C: 8006FA24 (StartShock__12dVibration_cFii4cXyz)
//	804D35C4: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinner_c::setAnm() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/setAnm__11daSpinner_cFv.s"
}
#pragma pop


/* 804D3618-804D3694 007C+00 s=2 e=0 z=0  None .text      setNextPathNum__11daSpinner_cFv                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinner_c::setNextPathNum() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/setNextPathNum__11daSpinner_cFv.s"
}
#pragma pop


/* 804D3694-804D36F4 0060+00 s=1 e=0 z=0  None .text      getPathNextPos__11daSpinner_cFv                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinner_c::getPathNextPos() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/getPathNextPos__11daSpinner_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 804D4DD0-804D4DD4 0004+00 s=0 e=0 z=0  None .rodata    @4591                                                        */
SECTION_RODATA u32 const lit_4591 = 0x3FC00000;

/* 804D4DD4-804D4DD8 0004+00 s=0 e=0 z=0  None .rodata    @4592                                                        */
SECTION_RODATA u32 const lit_4592 = 0x40400000;

/* 804D4DD8-804D4DDC 0004+00 s=0 e=0 z=0  None .rodata    @4593                                                        */
SECTION_RODATA u32 const lit_4593 = 0x40000000;

/* 804D4DDC-804D4DE0 0004+00 s=0 e=0 z=0  None .rodata    @4930                                                        */
SECTION_RODATA u32 const lit_4930 = 0xC1A00000;

/* 804D4DE0-804D4DE8 0004+04 s=0 e=0 z=0  None .rodata    @4931                                                        */
SECTION_RODATA u32 const lit_4931[1 + 1 /* padding */] = {
	0x4250CCCC,
	/* padding */
	0x00000000,
};

/* 804D4DE8-804D4DF0 0008+00 s=0 e=0 z=0  None .rodata    @4932                                                        */
SECTION_RODATA u8 const lit_4932[8] = {
	0x3F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 804D4DF0-804D4DF8 0008+00 s=0 e=0 z=0  None .rodata    @4933                                                        */
SECTION_RODATA u8 const lit_4933[8] = {
	0x40, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 804D4DF8-804D4E00 0008+00 s=0 e=0 z=0  None .rodata    @4934                                                        */
SECTION_RODATA u8 const lit_4934[8] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 804D4E00-804D4E04 0004+00 s=0 e=0 z=0  None .rodata    @4935                                                        */
SECTION_RODATA u32 const lit_4935 = 0x3BB6365E;

/* 804D4E04-804D4E08 0004+00 s=0 e=0 z=0  None .rodata    @4936                                                        */
SECTION_RODATA u32 const lit_4936 = 0x4333D588;

/* 804D4E08-804D4E0C 0004+00 s=0 e=0 z=0  None .rodata    @4937                                                        */
SECTION_RODATA u32 const lit_4937 = 0x41E80000;

/* 804D4E0C-804D4E10 0004+00 s=0 e=0 z=0  None .rodata    @4938                                                        */
SECTION_RODATA u32 const lit_4938 = 0x42480000;

/* 804D4E10-804D4E14 0004+00 s=0 e=0 z=0  None .rodata    @5053                                                        */
SECTION_RODATA u32 const lit_5053 = 0xBF800000;

/* 804D4E14-804D4E18 0004+00 s=0 e=0 z=0  None .rodata    @5091                                                        */
SECTION_RODATA u32 const lit_5091 = 0x41A00000;

/* 804D4E18-804D4E24 000C+00 s=0 e=0 z=0  None .rodata    sideCheckVec0$5143                                           */
SECTION_RODATA u8 const data_804D4E18[12] = {
	0x41, 0xF0, 0x00, 0x00, 0x41, 0x20, 0x00, 0x00, 0x40, 0xA0, 0x00, 0x00,
};

/* 804D4E24-804D4E30 000C+00 s=0 e=0 z=0  None .rodata    sideCheckVec1$5144                                           */
SECTION_RODATA u8 const data_804D4E24[12] = {
	0xC1, 0xF0, 0x00, 0x00, 0x41, 0x20, 0x00, 0x00, 0x40, 0xA0, 0x00, 0x00,
};

/* 804D4E30-804D4E3C 000C+00 s=0 e=0 z=0  None .rodata    initSide0$5145                                               */
SECTION_RODATA u8 const data_804D4E30[12] = {
	0x42, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 804D4E3C-804D4E48 000C+00 s=0 e=0 z=0  None .rodata    initSide1$5146                                               */
SECTION_RODATA u8 const data_804D4E3C[12] = {
	0xC2, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 804D4E48-804D4E54 000C+00 s=0 e=0 z=0  None .rodata    initSideOld0$5147                                            */
SECTION_RODATA u8 const data_804D4E48[12] = {
	0x42, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 804D4E54-804D4E60 000C+00 s=0 e=0 z=0  None .rodata    initSideOld1$5148                                            */
SECTION_RODATA u8 const data_804D4E54[12] = {
	0xC2, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 804D4E60-804D4E68 0008+00 s=0 e=0 z=0  None .rodata    @5295                                                        */
SECTION_RODATA u8 const lit_5295[8] = {
	0x43, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 804D4E68-804D4E6C 0004+00 s=0 e=0 z=0  None .rodata    effName$5299                                                 */
SECTION_RODATA u8 const data_804D4E68[4] = {
	0x08, 0xC5, 0x08, 0xC6,
};

/* 804D4E6C-804D4E70 0004+00 s=0 e=0 z=0  None .rodata    @5361                                                        */
SECTION_RODATA u32 const lit_5361 = 0x41200000;

/* 804D4E70-804D4E74 0004+00 s=0 e=0 z=0  None .rodata    @5671                                                        */
SECTION_RODATA u32 const lit_5671 = 0x3C23D70A;

/* 804D4E74-804D4E78 0004+00 s=0 e=0 z=0  None .rodata    @5672                                                        */
SECTION_RODATA u32 const lit_5672 = 0x4511A000;

/* 804D4E78-804D4E7C 0004+00 s=0 e=0 z=0  None .rodata    @5673                                                        */
SECTION_RODATA u32 const lit_5673 = 0x3F59999A;

/* 804D4E7C-804D4E80 0004+00 s=0 e=0 z=0  None .rodata    @5674                                                        */
SECTION_RODATA u32 const lit_5674 = 0x3E99999A;

/* 804D4E80-804D4E84 0004+00 s=0 e=0 z=0  None .rodata    @5675                                                        */
SECTION_RODATA u32 const lit_5675 = 0x40A00000;

/* 804D4E84-804D4E88 0004+00 s=0 e=0 z=0  None .rodata    @5676                                                        */
SECTION_RODATA u32 const lit_5676 = 0x3F000000;

/* 804D4E88-804D4E8C 0004+00 s=0 e=0 z=0  None .rodata    @5677                                                        */
SECTION_RODATA u32 const lit_5677 = 0x3DCCCCCD;

/* 804D4E8C-804D4E90 0004+00 s=0 e=0 z=0  None .rodata    @5678                                                        */
SECTION_RODATA u32 const lit_5678 = 0x44FA0000;

/* 804D4E90-804D4E94 0004+00 s=0 e=0 z=0  None .rodata    @5679                                                        */
SECTION_RODATA u32 const lit_5679 = 0x41100000;

/* 804D4E94-804D4E98 0004+00 s=0 e=0 z=0  None .rodata    @5680                                                        */
SECTION_RODATA u32 const lit_5680 = 0x42C80000;

/* 804D4E98-804D4E9C 0004+00 s=0 e=0 z=0  None .rodata    @5723                                                        */
SECTION_RODATA u32 const lit_5723 = 0x428C0000;

/* 804D4E9C-804D4EA0 0004+00 s=0 e=0 z=0  None .rodata    @5724                                                        */
SECTION_RODATA u32 const lit_5724 = 0x43960000;

/* 804D4EA0-804D4EA8 0008+00 s=2 e=0 z=0  None .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char const* const stringBase_804D4EA0 = "D_MN10A";
#pragma pop

/* 804D36F4-804D3774 0080+00 s=1 e=0 z=0  None .text      checkLineWallHit__11daSpinner_cFP4cXyzP4cXyz                 */
//	804D3710: 80077D64 (Set__11dBgS_LinChkFPC4cXyzPC4cXyzPC10fopAc_ac_c)
//	804D3714: 804061C0 (g_dComIfG_gameInfo)
//	804D3718: 804061C0 (g_dComIfG_gameInfo)
//	804D3724: 800743B4 (LineCross__4cBgSFP11cBgS_LinChk)
//	804D3734: 80075D0C (dBgS_CheckBWallPoly__FRC13cBgS_PolyInfo)
//	804D3740: 804D4EA0 (stringBase0)
//	804D3744: 804D4EA0 (stringBase0)
//	804D3748: 8009DA60 (checkStageName__9daAlink_cFPCc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
asm void daSpinner_c::checkLineWallHit(cXyz* param_0, cXyz* param_1) {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/checkLineWallHit__11daSpinner_cFP4cXyzP4cXyz.s"
}
#pragma pop


/* 804D3774-804D3D60 05EC+00 s=1 e=0 z=0  None .text      checkPathMove__11daSpinner_cFv                               */
//	804D3784: 803621C8 (_savegpr_24)
//	804D378C: 804D4D90 (lit_3768)
//	804D3790: 804D4D90 (lit_3768)
//	804D37AC: 80083688 (GetAc__22dCcD_GAtTgCoCommonBaseFv)
//	804D37B8: 800842C0 (ChkAtHit__12dCcD_GObjInfFv)
//	804D3810: 804061C0 (g_dComIfG_gameInfo)
//	804D3814: 804061C0 (g_dComIfG_gameInfo)
//	804D3828: 8006FA24 (StartShock__12dVibration_cFii4cXyz)
//	804D38D4: 80267128 (atan2sX_Z__4cXyzCFv)
//	804D38E0: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	804D38E4: 803DD470 (now__14mDoMtx_stack_c)
//	804D38E8: 803DD470 (now__14mDoMtx_stack_c)
//	804D38F0: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	804D38F4: 803DD470 (now__14mDoMtx_stack_c)
//	804D38F8: 803DD470 (now__14mDoMtx_stack_c)
//	804D3904: 80346D6C (PSMTXMultVec)
//	804D3908: 803DD470 (now__14mDoMtx_stack_c)
//	804D390C: 803DD470 (now__14mDoMtx_stack_c)
//	804D3918: 80346D6C (PSMTXMultVec)
//	804D3924: 804D4F3C (__vt__8cM3dGPla)
//	804D3928: 804D4F3C (__vt__8cM3dGPla)
//	804D393C: 804D36F4 (checkLineWallHit__11daSpinner_cFP4cXyzP4cXyz)
//	804D394C: 803DD470 (now__14mDoMtx_stack_c)
//	804D3950: 803DD470 (now__14mDoMtx_stack_c)
//	804D395C: 80346D6C (PSMTXMultVec)
//	804D3960: 803DD470 (now__14mDoMtx_stack_c)
//	804D3964: 803DD470 (now__14mDoMtx_stack_c)
//	804D3970: 80346D6C (PSMTXMultVec)
//	804D3984: 804D36F4 (checkLineWallHit__11daSpinner_cFP4cXyzP4cXyz)
//	804D3994: 803DD470 (now__14mDoMtx_stack_c)
//	804D3998: 803DD470 (now__14mDoMtx_stack_c)
//	804D39A4: 80346D6C (PSMTXMultVec)
//	804D39A8: 803DD470 (now__14mDoMtx_stack_c)
//	804D39AC: 803DD470 (now__14mDoMtx_stack_c)
//	804D39B8: 80346D6C (PSMTXMultVec)
//	804D39C4: 803DD470 (now__14mDoMtx_stack_c)
//	804D39C8: 803DD470 (now__14mDoMtx_stack_c)
//	804D39D0: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	804D39D4: 803DD470 (now__14mDoMtx_stack_c)
//	804D39D8: 803DD470 (now__14mDoMtx_stack_c)
//	804D39E4: 80346D6C (PSMTXMultVec)
//	804D39E8: 803DD470 (now__14mDoMtx_stack_c)
//	804D39EC: 803DD470 (now__14mDoMtx_stack_c)
//	804D39F8: 80346D6C (PSMTXMultVec)
//	804D3A08: 804D36F4 (checkLineWallHit__11daSpinner_cFP4cXyzP4cXyz)
//	804D3A18: 803DD470 (now__14mDoMtx_stack_c)
//	804D3A1C: 803DD470 (now__14mDoMtx_stack_c)
//	804D3A28: 80346D6C (PSMTXMultVec)
//	804D3A2C: 803DD470 (now__14mDoMtx_stack_c)
//	804D3A30: 803DD470 (now__14mDoMtx_stack_c)
//	804D3A3C: 80346D6C (PSMTXMultVec)
//	804D3A50: 804D36F4 (checkLineWallHit__11daSpinner_cFP4cXyzP4cXyz)
//	804D3A60: 803DD470 (now__14mDoMtx_stack_c)
//	804D3A64: 803DD470 (now__14mDoMtx_stack_c)
//	804D3A70: 80346D6C (PSMTXMultVec)
//	804D3A74: 803DD470 (now__14mDoMtx_stack_c)
//	804D3A78: 803DD470 (now__14mDoMtx_stack_c)
//	804D3A84: 80346D6C (PSMTXMultVec)
//	804D3AA8: 80270E24 (cLib_distanceAngleS__Fss)
//	804D3ABC: 80267150 (atan2sY_XZ__4cXyzCFv)
//	804D3B14: 80347138 (PSVECSquareMag)
//	804D3B84: 80450AE0 (__float_nan)
//	804D3B88: 80450AE0 (__float_nan)
//	804D3BF4: 80450AE0 (__float_nan)
//	804D3BF8: 80450AE0 (__float_nan)
//	804D3C08: 80267674 (cM_atan2s__Fff)
//	804D3CC8: 80075F40 (SetWallR__12dBgS_AcchCirFf)
//	804D3CD4: 8026F200 (SetR__8cM3dGCylFf)
//	804D3CD8: 804061C0 (g_dComIfG_gameInfo)
//	804D3CDC: 804061C0 (g_dComIfG_gameInfo)
//	804D3CE4: 8010D96C (getSpinnerRideMoveTime__9daAlink_cFv)
//	804D3D00: 8010D9B0 (getSpinnerRideSpeedF__9daAlink_cFv)
//	804D3D28: 804D4F3C (__vt__8cM3dGPla)
//	804D3D2C: 804D4F3C (__vt__8cM3dGPla)
//	804D3D4C: 80362214 (_restgpr_24)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinner_c::checkPathMove() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/checkPathMove__11daSpinner_cFv.s"
}
#pragma pop


/* 804D3D60-804D3F14 01B4+00 s=1 e=0 z=0  None .text      setSpreadEffect__11daSpinner_cFv                             */
//	804D3D70: 803621D0 (_savegpr_26)
//	804D3D78: 804D4D90 (lit_3768)
//	804D3D7C: 804D4D90 (lit_3768)
//	804D3D8C: 803DD470 (now__14mDoMtx_stack_c)
//	804D3D90: 803DD470 (now__14mDoMtx_stack_c)
//	804D3D94: 803464B0 (PSMTXCopy)
//	804D3DA4: 803DD470 (now__14mDoMtx_stack_c)
//	804D3DA8: 803DD470 (now__14mDoMtx_stack_c)
//	804D3DB0: 8000C39C (mDoMtx_XrotM__FPA4_fs)
//	804D3DB4: 803DD470 (now__14mDoMtx_stack_c)
//	804D3DB8: 803DD470 (now__14mDoMtx_stack_c)
//	804D3DD4: 804061C0 (g_dComIfG_gameInfo)
//	804D3DD8: 804061C0 (g_dComIfG_gameInfo)
//	804D3DE8: 8004B918 (getEmitter__Q213dPa_control_c7level_cFUl)
//	804D3EB4: 8004D4CC (set__13dPa_control_cFUlUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	804D3EC8: 8004B918 (getEmitter__Q213dPa_control_c7level_cFUl)
//	804D3ED4: 803DD470 (now__14mDoMtx_stack_c)
//	804D3ED8: 803DD470 (now__14mDoMtx_stack_c)
//	804D3EE4: 802807E0 (func_802807E0)
//	804D3F00: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinner_c::setSpreadEffect() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/setSpreadEffect__11daSpinner_cFv.s"
}
#pragma pop


/* 804D3F14-804D3F8C 0078+00 s=2 e=0 z=0  None .text      clearSpreadEffect__11daSpinner_cFv                           */
//	804D3F24: 803621D8 (_savegpr_28)
//	804D3F34: 804061C0 (g_dComIfG_gameInfo)
//	804D3F38: 804061C0 (g_dComIfG_gameInfo)
//	804D3F4C: 8004B918 (getEmitter__Q213dPa_control_c7level_cFUl)
//	804D3F78: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinner_c::clearSpreadEffect() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/clearSpreadEffect__11daSpinner_cFv.s"
}
#pragma pop


/* 804D3F8C-804D4B94 0C08+00 s=1 e=0 z=0  None .text      execute__11daSpinner_cFv                                     */
//	804D3FB4: 803621CC (_savegpr_25)
//	804D3FBC: 804D4D90 (lit_3768)
//	804D3FC0: 804D4D90 (lit_3768)
//	804D3FD0: 804D3F14 (clearSpreadEffect__11daSpinner_cFv)
//	804D3FD8: 80019C7C (fopAcM_delete__FP10fopAc_ac_c)
//	804D3FEC: 804061C0 (g_dComIfG_gameInfo)
//	804D3FF0: 804061C0 (g_dComIfG_gameInfo)
//	804D4034: 804061C0 (g_dComIfG_gameInfo)
//	804D4038: 804061C0 (g_dComIfG_gameInfo)
//	804D4084: 804D4EA0 (stringBase0)
//	804D4088: 804D4EA0 (stringBase0)
//	804D408C: 8009DA60 (checkStageName__9daAlink_cFPCc)
//	804D409C: 80450D64 (struct_80450D64)
//	804D40A0: 80450D64 (struct_80450D64)
//	804D40AC: 8002DA30 (dComIfGs_isZoneSwitch__Fii)
//	804D40BC: 80450D64 (struct_80450D64)
//	804D40C0: 80450D64 (struct_80450D64)
//	804D40CC: 8002DA30 (dComIfGs_isZoneSwitch__Fii)
//	804D40E0: 803DD2E8 (m_cpadInfo__8mDoCPd_c)
//	804D40E4: 803DD2E8 (m_cpadInfo__8mDoCPd_c)
//	804D40EC: 804061C0 (g_dComIfG_gameInfo)
//	804D40F0: 804061C0 (g_dComIfG_gameInfo)
//	804D4108: 803DD2E8 (m_cpadInfo__8mDoCPd_c)
//	804D410C: 803DD2E8 (m_cpadInfo__8mDoCPd_c)
//	804D4114: 80181614 (dCam_getControledAngleY__FP12camera_class)
//	804D412C: 8002E9D4 (dComIfG_getTrigA__FUl)
//	804D4168: 804D34B0 (setAnm__11daSpinner_cFv)
//	804D4250: 8000D428 (play__14mDoExt_baseAnmFv)
//	804D4280: 80267954 (cM_rndF__Ff)
//	804D42B4: 80439A20 (sincosTable___5JMath)
//	804D42B8: 80439A20 (sincosTable___5JMath)
//	804D4308: 804D3F14 (clearSpreadEffect__11daSpinner_cFv)
//	804D4310: 80019C7C (fopAcM_delete__FP10fopAc_ac_c)
//	804D432C: 8010D96C (getSpinnerRideMoveTime__9daAlink_cFv)
//	804D4338: 8010D9B0 (getSpinnerRideSpeedF__9daAlink_cFv)
//	804D4370: 80270990 (cLib_chasePosXZ__FP4cXyzRC4cXyzf)
//	804D43D8: 80270740 (cLib_chaseF__FPfff)
//	804D4408: 804061C0 (g_dComIfG_gameInfo)
//	804D440C: 804061C0 (g_dComIfG_gameInfo)
//	804D4430: 8004D068 (setPoly__13dPa_control_cFUsR13cBgS_PolyInfoPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyziP18dPa_levelEcallBackScPC4cXyz)
//	804D4458: 8006FA24 (StartShock__12dVibration_cFii4cXyz)
//	804D4508: 80270740 (cLib_chaseF__FPfff)
//	804D451C: 8010DA04 (getSpinnerRideDecSpeedMin__9daAlink_cCFv)
//	804D4528: 8010D9F4 (getSpinnerRideDecSpeedMax__9daAlink_cCFv)
//	804D4534: 8010DA14 (getSpinnerRideDecSpeedRate__9daAlink_cCFv)
//	804D454C: 8026F97C (cLib_addCalc__FPfffff)
//	804D45AC: 804D4F3C (__vt__8cM3dGPla)
//	804D45B0: 804D4F3C (__vt__8cM3dGPla)
//	804D45D0: 80074744 (GetTriPla__4cBgSCFRC13cBgS_PolyInfoP8cM3dGPla)
//	804D45D8: 80267128 (atan2sX_Z__4cXyzCFv)
//	804D45E4: 804D3774 (checkPathMove__11daSpinner_cFv)
//	804D4624: 801AB4C0 (dKy_pol_sound_get__FPC13cBgS_PolyInfo)
//	804D4634: 804D3174 (setWallHit__11daSpinner_cFsUl)
//	804D4668: 80074CBC (GetSpecialCode__4dBgSFRC13cBgS_PolyInfo)
//	804D4680: 803650D0 (abs)
//	804D4690: 801AB4C0 (dKy_pol_sound_get__FPC13cBgS_PolyInfo)
//	804D46A0: 804D3174 (setWallHit__11daSpinner_cFsUl)
//	804D46AC: 800842C0 (ChkAtHit__12dCcD_GObjInfFv)
//	804D46C8: 800843A8 (GetAtHitGObj__12dCcD_GObjInfFv)
//	804D46D8: 800843A8 (GetAtHitGObj__12dCcD_GObjInfFv)
//	804D46F0: 80083688 (GetAc__22dCcD_GAtTgCoCommonBaseFv)
//	804D4700: 80083688 (GetAc__22dCcD_GAtTgCoCommonBaseFv)
//	804D4714: 80266B34 (__mi__4cXyzCFRC3Vec)
//	804D4740: 80266B34 (__mi__4cXyzCFRC3Vec)
//	804D4760: 80267128 (atan2sX_Z__4cXyzCFv)
//	804D476C: 804D3090 (setReflectAngle__11daSpinner_cFv)
//	804D478C: 8010DA34 (getSpinnerRideRotAngleMin__9daAlink_cCFv)
//	804D4798: 8010DA24 (getSpinnerRideRotAngleMax__9daAlink_cCFv)
//	804D47B0: 80270540 (cLib_addCalcAngleS__FPsssss)
//	804D47E0: 804D4F3C (__vt__8cM3dGPla)
//	804D47E4: 804D4F3C (__vt__8cM3dGPla)
//	804D4810: 8010DA24 (getSpinnerRideRotAngleMax__9daAlink_cCFv)
//	804D4840: 80270540 (cLib_addCalcAngleS__FPsssss)
//	804D4868: 8010D9B0 (getSpinnerRideSpeedF__9daAlink_cFv)
//	804D48A8: 80270540 (cLib_addCalcAngleS__FPsssss)
//	804D48F0: 804D25F4 (posMove__11daSpinner_cFv)
//	804D4954: 8034739C (PSVECSquareDistance)
//	804D49EC: 80076AAC (CrrPos__9dBgS_AcchFR4dBgS)
//	804D4A24: 804D21E0 (setRoomInfo__11daSpinner_cFv)
//	804D4A2C: 804D2278 (setMatrix__11daSpinner_cFv)
//	804D4A34: 804D2320 (setEffect__11daSpinner_cFv)
//	804D4A58: 8001DAE4 (fopAcM_getPolygonAngle__FRC13cBgS_PolyInfos)
//	804D4A74: 80084954 (MoveCAt__8dCcD_CylFR4cXyz)
//	804D4A78: 804061C0 (g_dComIfG_gameInfo)
//	804D4A7C: 804061C0 (g_dComIfG_gameInfo)
//	804D4A88: 80264BA8 (Set__4cCcSFP8cCcD_Obj)
//	804D4A8C: 804061C0 (g_dComIfG_gameInfo)
//	804D4A90: 804061C0 (g_dComIfG_gameInfo)
//	804D4AA0: 80085D98 (Set__12dCcMassS_MngFP8cCcD_ObjUc)
//	804D4B00: 80075F40 (SetWallR__12dBgS_AcchCirFf)
//	804D4B0C: 8026F200 (SetR__8cM3dGCylFf)
//	804D4B1C: 80075F40 (SetWallR__12dBgS_AcchCirFf)
//	804D4B28: 8026F200 (SetR__8cM3dGCylFf)
//	804D4B40: 80075F40 (SetWallR__12dBgS_AcchCirFf)
//	804D4B4C: 8026F200 (SetR__8cM3dGCylFf)
//	804D4B5C: 804D3D60 (setSpreadEffect__11daSpinner_cFv)
//	804D4B80: 80362218 (_restgpr_25)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinner_c::execute() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/execute__11daSpinner_cFv.s"
}
#pragma pop


/* 804D4B94-804D4BB4 0020+00 s=1 e=0 z=0  None .text      daSpinner_Execute__FP11daSpinner_c                           */
//	804D4BA0: 804D3F8C (execute__11daSpinner_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daSpinner_c* False
// 	 daSpinner_c False
asm static void daSpinner_Execute(daSpinner_c* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/daSpinner_Execute__FP11daSpinner_c.s"
}
#pragma pop


/* 804D4BB4-804D4D08 0154+00 s=1 e=0 z=0  None .text      draw__11daSpinner_cFv                                        */
//	804D4BC4: 803621D8 (_savegpr_28)
//	804D4BCC: 804D4D90 (lit_3768)
//	804D4BD0: 804D4D90 (lit_3768)
//	804D4BD4: 8042CA54 (g_env_light)
//	804D4BD8: 8042CA54 (g_env_light)
//	804D4BE8: 801A37C4 (settingTevStruct__18dScnKy_env_light_cFiP4cXyzP12dKy_tevstr_c)
//	804D4BEC: 8042CA54 (g_env_light)
//	804D4BF0: 8042CA54 (g_env_light)
//	804D4C00: 801A4DA0 (setLightTevColorType_MAJI__18dScnKy_env_light_cFP12J3DModelDataP12dKy_tevstr_c)
//	804D4C04: 804061C0 (g_dComIfG_gameInfo)
//	804D4C08: 804061C0 (g_dComIfG_gameInfo)
//	804D4C48: 8000DD64 (mDoExt_modelEntryDL__FP8J3DModel)
//	804D4C50: 8003194C (entry__10daMirror_cFP8J3DModel)
//	804D4CDC: 804248D0 (mSimpleTexObj__21dDlst_shadowControl_c)
//	804D4CE0: 804248D0 (mSimpleTexObj__21dDlst_shadowControl_c)
//	804D4CE4: 8002E910 (dComIfGd_setShadow__FUlScP8J3DModelP4cXyzffffR13cBgS_PolyInfoP12dKy_tevstr_csfP9_GXTexObj)
//	804D4CF4: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinner_c::draw() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/draw__11daSpinner_cFv.s"
}
#pragma pop


/* 804D4D08-804D4D28 0020+00 s=1 e=0 z=0  None .text      daSpinner_Draw__FP11daSpinner_c                              */
//	804D4D14: 804D4BB4 (draw__11daSpinner_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daSpinner_c* False
// 	 daSpinner_c False
asm static void daSpinner_Draw(daSpinner_c* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/daSpinner_Draw__FP11daSpinner_c.s"
}
#pragma pop


/* 804D4D28-804D4D70 0048+00 s=1 e=0 z=0  None .text      __dt__10cCcD_GSttsFv                                         */
//	804D4D40: 804D4F60 (__vt__10cCcD_GStts)
//	804D4D44: 804D4F60 (__vt__10cCcD_GStts)
//	804D4D54: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cCcD_GStts::~cCcD_GStts() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/__dt__10cCcD_GSttsFv.s"
}
#pragma pop


/* 804D4D70-804D4D78 0008+00 s=1 e=0 z=0  None .text      @36@__dt__13dBgS_LinkAcchFv                                  */
//	804D4D74: 804D1E88 (__dt__13dBgS_LinkAcchFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_804D4D70() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/func_804D4D70.s"
}
#pragma pop


/* 804D4D78-804D4D80 0008+00 s=1 e=0 z=0  None .text      @20@__dt__13dBgS_LinkAcchFv                                  */
//	804D4D7C: 804D1E88 (__dt__13dBgS_LinkAcchFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_804D4D78() {
	nofralloc
#include "asm/rel/d/a/d_a_spinner/d_a_spinner/func_804D4D78.s"
}
#pragma pop


/* ############################################################################################## */
/* 804D4FCC-804D4FD0 0001+03 s=0 e=0 z=0  None .bss       @1107                                                        */
u8 lit_1107[1 + 3 /* padding */];

/* 804D4FD0-804D4FD4 0001+03 s=0 e=0 z=0  None .bss       @1105                                                        */
u8 lit_1105[1 + 3 /* padding */];

/* 804D4FD4-804D4FD8 0001+03 s=0 e=0 z=0  None .bss       @1104                                                        */
u8 lit_1104[1 + 3 /* padding */];

/* 804D4FD8-804D4FDC 0001+03 s=0 e=0 z=0  None .bss       @1099                                                        */
u8 lit_1099[1 + 3 /* padding */];

/* 804D4FDC-804D4FE0 0001+03 s=0 e=0 z=0  None .bss       @1097                                                        */
u8 lit_1097[1 + 3 /* padding */];

/* 804D4FE0-804D4FE4 0001+03 s=0 e=0 z=0  None .bss       @1095                                                        */
u8 lit_1095[1 + 3 /* padding */];

/* 804D4FE4-804D4FE8 0001+03 s=0 e=0 z=0  None .bss       @1094                                                        */
u8 lit_1094[1 + 3 /* padding */];

/* 804D4FE8-804D4FEC 0001+03 s=0 e=0 z=0  None .bss       @1057                                                        */
u8 lit_1057[1 + 3 /* padding */];

/* 804D4FEC-804D4FF0 0001+03 s=0 e=0 z=0  None .bss       @1055                                                        */
u8 lit_1055[1 + 3 /* padding */];

/* 804D4FF0-804D4FF4 0001+03 s=0 e=0 z=0  None .bss       @1053                                                        */
u8 lit_1053[1 + 3 /* padding */];

/* 804D4FF4-804D4FF8 0001+03 s=0 e=0 z=0  None .bss       @1052                                                        */
u8 lit_1052[1 + 3 /* padding */];

/* 804D4FF8-804D4FFC 0001+03 s=0 e=0 z=0  None .bss       @1014                                                        */
u8 lit_1014[1 + 3 /* padding */];

/* 804D4FFC-804D5000 0001+03 s=0 e=0 z=0  None .bss       @1012                                                        */
u8 lit_1012[1 + 3 /* padding */];

/* 804D5000-804D5004 0001+03 s=0 e=0 z=0  None .bss       @1010                                                        */
u8 lit_1010[1 + 3 /* padding */];

/* 804D5004-804D5008 0001+03 s=0 e=0 z=0  None .bss       @1009                                                        */
u8 lit_1009[1 + 3 /* padding */];

/* 804D5008-804D5014 000C+00 s=0 e=0 z=0  None .bss       effDirection$4433                                            */
u8 data_804D5008[12];

/* 804D5014-804D5024 000C+04 s=0 e=0 z=0  None .bss       @4437                                                        */
u8 lit_4437[12 + 4 /* padding */];

/* 804D5024-804D5030 000C+00 s=0 e=0 z=0  None .bss       particleScale$4436                                           */
u8 data_804D5024[12];

/* 804D5030-804D5034 0004+00 s=0 e=0 z=0  None .bss       sInstance__40JASGlobalInstance<19JASDefaultBankTable>        */
u8 data_804D5030[4];

/* 804D5034-804D5038 0004+00 s=0 e=0 z=0  None .bss       sInstance__35JASGlobalInstance<14JASAudioThread>             */
u8 data_804D5034[4];

/* 804D5038-804D503C 0004+00 s=0 e=0 z=0  None .bss       sInstance__27JASGlobalInstance<7Z2SeMgr>                     */
u8 data_804D5038[4];

/* 804D503C-804D5040 0004+00 s=0 e=0 z=0  None .bss       sInstance__28JASGlobalInstance<8Z2SeqMgr>                    */
u8 data_804D503C[4];

/* 804D5040-804D5044 0004+00 s=0 e=0 z=0  None .bss       sInstance__31JASGlobalInstance<10Z2SceneMgr>                 */
u8 data_804D5040[4];

/* 804D5044-804D5048 0004+00 s=0 e=0 z=0  None .bss       sInstance__32JASGlobalInstance<11Z2StatusMgr>                */
u8 data_804D5044[4];

/* 804D5048-804D504C 0004+00 s=0 e=0 z=0  None .bss       sInstance__31JASGlobalInstance<10Z2DebugSys>                 */
u8 data_804D5048[4];

/* 804D504C-804D5050 0004+00 s=0 e=0 z=0  None .bss       sInstance__36JASGlobalInstance<15JAISoundStarter>            */
u8 data_804D504C[4];

/* 804D5050-804D5054 0004+00 s=0 e=0 z=0  None .bss       sInstance__35JASGlobalInstance<14Z2SoundStarter>             */
u8 data_804D5050[4];

/* 804D5054-804D5058 0004+00 s=0 e=0 z=0  None .bss       sInstance__33JASGlobalInstance<12Z2SpeechMgr2>               */
u8 data_804D5054[4];

/* 804D5058-804D505C 0004+00 s=0 e=0 z=0  None .bss       sInstance__28JASGlobalInstance<8JAISeMgr>                    */
u8 data_804D5058[4];

/* 804D505C-804D5060 0004+00 s=0 e=0 z=0  None .bss       sInstance__29JASGlobalInstance<9JAISeqMgr>                   */
u8 data_804D505C[4];

/* 804D5060-804D5064 0004+00 s=0 e=0 z=0  None .bss       sInstance__33JASGlobalInstance<12JAIStreamMgr>               */
u8 data_804D5060[4];

/* 804D5064-804D5068 0004+00 s=0 e=0 z=0  None .bss       sInstance__31JASGlobalInstance<10Z2SoundMgr>                 */
u8 data_804D5064[4];

/* 804D5068-804D506C 0004+00 s=0 e=0 z=0  None .bss       sInstance__33JASGlobalInstance<12JAISoundInfo>               */
u8 data_804D5068[4];

/* 804D506C-804D5070 0004+00 s=0 e=0 z=0  None .bss       sInstance__34JASGlobalInstance<13JAUSoundTable>              */
u8 data_804D506C[4];

/* 804D5070-804D5074 0004+00 s=0 e=0 z=0  None .bss       sInstance__38JASGlobalInstance<17JAUSoundNameTable>          */
u8 data_804D5070[4];

/* 804D5074-804D5078 0004+00 s=0 e=0 z=0  None .bss       sInstance__33JASGlobalInstance<12JAUSoundInfo>               */
u8 data_804D5074[4];

/* 804D5078-804D507C 0004+00 s=0 e=0 z=0  None .bss       sInstance__32JASGlobalInstance<11Z2SoundInfo>                */
u8 data_804D5078[4];

/* 804D507C-804D5080 0004+00 s=0 e=0 z=0  None .bss       sInstance__34JASGlobalInstance<13Z2SoundObjMgr>              */
u8 data_804D507C[4];

/* 804D5080-804D5084 0004+00 s=0 e=0 z=0  None .bss       sInstance__31JASGlobalInstance<10Z2Audience>                 */
u8 data_804D5080[4];

/* 804D5084-804D5088 0004+00 s=0 e=0 z=0  None .bss       sInstance__32JASGlobalInstance<11Z2FxLineMgr>                */
u8 data_804D5084[4];

/* 804D5088-804D508C 0004+00 s=0 e=0 z=0  None .bss       sInstance__31JASGlobalInstance<10Z2EnvSeMgr>                 */
u8 data_804D5088[4];

/* 804D508C-804D5090 0004+00 s=0 e=0 z=0  None .bss       sInstance__32JASGlobalInstance<11Z2SpeechMgr>                */
u8 data_804D508C[4];

/* 804D5090-804D5094 0004+00 s=0 e=0 z=0  None .bss       sInstance__34JASGlobalInstance<13Z2WolfHowlMgr>              */
u8 data_804D5090[4];

/* 804D5094-804D5098 0004+00 s=0 e=0 z=0  None .bss       sInstance__35JASGlobalInstance<14JAUSectionHeap>             */
u8 data_804D5094[4];

