// 
// Generated By: dol2asm
// Translation Unit: d_a_obj_roten
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "rel/d/a/obj/d_a_obj_roten/d_a_obj_roten.h"

// 
// Types:
// 

struct request_of_phase_process_class {
};

struct mDoMtx_stack_c {
	/* 8000CE38 */ // False False
//  f32 False
//  f32 False
//  f32 False
void scaleM(f32, f32, f32);
};

struct fopAc_ac_c {
	/* 80018C8C */ // False False
~fopAc_ac_c();
};

struct daObj_Roten_c {
	/* 80CC0B58 */ // True False
void initBaseMtx();
	/* 80CC0B94 */ // True False
void setBaseMtx();
	/* 80CC0C20 */ // True False
void Create();
	/* 80CC0EC4 */ // True False
void CreateHeap();
	/* 80CC0F40 */ // True False
void create();
	/* 80CC1038 */ // True False
//  f32 (** )[3][4] False
// 	 f32 False
// 	 ** False
// 		 * False
// 			  False
void Execute(f32 (** )[3][4]);
	/* 80CC1138 */ // True False
void Draw();
	/* 80CC1254 */ // True False
void Delete();
	/* 80CC12E4 */ // True False
void getResName();
	/* 80CC1388 */ // True False
~daObj_Roten_c();
};

struct dSv_event_c {
	/* 800349BC */ // False False
//  u16 False
void isEventBit(u16) const;
};

struct cXyz {
};

struct dKy_tevstr_c {
};

struct J3DModelData {
};

struct dScnKy_env_light_c {
	/* 801A37C4 */ // False False
//  int False
//  cXyz* False
// 	 cXyz False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
void settingTevStruct(int, cXyz*, dKy_tevstr_c*);
	/* 801A4DA0 */ // False False
//  J3DModelData* False
// 	 J3DModelData False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
void setLightTevColorType_MAJI(J3DModelData*, dKy_tevstr_c*);
};

struct dRes_info_c {
};

struct dRes_control_c {
	/* 8003C2EC */ // False False
//  char const* False
// 	 char const False
// 		 char False
//  s32 False
//  dRes_info_c* False
// 	 dRes_info_c False
//  int False
void getRes(char const*, s32, dRes_info_c*, int);
};

struct dPa_levelEcallBack {
};

struct csXyz {
};

struct _GXColor {
};

struct dPa_control_c {
	/* 8004CA90 */ // False False
//  u8 False
//  u16 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u8 False
//  dPa_levelEcallBack* False
// 	 dPa_levelEcallBack False
//  s8 False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
void set(u8, u16, cXyz const*, dKy_tevstr_c const*, csXyz const*, cXyz const*, u8, dPa_levelEcallBack*, s8, _GXColor const*, _GXColor const*, cXyz const*, f32);
};

struct dBgW {
};

struct cBgS_PolyInfo {
};

struct dBgS_MoveBgActor {
	/* 80078624 */ // False False
dBgS_MoveBgActor();
	/* 800786B0 */ // False False
//  bool False
bool IsDelete();
	/* 800786B8 */ // False False
//  bool False
bool ToFore();
	/* 800786C0 */ // False False
//  bool False
bool ToBack();
	/* 800787BC */ // False False
//  char const* False
// 	 char const False
// 		 char False
//  int False
//  void (*)(dBgW*, void*, cBgS_PolyInfo const&, bool, cXyz*, csXyz*, csXyz*) False
// 	 * False
// 		  False
// 	 void False
// 	 dBgW* False
// 		 dBgW False
// 	 void* False
// 		 void False
// 	 cBgS_PolyInfo const& False
// 		 cBgS_PolyInfo const False
// 			 cBgS_PolyInfo False
// 	 bool False
// 	 cXyz* False
// 		 cXyz False
// 	 csXyz* False
// 		 csXyz False
// 	 csXyz* False
// 		 csXyz False
//  u32 False
//  f32 (* )[3][4] False
// 	 f32 False
// 	 * False
// 		  False
void MoveBGCreate(char const*, int, void (*)(dBgW*, void*, cBgS_PolyInfo const&, bool, cXyz*, csXyz*, csXyz*), u32, f32 (* )[3][4]);
	/* 800788DC */ // False False
void MoveBGDelete();
	/* 80078950 */ // False False
void MoveBGExecute();
};

struct Vec {
};

struct JAISoundID {
};

struct Z2SeMgr {
	/* 802AC50C */ // False False
//  JAISoundID False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  u32 False
//  s8 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  u8 False
void seStartLevel(JAISoundID, Vec const*, u32, s8, f32, f32, f32, f32, u8);
};

struct J3DModel {
};

// 
// Forward References:
// 

// True False
//  void* False
// 	 void False
static void daObj_Roten_Create(void*);
// True False
//  void* False
// 	 void False
static void daObj_Roten_Delete(void*);
// True False
//  void* False
// 	 void False
static void daObj_Roten_Execute(void*);
// True False
//  void* False
// 	 void False
static void daObj_Roten_Draw(void*);
// True False
//  bool False
//  void* False
// 	 void False
static bool daObj_Roten_IsDelete(void*);

// True False
extern "C" void initBaseMtx__13daObj_Roten_cFv();
// True False
extern "C" void setBaseMtx__13daObj_Roten_cFv();
// True False
extern "C" void Create__13daObj_Roten_cFv();
// True False
extern "C" void CreateHeap__13daObj_Roten_cFv();
// True False
extern "C" void create__13daObj_Roten_cFv();
// True False
//  f32 (** )[3][4] False
// 	 f32 False
// 	 ** False
// 		 * False
// 			  False
extern "C" void Execute__13daObj_Roten_cFPPA3_A4_f();
// True False
extern "C" void Draw__13daObj_Roten_cFv();
// True False
extern "C" void Delete__13daObj_Roten_cFv();
// True False
extern "C" void getResName__13daObj_Roten_cFv();
// True False
//  void* False
// 	 void False
extern "C" static void daObj_Roten_Create__FPv();
// True False
//  void* False
// 	 void False
extern "C" static void daObj_Roten_Delete__FPv();
// True False
//  void* False
// 	 void False
extern "C" static void daObj_Roten_Execute__FPv();
// True False
//  void* False
// 	 void False
extern "C" static void daObj_Roten_Draw__FPv();
// True False
//  bool False
//  void* False
// 	 void False
extern "C" static bool daObj_Roten_IsDelete__FPv();
// True False
extern "C" void __dt__13daObj_Roten_cFv();
extern "C" extern u32 const lit_3779;
extern "C" extern u32 const lit_3780;
extern "C" extern u8 const lit_3781[4];
extern "C" extern u32 const lit_3782;
extern "C" extern u32 const lit_3783;
extern "C" extern u32 const lit_3784;
extern "C" extern u32 const lit_3785;
extern "C" extern u32 const lit_3786;
extern "C" extern u32 const lit_3853;
extern "C" extern u32 const lit_3878;
extern "C" extern u32 const lit_3879;
extern "C" extern u32 const lit_3880;
extern "C" extern u32 const lit_3881;
extern "C" extern char const* const stringBase0;
extern "C" extern void* g_profile_OBJ_ROTEN[12];
extern "C" extern void* __vt__13daObj_Roten_c[11];

// 
// External References:
// 

// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
//  s16 False
//  s16 False
void mDoMtx_ZXYrotM(f32 (* )[4], s16, s16, s16);
// False False
//  J3DModel* False
// 	 J3DModel False
void mDoExt_modelUpdateDL(J3DModel*);
// False False
//  J3DModelData* False
// 	 J3DModelData False
//  u32 False
//  u32 False
void mDoExt_J3DModel__create(J3DModelData*, u32, u32);
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
void fopAcM_setCullSizeBox(fopAc_ac_c*, f32, f32, f32, f32, f32, f32);
// False False
//  request_of_phase_process_class* False
// 	 request_of_phase_process_class False
//  char const* False
// 	 char const False
// 		 char False
void dComIfG_resLoad(request_of_phase_process_class*, char const*);
// False False
//  request_of_phase_process_class* False
// 	 request_of_phase_process_class False
//  char const* False
// 	 char const False
// 		 char False
void dComIfG_resDelete(request_of_phase_process_class*, char const*);
// False False
//  int False
void dComIfGp_getReverb(int);
// False False
//  dBgW* False
// 	 dBgW False
//  void* False
// 	 void False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
//  bool False
//  cXyz* False
// 	 cXyz False
//  csXyz* False
// 	 csXyz False
//  csXyz* False
// 	 csXyz False
void dBgS_MoveBGProc_TypicalRotY(dBgW*, void*, cBgS_PolyInfo const&, bool, cXyz*, csXyz*, csXyz*);
// False False
//  cXyz* False
// 	 cXyz False
//  _GXColor* False
// 	 _GXColor False
//  f32 False
//  u8 False
void dKy_BossLight_set(cXyz*, _GXColor*, f32, u8);
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
void cLib_addCalc(f32*, f32, f32, f32, f32);
// False False
//  void False
//  void* False
// 	 void False
void operator delete(void*);

// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
//  s16 False
//  s16 False
extern "C" void mDoMtx_ZXYrotM__FPA4_fsss();
// False False
//  f32 False
//  f32 False
//  f32 False
extern "C" void scaleM__14mDoMtx_stack_cFfff();
// False False
//  J3DModel* False
// 	 J3DModel False
extern "C" void mDoExt_modelUpdateDL__FP8J3DModel();
// False False
//  J3DModelData* False
// 	 J3DModelData False
//  u32 False
//  u32 False
extern "C" void mDoExt_J3DModel__create__FP12J3DModelDataUlUl();
// False False
extern "C" void __dt__10fopAc_ac_cFv();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
extern "C" void fopAcM_setCullSizeBox__FP10fopAc_ac_cffffff();
// False False
//  request_of_phase_process_class* False
// 	 request_of_phase_process_class False
//  char const* False
// 	 char const False
// 		 char False
extern "C" void dComIfG_resLoad__FP30request_of_phase_process_classPCc();
// False False
//  request_of_phase_process_class* False
// 	 request_of_phase_process_class False
//  char const* False
// 	 char const False
// 		 char False
extern "C" void dComIfG_resDelete__FP30request_of_phase_process_classPCc();
// False False
//  int False
extern "C" void dComIfGp_getReverb__Fi();
// False False
//  u16 False
extern "C" void isEventBit__11dSv_event_cCFUs();
// False False
//  char const* False
// 	 char const False
// 		 char False
//  s32 False
//  dRes_info_c* False
// 	 dRes_info_c False
//  int False
extern "C" void getRes__14dRes_control_cFPCclP11dRes_info_ci();
// False False
//  u8 False
//  u16 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u8 False
//  dPa_levelEcallBack* False
// 	 dPa_levelEcallBack False
//  s8 False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
extern "C" void set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf();
// False False
//  dBgW* False
// 	 dBgW False
//  void* False
// 	 void False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
//  bool False
//  cXyz* False
// 	 cXyz False
//  csXyz* False
// 	 csXyz False
//  csXyz* False
// 	 csXyz False
extern "C" void dBgS_MoveBGProc_TypicalRotY__FP4dBgWPvRC13cBgS_PolyInfobP4cXyzP5csXyzP5csXyz();
// False False
extern "C" void __ct__16dBgS_MoveBgActorFv();
// False False
//  bool False
extern "C" bool IsDelete__16dBgS_MoveBgActorFv();
// False False
//  bool False
extern "C" bool ToFore__16dBgS_MoveBgActorFv();
// False False
//  bool False
extern "C" bool ToBack__16dBgS_MoveBgActorFv();
// False False
//  char const* False
// 	 char const False
// 		 char False
//  int False
//  void (*)(dBgW*, void*, cBgS_PolyInfo const&, bool, cXyz*, csXyz*, csXyz*) False
// 	 * False
// 		  False
// 	 void False
// 	 dBgW* False
// 		 dBgW False
// 	 void* False
// 		 void False
// 	 cBgS_PolyInfo const& False
// 		 cBgS_PolyInfo const False
// 			 cBgS_PolyInfo False
// 	 bool False
// 	 cXyz* False
// 		 cXyz False
// 	 csXyz* False
// 		 csXyz False
// 	 csXyz* False
// 		 csXyz False
//  u32 False
//  f32 (* )[3][4] False
// 	 f32 False
// 	 * False
// 		  False
extern "C" void MoveBGCreate__16dBgS_MoveBgActorFPCciPFP4dBgWPvRC13cBgS_PolyInfobP4cXyzP5csXyzP5csXyz_vUlPA3_A4_f();
// False False
extern "C" void MoveBGDelete__16dBgS_MoveBgActorFv();
// False False
extern "C" void MoveBGExecute__16dBgS_MoveBgActorFv();
// False False
//  int False
//  cXyz* False
// 	 cXyz False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
extern "C" void settingTevStruct__18dScnKy_env_light_cFiP4cXyzP12dKy_tevstr_c();
// False False
//  J3DModelData* False
// 	 J3DModelData False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
extern "C" void setLightTevColorType_MAJI__18dScnKy_env_light_cFP12J3DModelDataP12dKy_tevstr_c();
// False False
//  cXyz* False
// 	 cXyz False
//  _GXColor* False
// 	 _GXColor False
//  f32 False
//  u8 False
extern "C" void dKy_BossLight_set__FP4cXyzP8_GXColorfUc();
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
extern "C" void cLib_addCalc__FPfffff();
// False False
//  JAISoundID False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  u32 False
//  s8 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  u8 False
extern "C" void seStartLevel__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc();
// False False
//  void False
//  void* False
// 	 void False
extern "C" void __dl__FPv();
// False False
extern "C" void PSMTXCopy();
// False False
extern "C" void PSMTXTrans();
extern "C" extern void* g_fopAc_Method[8];
extern "C" extern void* g_fpcLf_Method[5 + 1 /* padding */];
extern "C" extern u8 saveBitLabels__16dSv_event_flag_c[1644 + 4 /* padding */];
extern "C" extern void* __vt__16dBgS_MoveBgActor[10];
extern "C" extern u8 now__14mDoMtx_stack_c[48];
extern "C" extern u8 g_dComIfG_gameInfo[122384];
extern "C" extern u8 g_env_light[4880];
extern "C" extern u8 j3dSys[284];
extern "C" extern u8 sincosTable___5JMath[65536];
extern "C" extern u8 struct_80450D64[4];
extern "C" extern u8 mAudioMgrPtr__10Z2AudioMgr[4 + 4 /* padding */];

// 
// Declarations:
// 

/* 80CC0B58-80CC0B94 003C+00 s=1 e=0 z=0  None .text      initBaseMtx__13daObj_Roten_cFv                               */
//	80CC0B80: 80CC0B94 (setBaseMtx__13daObj_Roten_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daObj_Roten_c::initBaseMtx() {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_roten/d_a_obj_roten/initBaseMtx__13daObj_Roten_cFv.s"
}
#pragma pop


/* 80CC0B94-80CC0C20 008C+00 s=2 e=0 z=0  None .text      setBaseMtx__13daObj_Roten_cFv                                */
//	80CC0BA8: 803DD470 (now__14mDoMtx_stack_c)
//	80CC0BAC: 803DD470 (now__14mDoMtx_stack_c)
//	80CC0BBC: 803468E8 (PSMTXTrans)
//	80CC0BC0: 803DD470 (now__14mDoMtx_stack_c)
//	80CC0BC4: 803DD470 (now__14mDoMtx_stack_c)
//	80CC0BD4: 8000C2A0 (mDoMtx_ZXYrotM__FPA4_fsss)
//	80CC0BD8: 803DD470 (now__14mDoMtx_stack_c)
//	80CC0BDC: 803DD470 (now__14mDoMtx_stack_c)
//	80CC0BE8: 803464B0 (PSMTXCopy)
//	80CC0BF8: 8000CE38 (scaleM__14mDoMtx_stack_cFfff)
//	80CC0BFC: 803DD470 (now__14mDoMtx_stack_c)
//	80CC0C00: 803DD470 (now__14mDoMtx_stack_c)
//	80CC0C08: 803464B0 (PSMTXCopy)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daObj_Roten_c::setBaseMtx() {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_roten/d_a_obj_roten/setBaseMtx__13daObj_Roten_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80CC1400-80CC1404 0004+00 s=2 e=0 z=0  None .rodata    @3778                                                        */
SECTION_RODATA static u32 const lit_3778 = 0x41200000;

/* 80CC0C20-80CC0EC4 02A4+00 s=1 e=0 z=0  None .text      Create__13daObj_Roten_cFv                                    */
//	80CC0C38: 80CC1400 (lit_3778)
//	80CC0C3C: 80CC1400 (lit_3778)
//	80CC0C40: 80CC0B58 (initBaseMtx__13daObj_Roten_cFv)
//	80CC0CB8: 8001A548 (fopAcM_setCullSizeBox__FP10fopAc_ac_cffffff)
//	80CC0CE4: 804061C0 (g_dComIfG_gameInfo)
//	80CC0CE8: 804061C0 (g_dComIfG_gameInfo)
//	80CC0D4C: 80439A20 (sincosTable___5JMath)
//	80CC0D50: 80439A20 (sincosTable___5JMath)
//	80CC0DFC: 804061C0 (g_dComIfG_gameInfo)
//	80CC0E00: 804061C0 (g_dComIfG_gameInfo)
//	80CC0E44: 8004CA90 (set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	80CC0E58: 804061C0 (g_dComIfG_gameInfo)
//	80CC0E5C: 804061C0 (g_dComIfG_gameInfo)
//	80CC0EA0: 8004CA90 (set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daObj_Roten_c::Create() {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_roten/d_a_obj_roten/Create__13daObj_Roten_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80CC1404-80CC1408 0004+00 s=0 e=0 z=0  None .rodata    @3779                                                        */
SECTION_RODATA u32 const lit_3779 = 0x42B40000;

/* 80CC1408-80CC140C 0004+00 s=0 e=0 z=0  None .rodata    @3780                                                        */
SECTION_RODATA u32 const lit_3780 = 0x43870000;

/* 80CC140C-80CC1410 0004+00 s=0 e=0 z=0  None .rodata    @3781                                                        */
SECTION_RODATA u8 const lit_3781[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 80CC1410-80CC1414 0004+00 s=0 e=0 z=0  None .rodata    @3782                                                        */
SECTION_RODATA u32 const lit_3782 = 0xC2A00000;

/* 80CC1414-80CC1418 0004+00 s=0 e=0 z=0  None .rodata    @3783                                                        */
SECTION_RODATA u32 const lit_3783 = 0x43310000;

/* 80CC1418-80CC141C 0004+00 s=0 e=0 z=0  None .rodata    @3784                                                        */
SECTION_RODATA u32 const lit_3784 = 0x42DC0000;

/* 80CC141C-80CC1420 0004+00 s=0 e=0 z=0  None .rodata    @3785                                                        */
SECTION_RODATA u32 const lit_3785 = 0x3ECCCCCD;

/* 80CC1420-80CC1424 0004+00 s=0 e=0 z=0  None .rodata    @3786                                                        */
SECTION_RODATA u32 const lit_3786 = 0x3E800000;

/* 80CC1424-80CC1428 0004+00 s=1 e=0 z=0  None .rodata    @3787                                                        */
SECTION_RODATA static u32 const lit_3787 = 0x3F800000;

/* 80CC1428-80CC142C 0004+00 s=1 e=0 z=0  None .rodata    @3844                                                        */
SECTION_RODATA static u32 const lit_3844 = 0xBF800000;

/* 80CC142C-80CC1430 0004+00 s=0 e=0 z=0  None .rodata    @3853                                                        */
SECTION_RODATA u32 const lit_3853 = 0xBC6642FF;

/* 80CC1430-80CC1434 0004+00 s=0 e=0 z=0  None .rodata    @3878                                                        */
SECTION_RODATA u32 const lit_3878 = 0x3F000000;

/* 80CC1434-80CC1438 0004+00 s=0 e=0 z=0  None .rodata    @3879                                                        */
SECTION_RODATA u32 const lit_3879 = 0x3DCCCCCD;

/* 80CC1438-80CC143C 0004+00 s=0 e=0 z=0  None .rodata    @3880                                                        */
SECTION_RODATA u32 const lit_3880 = 0x38D1B717;

/* 80CC143C-80CC1440 0004+00 s=0 e=0 z=0  None .rodata    @3881                                                        */
SECTION_RODATA u32 const lit_3881 = 0x358637BD;

/* 80CC1440-80CC144A 000A+00 s=1 e=0 z=0  None .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char const* const stringBase_80CC1440 = "Obj_roten";
#pragma pop

/* 80CC144C-80CC1450 0004+00 s=1 e=0 z=0  None .data      l_resFileName                                                */
SECTION_DATA static void* l_resFileName = (void*)&stringBase0;

/* 80CC1450-80CC1454 0004+00 s=1 e=0 z=0  None .data      l_bmdFileIdx                                                 */
SECTION_DATA static u32 l_bmdFileIdx = 0x00000004;

/* 80CC0EC4-80CC0F40 007C+00 s=1 e=0 z=0  None .text      CreateHeap__13daObj_Roten_cFv                                */
//	80CC0EDC: 80CC1450 (l_bmdFileIdx)
//	80CC0EE0: 80CC1450 (l_bmdFileIdx)
//	80CC0EE4: 80CC12E4 (getResName__13daObj_Roten_cFv)
//	80CC0EEC: 804061C0 (g_dComIfG_gameInfo)
//	80CC0EF0: 804061C0 (g_dComIfG_gameInfo)
//	80CC0F00: 8003C2EC (getRes__14dRes_control_cFPCclP11dRes_info_ci)
//	80CC0F10: 80014C54 (mDoExt_J3DModel__create__FP12J3DModelDataUlUl)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daObj_Roten_c::CreateHeap() {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_roten/d_a_obj_roten/CreateHeap__13daObj_Roten_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80CC1454-80CC1458 0004+00 s=1 e=0 z=0  None .data      l_dzbFileIdx                                                 */
SECTION_DATA static u32 l_dzbFileIdx = 0x00000007;

/* 80CC1458-80CC1478 0020+00 s=1 e=0 z=0  None .data      daObj_Roten_MethodTable                                      */
SECTION_DATA static void* daObj_Roten_MethodTable[8] = {
	(void*)daObj_Roten_Create__FPv,
	(void*)daObj_Roten_Delete__FPv,
	(void*)daObj_Roten_Execute__FPv,
	(void*)daObj_Roten_IsDelete__FPv,
	(void*)daObj_Roten_Draw__FPv,
	(void*)NULL,
	(void*)NULL,
	(void*)NULL,
};

/* 80CC1478-80CC14A8 0030+00 s=0 e=0 z=1  None .data      g_profile_OBJ_ROTEN                                          */
SECTION_DATA void* g_profile_OBJ_ROTEN[12] = {
	(void*)0xFFFFFFFD,
	(void*)0x0007FFFD,
	(void*)0x011F0000,
	(void*)&g_fpcLf_Method,
	(void*)0x000005C8,
	(void*)NULL,
	(void*)NULL,
	(void*)&g_fopAc_Method,
	(void*)0x00430000,
	(void*)&daObj_Roten_MethodTable,
	(void*)0x00040000,
	(void*)0x000E0000,
};

/* 80CC14A8-80CC14D4 002C+00 s=2 e=0 z=0  None .data      __vt__13daObj_Roten_c                                        */
SECTION_DATA void* __vt__13daObj_Roten_c[11] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)CreateHeap__13daObj_Roten_cFv,
	(void*)Create__13daObj_Roten_cFv,
	(void*)Execute__13daObj_Roten_cFPPA3_A4_f,
	(void*)Draw__13daObj_Roten_cFv,
	(void*)Delete__13daObj_Roten_cFv,
	(void*)IsDelete__16dBgS_MoveBgActorFv,
	(void*)ToFore__16dBgS_MoveBgActorFv,
	(void*)ToBack__16dBgS_MoveBgActorFv,
	(void*)__dt__13daObj_Roten_cFv,
};

/* 80CC0F40-80CC1038 00F8+00 s=1 e=0 z=0  None .text      create__13daObj_Roten_cFv                                    */
//	80CC0F6C: 80078624 (__ct__16dBgS_MoveBgActorFv)
//	80CC0F70: 80CC14A8 (__vt__13daObj_Roten_c)
//	80CC0F74: 80CC14A8 (__vt__13daObj_Roten_c)
//	80CC0F88: 804061C0 (g_dComIfG_gameInfo)
//	80CC0F8C: 804061C0 (g_dComIfG_gameInfo)
//	80CC0F94: 803A7288 (saveBitLabels__16dSv_event_flag_c)
//	80CC0F98: 803A7288 (saveBitLabels__16dSv_event_flag_c)
//	80CC0FA0: 800349BC (isEventBit__11dSv_event_cCFUs)
//	80CC0FB8: 80CC12E4 (getResName__13daObj_Roten_cFv)
//	80CC0FC4: 8002CEBC (dComIfG_resLoad__FP30request_of_phase_process_classPCc)
//	80CC0FD8: 80CC12E4 (getResName__13daObj_Roten_cFv)
//	80CC0FE4: 80CC1454 (l_dzbFileIdx)
//	80CC0FE8: 80CC1454 (l_dzbFileIdx)
//	80CC0FF0: 80075AD8 (dBgS_MoveBGProc_TypicalRotY__FP4dBgWPvRC13cBgS_PolyInfobP4cXyzP5csXyzP5csXyz)
//	80CC0FF4: 80075AD8 (dBgS_MoveBGProc_TypicalRotY__FP4dBgWPvRC13cBgS_PolyInfobP4cXyzP5csXyzP5csXyz)
//	80CC1000: 800787BC (MoveBGCreate__16dBgS_MoveBgActorFPCciPFP4dBgWPvRC13cBgS_PolyInfobP4cXyzP5csXyzP5csXyz_vUlPA3_A4_f)
//	80CC1018: 80078950 (MoveBGExecute__16dBgS_MoveBgActorFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daObj_Roten_c::create() {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_roten/d_a_obj_roten/func_80CC0F40.s"
}
#pragma pop


/* 80CC1038-80CC1138 0100+00 s=1 e=0 z=0  None .text      Execute__13daObj_Roten_cFPPA3_A4_f                           */
//	80CC1060: 80450D64 (struct_80450D64)
//	80CC1064: 80450D64 (struct_80450D64)
//	80CC1074: 8002D06C (dComIfGp_getReverb__Fi)
//	80CC1088: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80CC108C: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80CC10A0: 80CC1424 (lit_3787)
//	80CC10A4: 80CC1424 (lit_3787)
//	80CC10AC: 80CC1428 (lit_3844)
//	80CC10B0: 80CC1428 (lit_3844)
//	80CC10BC: 802AC50C (seStartLevel__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
//	80CC10D0: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80CC10D4: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80CC10EC: 80CC1424 (lit_3787)
//	80CC10F0: 80CC1424 (lit_3787)
//	80CC10F8: 80CC1428 (lit_3844)
//	80CC10FC: 80CC1428 (lit_3844)
//	80CC1108: 802AC50C (seStartLevel__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
//	80CC1118: 80CC0B94 (setBaseMtx__13daObj_Roten_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 (** )[3][4] False
// 	 f32 False
// 	 ** False
// 		 * False
// 			  False
asm void daObj_Roten_c::Execute(f32 (** param_0)[3][4]) {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_roten/d_a_obj_roten/Execute__13daObj_Roten_cFPPA3_A4_f.s"
}
#pragma pop


/* 80CC1138-80CC1254 011C+00 s=1 e=0 z=0  None .text      Draw__13daObj_Roten_cFv                                      */
//	80CC1150: 80CC1400 (lit_3778)
//	80CC1154: 80CC1400 (lit_3778)
//	80CC1178: 8026F97C (cLib_addCalc__FPfffff)
//	80CC1194: 8026F97C (cLib_addCalc__FPfffff)
//	80CC11C4: 801A9D60 (dKy_BossLight_set__FP4cXyzP8_GXColorfUc)
//	80CC11C8: 8042CA54 (g_env_light)
//	80CC11CC: 8042CA54 (g_env_light)
//	80CC11DC: 801A37C4 (settingTevStruct__18dScnKy_env_light_cFiP4cXyzP12dKy_tevstr_c)
//	80CC11E0: 8042CA54 (g_env_light)
//	80CC11E4: 8042CA54 (g_env_light)
//	80CC11F4: 801A4DA0 (setLightTevColorType_MAJI__18dScnKy_env_light_cFP12J3DModelDataP12dKy_tevstr_c)
//	80CC11F8: 804061C0 (g_dComIfG_gameInfo)
//	80CC11FC: 804061C0 (g_dComIfG_gameInfo)
//	80CC1204: 80434AC8 (j3dSys)
//	80CC1208: 80434AC8 (j3dSys)
//	80CC121C: 8000DCC4 (mDoExt_modelUpdateDL__FP8J3DModel)
//	80CC1220: 804061C0 (g_dComIfG_gameInfo)
//	80CC1224: 804061C0 (g_dComIfG_gameInfo)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daObj_Roten_c::Draw() {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_roten/d_a_obj_roten/Draw__13daObj_Roten_cFv.s"
}
#pragma pop


/* 80CC1254-80CC12E4 0090+00 s=1 e=0 z=0  None .text      Delete__13daObj_Roten_cFv                                    */
//	80CC12BC: 80CC12E4 (getResName__13daObj_Roten_cFv)
//	80CC12C8: 8002D008 (dComIfG_resDelete__FP30request_of_phase_process_classPCc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daObj_Roten_c::Delete() {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_roten/d_a_obj_roten/Delete__13daObj_Roten_cFv.s"
}
#pragma pop


/* 80CC12E4-80CC12F4 0010+00 s=3 e=0 z=0  None .text      getResName__13daObj_Roten_cFv                                */
//	80CC12E4: 80CC144C (l_resFileName)
//	80CC12E8: 80CC144C (l_resFileName)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daObj_Roten_c::getResName() {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_roten/d_a_obj_roten/getResName__13daObj_Roten_cFv.s"
}
#pragma pop


/* 80CC12F4-80CC1314 0020+00 s=1 e=0 z=0  None .text      daObj_Roten_Create__FPv                                      */
//	80CC1300: 80CC0F40 (create__13daObj_Roten_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  void* False
// 	 void False
asm static void daObj_Roten_Create(void* param_0) {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_roten/d_a_obj_roten/daObj_Roten_Create__FPv.s"
}
#pragma pop


/* 80CC1314-80CC1334 0020+00 s=1 e=0 z=0  None .text      daObj_Roten_Delete__FPv                                      */
//	80CC1320: 800788DC (MoveBGDelete__16dBgS_MoveBgActorFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  void* False
// 	 void False
asm static void daObj_Roten_Delete(void* param_0) {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_roten/d_a_obj_roten/daObj_Roten_Delete__FPv.s"
}
#pragma pop


/* 80CC1334-80CC1354 0020+00 s=1 e=0 z=0  None .text      daObj_Roten_Execute__FPv                                     */
//	80CC1340: 80078950 (MoveBGExecute__16dBgS_MoveBgActorFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  void* False
// 	 void False
asm static void daObj_Roten_Execute(void* param_0) {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_roten/d_a_obj_roten/daObj_Roten_Execute__FPv.s"
}
#pragma pop


/* 80CC1354-80CC1380 002C+00 s=1 e=0 z=0  None .text      daObj_Roten_Draw__FPv                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  void* False
// 	 void False
asm static void daObj_Roten_Draw(void* param_0) {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_roten/d_a_obj_roten/daObj_Roten_Draw__FPv.s"
}
#pragma pop


/* 80CC1380-80CC1388 0008+00 s=1 e=0 z=0  None .text      daObj_Roten_IsDelete__FPv                                    */
// True False
//  bool False
//  void* False
// 	 void False
static bool daObj_Roten_IsDelete(void* param_0) {
	return true;
}


/* 80CC1388-80CC13F8 0070+00 s=1 e=0 z=0  None .text      __dt__13daObj_Roten_cFv                                      */
//	80CC13A8: 80CC14A8 (__vt__13daObj_Roten_c)
//	80CC13AC: 80CC14A8 (__vt__13daObj_Roten_c)
//	80CC13B8: 803AB9A0 (__vt__16dBgS_MoveBgActor)
//	80CC13BC: 803AB9A0 (__vt__16dBgS_MoveBgActor)
//	80CC13C8: 80018C8C (__dt__10fopAc_ac_cFv)
//	80CC13D8: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm daObj_Roten_c::~daObj_Roten_c() {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_roten/d_a_obj_roten/__dt__13daObj_Roten_cFv.s"
}
#pragma pop


