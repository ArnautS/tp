// 
// Generated By: dol2asm
// Translation Unit: d_a_obj_spinLift
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "rel/d/a/obj/d_a_obj_spinLift/d_a_obj_spinLift.h"

// 
// Types:
// 

struct request_of_phase_process_class {
};

struct mDoHIO_entry_c {
	/* 80CE3DE4 */ // True False
~mDoHIO_entry_c();
};

struct fopAc_ac_c {
};

struct daSpinLift_c {
	/* 80CE3E2C */ // True False
void setBaseMtx();
	/* 80CE3E9C */ // True False
void CreateHeap();
	/* 80CE3F1C */ // True False
void create();
	/* 80CE40FC */ // True False
//  f32 (** )[3][4] False
// 	 f32 False
// 	 ** False
// 		 * False
// 			  False
void Execute(f32 (** )[3][4]);
	/* 80CE414C */ // True False
void moveLift();
	/* 80CE4290 */ // True False
void init_modeWait();
	/* 80CE429C */ // True False
//  void False
void modeWait();
	/* 80CE42A0 */ // True False
void init_modeUpMove();
	/* 80CE42C4 */ // True False
void modeUpMove();
	/* 80CE468C */ // True False
void init_modeDownMove();
	/* 80CE4698 */ // True False
void modeDownMove();
	/* 80CE4790 */ // True False
void init_modeMoveEnd();
	/* 80CE4A9C */ // True False
//  void False
void modeMoveEnd();
	/* 80CE4AA0 */ // True False
void Draw();
	/* 80CE4B44 */ // True False
void Delete();
};

struct daSpinLift_HIO_c {
	/* 80CE3DAC */ // True False
daSpinLift_HIO_c();
	/* 80CE4C10 */ // True False
~daSpinLift_HIO_c();
};

struct cXyz {
};

struct dVibration_c {
	/* 8006FA24 */ // False False
//  int False
//  int False
//  cXyz False
void StartShock(int, int, cXyz);
};

struct dSv_info_c {
	/* 80035200 */ // False False
//  int False
//  int False
void onSwitch(int, int);
	/* 80035360 */ // False False
//  int False
//  int False
void isSwitch(int, int) const;
};

struct dKy_tevstr_c {
};

struct J3DModelData {
};

struct dScnKy_env_light_c {
	/* 801A37C4 */ // False False
//  int False
//  cXyz* False
// 	 cXyz False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
void settingTevStruct(int, cXyz*, dKy_tevstr_c*);
	/* 801A4DA0 */ // False False
//  J3DModelData* False
// 	 J3DModelData False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
void setLightTevColorType_MAJI(J3DModelData*, dKy_tevstr_c*);
};

struct dRes_info_c {
};

struct dRes_control_c {
	/* 8003C2EC */ // False False
//  char const* False
// 	 char const False
// 		 char False
//  s32 False
//  dRes_info_c* False
// 	 dRes_info_c False
//  int False
void getRes(char const*, s32, dRes_info_c*, int);
};

struct dPa_levelEcallBack {
};

struct csXyz {
};

struct _GXColor {
};

struct dPa_control_c {
	/* 8004CA90 */ // False False
//  u8 False
//  u16 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u8 False
//  dPa_levelEcallBack* False
// 	 dPa_levelEcallBack False
//  s8 False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
void set(u8, u16, cXyz const*, dKy_tevstr_c const*, csXyz const*, cXyz const*, u8, dPa_levelEcallBack*, s8, _GXColor const*, _GXColor const*, cXyz const*, f32);
};

struct dBgW {
};

struct cBgS_PolyInfo {
};

struct dBgS_MoveBgActor {
	/* 80078624 */ // False False
dBgS_MoveBgActor();
	/* 80078690 */ // False False
//  bool False
bool Create();
	/* 800786B0 */ // False False
//  bool False
bool IsDelete();
	/* 800786B8 */ // False False
//  bool False
bool ToFore();
	/* 800786C0 */ // False False
//  bool False
bool ToBack();
	/* 800787BC */ // False False
//  char const* False
// 	 char const False
// 		 char False
//  int False
//  void (*)(dBgW*, void*, cBgS_PolyInfo const&, bool, cXyz*, csXyz*, csXyz*) False
// 	 * False
// 		  False
// 	 void False
// 	 dBgW* False
// 		 dBgW False
// 	 void* False
// 		 void False
// 	 cBgS_PolyInfo const& False
// 		 cBgS_PolyInfo const False
// 			 cBgS_PolyInfo False
// 	 bool False
// 	 cXyz* False
// 		 cXyz False
// 	 csXyz* False
// 		 csXyz False
// 	 csXyz* False
// 		 csXyz False
//  u32 False
//  f32 (* )[3][4] False
// 	 f32 False
// 	 * False
// 		  False
void MoveBGCreate(char const*, int, void (*)(dBgW*, void*, cBgS_PolyInfo const&, bool, cXyz*, csXyz*, csXyz*), u32, f32 (* )[3][4]);
	/* 800788DC */ // False False
void MoveBGDelete();
	/* 80078950 */ // False False
void MoveBGExecute();
};

struct Vec {
};

struct JAISoundID {
};

struct Z2SeMgr {
	/* 802AB984 */ // False False
//  JAISoundID False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  u32 False
//  s8 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  u8 False
void seStart(JAISoundID, Vec const*, u32, s8, f32, f32, f32, f32, u8);
	/* 802AC50C */ // False False
//  JAISoundID False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  u32 False
//  s8 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  u8 False
void seStartLevel(JAISoundID, Vec const*, u32, s8, f32, f32, f32, f32, u8);
};

struct J3DModel {
};

// 
// Forward References:
// 

// True False
//  daSpinLift_c* False
// 	 daSpinLift_c False
static void daSpinLift_Draw(daSpinLift_c*);
// True False
//  daSpinLift_c* False
// 	 daSpinLift_c False
static void daSpinLift_Execute(daSpinLift_c*);
// True False
//  daSpinLift_c* False
// 	 daSpinLift_c False
static void daSpinLift_Delete(daSpinLift_c*);
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
static void daSpinLift_Create(fopAc_ac_c*);

// True False
extern "C" void __ct__16daSpinLift_HIO_cFv();
// True False
extern "C" void __dt__14mDoHIO_entry_cFv();
// True False
extern "C" void setBaseMtx__12daSpinLift_cFv();
// True False
extern "C" void CreateHeap__12daSpinLift_cFv();
// True False
extern "C" void create__12daSpinLift_cFv();
// True False
//  f32 (** )[3][4] False
// 	 f32 False
// 	 ** False
// 		 * False
// 			  False
extern "C" void Execute__12daSpinLift_cFPPA3_A4_f();
// True False
extern "C" void moveLift__12daSpinLift_cFv();
// True False
extern "C" void init_modeWait__12daSpinLift_cFv();
// True False
//  void False
extern "C" void modeWait__12daSpinLift_cFv();
// True False
extern "C" void init_modeUpMove__12daSpinLift_cFv();
// True False
extern "C" void modeUpMove__12daSpinLift_cFv();
// True False
extern "C" void init_modeDownMove__12daSpinLift_cFv();
// True False
extern "C" void modeDownMove__12daSpinLift_cFv();
// True False
extern "C" void init_modeMoveEnd__12daSpinLift_cFv();
// True False
//  void False
extern "C" void modeMoveEnd__12daSpinLift_cFv();
// True False
extern "C" void Draw__12daSpinLift_cFv();
// True False
extern "C" void Delete__12daSpinLift_cFv();
// True False
//  daSpinLift_c* False
// 	 daSpinLift_c False
extern "C" static void daSpinLift_Draw__FP12daSpinLift_c();
// True False
//  daSpinLift_c* False
// 	 daSpinLift_c False
extern "C" static void daSpinLift_Execute__FP12daSpinLift_c();
// True False
//  daSpinLift_c* False
// 	 daSpinLift_c False
extern "C" static void daSpinLift_Delete__FP12daSpinLift_c();
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
extern "C" static void daSpinLift_Create__FP10fopAc_ac_c();
// True False
extern "C" void __dt__16daSpinLift_HIO_cFv();
// False False
extern "C" void __sinit_d_a_obj_spinLift_cpp();
extern "C" extern u32 const lit_3877;
extern "C" extern u32 const lit_3878;
extern "C" extern u32 const lit_3879;
extern "C" extern u32 const lit_3880;
extern "C" extern u32 const lit_3907;
extern "C" extern u32 lit_1787[1 + 4 /* padding */];
extern "C" extern void* lit_3749[3];
extern "C" extern void* lit_3750[3];
extern "C" extern void* lit_3751[3];
extern "C" extern void* lit_3752[3];
extern "C" extern u8 data_80CE4DFC[48];
extern "C" extern void* g_profile_Obj_SpinLift[12];
extern "C" extern void* __vt__12daSpinLift_c[10];
extern "C" extern void* __vt__16daSpinLift_HIO_c[3];
extern "C" extern void* __vt__14mDoHIO_entry_c[3];

// 
// External References:
// 

// False False
//  J3DModel* False
// 	 J3DModel False
void mDoExt_modelUpdateDL(J3DModel*);
// False False
//  J3DModelData* False
// 	 J3DModelData False
//  u32 False
//  u32 False
void mDoExt_J3DModel__create(J3DModelData*, u32, u32);
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  J3DModelData* False
// 	 J3DModelData False
void fopAcM_setCullSizeBox2(fopAc_ac_c*, J3DModelData*);
// False False
//  request_of_phase_process_class* False
// 	 request_of_phase_process_class False
//  char const* False
// 	 char const False
// 		 char False
void dComIfG_resLoad(request_of_phase_process_class*, char const*);
// False False
//  request_of_phase_process_class* False
// 	 request_of_phase_process_class False
//  char const* False
// 	 char const False
// 		 char False
void dComIfG_resDelete(request_of_phase_process_class*, char const*);
// False False
//  int False
void dComIfGp_getReverb(int);
// False False
//  dBgW* False
// 	 dBgW False
//  void* False
// 	 void False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
//  bool False
//  cXyz* False
// 	 cXyz False
//  csXyz* False
// 	 csXyz False
//  csXyz* False
// 	 csXyz False
void dBgS_MoveBGProc_TypicalRotY(dBgW*, void*, cBgS_PolyInfo const&, bool, cXyz*, csXyz*, csXyz*);
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
void cLib_addCalc(f32*, f32, f32, f32, f32);
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
void cLib_chaseF(f32*, f32, f32);
// False False
//  void False
//  void* False
// 	 void False
void operator delete(void*);

// False False
//  J3DModel* False
// 	 J3DModel False
extern "C" void mDoExt_modelUpdateDL__FP8J3DModel();
// False False
//  J3DModelData* False
// 	 J3DModelData False
//  u32 False
//  u32 False
extern "C" void mDoExt_J3DModel__create__FP12J3DModelDataUlUl();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  J3DModelData* False
// 	 J3DModelData False
extern "C" void fopAcM_setCullSizeBox2__FP10fopAc_ac_cP12J3DModelData();
// False False
//  request_of_phase_process_class* False
// 	 request_of_phase_process_class False
//  char const* False
// 	 char const False
// 		 char False
extern "C" void dComIfG_resLoad__FP30request_of_phase_process_classPCc();
// False False
//  request_of_phase_process_class* False
// 	 request_of_phase_process_class False
//  char const* False
// 	 char const False
// 		 char False
extern "C" void dComIfG_resDelete__FP30request_of_phase_process_classPCc();
// False False
//  int False
extern "C" void dComIfGp_getReverb__Fi();
// False False
//  int False
//  int False
extern "C" void onSwitch__10dSv_info_cFii();
// False False
//  int False
//  int False
extern "C" void isSwitch__10dSv_info_cCFii();
// False False
//  char const* False
// 	 char const False
// 		 char False
//  s32 False
//  dRes_info_c* False
// 	 dRes_info_c False
//  int False
extern "C" void getRes__14dRes_control_cFPCclP11dRes_info_ci();
// False False
//  u8 False
//  u16 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u8 False
//  dPa_levelEcallBack* False
// 	 dPa_levelEcallBack False
//  s8 False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
extern "C" void set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf();
// False False
//  int False
//  int False
//  cXyz False
extern "C" void StartShock__12dVibration_cFii4cXyz();
// False False
//  dBgW* False
// 	 dBgW False
//  void* False
// 	 void False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
//  bool False
//  cXyz* False
// 	 cXyz False
//  csXyz* False
// 	 csXyz False
//  csXyz* False
// 	 csXyz False
extern "C" void dBgS_MoveBGProc_TypicalRotY__FP4dBgWPvRC13cBgS_PolyInfobP4cXyzP5csXyzP5csXyz();
// False False
extern "C" void __ct__16dBgS_MoveBgActorFv();
// False False
//  bool False
extern "C" bool Create__16dBgS_MoveBgActorFv();
// False False
//  bool False
extern "C" bool IsDelete__16dBgS_MoveBgActorFv();
// False False
//  bool False
extern "C" bool ToFore__16dBgS_MoveBgActorFv();
// False False
//  bool False
extern "C" bool ToBack__16dBgS_MoveBgActorFv();
// False False
//  char const* False
// 	 char const False
// 		 char False
//  int False
//  void (*)(dBgW*, void*, cBgS_PolyInfo const&, bool, cXyz*, csXyz*, csXyz*) False
// 	 * False
// 		  False
// 	 void False
// 	 dBgW* False
// 		 dBgW False
// 	 void* False
// 		 void False
// 	 cBgS_PolyInfo const& False
// 		 cBgS_PolyInfo const False
// 			 cBgS_PolyInfo False
// 	 bool False
// 	 cXyz* False
// 		 cXyz False
// 	 csXyz* False
// 		 csXyz False
// 	 csXyz* False
// 		 csXyz False
//  u32 False
//  f32 (* )[3][4] False
// 	 f32 False
// 	 * False
// 		  False
extern "C" void MoveBGCreate__16dBgS_MoveBgActorFPCciPFP4dBgWPvRC13cBgS_PolyInfobP4cXyzP5csXyzP5csXyz_vUlPA3_A4_f();
// False False
extern "C" void MoveBGDelete__16dBgS_MoveBgActorFv();
// False False
extern "C" void MoveBGExecute__16dBgS_MoveBgActorFv();
// False False
//  int False
//  cXyz* False
// 	 cXyz False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
extern "C" void settingTevStruct__18dScnKy_env_light_cFiP4cXyzP12dKy_tevstr_c();
// False False
//  J3DModelData* False
// 	 J3DModelData False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
extern "C" void setLightTevColorType_MAJI__18dScnKy_env_light_cFP12J3DModelDataP12dKy_tevstr_c();
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
extern "C" void cLib_addCalc__FPfffff();
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
extern "C" void cLib_chaseF__FPfff();
// False False
//  JAISoundID False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  u32 False
//  s8 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  u8 False
extern "C" void seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc();
// False False
//  JAISoundID False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  u32 False
//  s8 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  u8 False
extern "C" void seStartLevel__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc();
// False False
//  void False
//  void* False
// 	 void False
extern "C" void __dl__FPv();
// False False
extern "C" void PSMTXCopy();
// False False
extern "C" void PSMTXTrans();
// False False
extern "C" void __ptmf_scall();
// False False
extern "C" void _savegpr_29();
// False False
extern "C" void _restgpr_29();
extern "C" extern void* g_fopAc_Method[8];
extern "C" extern void* g_fpcLf_Method[5 + 1 /* padding */];
extern "C" extern u8 now__14mDoMtx_stack_c[48];
extern "C" extern u8 g_dComIfG_gameInfo[122384];
extern "C" extern u8 g_env_light[4880];
extern "C" extern u8 j3dSys[284];
extern "C" extern u8 mAudioMgrPtr__10Z2AudioMgr[4 + 4 /* padding */];
// False False
extern "C" void __register_global_object();

// 
// Declarations:
// 

/* ############################################################################################## */
/* 80CE4CBC-80CE4CC0 0004+00 s=4 e=0 z=0  None .rodata    @3637                                                        */
SECTION_RODATA static u8 const lit_3637[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 80CE4CC0-80CE4CE4 0024+00 s=1 e=0 z=0  None .rodata    l_bmdIdx                                                     */
SECTION_RODATA static u8 const l_bmdIdx[36] = {
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04,
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04,
	0x00, 0x00, 0x00, 0x04,
};

/* 80CE4CE4-80CE4D08 0024+00 s=1 e=0 z=0  None .rodata    l_dzbIdx                                                     */
SECTION_RODATA static u8 const l_dzbIdx[36] = {
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07,
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07,
	0x00, 0x00, 0x00, 0x07,
};

/* 80CE4D08-80CE4D0C 0004+00 s=1 e=0 z=0  None .rodata    @3731                                                        */
SECTION_RODATA static u32 const lit_3731 = 0x42480000;

/* 80CE4D0C-80CE4D14 0008+00 s=1 e=0 z=0  None .rodata    @3733                                                        */
SECTION_RODATA static u8 const lit_3733[8] = {
	0x43, 0x30, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
};

/* 80CE4D14-80CE4D1C 0008+00 s=1 e=0 z=0  None .rodata    @3735                                                        */
SECTION_RODATA static u8 const lit_3735[8] = {
	0x43, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 80CE4D1C-80CE4D20 0004+00 s=0 e=0 z=0  None .rodata    @3877                                                        */
SECTION_RODATA u32 const lit_3877 = 0x41F00000;

/* 80CE4D20-80CE4D24 0004+00 s=0 e=0 z=0  None .rodata    @3878                                                        */
SECTION_RODATA u32 const lit_3878 = 0x3F800000;

/* 80CE4D24-80CE4D28 0004+00 s=0 e=0 z=0  None .rodata    @3879                                                        */
SECTION_RODATA u32 const lit_3879 = 0x3DCCCCCD;

/* 80CE4D28-80CE4D2C 0004+00 s=0 e=0 z=0  None .rodata    @3880                                                        */
SECTION_RODATA u32 const lit_3880 = 0xBF800000;

/* 80CE4D2C-80CE4D30 0004+00 s=0 e=0 z=0  None .rodata    @3907                                                        */
SECTION_RODATA u32 const lit_3907 = 0x3E99999A;

/* 80CE4D30-80CE4D44 0014+00 s=1 e=0 z=0  None .rodata    None                                                         */
SECTION_RODATA static u8 const struct_80CE4D30[20] = {
	/* 80CE4D30 000A stringBase_80CE4D30 @stringBase0 */
	0x4C, 0x34, 0x5F, 0x4E, 0x5F, 0x45, 0x6E, 0x74, 0x72, 0x00,
	/* 80CE4D3A 000A data_80CE4D3A None */
	0x4C, 0x34, 0x5F, 0x4E, 0x5F, 0x53, 0x6C, 0x70, 0x48, 0x00,
};

/* 80CE4D44-80CE4D58 0014+00 s=1 e=0 z=0  None .rodata    None                                                         */
SECTION_RODATA static u8 const struct_80CE4D44[20] = {
	/* 80CE4D44 000A data_80CE4D44 None */
	0x4C, 0x34, 0x5F, 0x4E, 0x5F, 0x53, 0x6C, 0x70, 0x4C, 0x00,
	/* 80CE4D4E 000A data_80CE4D4E None */
	0x4C, 0x34, 0x5F, 0x43, 0x65, 0x6E, 0x74, 0x65, 0x72, 0x00,
};

/* 80CE4D58-80CE4D88 0030+00 s=1 e=0 z=0  None .rodata    None                                                         */
SECTION_RODATA static u8 const struct_80CE4D58[48] = {
	/* 80CE4D58 000A data_80CE4D58 None */
	0x4C, 0x34, 0x5F, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x00,
	/* 80CE4D62 0009 data_80CE4D62 None */
	0x4C, 0x34, 0x5F, 0x53, 0x5F, 0x53, 0x6C, 0x70, 0x00,
	/* 80CE4D6B 000A data_80CE4D6B None */
	0x4C, 0x34, 0x5F, 0x57, 0x61, 0x6C, 0x5F, 0x5A, 0x45, 0x00,
	/* 80CE4D75 000A data_80CE4D75 None */
	0x4C, 0x34, 0x5F, 0x57, 0x61, 0x6C, 0x5F, 0x5A, 0x57, 0x00,
	/* 80CE4D7F 0009 data_80CE4D7F None */
	0x4C, 0x34, 0x5F, 0x57, 0x61, 0x6C, 0x5F, 0x58, 0x00,
};

/* 80CE4D88-80CE4D94 000C+00 s=1 e=0 z=0  None .data      cNullVec__6Z2Calc                                            */
SECTION_DATA static u8 cNullVec__6Z2Calc[12] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 80CE4D94-80CE4DA8 0004+10 s=0 e=0 z=0  None .data      @1787                                                        */
SECTION_DATA u32 lit_1787[1 + 4 /* padding */] = {
	0x02000201,
	/* padding */
	0x40080000, 0x00000000, 0x3FE00000, 0x00000000,
};

/* 80CE4DA8-80CE4DCC 0024+00 s=3 e=0 z=0  None .data      l_resNameIdx                                                 */
SECTION_DATA static void* l_resNameIdx[9] = {
	(void*)(((char*)&struct_80CE4D30)+0x0) /* @stringBase0 */,
	(void*)(((char*)&struct_80CE4D30)+0xA) /* None */,
	(void*)(((char*)&struct_80CE4D44)+0x0) /* None */,
	(void*)(((char*)&struct_80CE4D44)+0xA) /* None */,
	(void*)(((char*)&struct_80CE4D58)+0x0) /* None */,
	(void*)(((char*)&struct_80CE4D58)+0xA) /* None */,
	(void*)(((char*)&struct_80CE4D58)+0x13) /* None */,
	(void*)(((char*)&struct_80CE4D58)+0x1D) /* None */,
	(void*)(((char*)&struct_80CE4D58)+0x27) /* None */,
};

/* 80CE4DCC-80CE4DD8 000C+00 s=0 e=0 z=0  None .data      @3749                                                        */
SECTION_DATA void* lit_3749[3] = {
	(void*)NULL,
	(void*)0xFFFFFFFF,
	(void*)modeWait__12daSpinLift_cFv,
};

/* 80CE4DD8-80CE4DE4 000C+00 s=0 e=0 z=0  None .data      @3750                                                        */
SECTION_DATA void* lit_3750[3] = {
	(void*)NULL,
	(void*)0xFFFFFFFF,
	(void*)modeUpMove__12daSpinLift_cFv,
};

/* 80CE4DE4-80CE4DF0 000C+00 s=0 e=0 z=0  None .data      @3751                                                        */
SECTION_DATA void* lit_3751[3] = {
	(void*)NULL,
	(void*)0xFFFFFFFF,
	(void*)modeDownMove__12daSpinLift_cFv,
};

/* 80CE4DF0-80CE4DFC 000C+00 s=0 e=0 z=0  None .data      @3752                                                        */
SECTION_DATA void* lit_3752[3] = {
	(void*)NULL,
	(void*)0xFFFFFFFF,
	(void*)modeMoveEnd__12daSpinLift_cFv,
};

/* 80CE4DFC-80CE4E2C 0030+00 s=0 e=0 z=0  None .data      mode_proc$3748                                               */
SECTION_DATA u8 data_80CE4DFC[48] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 80CE4E2C-80CE4E4C 0020+00 s=1 e=0 z=0  None .data      l_daSpinLift_Method                                          */
SECTION_DATA static void* l_daSpinLift_Method[8] = {
	(void*)daSpinLift_Create__FP10fopAc_ac_c,
	(void*)daSpinLift_Delete__FP12daSpinLift_c,
	(void*)daSpinLift_Execute__FP12daSpinLift_c,
	(void*)NULL,
	(void*)daSpinLift_Draw__FP12daSpinLift_c,
	(void*)NULL,
	(void*)NULL,
	(void*)NULL,
};

/* 80CE4E4C-80CE4E7C 0030+00 s=0 e=0 z=1  None .data      g_profile_Obj_SpinLift                                       */
SECTION_DATA void* g_profile_Obj_SpinLift[12] = {
	(void*)0xFFFFFFFD,
	(void*)0x0003FFFD,
	(void*)0x00410000,
	(void*)&g_fpcLf_Method,
	(void*)0x000005C0,
	(void*)NULL,
	(void*)NULL,
	(void*)&g_fopAc_Method,
	(void*)0x02000000,
	(void*)&l_daSpinLift_Method,
	(void*)0x00040100,
	(void*)0x000E0000,
};

/* 80CE4E7C-80CE4EA4 0028+00 s=1 e=0 z=0  None .data      __vt__12daSpinLift_c                                         */
SECTION_DATA void* __vt__12daSpinLift_c[10] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)CreateHeap__12daSpinLift_cFv,
	(void*)Create__16dBgS_MoveBgActorFv,
	(void*)Execute__12daSpinLift_cFPPA3_A4_f,
	(void*)Draw__12daSpinLift_cFv,
	(void*)Delete__12daSpinLift_cFv,
	(void*)IsDelete__16dBgS_MoveBgActorFv,
	(void*)ToFore__16dBgS_MoveBgActorFv,
	(void*)ToBack__16dBgS_MoveBgActorFv,
};

/* 80CE4EA4-80CE4EB0 000C+00 s=2 e=0 z=0  None .data      __vt__16daSpinLift_HIO_c                                     */
SECTION_DATA void* __vt__16daSpinLift_HIO_c[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__16daSpinLift_HIO_cFv,
};

/* 80CE4EB0-80CE4EBC 000C+00 s=3 e=0 z=0  None .data      __vt__14mDoHIO_entry_c                                       */
SECTION_DATA void* __vt__14mDoHIO_entry_c[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__14mDoHIO_entry_cFv,
};

/* 80CE3DAC-80CE3DE4 0038+00 s=1 e=0 z=0  None .text      __ct__16daSpinLift_HIO_cFv                                   */
//	80CE3DAC: 80CE4EB0 (__vt__14mDoHIO_entry_c)
//	80CE3DB0: 80CE4EB0 (__vt__14mDoHIO_entry_c)
//	80CE3DB8: 80CE4EA4 (__vt__16daSpinLift_HIO_c)
//	80CE3DBC: 80CE4EA4 (__vt__16daSpinLift_HIO_c)
//	80CE3DCC: 80CE4CBC (lit_3637)
//	80CE3DD0: 80CE4CBC (lit_3637)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm daSpinLift_HIO_c::daSpinLift_HIO_c() {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_spinLift/d_a_obj_spinLift/__ct__16daSpinLift_HIO_cFv.s"
}
#pragma pop


/* 80CE3DE4-80CE3E2C 0048+00 s=1 e=0 z=0  None .text      __dt__14mDoHIO_entry_cFv                                     */
//	80CE3DFC: 80CE4EB0 (__vt__14mDoHIO_entry_c)
//	80CE3E00: 80CE4EB0 (__vt__14mDoHIO_entry_c)
//	80CE3E10: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm mDoHIO_entry_c::~mDoHIO_entry_c() {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_spinLift/d_a_obj_spinLift/__dt__14mDoHIO_entry_cFv.s"
}
#pragma pop


/* 80CE3E2C-80CE3E9C 0070+00 s=2 e=0 z=0  None .text      setBaseMtx__12daSpinLift_cFv                                 */
//	80CE3E40: 803DD470 (now__14mDoMtx_stack_c)
//	80CE3E44: 803DD470 (now__14mDoMtx_stack_c)
//	80CE3E54: 803468E8 (PSMTXTrans)
//	80CE3E74: 803DD470 (now__14mDoMtx_stack_c)
//	80CE3E78: 803DD470 (now__14mDoMtx_stack_c)
//	80CE3E84: 803464B0 (PSMTXCopy)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinLift_c::setBaseMtx() {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_spinLift/d_a_obj_spinLift/setBaseMtx__12daSpinLift_cFv.s"
}
#pragma pop


/* 80CE3E9C-80CE3F1C 0080+00 s=1 e=0 z=0  None .text      CreateHeap__12daSpinLift_cFv                                 */
//	80CE3EB8: 80CE4DA8 (l_resNameIdx)
//	80CE3EBC: 80CE4DA8 (l_resNameIdx)
//	80CE3EC4: 80CE4CC0 (l_bmdIdx)
//	80CE3EC8: 80CE4CC0 (l_bmdIdx)
//	80CE3ED0: 804061C0 (g_dComIfG_gameInfo)
//	80CE3ED4: 804061C0 (g_dComIfG_gameInfo)
//	80CE3EE4: 8003C2EC (getRes__14dRes_control_cFPCclP11dRes_info_ci)
//	80CE3EF4: 80014C54 (mDoExt_J3DModel__create__FP12J3DModelDataUlUl)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinLift_c::CreateHeap() {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_spinLift/d_a_obj_spinLift/CreateHeap__12daSpinLift_cFv.s"
}
#pragma pop


/* 80CE3F1C-80CE40FC 01E0+00 s=1 e=0 z=0  None .text      create__12daSpinLift_cFv                                     */
//	80CE3F48: 80078624 (__ct__16dBgS_MoveBgActorFv)
//	80CE3F4C: 80CE4E7C (__vt__12daSpinLift_c)
//	80CE3F50: 80CE4E7C (__vt__12daSpinLift_c)
//	80CE3F78: 80CE4DA8 (l_resNameIdx)
//	80CE3F7C: 80CE4DA8 (l_resNameIdx)
//	80CE3F84: 8002CEBC (dComIfG_resLoad__FP30request_of_phase_process_classPCc)
//	80CE3FA0: 80CE4DA8 (l_resNameIdx)
//	80CE3FA4: 80CE4DA8 (l_resNameIdx)
//	80CE3FAC: 80CE4CE4 (l_dzbIdx)
//	80CE3FB0: 80CE4CE4 (l_dzbIdx)
//	80CE3FB8: 80075AD8 (dBgS_MoveBGProc_TypicalRotY__FP4dBgWPvRC13cBgS_PolyInfobP4cXyzP5csXyzP5csXyz)
//	80CE3FBC: 80075AD8 (dBgS_MoveBGProc_TypicalRotY__FP4dBgWPvRC13cBgS_PolyInfobP4cXyzP5csXyzP5csXyz)
//	80CE3FCC: 800787BC (MoveBGCreate__16dBgS_MoveBgActorFPCciPFP4dBgWPvRC13cBgS_PolyInfobP4cXyzP5csXyzP5csXyz_vUlPA3_A4_f)
//	80CE3FF8: 8001A578 (fopAcM_setCullSizeBox2__FP10fopAc_ac_cP12J3DModelData)
//	80CE3FFC: 80CE4D08 (lit_3731)
//	80CE4000: 80CE4D08 (lit_3731)
//	80CE4010: 80CE4D0C (lit_3733)
//	80CE4014: 80CE4D0C (lit_3733)
//	80CE4044: 80CE4D14 (lit_3735)
//	80CE4048: 80CE4D14 (lit_3735)
//	80CE4078: 804061C0 (g_dComIfG_gameInfo)
//	80CE407C: 804061C0 (g_dComIfG_gameInfo)
//	80CE4088: 80035360 (isSwitch__10dSv_info_cCFii)
//	80CE4098: 804061C0 (g_dComIfG_gameInfo)
//	80CE409C: 804061C0 (g_dComIfG_gameInfo)
//	80CE40A8: 80035360 (isSwitch__10dSv_info_cCFii)
//	80CE40C8: 80CE4790 (init_modeMoveEnd__12daSpinLift_cFv)
//	80CE40D4: 80CE4290 (init_modeWait__12daSpinLift_cFv)
//	80CE40DC: 80CE3E2C (setBaseMtx__12daSpinLift_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinLift_c::create() {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_spinLift/d_a_obj_spinLift/create__12daSpinLift_cFv.s"
}
#pragma pop


/* 80CE40FC-80CE414C 0050+00 s=1 e=0 z=0  None .text      Execute__12daSpinLift_cFPPA3_A4_f                            */
//	80CE4118: 80CE414C (moveLift__12daSpinLift_cFv)
//	80CE412C: 80CE3E2C (setBaseMtx__12daSpinLift_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 (** )[3][4] False
// 	 f32 False
// 	 ** False
// 		 * False
// 			  False
asm void daSpinLift_c::Execute(f32 (** param_0)[3][4]) {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_spinLift/d_a_obj_spinLift/Execute__12daSpinLift_cFPPA3_A4_f.s"
}
#pragma pop


/* ############################################################################################## */
/* 80CE4EC8-80CE4ED4 000C+00 s=1 e=0 z=0  None .bss       @3631                                                        */
static u8 lit_3631[12];

/* 80CE4ED4-80CE4EE4 0010+00 s=4 e=0 z=0  None .bss       l_HIO                                                        */
static u8 l_HIO[16];

/* 80CE4EE4-80CE4EE8 0004+00 s=1 e=0 z=0  None .bss       None                                                         */
static u8 data_80CE4EE4[4];

/* 80CE414C-80CE4290 0144+00 s=1 e=0 z=0  None .text      moveLift__12daSpinLift_cFv                                   */
//	80CE415C: 803621DC (_savegpr_29)
//	80CE4164: 80CE4D88 (cNullVec__6Z2Calc)
//	80CE4168: 80CE4D88 (cNullVec__6Z2Calc)
//	80CE416C: 80CE4EE4 (data_80CE4EE4)
//	80CE4170: 80CE4EE4 (data_80CE4EE4)
//	80CE41F4: 804061C0 (g_dComIfG_gameInfo)
//	80CE41F8: 804061C0 (g_dComIfG_gameInfo)
//	80CE4204: 80035360 (isSwitch__10dSv_info_cCFii)
//	80CE421C: 804061C0 (g_dComIfG_gameInfo)
//	80CE4220: 804061C0 (g_dComIfG_gameInfo)
//	80CE422C: 80035360 (isSwitch__10dSv_info_cCFii)
//	80CE424C: 80CE42A0 (init_modeUpMove__12daSpinLift_cFv)
//	80CE4258: 80CE468C (init_modeDownMove__12daSpinLift_cFv)
//	80CE4270: 80362084 (__ptmf_scall)
//	80CE427C: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinLift_c::moveLift() {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_spinLift/d_a_obj_spinLift/moveLift__12daSpinLift_cFv.s"
}
#pragma pop


/* 80CE4290-80CE429C 000C+00 s=3 e=0 z=0  None .text      init_modeWait__12daSpinLift_cFv                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinLift_c::init_modeWait() {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_spinLift/d_a_obj_spinLift/init_modeWait__12daSpinLift_cFv.s"
}
#pragma pop


/* 80CE429C-80CE42A0 0004+00 s=1 e=0 z=0  None .text      modeWait__12daSpinLift_cFv                                   */
// True False
//  void False
void daSpinLift_c::modeWait() {
	/* empty function */
}


/* 80CE42A0-80CE42C4 0024+00 s=1 e=0 z=0  None .text      init_modeUpMove__12daSpinLift_cFv                            */
//	80CE42A0: 80CE4ED4 (l_HIO)
//	80CE42A4: 80CE4ED4 (l_HIO)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinLift_c::init_modeUpMove() {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_spinLift/d_a_obj_spinLift/init_modeUpMove__12daSpinLift_cFv.s"
}
#pragma pop


/* 80CE42C4-80CE468C 03C8+00 s=1 e=0 z=0  None .text      modeUpMove__12daSpinLift_cFv                                 */
//	80CE42DC: 803621DC (_savegpr_29)
//	80CE42E4: 80CE4CBC (lit_3637)
//	80CE42E8: 80CE4CBC (lit_3637)
//	80CE4314: 80270740 (cLib_chaseF__FPfff)
//	80CE4334: 8026F97C (cLib_addCalc__FPfffff)
//	80CE4368: 8002D06C (dComIfGp_getReverb__Fi)
//	80CE437C: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80CE4380: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80CE43A8: 802AC50C (seStartLevel__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
//	80CE43D0: 80CE4790 (init_modeMoveEnd__12daSpinLift_cFv)
//	80CE43E4: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80CE43E8: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80CE4414: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
//	80CE442C: 804061C0 (g_dComIfG_gameInfo)
//	80CE4430: 804061C0 (g_dComIfG_gameInfo)
//	80CE4438: 80CE4ED4 (l_HIO)
//	80CE443C: 80CE4ED4 (l_HIO)
//	80CE444C: 8006FA24 (StartShock__12dVibration_cFii4cXyz)
//	80CE4468: 804061C0 (g_dComIfG_gameInfo)
//	80CE446C: 804061C0 (g_dComIfG_gameInfo)
//	80CE44B0: 8004CA90 (set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	80CE44F8: 8004CA90 (set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	80CE4540: 8004CA90 (set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	80CE4588: 8004CA90 (set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	80CE45D0: 8004CA90 (set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	80CE4618: 8004CA90 (set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	80CE4660: 8004CA90 (set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	80CE4668: 80CE4290 (init_modeWait__12daSpinLift_cFv)
//	80CE4678: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinLift_c::modeUpMove() {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_spinLift/d_a_obj_spinLift/modeUpMove__12daSpinLift_cFv.s"
}
#pragma pop


/* 80CE468C-80CE4698 000C+00 s=1 e=0 z=0  None .text      init_modeDownMove__12daSpinLift_cFv                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinLift_c::init_modeDownMove() {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_spinLift/d_a_obj_spinLift/init_modeDownMove__12daSpinLift_cFv.s"
}
#pragma pop


/* 80CE4698-80CE4790 00F8+00 s=1 e=0 z=0  None .text      modeDownMove__12daSpinLift_cFv                               */
//	80CE46B8: 80CE4CBC (lit_3637)
//	80CE46BC: 80CE4CBC (lit_3637)
//	80CE46D4: 8026F97C (cLib_addCalc__FPfffff)
//	80CE4718: 8002D06C (dComIfGp_getReverb__Fi)
//	80CE472C: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80CE4730: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80CE4758: 802AC50C (seStartLevel__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
//	80CE476C: 80CE4290 (init_modeWait__12daSpinLift_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinLift_c::modeDownMove() {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_spinLift/d_a_obj_spinLift/modeDownMove__12daSpinLift_cFv.s"
}
#pragma pop


/* 80CE4790-80CE4A9C 030C+00 s=2 e=0 z=0  None .text      init_modeMoveEnd__12daSpinLift_cFv                           */
//	80CE47A0: 803621DC (_savegpr_29)
//	80CE47A8: 80CE4CBC (lit_3637)
//	80CE47AC: 80CE4CBC (lit_3637)
//	80CE47B8: 804061C0 (g_dComIfG_gameInfo)
//	80CE47BC: 804061C0 (g_dComIfG_gameInfo)
//	80CE47C8: 80035360 (isSwitch__10dSv_info_cCFii)
//	80CE47DC: 804061C0 (g_dComIfG_gameInfo)
//	80CE47E0: 804061C0 (g_dComIfG_gameInfo)
//	80CE47EC: 80035200 (onSwitch__10dSv_info_cFii)
//	80CE47FC: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80CE4800: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80CE482C: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
//	80CE4844: 804061C0 (g_dComIfG_gameInfo)
//	80CE4848: 804061C0 (g_dComIfG_gameInfo)
//	80CE4850: 80CE4ED4 (l_HIO)
//	80CE4854: 80CE4ED4 (l_HIO)
//	80CE4864: 8006FA24 (StartShock__12dVibration_cFii4cXyz)
//	80CE4880: 804061C0 (g_dComIfG_gameInfo)
//	80CE4884: 804061C0 (g_dComIfG_gameInfo)
//	80CE48C8: 8004CA90 (set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	80CE4910: 8004CA90 (set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	80CE4958: 8004CA90 (set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	80CE49A0: 8004CA90 (set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	80CE49E8: 8004CA90 (set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	80CE4A30: 8004CA90 (set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	80CE4A78: 8004CA90 (set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	80CE4A88: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinLift_c::init_modeMoveEnd() {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_spinLift/d_a_obj_spinLift/init_modeMoveEnd__12daSpinLift_cFv.s"
}
#pragma pop


/* 80CE4A9C-80CE4AA0 0004+00 s=1 e=0 z=0  None .text      modeMoveEnd__12daSpinLift_cFv                                */
// True False
//  void False
void daSpinLift_c::modeMoveEnd() {
	/* empty function */
}


/* 80CE4AA0-80CE4B44 00A4+00 s=1 e=0 z=0  None .text      Draw__12daSpinLift_cFv                                       */
//	80CE4AB8: 8042CA54 (g_env_light)
//	80CE4ABC: 8042CA54 (g_env_light)
//	80CE4ACC: 801A37C4 (settingTevStruct__18dScnKy_env_light_cFiP4cXyzP12dKy_tevstr_c)
//	80CE4AD0: 8042CA54 (g_env_light)
//	80CE4AD4: 8042CA54 (g_env_light)
//	80CE4AE4: 801A4DA0 (setLightTevColorType_MAJI__18dScnKy_env_light_cFP12J3DModelDataP12dKy_tevstr_c)
//	80CE4AE8: 804061C0 (g_dComIfG_gameInfo)
//	80CE4AEC: 804061C0 (g_dComIfG_gameInfo)
//	80CE4AF4: 80434AC8 (j3dSys)
//	80CE4AF8: 80434AC8 (j3dSys)
//	80CE4B0C: 8000DCC4 (mDoExt_modelUpdateDL__FP8J3DModel)
//	80CE4B10: 804061C0 (g_dComIfG_gameInfo)
//	80CE4B14: 804061C0 (g_dComIfG_gameInfo)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinLift_c::Draw() {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_spinLift/d_a_obj_spinLift/Draw__12daSpinLift_cFv.s"
}
#pragma pop


/* 80CE4B44-80CE4B84 0040+00 s=1 e=0 z=0  None .text      Delete__12daSpinLift_cFv                                     */
//	80CE4B60: 80CE4DA8 (l_resNameIdx)
//	80CE4B64: 80CE4DA8 (l_resNameIdx)
//	80CE4B6C: 8002D008 (dComIfG_resDelete__FP30request_of_phase_process_classPCc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daSpinLift_c::Delete() {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_spinLift/d_a_obj_spinLift/Delete__12daSpinLift_cFv.s"
}
#pragma pop


/* 80CE4B84-80CE4BB0 002C+00 s=1 e=0 z=0  None .text      daSpinLift_Draw__FP12daSpinLift_c                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daSpinLift_c* False
// 	 daSpinLift_c False
asm static void daSpinLift_Draw(daSpinLift_c* param_0) {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_spinLift/d_a_obj_spinLift/daSpinLift_Draw__FP12daSpinLift_c.s"
}
#pragma pop


/* 80CE4BB0-80CE4BD0 0020+00 s=1 e=0 z=0  None .text      daSpinLift_Execute__FP12daSpinLift_c                         */
//	80CE4BBC: 80078950 (MoveBGExecute__16dBgS_MoveBgActorFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daSpinLift_c* False
// 	 daSpinLift_c False
asm static void daSpinLift_Execute(daSpinLift_c* param_0) {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_spinLift/d_a_obj_spinLift/daSpinLift_Execute__FP12daSpinLift_c.s"
}
#pragma pop


/* 80CE4BD0-80CE4BF0 0020+00 s=1 e=0 z=0  None .text      daSpinLift_Delete__FP12daSpinLift_c                          */
//	80CE4BDC: 800788DC (MoveBGDelete__16dBgS_MoveBgActorFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daSpinLift_c* False
// 	 daSpinLift_c False
asm static void daSpinLift_Delete(daSpinLift_c* param_0) {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_spinLift/d_a_obj_spinLift/daSpinLift_Delete__FP12daSpinLift_c.s"
}
#pragma pop


/* 80CE4BF0-80CE4C10 0020+00 s=1 e=0 z=0  None .text      daSpinLift_Create__FP10fopAc_ac_c                            */
//	80CE4BFC: 80CE3F1C (create__12daSpinLift_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
asm static void daSpinLift_Create(fopAc_ac_c* param_0) {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_spinLift/d_a_obj_spinLift/daSpinLift_Create__FP10fopAc_ac_c.s"
}
#pragma pop


/* 80CE4C10-80CE4C6C 005C+00 s=2 e=0 z=0  None .text      __dt__16daSpinLift_HIO_cFv                                   */
//	80CE4C28: 80CE4EA4 (__vt__16daSpinLift_HIO_c)
//	80CE4C2C: 80CE4EA4 (__vt__16daSpinLift_HIO_c)
//	80CE4C38: 80CE4EB0 (__vt__14mDoHIO_entry_c)
//	80CE4C3C: 80CE4EB0 (__vt__14mDoHIO_entry_c)
//	80CE4C50: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm daSpinLift_HIO_c::~daSpinLift_HIO_c() {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_spinLift/d_a_obj_spinLift/__dt__16daSpinLift_HIO_cFv.s"
}
#pragma pop


/* 80CE4C6C-80CE4CA8 003C+00 s=0 e=1 z=0  None .text      __sinit_d_a_obj_spinLift_cpp                                 */
//	80CE4C78: 80CE4ED4 (l_HIO)
//	80CE4C7C: 80CE4ED4 (l_HIO)
//	80CE4C80: 80CE3DAC (__ct__16daSpinLift_HIO_cFv)
//	80CE4C84: 80CE4C10 (__dt__16daSpinLift_HIO_cFv)
//	80CE4C88: 80CE4C10 (__dt__16daSpinLift_HIO_cFv)
//	80CE4C8C: 80CE4EC8 (lit_3631)
//	80CE4C90: 80CE4EC8 (lit_3631)
//	80CE4C94: 80CE3D38 (__register_global_object)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void __sinit_d_a_obj_spinLift_cpp() {
	nofralloc
#include "asm/rel/d/a/obj/d_a_obj_spinLift/d_a_obj_spinLift/__sinit_d_a_obj_spinLift_cpp.s"
}
#pragma pop

#pragma push
#pragma force_active on
#pragma section ".ctors$15"
__declspec(section ".ctors$15") void* const _ctors_80CE4C6C = (void*)__sinit_d_a_obj_spinLift_cpp;
#pragma pop


