// 
// Generated By: dol2asm
// Translation Unit: d_a_kago
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "rel/d/a/d_a_kago/d_a_kago.h"

// 
// Types:
// 

struct request_of_phase_process_class {
};

struct Vec {
};

struct cXyz {
	/* 80266AE4 */ // False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
void operator+(Vec const&) const;
	/* 80266B34 */ // False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
void operator-(Vec const&) const;
	/* 80266B84 */ // False False
//  f32 False
void operator*(f32) const;
	/* 80849924 */ // True False
~cXyz();
	/* 80854A28 */ // True False
cXyz();
};

struct csXyz {
	/* 802673F4 */ // False False
//  s16 False
//  s16 False
//  s16 False
csXyz(s16, s16, s16);
};

struct mDoMtx_stack_c {
	/* 8000CD64 */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
void transS(cXyz const&);
	/* 8000CD9C */ // False False
//  f32 False
//  f32 False
//  f32 False
void transM(f32, f32, f32);
	/* 8000CE38 */ // False False
//  f32 False
//  f32 False
//  f32 False
void scaleM(f32, f32, f32);
	/* 8000CF44 */ // False False
//  csXyz const& False
// 	 csXyz const False
// 		 csXyz False
void ZXYrotM(csXyz const&);
};

struct mDoExt_McaMorfCallBack2_c {
};

struct Z2Creature {
};

struct J3DAnmTransform {
};

struct mDoExt_McaMorfCallBack1_c {
};

struct J3DModelData {
};

struct mDoExt_McaMorfSO {
	/* 800107D0 */ // False False
//  J3DModelData* False
// 	 J3DModelData False
//  mDoExt_McaMorfCallBack1_c* False
// 	 mDoExt_McaMorfCallBack1_c False
//  mDoExt_McaMorfCallBack2_c* False
// 	 mDoExt_McaMorfCallBack2_c False
//  J3DAnmTransform* False
// 	 J3DAnmTransform False
//  int False
//  f32 False
//  int False
//  int False
//  Z2Creature* False
// 	 Z2Creature False
//  u32 False
//  u32 False
mDoExt_McaMorfSO(J3DModelData*, mDoExt_McaMorfCallBack1_c*, mDoExt_McaMorfCallBack2_c*, J3DAnmTransform*, int, f32, int, int, Z2Creature*, u32, u32);
	/* 80010E70 */ // False False
//  J3DAnmTransform* False
// 	 J3DAnmTransform False
//  int False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
void setAnm(J3DAnmTransform*, int, f32, f32, f32, f32);
	/* 800110B0 */ // False False
//  u32 False
//  s8 False
void play(u32, s8);
	/* 800111C0 */ // False False
void entryDL();
	/* 800111EC */ // False False
void modelCalc();
};

struct fopAc_ac_c {
	/* 80018B64 */ // False False
fopAc_ac_c();
};

struct daTagWaterFall_c {
	/* 80D64768 */ // False False
//  cXyz False
void checkHitWaterFall(cXyz);
};

struct daPy_py_c {
	/* 8015F914 */ // False False
//  int False
//  int False
void setPlayerDamage(int, int);
	/* 80854AE0 */ // True False
void getMidnaActor();
};

struct daObj_Balloon_c {
	/* 80BA80F4 */ // False False
void saveBestScore();
};

struct J3DJoint {
};

struct J3DModel {
};

struct daKago_c {
	/* 80849660 */ // True False
//  int False
void getBckName(int);
	/* 808496F0 */ // True False
//  int False
//  u8 False
//  f32 False
//  f32 False
void setBck(int, u8, f32, f32);
	/* 80849798 */ // True False
//  int False
void checkBck(int);
	/* 808497F8 */ // True False
void draw();
	/* 80849980 */ // True False
void executeBalloonMenu();
	/* 80849BA8 */ // True False
//  cXyz False
//  f32* False
// 	 f32 False
void checkGroundHeight(cXyz, f32*);
	/* 8084A070 */ // True False
//  cXyz False
void checkRoofHeight(cXyz);
	/* 8084A210 */ // True False
void checkMoveHeight();
	/* 8084A2A8 */ // True False
void checkSizeBg();
	/* 8084A6DC */ // True False
//  bool False
//  u8 False
bool getBeforeGroundHeight(u8);
	/* 8084A6E4 */ // True False
//  int False
void demo_skip(int);
	/* 8084AA64 */ // True False
//  void* False
// 	 void False
//  int False
void DemoSkipCallBack(void*, int);
	/* 8084AA98 */ // True False
//  int False
//  int False
void setActionMode(int, int);
	/* 8084AAAC */ // True False
void setMidnaTagPos();
	/* 8084AB40 */ // True False
void setMidnaRideOn();
	/* 8084AB8C */ // True False
void setPlayerRideOn();
	/* 8084ABC8 */ // True False
void setRideOff();
	/* 8084AC2C */ // True False
void searchNearPassPoint();
	/* 8084AE78 */ // True False
//  int False
void setSceneChange(int);
	/* 8084AF40 */ // True False
void createBalloonScore();
	/* 8084AFB0 */ // True False
void startBalloonScore();
	/* 8084B024 */ // True False
void endBalloonScore();
	/* 8084B088 */ // False False
//  cXyz False
void checkNextPath(cXyz);
	/* 8084B108 */ // True False
void checkHeight();
	/* 8084B134 */ // True False
//  cXyz False
void checkYaguraPos(cXyz);
	/* 8084B1E0 */ // True False
//  int False
void checkWallHitFall(int);
	/* 8084B56C */ // True False
void checkAttackStart();
	/* 8084B5DC */ // True False
//  f32 False
void getValueY(f32);
	/* 8084B6F4 */ // True False
//  f32 False
void getValueX(f32);
	/* 8084B718 */ // True False
//  f32 False
void getValueAbsX(f32);
	/* 8084B744 */ // True False
void flySpeedCalcLockOn();
	/* 8084B96C */ // True False
//  s16 False
//  int False
void flySpeedCalc(s16, int);
	/* 8084C078 */ // True False
void checkFlySceneChange();
	/* 8084C178 */ // True False
void setFlyAway();
	/* 8084C204 */ // True False
void setFlyAnime();
	/* 8084C2CC */ // True False
void executeFly();
	/* 8084C8FC */ // True False
void executeStagger();
	/* 8084D108 */ // True False
void executeWait();
	/* 8084D354 */ // True False
//  int False
void calcAttackMove(int);
	/* 8084D50C */ // True False
void executeAttack();
	/* 8084DA18 */ // True False
//  int False
void calcCircleCamera(int);
	/* 8084DBFC */ // True False
void executeEvent();
	/* 8084DD18 */ // True False
void initPerchDemo();
	/* 8084E2D4 */ // True False
void executePerchDemo();
	/* 8084F09C */ // True False
void PerchDemoAwayForward();
	/* 8084FA58 */ // True False
void executePerch();
	/* 8084FAA8 */ // True False
void executeEvent2();
	/* 8084FB50 */ // True False
void initFirstDemo();
	/* 80850384 */ // True False
void executeFirstDemo();
	/* 808513E4 */ // True False
void executePerch2();
	/* 80851434 */ // True False
void executeLandingLakeHairia();
	/* 80851DEC */ // True False
void executeLandingBoartHouse();
	/* 808525B0 */ // True False
void executeLanding();
	/* 80852610 */ // True False
void moveDemoFly();
	/* 80852D90 */ // True False
void setFlyEffect();
	/* 80852F14 */ // True False
void setDashEffect();
	/* 808530A4 */ // True False
void setDamageEffect();
	/* 80853228 */ // True False
//  int False
void setDashBlurEffect(int);
	/* 80853460 */ // True False
//  cXyz False
//  int False
void setWallHitEffect(cXyz, int);
	/* 8085350C */ // True False
void setSibukiEffect();
	/* 8085366C */ // True False
void setDashSibukiEffect();
	/* 80853730 */ // True False
void setWaterFallEffect();
	/* 8085392C */ // True False
void setFlySound();
	/* 80853BCC */ // True False
void action();
	/* 80853EF0 */ // True False
void mtx_set();
	/* 80853FB0 */ // True False
void cc_set();
	/* 80854058 */ // True False
void execute();
	/* 80854190 */ // True False
void _delete();
	/* 80854220 */ // True False
//  J3DJoint* False
// 	 J3DJoint False
//  J3DModel* False
// 	 J3DModel False
void ctrlJoint(J3DJoint*, J3DModel*);
	/* 808542DC */ // True False
//  J3DJoint* False
// 	 J3DJoint False
//  int False
void JointCallBack(J3DJoint*, int);
	/* 80854328 */ // True False
void CreateHeap();
	/* 808544D8 */ // True False
void create();
};

struct daKago_HIO_c {
	/* 808495AC */ // True False
daKago_HIO_c();
	/* 80854A4C */ // True False
~daKago_HIO_c();
};

struct daE_YM_c {
	/* 808123C4 */ // False False
void setLockByCargo();
};

struct daBalloon2D_c {
	/* 80653FC0 */ // False False
//  u32 False
void setScoreCount(u32);
};

struct dVibration_c {
	/* 8006FA24 */ // False False
//  int False
//  int False
//  cXyz False
void StartShock(int, int, cXyz);
	/* 8006FB10 */ // False False
//  int False
//  int False
//  cXyz False
void StartQuake(int, int, cXyz);
	/* 8006FD94 */ // False False
//  int False
void StopQuake(int);
};

struct dSv_memBit_c {
	/* 80034810 */ // False False
//  int False
void onSwitch(int);
	/* 80034860 */ // False False
//  int False
void isSwitch(int) const;
};

struct dSv_event_c {
	/* 8003498C */ // False False
//  u16 False
void onEventBit(u16);
};

struct dKy_tevstr_c {
};

struct dScnKy_env_light_c {
	/* 801A37C4 */ // False False
//  int False
//  cXyz* False
// 	 cXyz False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
void settingTevStruct(int, cXyz*, dKy_tevstr_c*);
	/* 801A4DA0 */ // False False
//  J3DModelData* False
// 	 J3DModelData False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
void setLightTevColorType_MAJI(J3DModelData*, dKy_tevstr_c*);
};

struct dRes_info_c {
};

struct dRes_control_c {
	/* 8003C2EC */ // False False
//  char const* False
// 	 char const False
// 		 char False
//  s32 False
//  dRes_info_c* False
// 	 dRes_info_c False
//  int False
void getRes(char const*, s32, dRes_info_c*, int);
};

struct dPath {
};

struct dPa_levelEcallBack {
};

struct _GXColor {
};

struct dPa_control_c {
	struct level_c {
		/* 8004B918 */ // False False
//  u32 False
void getEmitter(u32);
	};

	/* 8004CA90 */ // False False
//  u8 False
//  u16 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u8 False
//  dPa_levelEcallBack* False
// 	 dPa_levelEcallBack False
//  s8 False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
void set(u8, u16, cXyz const*, dKy_tevstr_c const*, csXyz const*, cXyz const*, u8, dPa_levelEcallBack*, s8, _GXColor const*, _GXColor const*, cXyz const*, f32);
	/* 8004D4CC */ // False False
//  u32 False
//  u8 False
//  u16 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u8 False
//  dPa_levelEcallBack* False
// 	 dPa_levelEcallBack False
//  s8 False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
void set(u32, u8, u16, cXyz const*, dKy_tevstr_c const*, csXyz const*, cXyz const*, u8, dPa_levelEcallBack*, s8, _GXColor const*, _GXColor const*, cXyz const*, f32);
};

struct dMsgObject_c {
	/* 80238440 */ // False False
void getSelectCursorPos();
};

struct dMsgFlow_c {
	/* 80249F00 */ // False False
dMsgFlow_c();
	/* 80249F90 */ // False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  int False
//  int False
//  fopAc_ac_c** False
// 	 fopAc_ac_c* False
// 		 fopAc_ac_c False
void init(fopAc_ac_c*, int, int, fopAc_ac_c**);
	/* 8024A2D8 */ // False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  fopAc_ac_c** False
// 	 fopAc_ac_c* False
// 		 fopAc_ac_c False
//  int False
void doFlow(fopAc_ac_c*, fopAc_ac_c**, int);
	/* 8024A4C4 */ // False False
void remove();
	/* 8024A540 */ // False False
void getNowMsgNo();
};

struct dEvt_control_c {
	/* 80042468 */ // False False
void reset();
	/* 80042914 */ // False False
//  void* False
// 	 void False
//  int (*)(void*, int) False
// 	 * False
// 		  False
// 	 int False
// 	 void* False
// 		 void False
// 	 int False
//  int False
void setSkipProc(void*, int (*)(void*, int), int);
};

struct dComIfG_play_c {
	/* 8002C97C */ // False False
//  int False
void getLayerNo(int);
};

struct dCcD_Stts {
	/* 80083860 */ // False False
//  int False
//  int False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
void Init(int, int, fopAc_ac_c*);
};

struct dCcD_SrcSph {
};

struct dCcD_Sph {
	/* 80084A34 */ // False False
//  dCcD_SrcSph const& False
// 	 dCcD_SrcSph const False
// 		 dCcD_SrcSph False
void Set(dCcD_SrcSph const&);
};

struct dCcD_GStts {
	/* 80083760 */ // False False
dCcD_GStts();
};

struct dCcD_GObjInf {
	/* 80083A28 */ // False False
dCcD_GObjInf();
};

struct dCamera_c {
	/* 801614AC */ // False False
void Start();
	/* 801614D0 */ // False False
void Stop();
	/* 8016300C */ // False False
//  s32 False
void SetTrimSize(s32);
	/* 80163028 */ // False False
//  s32 False
void SetTrimTypeForce(s32);
	/* 80163D50 */ // False False
//  s32 False
void ModeFix(s32);
	/* 80180AE0 */ // False False
//  cXyz False
//  cXyz False
//  f32 False
//  s16 False
void Set(cXyz, cXyz, f32, s16);
	/* 80180C68 */ // False False
void Reset();
	/* 80180C18 */ // False False
//  cXyz False
//  cXyz False
void Reset(cXyz, cXyz);
	/* 80181E64 */ // False False
void Eye();
};

struct dBgS_RoofChk {
	/* 80078FF4 */ // False False
dBgS_RoofChk();
	/* 80079090 */ // False False
~dBgS_RoofChk();
};

struct dBgS_PolyPassChk {
	/* 80078E68 */ // False False
void SetObj();
};

struct dBgS_ObjGndChk_Spl {
	/* 800777B0 */ // False False
dBgS_ObjGndChk_Spl();
	/* 80077848 */ // False False
~dBgS_ObjGndChk_Spl();
};

struct dBgS_ObjAcch {
	/* 808549B8 */ // True False
~dBgS_ObjAcch();
};

struct dBgS_LinChk {
	/* 80077C68 */ // False False
dBgS_LinChk();
	/* 80077CDC */ // False False
~dBgS_LinChk();
	/* 80077D64 */ // False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  fopAc_ac_c const* False
// 	 fopAc_ac_c const False
// 		 fopAc_ac_c False
void Set(cXyz const*, cXyz const*, fopAc_ac_c const*);
};

struct dBgS_GndChk {
	/* 8007757C */ // False False
dBgS_GndChk();
	/* 800775F0 */ // False False
~dBgS_GndChk();
};

struct dBgS_AcchCir {
	/* 80075EAC */ // False False
dBgS_AcchCir();
	/* 80075F58 */ // False False
//  f32 False
//  f32 False
void SetWall(f32, f32);
};

struct cBgS_PolyInfo {
};

struct dBgS {
	/* 80074CBC */ // False False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
void GetSpecialCode(cBgS_PolyInfo const&);
	/* 8007549C */ // False False
//  dBgS_RoofChk* False
// 	 dBgS_RoofChk False
void RoofChk(dBgS_RoofChk*);
};

struct dBgS_Acch {
	/* 80075F94 */ // False False
~dBgS_Acch();
	/* 800760A0 */ // False False
dBgS_Acch();
	/* 80076248 */ // False False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  int False
//  dBgS_AcchCir* False
// 	 dBgS_AcchCir False
//  cXyz* False
// 	 cXyz False
//  csXyz* False
// 	 csXyz False
//  csXyz* False
// 	 csXyz False
void Set(cXyz*, cXyz*, fopAc_ac_c*, int, dBgS_AcchCir*, cXyz*, csXyz*, csXyz*);
	/* 80076AAC */ // False False
//  dBgS& False
// 	 dBgS False
void CrrPos(dBgS&);
};

struct dAttention_c {
	/* 8007353C */ // False False
//  s32 False
void LockonTarget(s32);
	/* 800737E4 */ // False False
void LockonTruth();
};

struct cM3dGSph {
	/* 8026F648 */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
void SetC(cXyz const&);
	/* 8026F708 */ // False False
//  f32 False
void SetR(f32);
	/* 80854928 */ // True False
~cM3dGSph();
};

struct cM3dGPla {
	/* 8084A694 */ // True False
~cM3dGPla();
};

struct cM3dGAab {
	/* 80854970 */ // True False
~cM3dGAab();
};

struct cCcD_Obj {
};

struct cCcS {
	/* 80264BA8 */ // False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
void Set(cCcD_Obj*);
};

struct cBgS_LinChk {
};

struct cBgS_GndChk {
	/* 80267D28 */ // False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
void SetPos(cXyz const*);
};

struct cBgS {
	/* 800743B4 */ // False False
//  cBgS_LinChk* False
// 	 cBgS_LinChk False
void LineCross(cBgS_LinChk*);
	/* 800744A0 */ // False False
//  cBgS_GndChk* False
// 	 cBgS_GndChk False
void GroundCross(cBgS_GndChk*);
	/* 80074618 */ // False False
//  int False
void GetActorPointer(int) const;
	/* 80074744 */ // False False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
//  cM3dGPla* False
// 	 cM3dGPla False
void GetTriPla(cBgS_PolyInfo const&, cM3dGPla*) const;
};

struct _GXTexObj {
};

struct Z2StatusMgr {
	/* 802B61E8 */ // False False
//  char* False
// 	 char False
void setDemoName(char*);
};

struct Z2CreatureEnemy {
	/* 802C0F64 */ // False False
Z2CreatureEnemy();
	/* 802C1094 */ // False False
//  Vec* False
// 	 Vec False
//  Vec* False
// 	 Vec False
//  u8 False
//  u8 False
void init(Vec*, Vec*, u8, u8);
};

struct JGeometry {
	template <typename A1>
	struct TVec3 { };
	/* TVec3<f32> */
	struct TVec3__template0 {
	};

};

struct J3DFrameCtrl {
	/* 8032842C */ // False False
//  f32 False
void checkPass(f32);
};

// 
// Forward References:
// 

// True False
//  daKago_c* False
// 	 daKago_c False
static void daKago_Draw(daKago_c*);
// True False
//  void* False
// 	 void False
//  void* False
// 	 void False
static void s_waterfall(void*, void*);
// True False
//  daKago_c* False
// 	 daKago_c False
static void daKago_Execute(daKago_c*);
// True False
//  bool False
//  daKago_c* False
// 	 daKago_c False
static bool daKago_IsDelete(daKago_c*);
// True False
//  daKago_c* False
// 	 daKago_c False
static void daKago_Delete(daKago_c*);
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
static void useHeapInit(fopAc_ac_c*);
// True False
//  daKago_c* False
// 	 daKago_c False
static void daKago_Create(daKago_c*);

// True False
extern "C" void __ct__12daKago_HIO_cFv();
// True False
//  int False
extern "C" void getBckName__8daKago_cFi();
// True False
//  int False
//  u8 False
//  f32 False
//  f32 False
extern "C" void setBck__8daKago_cFiUcff();
// True False
//  int False
extern "C" void checkBck__8daKago_cFi();
// True False
extern "C" void draw__8daKago_cFv();
// True False
extern "C" void __dt__4cXyzFv();
// True False
//  daKago_c* False
// 	 daKago_c False
extern "C" static void daKago_Draw__FP8daKago_c();
// True False
extern "C" void executeBalloonMenu__8daKago_cFv();
// True False
//  cXyz False
//  f32* False
// 	 f32 False
extern "C" void checkGroundHeight__8daKago_cF4cXyzPf();
// True False
//  cXyz False
extern "C" void checkRoofHeight__8daKago_cF4cXyz();
// True False
extern "C" void checkMoveHeight__8daKago_cFv();
// True False
extern "C" void checkSizeBg__8daKago_cFv();
// True False
extern "C" void __dt__8cM3dGPlaFv();
// True False
//  bool False
//  u8 False
extern "C" bool getBeforeGroundHeight__8daKago_cFUc();
// True False
//  int False
extern "C" void demo_skip__8daKago_cFi();
// True False
//  void* False
// 	 void False
//  int False
extern "C" void DemoSkipCallBack__8daKago_cFPvi();
// True False
//  int False
//  int False
extern "C" void setActionMode__8daKago_cFii();
// True False
extern "C" void setMidnaTagPos__8daKago_cFv();
// True False
extern "C" void setMidnaRideOn__8daKago_cFv();
// True False
extern "C" void setPlayerRideOn__8daKago_cFv();
// True False
extern "C" void setRideOff__8daKago_cFv();
// True False
extern "C" void searchNearPassPoint__8daKago_cFv();
// True False
//  int False
extern "C" void setSceneChange__8daKago_cFi();
// True False
extern "C" void createBalloonScore__8daKago_cFv();
// True False
extern "C" void startBalloonScore__8daKago_cFv();
// True False
extern "C" void endBalloonScore__8daKago_cFv();
// False False
//  cXyz False
extern "C" void checkNextPath__8daKago_cF4cXyz();
// True False
extern "C" void checkHeight__8daKago_cFv();
// True False
//  cXyz False
extern "C" void checkYaguraPos__8daKago_cF4cXyz();
// True False
//  int False
extern "C" void checkWallHitFall__8daKago_cFi();
// True False
extern "C" void checkAttackStart__8daKago_cFv();
// True False
//  f32 False
extern "C" void getValueY__8daKago_cFf();
// True False
//  f32 False
extern "C" void getValueX__8daKago_cFf();
// True False
//  f32 False
extern "C" void getValueAbsX__8daKago_cFf();
// True False
extern "C" void flySpeedCalcLockOn__8daKago_cFv();
// True False
//  s16 False
//  int False
extern "C" void flySpeedCalc__8daKago_cFsi();
// True False
extern "C" void checkFlySceneChange__8daKago_cFv();
// True False
extern "C" void setFlyAway__8daKago_cFv();
// True False
extern "C" void setFlyAnime__8daKago_cFv();
// True False
extern "C" void executeFly__8daKago_cFv();
// True False
extern "C" void executeStagger__8daKago_cFv();
// True False
extern "C" void executeWait__8daKago_cFv();
// True False
//  int False
extern "C" void calcAttackMove__8daKago_cFi();
// True False
extern "C" void executeAttack__8daKago_cFv();
// True False
//  int False
extern "C" void calcCircleCamera__8daKago_cFi();
// True False
extern "C" void executeEvent__8daKago_cFv();
// True False
extern "C" void initPerchDemo__8daKago_cFv();
// True False
extern "C" void executePerchDemo__8daKago_cFv();
// True False
extern "C" void PerchDemoAwayForward__8daKago_cFv();
// True False
extern "C" void executePerch__8daKago_cFv();
// True False
extern "C" void executeEvent2__8daKago_cFv();
// True False
extern "C" void initFirstDemo__8daKago_cFv();
// True False
extern "C" void executeFirstDemo__8daKago_cFv();
// True False
extern "C" void executePerch2__8daKago_cFv();
// True False
extern "C" void executeLandingLakeHairia__8daKago_cFv();
// True False
extern "C" void executeLandingBoartHouse__8daKago_cFv();
// True False
extern "C" void executeLanding__8daKago_cFv();
// True False
extern "C" void moveDemoFly__8daKago_cFv();
// True False
extern "C" void setFlyEffect__8daKago_cFv();
// True False
extern "C" void setDashEffect__8daKago_cFv();
// True False
extern "C" void setDamageEffect__8daKago_cFv();
// True False
//  int False
extern "C" void setDashBlurEffect__8daKago_cFi();
// True False
//  cXyz False
//  int False
extern "C" void setWallHitEffect__8daKago_cF4cXyzi();
// True False
extern "C" void setSibukiEffect__8daKago_cFv();
// True False
extern "C" void setDashSibukiEffect__8daKago_cFv();
// True False
extern "C" void setWaterFallEffect__8daKago_cFv();
// True False
//  void* False
// 	 void False
//  void* False
// 	 void False
extern "C" static void s_waterfall__FPvPv();
// True False
extern "C" void setFlySound__8daKago_cFv();
// True False
extern "C" void action__8daKago_cFv();
// True False
extern "C" void mtx_set__8daKago_cFv();
// True False
extern "C" void cc_set__8daKago_cFv();
// True False
extern "C" void execute__8daKago_cFv();
// True False
//  daKago_c* False
// 	 daKago_c False
extern "C" static void daKago_Execute__FP8daKago_c();
// True False
//  bool False
//  daKago_c* False
// 	 daKago_c False
extern "C" static bool daKago_IsDelete__FP8daKago_c();
// True False
extern "C" void _delete__8daKago_cFv();
// True False
//  daKago_c* False
// 	 daKago_c False
extern "C" static void daKago_Delete__FP8daKago_c();
// True False
//  J3DJoint* False
// 	 J3DJoint False
//  J3DModel* False
// 	 J3DModel False
extern "C" void ctrlJoint__8daKago_cFP8J3DJointP8J3DModel();
// True False
//  J3DJoint* False
// 	 J3DJoint False
//  int False
extern "C" void JointCallBack__8daKago_cFP8J3DJointi();
// True False
extern "C" void CreateHeap__8daKago_cFv();
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
extern "C" static void useHeapInit__FP10fopAc_ac_c();
// True False
extern "C" void create__8daKago_cFv();
// True False
extern "C" void __dt__8cM3dGSphFv();
// True False
extern "C" void __dt__8cM3dGAabFv();
// True False
extern "C" void __dt__12dBgS_ObjAcchFv();
// True False
extern "C" void __ct__4cXyzFv();
// True False
//  daKago_c* False
// 	 daKago_c False
extern "C" static void daKago_Create__FP8daKago_c();
// True False
extern "C" void __dt__12daKago_HIO_cFv();
// False False
extern "C" void __sinit_d_a_kago_cpp();
// True False
extern "C" static void func_80854AD0();
// True False
extern "C" static void func_80854AD8();
// True False
extern "C" void getMidnaActor__9daPy_py_cFv();
extern "C" extern u32 const lit_3930;
extern "C" extern u32 const lit_3931;
extern "C" extern u32 const lit_3933;
extern "C" extern u32 const lit_3934;
extern "C" extern u32 const lit_3935;
extern "C" extern u32 const lit_3936;
extern "C" extern u32 const lit_3937;
extern "C" extern u32 const lit_3938;
extern "C" extern u32 const lit_3939;
extern "C" extern u32 const lit_3940;
extern "C" extern u32 const lit_4034;
extern "C" extern u8 const lit_4201[8];
extern "C" extern u8 const lit_4202[8];
extern "C" extern u8 const lit_4203[8];
extern "C" extern u32 const lit_4204;
extern "C" extern u32 const lit_4205;
extern "C" extern u32 const lit_4206;
extern "C" extern u32 const lit_4255;
extern "C" extern u32 const lit_4256;
extern "C" extern u32 const lit_4415;
extern "C" extern u32 const lit_4478;
extern "C" extern u32 const lit_4479;
extern "C" extern u32 const lit_4480;
extern "C" extern u32 const lit_4481;
extern "C" extern u32 const lit_4482;
extern "C" extern u32 const lit_4483;
extern "C" extern u32 const lit_4484;
extern "C" extern u32 const lit_4485;
extern "C" extern u32 const lit_4486;
extern "C" extern u32 const lit_4487;
extern "C" extern u32 const lit_4488;
extern "C" extern u32 const lit_4489;
extern "C" extern u32 const lit_4490;
extern "C" extern u32 const lit_4491;
extern "C" extern u32 const lit_4492;
extern "C" extern u32 const lit_4493;
extern "C" extern u32 const lit_4494;
extern "C" extern u32 const lit_4495;
extern "C" extern u32 const lit_4657;
extern "C" extern u32 const lit_4759;
extern "C" extern u32 const lit_4760;
extern "C" extern u32 const lit_5091;
extern "C" extern u32 const lit_5092;
extern "C" extern u32 const lit_5329;
extern "C" extern u32 const lit_5478;
extern "C" extern u32 const lit_5479;
extern "C" extern u32 const lit_5480;
extern "C" extern u32 const lit_5482;
extern "C" extern u32 const lit_5671;
extern "C" extern u32 const lit_5672;
extern "C" extern u32 const lit_5673;
extern "C" extern u32 const lit_5674;
extern "C" extern u32 const lit_5675;
extern "C" extern u32 const lit_5722;
extern "C" extern u32 const lit_5723;
extern "C" extern u32 const lit_5724;
extern "C" extern u32 const lit_5725;
extern "C" extern u32 const lit_5852;
extern "C" extern u32 const lit_5853;
extern "C" extern u32 const lit_5854;
extern "C" extern u32 const lit_5855;
extern "C" extern u32 const lit_5856;
extern "C" extern u32 const lit_5857;
extern "C" extern u32 const lit_6160;
extern "C" extern u32 const lit_6161;
extern "C" extern u32 const lit_6162;
extern "C" extern u32 const lit_6163;
extern "C" extern u32 const lit_6164;
extern "C" extern u32 const lit_6165;
extern "C" extern u32 const lit_6372;
extern "C" extern u32 const lit_6373;
extern "C" extern u32 const lit_6544;
extern "C" extern u32 const lit_6545;
extern "C" extern u32 const lit_6546;
extern "C" extern u32 const lit_6547;
extern "C" extern u32 const lit_6548;
extern "C" extern u32 const lit_6549;
extern "C" extern u32 const lit_6551;
extern "C" extern u32 const lit_6552;
extern "C" extern u32 const lit_6553;
extern "C" extern u32 const lit_6554;
extern "C" extern u32 const lit_6555;
extern "C" extern u32 const lit_6556;
extern "C" extern u32 const lit_6557;
extern "C" extern u32 const lit_6558;
extern "C" extern u32 const lit_6559;
extern "C" extern u32 const lit_6917;
extern "C" extern u32 const lit_6918;
extern "C" extern u32 const lit_6919;
extern "C" extern u32 const lit_6920;
extern "C" extern u32 const lit_6921;
extern "C" extern u32 const lit_6922;
extern "C" extern u32 const lit_6923;
extern "C" extern u32 const lit_7121;
extern "C" extern u32 const lit_7122;
extern "C" extern u32 const lit_7123;
extern "C" extern u32 const lit_7124;
extern "C" extern u32 const lit_7125;
extern "C" extern u32 const lit_7126;
extern "C" extern u32 const lit_7127;
extern "C" extern u32 const lit_7128;
extern "C" extern u32 const lit_7129;
extern "C" extern u32 const lit_7286;
extern "C" extern u32 const lit_7287;
extern "C" extern u32 const lit_7288;
extern "C" extern u32 const lit_7289;
extern "C" extern u32 const lit_7290;
extern "C" extern u32 const lit_7291;
extern "C" extern u32 const lit_7292;
extern "C" extern u32 const lit_7293;
extern "C" extern u32 const lit_7294;
extern "C" extern u32 const lit_7295;
extern "C" extern u32 const lit_7296;
extern "C" extern u32 const lit_7910;
extern "C" extern u32 const lit_7911;
extern "C" extern u32 const lit_7912;
extern "C" extern u32 const lit_7981;
extern "C" extern char const* const stringBase0;
extern "C" extern void* g_profile_KAGO[12];
extern "C" extern void* __vt__8cM3dGSph[3];
extern "C" extern void* __vt__8cM3dGAab[3];
extern "C" extern void* __vt__12dBgS_ObjAcch[9];
extern "C" extern void* __vt__8cM3dGPla[3];
extern "C" extern void* __vt__12daKago_HIO_c[3];

// 
// External References:
// 

// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
void mDoMtx_XrotM(f32 (* )[4], s16);
// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
void mDoMtx_YrotS(f32 (* )[4], s16);
// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
void mDoMtx_YrotM(f32 (* )[4], s16);
// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
void mDoMtx_ZrotM(f32 (* )[4], s16);
// False False
//  void* False
// 	 void False
void fopAc_IsActor(void*);
// False False
//  unsigned int False
//  fopAc_ac_c** False
// 	 fopAc_ac_c* False
// 		 fopAc_ac_c False
void fopAcM_SearchByID(unsigned int, fopAc_ac_c**);
// False False
//  s16 False
//  fopAc_ac_c** False
// 	 fopAc_ac_c* False
// 		 fopAc_ac_c False
void fopAcM_SearchByName(s16, fopAc_ac_c**);
// False False
//  s16 False
//  u32 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  int False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  s8 False
void fopAcM_create(s16, u32, cXyz const*, int, csXyz const*, cXyz const*, s8);
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  int (*)(fopAc_ac_c*) False
// 	 * False
// 		  False
// 	 int False
// 	 fopAc_ac_c* False
// 		 fopAc_ac_c False
//  u32 False
void fopAcM_entrySolidHeap(fopAc_ac_c*, int (*)(fopAc_ac_c*), u32);
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  f32 False
//  f32 False
//  f32 False
void fopAcM_SetMin(fopAc_ac_c*, f32, f32, f32);
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  f32 False
//  f32 False
//  f32 False
void fopAcM_SetMax(fopAc_ac_c*, f32, f32, f32);
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
void fopAcM_posMoveF(fopAc_ac_c*, cXyz const*);
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  u16 False
//  u16 False
//  u16 False
void fopAcM_orderPotentialEvent(fopAc_ac_c*, u16, u16, u16);
// False False
//  fopAc_ac_c const* False
// 	 fopAc_ac_c const False
// 		 fopAc_ac_c False
//  J3DModelData const* False
// 	 J3DModelData const False
// 		 J3DModelData False
void fopAcM_setEffectMtx(fopAc_ac_c const*, J3DModelData const*);
// False False
void fopOvlpM_IsPeek();
// False False
//  void* (*)(void*, void*) False
// 	 * False
// 		  False
// 	 void* False
// 		 void False
// 	 void* False
// 		 void False
// 	 void* False
// 		 void False
//  void* False
// 	 void False
void fpcEx_Search(void* (*)(void*, void*), void*);
// False False
//  unsigned int False
void fpcM_IsCreating(unsigned int);
// False False
//  int False
//  f32 False
//  u32 False
//  s8 False
//  s16 False
//  int False
void dStage_changeScene(int, f32, u32, s8, s16, int);
// False False
//  request_of_phase_process_class* False
// 	 request_of_phase_process_class False
//  char const* False
// 	 char const False
// 		 char False
void dComIfG_resLoad(request_of_phase_process_class*, char const*);
// False False
//  request_of_phase_process_class* False
// 	 request_of_phase_process_class False
//  char const* False
// 	 char const False
// 		 char False
void dComIfG_resDelete(request_of_phase_process_class*, char const*);
// False False
//  int False
void dComIfGp_getReverb(int);
// False False
//  char const* False
// 	 char const False
// 		 char False
//  s16 False
//  s8 False
//  s8 False
//  f32 False
//  u32 False
//  int False
//  s8 False
//  s16 False
//  int False
//  int False
void dComIfGp_setNextStage(char const*, s16, s8, s8, f32, u32, int, s8, s16, int, int);
// False False
//  u32 False
//  s8 False
//  J3DModel* False
// 	 J3DModel False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  cBgS_PolyInfo& False
// 	 cBgS_PolyInfo False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
//  s16 False
//  f32 False
//  _GXTexObj* False
// 	 _GXTexObj False
void dComIfGd_setShadow(u32, s8, J3DModel*, cXyz*, f32, f32, f32, f32, cBgS_PolyInfo&, dKy_tevstr_c*, s16, f32, _GXTexObj*);
// False False
//  dPath const* False
// 	 dPath const False
// 		 dPath False
//  int False
void dPath_GetPnt(dPath const*, int);
// False False
//  int False
//  int False
void dPath_GetRoomPath(int, int);
// False False
void dCam_getBody();
// False False
void cM_rnd();
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
//  f32 False
//  f32 False
void cLib_addCalcPos(cXyz*, cXyz const&, f32, f32, f32);
// False False
//  s16* False
// 	 s16 False
//  s16 False
//  s16 False
//  s16 False
//  s16 False
void cLib_addCalcAngleS(s16*, s16, s16, s16, s16);
// False False
//  u8* False
// 	 u8 False
//  u8 False
//  u8 False
void cLib_chaseUC(u8*, u8, u8);
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
void cLib_chaseF(f32*, f32, f32);
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
void cLib_chasePos(cXyz*, cXyz const&, f32);
// False False
//  s16* False
// 	 s16 False
//  s16 False
//  s16 False
void cLib_chaseAngleS(s16*, s16, s16);
// False False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
void cLib_targetAngleY(Vec const*, Vec const*);
// False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
void cLib_targetAngleX(cXyz const*, cXyz const*);
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  s16 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
void cLib_offsetPos(cXyz*, cXyz const*, s16, cXyz const*);
// False True
//  f32 const (* )[4] False
// 	 f32 const False
// 		 f32 False
// 	 * False
// 		  False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  JGeometry::TVec3<f32>* False
// 	 JGeometry::TVec3<f32> True
// 		 f32 False
//  JGeometry::TVec3<f32>* False
// 	 JGeometry::TVec3<f32> True
// 		 f32 False
void JPASetRMtxSTVecfromMtx(f32 const (* )[4], f32 (* )[4], JGeometry::TVec3__template0*, JGeometry::TVec3__template0*);
// False False
//  void* False
// 	 void False
//  u32 False
void* operator new(u32);
// False False
//  void False
//  void* False
// 	 void False
void operator delete(void*);

// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
extern "C" void mDoMtx_XrotM__FPA4_fs();
// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
extern "C" void mDoMtx_YrotS__FPA4_fs();
// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
extern "C" void mDoMtx_YrotM__FPA4_fs();
// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
extern "C" void mDoMtx_ZrotM__FPA4_fs();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
extern "C" void transS__14mDoMtx_stack_cFRC4cXyz();
// False False
//  f32 False
//  f32 False
//  f32 False
extern "C" void transM__14mDoMtx_stack_cFfff();
// False False
//  f32 False
//  f32 False
//  f32 False
extern "C" void scaleM__14mDoMtx_stack_cFfff();
// False False
//  csXyz const& False
// 	 csXyz const False
// 		 csXyz False
extern "C" void ZXYrotM__14mDoMtx_stack_cFRC5csXyz();
// False False
//  J3DModelData* False
// 	 J3DModelData False
//  mDoExt_McaMorfCallBack1_c* False
// 	 mDoExt_McaMorfCallBack1_c False
//  mDoExt_McaMorfCallBack2_c* False
// 	 mDoExt_McaMorfCallBack2_c False
//  J3DAnmTransform* False
// 	 J3DAnmTransform False
//  int False
//  f32 False
//  int False
//  int False
//  Z2Creature* False
// 	 Z2Creature False
//  u32 False
//  u32 False
extern "C" void __ct__16mDoExt_McaMorfSOFP12J3DModelDataP25mDoExt_McaMorfCallBack1_cP25mDoExt_McaMorfCallBack2_cP15J3DAnmTransformifiiP10Z2CreatureUlUl();
// False False
//  J3DAnmTransform* False
// 	 J3DAnmTransform False
//  int False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
extern "C" void setAnm__16mDoExt_McaMorfSOFP15J3DAnmTransformiffff();
// False False
//  u32 False
//  s8 False
extern "C" void play__16mDoExt_McaMorfSOFUlSc();
// False False
extern "C" void entryDL__16mDoExt_McaMorfSOFv();
// False False
extern "C" void modelCalc__16mDoExt_McaMorfSOFv();
// False False
extern "C" void __ct__10fopAc_ac_cFv();
// False False
//  void* False
// 	 void False
extern "C" void fopAc_IsActor__FPv();
// False False
//  unsigned int False
//  fopAc_ac_c** False
// 	 fopAc_ac_c* False
// 		 fopAc_ac_c False
extern "C" void fopAcM_SearchByID__FUiPP10fopAc_ac_c();
// False False
//  s16 False
//  fopAc_ac_c** False
// 	 fopAc_ac_c* False
// 		 fopAc_ac_c False
extern "C" void fopAcM_SearchByName__FsPP10fopAc_ac_c();
// False False
//  s16 False
//  u32 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  int False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  s8 False
extern "C" void fopAcM_create__FsUlPC4cXyziPC5csXyzPC4cXyzSc();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  int (*)(fopAc_ac_c*) False
// 	 * False
// 		  False
// 	 int False
// 	 fopAc_ac_c* False
// 		 fopAc_ac_c False
//  u32 False
extern "C" void fopAcM_entrySolidHeap__FP10fopAc_ac_cPFP10fopAc_ac_c_iUl();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  f32 False
//  f32 False
//  f32 False
extern "C" void fopAcM_SetMin__FP10fopAc_ac_cfff();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  f32 False
//  f32 False
//  f32 False
extern "C" void fopAcM_SetMax__FP10fopAc_ac_cfff();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
extern "C" void fopAcM_posMoveF__FP10fopAc_ac_cPC4cXyz();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  u16 False
//  u16 False
//  u16 False
extern "C" void fopAcM_orderPotentialEvent__FP10fopAc_ac_cUsUsUs();
// False False
//  fopAc_ac_c const* False
// 	 fopAc_ac_c const False
// 		 fopAc_ac_c False
//  J3DModelData const* False
// 	 J3DModelData const False
// 		 J3DModelData False
extern "C" void fopAcM_setEffectMtx__FPC10fopAc_ac_cPC12J3DModelData();
// False False
extern "C" void fopOvlpM_IsPeek__Fv();
// False False
//  void* (*)(void*, void*) False
// 	 * False
// 		  False
// 	 void* False
// 		 void False
// 	 void* False
// 		 void False
// 	 void* False
// 		 void False
//  void* False
// 	 void False
extern "C" void fpcEx_Search__FPFPvPv_PvPv();
// False False
//  unsigned int False
extern "C" void fpcM_IsCreating__FUi();
// False False
//  int False
//  f32 False
//  u32 False
//  s8 False
//  s16 False
//  int False
extern "C" void dStage_changeScene__FifUlScsi();
// False False
//  int False
extern "C" void getLayerNo__14dComIfG_play_cFi();
// False False
//  request_of_phase_process_class* False
// 	 request_of_phase_process_class False
//  char const* False
// 	 char const False
// 		 char False
extern "C" void dComIfG_resLoad__FP30request_of_phase_process_classPCc();
// False False
//  request_of_phase_process_class* False
// 	 request_of_phase_process_class False
//  char const* False
// 	 char const False
// 		 char False
extern "C" void dComIfG_resDelete__FP30request_of_phase_process_classPCc();
// False False
//  int False
extern "C" void dComIfGp_getReverb__Fi();
// False False
//  char const* False
// 	 char const False
// 		 char False
//  s16 False
//  s8 False
//  s8 False
//  f32 False
//  u32 False
//  int False
//  s8 False
//  s16 False
//  int False
//  int False
extern "C" void dComIfGp_setNextStage__FPCcsScScfUliScsii();
// False False
//  u32 False
//  s8 False
//  J3DModel* False
// 	 J3DModel False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  cBgS_PolyInfo& False
// 	 cBgS_PolyInfo False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
//  s16 False
//  f32 False
//  _GXTexObj* False
// 	 _GXTexObj False
extern "C" void dComIfGd_setShadow__FUlScP8J3DModelP4cXyzffffR13cBgS_PolyInfoP12dKy_tevstr_csfP9_GXTexObj();
// False False
//  int False
extern "C" void onSwitch__12dSv_memBit_cFi();
// False False
//  int False
extern "C" void isSwitch__12dSv_memBit_cCFi();
// False False
//  u16 False
extern "C" void onEventBit__11dSv_event_cFUs();
// False False
//  char const* False
// 	 char const False
// 		 char False
//  s32 False
//  dRes_info_c* False
// 	 dRes_info_c False
//  int False
extern "C" void getRes__14dRes_control_cFPCclP11dRes_info_ci();
// False False
extern "C" void reset__14dEvt_control_cFv();
// False False
//  void* False
// 	 void False
//  int (*)(void*, int) False
// 	 * False
// 		  False
// 	 int False
// 	 void* False
// 		 void False
// 	 int False
//  int False
extern "C" void setSkipProc__14dEvt_control_cFPvPFPvi_ii();
// False False
//  u32 False
extern "C" void getEmitter__Q213dPa_control_c7level_cFUl();
// False False
//  u8 False
//  u16 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u8 False
//  dPa_levelEcallBack* False
// 	 dPa_levelEcallBack False
//  s8 False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
extern "C" void set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf();
// False False
//  u32 False
//  u8 False
//  u16 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u8 False
//  dPa_levelEcallBack* False
// 	 dPa_levelEcallBack False
//  s8 False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
extern "C" void set__13dPa_control_cFUlUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf();
// False False
//  dPath const* False
// 	 dPath const False
// 		 dPath False
//  int False
extern "C" void dPath_GetPnt__FPC5dPathi();
// False False
//  int False
//  int False
extern "C" void dPath_GetRoomPath__Fii();
// False False
//  int False
//  int False
//  cXyz False
extern "C" void StartShock__12dVibration_cFii4cXyz();
// False False
//  int False
//  int False
//  cXyz False
extern "C" void StartQuake__12dVibration_cFii4cXyz();
// False False
//  int False
extern "C" void StopQuake__12dVibration_cFi();
// False False
//  s32 False
extern "C" void LockonTarget__12dAttention_cFl();
// False False
extern "C" void LockonTruth__12dAttention_cFv();
// False False
//  cBgS_LinChk* False
// 	 cBgS_LinChk False
extern "C" void LineCross__4cBgSFP11cBgS_LinChk();
// False False
//  cBgS_GndChk* False
// 	 cBgS_GndChk False
extern "C" void GroundCross__4cBgSFP11cBgS_GndChk();
// False False
//  int False
extern "C" void GetActorPointer__4cBgSCFi();
// False False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
//  cM3dGPla* False
// 	 cM3dGPla False
extern "C" void GetTriPla__4cBgSCFRC13cBgS_PolyInfoP8cM3dGPla();
// False False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
extern "C" void GetSpecialCode__4dBgSFRC13cBgS_PolyInfo();
// False False
//  dBgS_RoofChk* False
// 	 dBgS_RoofChk False
extern "C" void RoofChk__4dBgSFP12dBgS_RoofChk();
// False False
extern "C" void __ct__12dBgS_AcchCirFv();
// False False
//  f32 False
//  f32 False
extern "C" void SetWall__12dBgS_AcchCirFff();
// False False
extern "C" void __dt__9dBgS_AcchFv();
// False False
extern "C" void __ct__9dBgS_AcchFv();
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  int False
//  dBgS_AcchCir* False
// 	 dBgS_AcchCir False
//  cXyz* False
// 	 cXyz False
//  csXyz* False
// 	 csXyz False
//  csXyz* False
// 	 csXyz False
extern "C" void Set__9dBgS_AcchFP4cXyzP4cXyzP10fopAc_ac_ciP12dBgS_AcchCirP4cXyzP5csXyzP5csXyz();
// False False
//  dBgS& False
// 	 dBgS False
extern "C" void CrrPos__9dBgS_AcchFR4dBgS();
// False False
extern "C" void __ct__11dBgS_GndChkFv();
// False False
extern "C" void __dt__11dBgS_GndChkFv();
// False False
extern "C" void __ct__18dBgS_ObjGndChk_SplFv();
// False False
extern "C" void __dt__18dBgS_ObjGndChk_SplFv();
// False False
extern "C" void __ct__11dBgS_LinChkFv();
// False False
extern "C" void __dt__11dBgS_LinChkFv();
// False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  fopAc_ac_c const* False
// 	 fopAc_ac_c const False
// 		 fopAc_ac_c False
extern "C" void Set__11dBgS_LinChkFPC4cXyzPC4cXyzPC10fopAc_ac_c();
// False False
extern "C" void SetObj__16dBgS_PolyPassChkFv();
// False False
extern "C" void __ct__12dBgS_RoofChkFv();
// False False
extern "C" void __dt__12dBgS_RoofChkFv();
// False False
extern "C" void __ct__10dCcD_GSttsFv();
// False False
//  int False
//  int False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
extern "C" void Init__9dCcD_SttsFiiP10fopAc_ac_c();
// False False
extern "C" void __ct__12dCcD_GObjInfFv();
// False False
//  dCcD_SrcSph const& False
// 	 dCcD_SrcSph const False
// 		 dCcD_SrcSph False
extern "C" void Set__8dCcD_SphFRC11dCcD_SrcSph();
// False False
//  int False
//  int False
extern "C" void setPlayerDamage__9daPy_py_cFii();
// False False
extern "C" void Start__9dCamera_cFv();
// False False
extern "C" void Stop__9dCamera_cFv();
// False False
//  s32 False
extern "C" void SetTrimSize__9dCamera_cFl();
// False False
//  s32 False
extern "C" void SetTrimTypeForce__9dCamera_cFl();
// False False
//  s32 False
extern "C" void ModeFix__9dCamera_cFl();
// False False
//  cXyz False
//  cXyz False
//  f32 False
//  s16 False
extern "C" void Set__9dCamera_cF4cXyz4cXyzfs();
// False False
//  cXyz False
//  cXyz False
extern "C" void Reset__9dCamera_cF4cXyz4cXyz();
// False False
extern "C" void Reset__9dCamera_cFv();
// False False
extern "C" void dCam_getBody__Fv();
// False False
extern "C" void Eye__9dCamera_cFv();
// False False
//  int False
//  cXyz* False
// 	 cXyz False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
extern "C" void settingTevStruct__18dScnKy_env_light_cFiP4cXyzP12dKy_tevstr_c();
// False False
//  J3DModelData* False
// 	 J3DModelData False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
extern "C" void setLightTevColorType_MAJI__18dScnKy_env_light_cFP12J3DModelDataP12dKy_tevstr_c();
// False False
extern "C" void getSelectCursorPos__12dMsgObject_cFv();
// False False
extern "C" void __ct__10dMsgFlow_cFv();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  int False
//  int False
//  fopAc_ac_c** False
// 	 fopAc_ac_c* False
// 		 fopAc_ac_c False
extern "C" void init__10dMsgFlow_cFP10fopAc_ac_ciiPP10fopAc_ac_c();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  fopAc_ac_c** False
// 	 fopAc_ac_c* False
// 		 fopAc_ac_c False
//  int False
extern "C" void doFlow__10dMsgFlow_cFP10fopAc_ac_cPP10fopAc_ac_ci();
// False False
extern "C" void remove__10dMsgFlow_cFv();
// False False
extern "C" void getNowMsgNo__10dMsgFlow_cFv();
// False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
extern "C" void Set__4cCcSFP8cCcD_Obj();
// False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
extern "C" void __pl__4cXyzCFRC3Vec();
// False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
extern "C" void __mi__4cXyzCFRC3Vec();
// False False
//  f32 False
extern "C" void __ml__4cXyzCFf();
// False False
//  s16 False
//  s16 False
//  s16 False
extern "C" void __ct__5csXyzFsss();
// False False
extern "C" void cM_rnd__Fv();
// False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
extern "C" void SetPos__11cBgS_GndChkFPC4cXyz();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
extern "C" void SetC__8cM3dGSphFRC4cXyz();
// False False
//  f32 False
extern "C" void SetR__8cM3dGSphFf();
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
//  f32 False
//  f32 False
extern "C" void cLib_addCalcPos__FP4cXyzRC4cXyzfff();
// False False
//  s16* False
// 	 s16 False
//  s16 False
//  s16 False
//  s16 False
//  s16 False
extern "C" void cLib_addCalcAngleS__FPsssss();
// False False
//  u8* False
// 	 u8 False
//  u8 False
//  u8 False
extern "C" void cLib_chaseUC__FPUcUcUc();
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
extern "C" void cLib_chaseF__FPfff();
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
extern "C" void cLib_chasePos__FP4cXyzRC4cXyzf();
// False False
//  s16* False
// 	 s16 False
//  s16 False
//  s16 False
extern "C" void cLib_chaseAngleS__FPsss();
// False False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
extern "C" void cLib_targetAngleY__FPC3VecPC3Vec();
// False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
extern "C" void cLib_targetAngleX__FPC4cXyzPC4cXyz();
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  s16 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
extern "C" void cLib_offsetPos__FP4cXyzPC4cXyzsPC4cXyz();
// False True
//  f32 const (* )[4] False
// 	 f32 const False
// 		 f32 False
// 	 * False
// 		  False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  JGeometry::TVec3<f32>* False
// 	 JGeometry::TVec3<f32> True
// 		 f32 False
//  JGeometry::TVec3<f32>* False
// 	 JGeometry::TVec3<f32> True
// 		 f32 False
extern "C" void func_80280808();
// False False
//  char* False
// 	 char False
extern "C" void setDemoName__11Z2StatusMgrFPc();
// False False
extern "C" void __ct__15Z2CreatureEnemyFv();
// False False
//  Vec* False
// 	 Vec False
//  Vec* False
// 	 Vec False
//  u8 False
//  u8 False
extern "C" void init__15Z2CreatureEnemyFP3VecP3VecUcUc();
// False False
//  void* False
// 	 void False
//  u32 False
extern "C" void* __nw__FUl();
// False False
//  void False
//  void* False
// 	 void False
extern "C" void __dl__FPv();
// False False
//  f32 False
extern "C" void checkPass__12J3DFrameCtrlFf();
// False False
extern "C" void PSMTXCopy();
// False False
extern "C" void PSMTXTrans();
// False False
extern "C" void PSMTXMultVec();
// False False
extern "C" void PSVECAdd();
// False False
extern "C" void PSVECSquareDistance();
// False False
extern "C" void __construct_array();
// False False
extern "C" void _savegpr_24();
// False False
extern "C" void _savegpr_25();
// False False
extern "C" void _savegpr_26();
// False False
extern "C" void _savegpr_27();
// False False
extern "C" void _savegpr_28();
// False False
extern "C" void _savegpr_29();
// False False
extern "C" void _restgpr_24();
// False False
extern "C" void _restgpr_25();
// False False
extern "C" void _restgpr_26();
// False False
extern "C" void _restgpr_27();
// False False
extern "C" void _restgpr_28();
// False False
extern "C" void _restgpr_29();
// False False
extern "C" void abs();
// False False
extern "C" void strcmp();
extern "C" extern void* g_fopAc_Method[8];
extern "C" extern void* g_fpcLf_Method[5 + 1 /* padding */];
extern "C" extern u8 saveBitLabels__16dSv_event_flag_c[1644 + 4 /* padding */];
extern "C" extern void* __vt__8dCcD_Sph[36];
extern "C" extern void* __vt__9dCcD_Stts[11];
extern "C" extern void* __vt__12cCcD_SphAttr[25];
extern "C" extern void* __vt__14cCcD_ShapeAttr[22];
extern "C" extern void* __vt__9cCcD_Stts[8];
extern "C" extern u8 m_cpadInfo__8mDoCPd_c[256];
extern "C" extern u8 now__14mDoMtx_stack_c[48];
extern "C" extern u8 g_dComIfG_gameInfo[122384];
extern "C" extern u8 mSimpleTexObj__21dDlst_shadowControl_c[32];
extern "C" extern u8 g_env_light[4880];
extern "C" extern u8 j3dSys[284];
extern "C" extern u8 mCurrentMtx__6J3DSys[48];
extern "C" extern u8 sincosTable___5JMath[65536];
extern "C" extern u32 __float_nan;
extern "C" extern u8 struct_80450D64[4];
extern "C" extern u8 m_midnaActor__9daPy_py_c[4];
extern "C" extern u8 mAudioMgrPtr__10Z2AudioMgr[4 + 4 /* padding */];
// False False
//  u32 False
extern "C" void setScoreCount__13daBalloon2D_cFUl();
// False False
extern "C" void setLockByCargo__8daE_YM_cFv();
// False False
extern "C" void __register_global_object();
// False False
extern "C" void saveBestScore__15daObj_Balloon_cFv();
// False False
//  cXyz False
extern "C" void checkHitWaterFall__16daTagWaterFall_cF4cXyz();

// 
// Declarations:
// 

/* ############################################################################################## */
/* 80854B04-80854B08 0004+00 s=27 e=0 z=0  None .rodata    @3929                                                        */
SECTION_RODATA static u32 const lit_3929 = 0x44800000;

/* 80854D4C-80854D8C 0040+00 s=1 e=0 z=0  None .data      cc_sph_src__22@unnamed@d_a_kago_cpp@                         */
SECTION_DATA static u8 data_80854D4C[64] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0xA0, 0x00, 0x00,
};

/* 80854D8C-80854DC8 003C+00 s=1 e=0 z=0  None .data      @3969                                                        */
SECTION_DATA static void* lit_3969[15] = {
	(void*)(((char*)getBckName__8daKago_cFi)+0x38),
	(void*)(((char*)getBckName__8daKago_cFi)+0x40),
	(void*)(((char*)getBckName__8daKago_cFi)+0x48),
	(void*)(((char*)getBckName__8daKago_cFi)+0x50),
	(void*)(((char*)getBckName__8daKago_cFi)+0x58),
	(void*)(((char*)getBckName__8daKago_cFi)+0x60),
	(void*)(((char*)getBckName__8daKago_cFi)+0x68),
	(void*)(((char*)getBckName__8daKago_cFi)+0x70),
	(void*)(((char*)getBckName__8daKago_cFi)+0x78),
	(void*)(((char*)getBckName__8daKago_cFi)+0x88),
	(void*)(((char*)getBckName__8daKago_cFi)+0x88),
	(void*)(((char*)getBckName__8daKago_cFi)+0x88),
	(void*)(((char*)getBckName__8daKago_cFi)+0x88),
	(void*)(((char*)getBckName__8daKago_cFi)+0x88),
	(void*)(((char*)getBckName__8daKago_cFi)+0x80),
};

/* 80854DC8-80854DF4 002C+00 s=1 e=0 z=0  None .data      @4496                                                        */
SECTION_DATA static void* lit_4496[11] = {
	(void*)(((char*)demo_skip__8daKago_cFi)+0x4C),
	(void*)(((char*)demo_skip__8daKago_cFi)+0x60),
	(void*)(((char*)demo_skip__8daKago_cFi)+0x74),
	(void*)(((char*)demo_skip__8daKago_cFi)+0x6C),
	(void*)(((char*)demo_skip__8daKago_cFi)+0xC0),
	(void*)(((char*)demo_skip__8daKago_cFi)+0xD8),
	(void*)(((char*)demo_skip__8daKago_cFi)+0xD8),
	(void*)(((char*)demo_skip__8daKago_cFi)+0x114),
	(void*)(((char*)demo_skip__8daKago_cFi)+0x11C),
	(void*)(((char*)demo_skip__8daKago_cFi)+0x240),
	(void*)(((char*)demo_skip__8daKago_cFi)+0x248),
};

/* 80854DF4-80854E10 001C+00 s=1 e=0 z=0  None .data      @6166                                                        */
SECTION_DATA static void* lit_6166[7] = {
	(void*)(((char*)executePerchDemo__8daKago_cFv)+0xAC),
	(void*)(((char*)executePerchDemo__8daKago_cFv)+0x3B8),
	(void*)(((char*)executePerchDemo__8daKago_cFv)+0x5A8),
	(void*)(((char*)executePerchDemo__8daKago_cFv)+0xA7C),
	(void*)(((char*)executePerchDemo__8daKago_cFv)+0xC2C),
	(void*)(((char*)executePerchDemo__8daKago_cFv)+0xCA8),
	(void*)(((char*)executePerchDemo__8daKago_cFv)+0xD9C),
};

/* 80854E10-80854E34 0024+00 s=1 e=0 z=0  None .data      @6560                                                        */
SECTION_DATA static void* lit_6560[9] = {
	(void*)(((char*)initFirstDemo__8daKago_cFv)+0x98),
	(void*)(((char*)initFirstDemo__8daKago_cFv)+0x2A0),
	(void*)(((char*)initFirstDemo__8daKago_cFv)+0x390),
	(void*)(((char*)initFirstDemo__8daKago_cFv)+0x3B4),
	(void*)(((char*)initFirstDemo__8daKago_cFv)+0x4C8),
	(void*)(((char*)initFirstDemo__8daKago_cFv)+0x53C),
	(void*)(((char*)initFirstDemo__8daKago_cFv)+0x598),
	(void*)(((char*)initFirstDemo__8daKago_cFv)+0x5F4),
	(void*)(((char*)initFirstDemo__8daKago_cFv)+0x5FC),
};

/* 80854E34-80854E5C 0028+00 s=1 e=0 z=0  None .data      @6924                                                        */
SECTION_DATA static void* lit_6924[10] = {
	(void*)(((char*)executeFirstDemo__8daKago_cFv)+0x9C),
	(void*)(((char*)executeFirstDemo__8daKago_cFv)+0x1E0),
	(void*)(((char*)executeFirstDemo__8daKago_cFv)+0x3F4),
	(void*)(((char*)executeFirstDemo__8daKago_cFv)+0x50C),
	(void*)(((char*)executeFirstDemo__8daKago_cFv)+0x5C8),
	(void*)(((char*)executeFirstDemo__8daKago_cFv)+0x920),
	(void*)(((char*)executeFirstDemo__8daKago_cFv)+0xBF4),
	(void*)(((char*)executeFirstDemo__8daKago_cFv)+0xE24),
	(void*)(((char*)executeFirstDemo__8daKago_cFv)+0xE24),
	(void*)(((char*)executeFirstDemo__8daKago_cFv)+0xF28),
};

/* 80854E5C-80854E78 001C+00 s=1 e=0 z=0  None .data      @7130                                                        */
SECTION_DATA static void* lit_7130[7] = {
	(void*)(((char*)executeLandingLakeHairia__8daKago_cFv)+0x64),
	(void*)(((char*)executeLandingLakeHairia__8daKago_cFv)+0x188),
	(void*)(((char*)executeLandingLakeHairia__8daKago_cFv)+0x1A8),
	(void*)(((char*)executeLandingLakeHairia__8daKago_cFv)+0x2F4),
	(void*)(((char*)executeLandingLakeHairia__8daKago_cFv)+0x3E0),
	(void*)(((char*)executeLandingLakeHairia__8daKago_cFv)+0x480),
	(void*)(((char*)executeLandingLakeHairia__8daKago_cFv)+0x56C),
};

/* 80854E78-80854E84 000C+00 s=1 e=0 z=0  None .data      kago_wall_hit_id$7718                                        */
SECTION_DATA static u8 kago_wall_hit_id[12] = {
	0x86, 0x58, 0x86, 0xF9, 0x86, 0xFA, 0x86, 0x59, 0x86, 0xFB, 0x86, 0xFC,
};

/* 80854E84-80854E8C 0006+02 s=1 e=0 z=0  None .data      kago_wave_id$7737                                            */
SECTION_DATA static u8 kago_wave_id_7737[6 + 2 /* padding */] = {
	0x86, 0x5A, 0x86, 0x5B, 0x86, 0x5C,
	/* padding */
	0x00, 0x00,
};

/* 80854E8C-80854E90 0004+00 s=1 e=0 z=0  None .data      kago_wave_id$7791                                            */
SECTION_DATA static u8 kago_wave_id_7791[4] = {
	0x86, 0x5B, 0x86, 0x5C,
};

/* 80854E90-80854EBC 002C+00 s=1 e=0 z=0  None .data      @7982                                                        */
SECTION_DATA static void* lit_7982[11] = {
	(void*)(((char*)action__8daKago_cFv)+0x13C),
	(void*)(((char*)action__8daKago_cFv)+0x148),
	(void*)(((char*)action__8daKago_cFv)+0x154),
	(void*)(((char*)action__8daKago_cFv)+0x160),
	(void*)(((char*)action__8daKago_cFv)+0x16C),
	(void*)(((char*)action__8daKago_cFv)+0x178),
	(void*)(((char*)action__8daKago_cFv)+0x184),
	(void*)(((char*)action__8daKago_cFv)+0x190),
	(void*)(((char*)action__8daKago_cFv)+0x19C),
	(void*)(((char*)action__8daKago_cFv)+0x1A8),
	(void*)(((char*)action__8daKago_cFv)+0x1B4),
};

/* 80854EBC-80854EDC 0020+00 s=1 e=0 z=0  None .data      l_daKago_Method                                              */
SECTION_DATA static void* l_daKago_Method[8] = {
	(void*)daKago_Create__FP8daKago_c,
	(void*)daKago_Delete__FP8daKago_c,
	(void*)daKago_Execute__FP8daKago_c,
	(void*)daKago_IsDelete__FP8daKago_c,
	(void*)daKago_Draw__FP8daKago_c,
	(void*)NULL,
	(void*)NULL,
	(void*)NULL,
};

/* 80854EDC-80854F0C 0030+00 s=0 e=0 z=1  None .data      g_profile_KAGO                                               */
SECTION_DATA void* g_profile_KAGO[12] = {
	(void*)0xFFFFFFFD,
	(void*)0x0004FFFD,
	(void*)0x00F40000,
	(void*)&g_fpcLf_Method,
	(void*)0x00000BA4,
	(void*)NULL,
	(void*)NULL,
	(void*)&g_fopAc_Method,
	(void*)0x02B50000,
	(void*)&l_daKago_Method,
	(void*)0x00044000,
	(void*)0x040E0000,
};

/* 80854F0C-80854F18 000C+00 s=2 e=0 z=0  None .data      __vt__8cM3dGSph                                              */
SECTION_DATA void* __vt__8cM3dGSph[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__8cM3dGSphFv,
};

/* 80854F18-80854F24 000C+00 s=2 e=0 z=0  None .data      __vt__8cM3dGAab                                              */
SECTION_DATA void* __vt__8cM3dGAab[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__8cM3dGAabFv,
};

/* 80854F24-80854F48 0024+00 s=2 e=0 z=0  None .data      __vt__12dBgS_ObjAcch                                         */
SECTION_DATA void* __vt__12dBgS_ObjAcch[9] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__12dBgS_ObjAcchFv,
	(void*)NULL,
	(void*)NULL,
	(void*)func_80854AD8,
	(void*)NULL,
	(void*)NULL,
	(void*)func_80854AD0,
};

/* 80854F48-80854F54 000C+00 s=2 e=0 z=0  None .data      __vt__8cM3dGPla                                              */
SECTION_DATA void* __vt__8cM3dGPla[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__8cM3dGPlaFv,
};

/* 80854F54-80854F60 000C+00 s=2 e=0 z=0  None .data      __vt__12daKago_HIO_c                                         */
SECTION_DATA void* __vt__12daKago_HIO_c[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__12daKago_HIO_cFv,
};

/* 808495AC-80849660 00B4+00 s=1 e=0 z=0  None .text      __ct__12daKago_HIO_cFv                                       */
//	808495AC: 80854B04 (lit_3929)
//	808495B0: 80854B04 (lit_3929)
//	808495B4: 80854F54 (__vt__12daKago_HIO_c)
//	808495B8: 80854F54 (__vt__12daKago_HIO_c)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm daKago_HIO_c::daKago_HIO_c() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/__ct__12daKago_HIO_cFv.s"
}
#pragma pop


/* 80849660-808496F0 0090+00 s=4 e=0 z=0  None .text      getBckName__8daKago_cFi                                      */
//	80849680: 80854D8C (lit_3969)
//	80849684: 80854D8C (lit_3969)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
asm void daKago_c::getBckName(int param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/getBckName__8daKago_cFi.s"
}
#pragma pop


/* ############################################################################################## */
/* 80854B08-80854B0C 0004+00 s=0 e=0 z=0  None .rodata    @3930                                                        */
SECTION_RODATA u32 const lit_3930 = 0x44000000;

/* 80854B0C-80854B10 0004+00 s=0 e=0 z=0  None .rodata    @3931                                                        */
SECTION_RODATA u32 const lit_3931 = 0x43800000;

/* 80854B10-80854B14 0004+00 s=11 e=0 z=0  None .rodata    @3932                                                        */
SECTION_RODATA static u32 const lit_3932 = 0x3F800000;

/* 80854B14-80854B18 0004+00 s=0 e=0 z=0  None .rodata    @3933                                                        */
SECTION_RODATA u32 const lit_3933 = 0x42480000;

/* 80854B18-80854B1C 0004+00 s=0 e=0 z=0  None .rodata    @3934                                                        */
SECTION_RODATA u32 const lit_3934 = 0x428C0000;

/* 80854B1C-80854B20 0004+00 s=0 e=0 z=0  None .rodata    @3935                                                        */
SECTION_RODATA u32 const lit_3935 = 0x42B40000;

/* 80854B20-80854B24 0004+00 s=0 e=0 z=0  None .rodata    @3936                                                        */
SECTION_RODATA u32 const lit_3936 = 0x40A00000;

/* 80854B24-80854B28 0004+00 s=0 e=0 z=0  None .rodata    @3937                                                        */
SECTION_RODATA u32 const lit_3937 = 0x43960000;

/* 80854B28-80854B2C 0004+00 s=0 e=0 z=0  None .rodata    @3938                                                        */
SECTION_RODATA u32 const lit_3938 = 0x40400000;

/* 80854B2C-80854B30 0004+00 s=0 e=0 z=0  None .rodata    @3939                                                        */
SECTION_RODATA u32 const lit_3939 = 0x42AA0000;

/* 80854B30-80854B34 0004+00 s=0 e=0 z=0  None .rodata    @3940                                                        */
SECTION_RODATA u32 const lit_3940 = 0x442F0000;

/* 80854B34-80854B38 0004+00 s=1 e=0 z=0  None .rodata    @3941                                                        */
SECTION_RODATA static u32 const lit_3941 = 0x43480000;

/* 80854B38-80854B3C 0004+00 s=4 e=0 z=0  None .rodata    @3942                                                        */
SECTION_RODATA static u8 const lit_3942[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 80854B3C-80854B40 0004+00 s=2 e=0 z=0  None .rodata    @3943                                                        */
SECTION_RODATA static u32 const lit_3943 = 0x41200000;

/* 80854B40-80854B44 0004+00 s=1 e=0 z=0  None .rodata    @3978                                                        */
SECTION_RODATA static u32 const lit_3978 = 0xBF800000;

/* 808496F0-80849798 00A8+00 s=13 e=0 z=0  None .text      setBck__8daKago_cFiUcff                                      */
//	80849724: 80849660 (getBckName__8daKago_cFi)
//	80849730: 804061C0 (g_dComIfG_gameInfo)
//	80849734: 804061C0 (g_dComIfG_gameInfo)
//	80849744: 8003C2EC (getRes__14dRes_control_cFPCclP11dRes_info_ci)
//	8084975C: 80854B38 (lit_3942)
//	80849760: 80854B38 (lit_3942)
//	80849764: 80854B40 (lit_3978)
//	80849768: 80854B40 (lit_3978)
//	8084976C: 80010E70 (setAnm__16mDoExt_McaMorfSOFP15J3DAnmTransformiffff)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
//  u8 False
//  f32 False
//  f32 False
asm void daKago_c::setBck(int param_0, u8 param_1, f32 param_2, f32 param_3) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/setBck__8daKago_cFiUcff.s"
}
#pragma pop


/* 80849798-808497F8 0060+00 s=6 e=0 z=0  None .text      checkBck__8daKago_cFi                                        */
//	808497AC: 80849660 (getBckName__8daKago_cFi)
//	808497B8: 804061C0 (g_dComIfG_gameInfo)
//	808497BC: 804061C0 (g_dComIfG_gameInfo)
//	808497CC: 8003C2EC (getRes__14dRes_control_cFPCclP11dRes_info_ci)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
asm void daKago_c::checkBck(int param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/checkBck__8daKago_cFi.s"
}
#pragma pop


/* 808497F8-80849924 012C+00 s=1 e=0 z=0  None .text      draw__8daKago_cFv                                            */
//	80849808: 803621D8 (_savegpr_28)
//	80849810: 80854B04 (lit_3929)
//	80849814: 80854B04 (lit_3929)
//	8084982C: 8042CA54 (g_env_light)
//	80849830: 8042CA54 (g_env_light)
//	80849840: 801A37C4 (settingTevStruct__18dScnKy_env_light_cFiP4cXyzP12dKy_tevstr_c)
//	8084984C: 8042CA54 (g_env_light)
//	80849850: 8042CA54 (g_env_light)
//	8084985C: 801A4DA0 (setLightTevColorType_MAJI__18dScnKy_env_light_cFP12J3DModelDataP12dKy_tevstr_c)
//	80849868: 8001D42C (fopAcM_setEffectMtx__FPC10fopAc_ac_cPC12J3DModelData)
//	8084986C: 804061C0 (g_dComIfG_gameInfo)
//	80849870: 804061C0 (g_dComIfG_gameInfo)
//	80849878: 80434AC8 (j3dSys)
//	8084987C: 80434AC8 (j3dSys)
//	80849890: 800111C0 (entryDL__16mDoExt_McaMorfSOFv)
//	80849894: 804061C0 (g_dComIfG_gameInfo)
//	80849898: 804061C0 (g_dComIfG_gameInfo)
//	808498F8: 804248D0 (mSimpleTexObj__21dDlst_shadowControl_c)
//	808498FC: 804248D0 (mSimpleTexObj__21dDlst_shadowControl_c)
//	80849900: 8002E910 (dComIfGd_setShadow__FUlScP8J3DModelP4cXyzffffR13cBgS_PolyInfoP12dKy_tevstr_csfP9_GXTexObj)
//	80849910: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::draw() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/draw__8daKago_cFv.s"
}
#pragma pop


/* 80849924-80849960 003C+00 s=1 e=0 z=0  None .text      __dt__4cXyzFv                                                */
//	80849944: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cXyz::~cXyz() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/__dt__4cXyzFv.s"
}
#pragma pop


/* 80849960-80849980 0020+00 s=1 e=0 z=0  None .text      daKago_Draw__FP8daKago_c                                     */
//	8084996C: 808497F8 (draw__8daKago_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daKago_c* False
// 	 daKago_c False
asm static void daKago_Draw(daKago_c* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/daKago_Draw__FP8daKago_c.s"
}
#pragma pop


/* ############################################################################################## */
/* 80854B44-80854B48 0004+00 s=1 e=0 z=0  None .rodata    @4033                                                        */
SECTION_RODATA static u32 const lit_4033 = 0x42C80000;

/* 80854B48-80854B4C 0004+00 s=0 e=0 z=0  None .rodata    @4034                                                        */
SECTION_RODATA u32 const lit_4034 = 0x455AC000;

/* 80854B4C-80854B54 0008+00 s=0 e=0 z=0  None .rodata    @4201                                                        */
SECTION_RODATA u8 const lit_4201[8] = {
	0x3F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 80854B54-80854B5C 0008+00 s=0 e=0 z=0  None .rodata    @4202                                                        */
SECTION_RODATA u8 const lit_4202[8] = {
	0x40, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 80854B5C-80854B64 0008+00 s=0 e=0 z=0  None .rodata    @4203                                                        */
SECTION_RODATA u8 const lit_4203[8] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 80854B64-80854B68 0004+00 s=0 e=0 z=0  None .rodata    @4204                                                        */
SECTION_RODATA u32 const lit_4204 = 0x43FA0000;

/* 80854B68-80854B6C 0004+00 s=0 e=0 z=0  None .rodata    @4205                                                        */
SECTION_RODATA u32 const lit_4205 = 0xCE6E6B28;

/* 80854B6C-80854B70 0004+00 s=0 e=0 z=0  None .rodata    @4206                                                        */
SECTION_RODATA u32 const lit_4206 = 0x42A00000;

/* 80854B70-80854B74 0004+00 s=0 e=0 z=0  None .rodata    @4255                                                        */
SECTION_RODATA u32 const lit_4255 = 0x4E6E6B28;

/* 80854B74-80854B78 0004+00 s=0 e=0 z=0  None .rodata    @4256                                                        */
SECTION_RODATA u32 const lit_4256 = 0x439B0000;

/* 80854B78-80854B7C 0004+00 s=2 e=0 z=0  None .rodata    @4270                                                        */
SECTION_RODATA static u32 const lit_4270 = 0x41F00000;

/* 80854B7C-80854B80 0004+00 s=0 e=0 z=0  None .rodata    @4415                                                        */
SECTION_RODATA u32 const lit_4415 = 0x3F666666;

/* 80854B80-80854B84 0004+00 s=0 e=0 z=0  None .rodata    @4478                                                        */
SECTION_RODATA u32 const lit_4478 = 0xC7981980;

/* 80854B84-80854B88 0004+00 s=0 e=0 z=0  None .rodata    @4479                                                        */
SECTION_RODATA u32 const lit_4479 = 0xC68EDE00;

/* 80854B88-80854B8C 0004+00 s=0 e=0 z=0  None .rodata    @4480                                                        */
SECTION_RODATA u32 const lit_4480 = 0x47241000;

/* 80854B8C-80854B90 0004+00 s=0 e=0 z=0  None .rodata    @4481                                                        */
SECTION_RODATA u32 const lit_4481 = 0xC796ED80;

/* 80854B90-80854B94 0004+00 s=0 e=0 z=0  None .rodata    @4482                                                        */
SECTION_RODATA u32 const lit_4482 = 0xC6908800;

/* 80854B94-80854B98 0004+00 s=0 e=0 z=0  None .rodata    @4483                                                        */
SECTION_RODATA u32 const lit_4483 = 0x47208200;

/* 80854B98-80854B9C 0004+00 s=0 e=0 z=0  None .rodata    @4484                                                        */
SECTION_RODATA u32 const lit_4484 = 0xC7979780;

/* 80854B9C-80854BA0 0004+00 s=0 e=0 z=0  None .rodata    @4485                                                        */
SECTION_RODATA u32 const lit_4485 = 0xC691A000;

/* 80854BA0-80854BA4 0004+00 s=0 e=0 z=0  None .rodata    @4486                                                        */
SECTION_RODATA u32 const lit_4486 = 0x4721B800;

/* 80854BA4-80854BA8 0004+00 s=0 e=0 z=0  None .rodata    @4487                                                        */
SECTION_RODATA u32 const lit_4487 = 0x45677000;

/* 80854BA8-80854BAC 0004+00 s=0 e=0 z=0  None .rodata    @4488                                                        */
SECTION_RODATA u32 const lit_4488 = 0x43A88000;

/* 80854BAC-80854BB0 0004+00 s=0 e=0 z=0  None .rodata    @4489                                                        */
SECTION_RODATA u32 const lit_4489 = 0x4457C000;

/* 80854BB0-80854BB4 0004+00 s=0 e=0 z=0  None .rodata    @4490                                                        */
SECTION_RODATA u32 const lit_4490 = 0x4568E000;

/* 80854BB4-80854BB8 0004+00 s=0 e=0 z=0  None .rodata    @4491                                                        */
SECTION_RODATA u32 const lit_4491 = 0x43880000;

/* 80854BB8-80854BBC 0004+00 s=0 e=0 z=0  None .rodata    @4492                                                        */
SECTION_RODATA u32 const lit_4492 = 0x44958000;

/* 80854BBC-80854BC0 0004+00 s=0 e=0 z=0  None .rodata    @4493                                                        */
SECTION_RODATA u32 const lit_4493 = 0x456C6000;

/* 80854BC0-80854BC4 0004+00 s=0 e=0 z=0  None .rodata    @4494                                                        */
SECTION_RODATA u32 const lit_4494 = 0x435E0000;

/* 80854BC4-80854BC8 0004+00 s=0 e=0 z=0  None .rodata    @4495                                                        */
SECTION_RODATA u32 const lit_4495 = 0x442C8000;

/* 80854BC8-80854BCC 0004+00 s=0 e=0 z=0  None .rodata    @4657                                                        */
SECTION_RODATA u32 const lit_4657 = 0x47C35000;

/* 80854BCC-80854BD0 0004+00 s=0 e=0 z=0  None .rodata    @4759                                                        */
SECTION_RODATA u32 const lit_4759 = 0xC6B39000;

/* 80854BD0-80854BD4 0004+00 s=0 e=0 z=0  None .rodata    @4760                                                        */
SECTION_RODATA u32 const lit_4760 = 0x45E8F800;

/* 80854BD4-80854BDC 0008+00 s=2 e=0 z=0  None .rodata    @4923                                                        */
SECTION_RODATA static u8 const lit_4923[8] = {
	0x43, 0x30, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
};

/* 80854BDC-80854BE0 0004+00 s=0 e=0 z=0  None .rodata    @5091                                                        */
SECTION_RODATA u32 const lit_5091 = 0x42200000;

/* 80854BE0-80854BE4 0004+00 s=0 e=0 z=0  None .rodata    @5092                                                        */
SECTION_RODATA u32 const lit_5092 = 0x41A00000;

/* 80854BE4-80854BE8 0004+00 s=0 e=0 z=0  None .rodata    @5329                                                        */
SECTION_RODATA u32 const lit_5329 = 0x40000000;

/* 80854BE8-80854BEC 0004+00 s=0 e=0 z=0  None .rodata    @5478                                                        */
SECTION_RODATA u32 const lit_5478 = 0xC1F00000;

/* 80854BEC-80854BF0 0004+00 s=0 e=0 z=0  None .rodata    @5479                                                        */
SECTION_RODATA u32 const lit_5479 = 0xC2480000;

/* 80854BF0-80854BF4 0004+00 s=0 e=0 z=0  None .rodata    @5480                                                        */
SECTION_RODATA u32 const lit_5480 = 0x41B00000;

/* 80854BF4-80854BF8 0004+00 s=1 e=0 z=0  None .rodata    @5481                                                        */
SECTION_RODATA static u32 const lit_5481 = 0x3F000000;

/* 80854BF8-80854BFC 0004+00 s=0 e=0 z=0  None .rodata    @5482                                                        */
SECTION_RODATA u32 const lit_5482 = 0xC1200000;

/* 80854BFC-80854C00 0004+00 s=0 e=0 z=0  None .rodata    @5671                                                        */
SECTION_RODATA u32 const lit_5671 = 0x41100000;

/* 80854C00-80854C04 0004+00 s=0 e=0 z=0  None .rodata    @5672                                                        */
SECTION_RODATA u32 const lit_5672 = 0x41400000;

/* 80854C04-80854C08 0004+00 s=0 e=0 z=0  None .rodata    @5673                                                        */
SECTION_RODATA u32 const lit_5673 = 0x420C0000;

/* 80854C08-80854C0C 0004+00 s=0 e=0 z=0  None .rodata    @5674                                                        */
SECTION_RODATA u32 const lit_5674 = 0x41B80000;

/* 80854C0C-80854C10 0004+00 s=0 e=0 z=0  None .rodata    @5675                                                        */
SECTION_RODATA u32 const lit_5675 = 0x45FA0000;

/* 80854C10-80854C14 0004+00 s=0 e=0 z=0  None .rodata    @5722                                                        */
SECTION_RODATA u32 const lit_5722 = 0x44BB8000;

/* 80854C14-80854C18 0004+00 s=0 e=0 z=0  None .rodata    @5723                                                        */
SECTION_RODATA u32 const lit_5723 = 0x3DCCCCCD;

/* 80854C18-80854C1C 0004+00 s=0 e=0 z=0  None .rodata    @5724                                                        */
SECTION_RODATA u32 const lit_5724 = 0xC47A0000;

/* 80854C1C-80854C20 0004+00 s=0 e=0 z=0  None .rodata    @5725                                                        */
SECTION_RODATA u32 const lit_5725 = 0x42700000;

/* 80854C20-80854C24 0004+00 s=0 e=0 z=0  None .rodata    @5852                                                        */
SECTION_RODATA u32 const lit_5852 = 0xC7AFC800;

/* 80854C24-80854C28 0004+00 s=0 e=0 z=0  None .rodata    @5853                                                        */
SECTION_RODATA u32 const lit_5853 = 0x447A0000;

/* 80854C28-80854C2C 0004+00 s=0 e=0 z=0  None .rodata    @5854                                                        */
SECTION_RODATA u32 const lit_5854 = 0xC3960000;

/* 80854C2C-80854C30 0004+00 s=0 e=0 z=0  None .rodata    @5855                                                        */
SECTION_RODATA u32 const lit_5855 = 0xC2C80000;

/* 80854C30-80854C34 0004+00 s=0 e=0 z=0  None .rodata    @5856                                                        */
SECTION_RODATA u32 const lit_5856 = 0xC67A0000;

/* 80854C34-80854C38 0004+00 s=0 e=0 z=0  None .rodata    @5857                                                        */
SECTION_RODATA u32 const lit_5857 = 0x471C4000;

/* 80854C38-80854C3C 0004+00 s=0 e=0 z=0  None .rodata    @6160                                                        */
SECTION_RODATA u32 const lit_6160 = 0x3E99999A;

/* 80854C3C-80854C40 0004+00 s=0 e=0 z=0  None .rodata    @6161                                                        */
SECTION_RODATA u32 const lit_6161 = 0xC0400000;

/* 80854C40-80854C44 0004+00 s=0 e=0 z=0  None .rodata    @6162                                                        */
SECTION_RODATA u32 const lit_6162 = 0x44FA0000;

/* 80854C44-80854C48 0004+00 s=0 e=0 z=0  None .rodata    @6163                                                        */
SECTION_RODATA u32 const lit_6163 = 0x43C80000;

/* 80854C48-80854C4C 0004+00 s=0 e=0 z=0  None .rodata    @6164                                                        */
SECTION_RODATA u32 const lit_6164 = 0x3D4CCCCD;

/* 80854C4C-80854C50 0004+00 s=0 e=0 z=0  None .rodata    @6165                                                        */
SECTION_RODATA u32 const lit_6165 = 0xC4480000;

/* 80854C50-80854C54 0004+00 s=0 e=0 z=0  None .rodata    @6372                                                        */
SECTION_RODATA u32 const lit_6372 = 0xC3480000;

/* 80854C54-80854C58 0004+00 s=0 e=0 z=0  None .rodata    @6373                                                        */
SECTION_RODATA u32 const lit_6373 = 0xC3FA0000;

/* 80854C58-80854C5C 0004+00 s=0 e=0 z=0  None .rodata    @6544                                                        */
SECTION_RODATA u32 const lit_6544 = 0xC7C9BE00;

/* 80854C5C-80854C60 0004+00 s=0 e=0 z=0  None .rodata    @6545                                                        */
SECTION_RODATA u32 const lit_6545 = 0xC6B71A00;

/* 80854C60-80854C64 0004+00 s=0 e=0 z=0  None .rodata    @6546                                                        */
SECTION_RODATA u32 const lit_6546 = 0x471BF500;

/* 80854C64-80854C68 0004+00 s=0 e=0 z=0  None .rodata    @6547                                                        */
SECTION_RODATA u32 const lit_6547 = 0xC76A6000;

/* 80854C68-80854C6C 0004+00 s=0 e=0 z=0  None .rodata    @6548                                                        */
SECTION_RODATA u32 const lit_6548 = 0xC62BE000;

/* 80854C6C-80854C70 0004+00 s=0 e=0 z=0  None .rodata    @6549                                                        */
SECTION_RODATA u32 const lit_6549 = 0x46DAC000;

/* 80854C70-80854C74 0004+00 s=1 e=0 z=0  None .rodata    @6550                                                        */
SECTION_RODATA static u32 const lit_6550 = 0x43160000;

/* 80854C74-80854C78 0004+00 s=0 e=0 z=0  None .rodata    @6551                                                        */
SECTION_RODATA u32 const lit_6551 = 0xC782DC00;

/* 80854C78-80854C7C 0004+00 s=0 e=0 z=0  None .rodata    @6552                                                        */
SECTION_RODATA u32 const lit_6552 = 0xC64B2000;

/* 80854C7C-80854C80 0004+00 s=0 e=0 z=0  None .rodata    @6553                                                        */
SECTION_RODATA u32 const lit_6553 = 0xC7959C00;

/* 80854C80-80854C84 0004+00 s=0 e=0 z=0  None .rodata    @6554                                                        */
SECTION_RODATA u32 const lit_6554 = 0xC6723000;

/* 80854C84-80854C88 0004+00 s=0 e=0 z=0  None .rodata    @6555                                                        */
SECTION_RODATA u32 const lit_6555 = 0x4711DC00;

/* 80854C88-80854C8C 0004+00 s=0 e=0 z=0  None .rodata    @6556                                                        */
SECTION_RODATA u32 const lit_6556 = 0xC792F000;

/* 80854C8C-80854C90 0004+00 s=0 e=0 z=0  None .rodata    @6557                                                        */
SECTION_RODATA u32 const lit_6557 = 0xC6657400;

/* 80854C90-80854C94 0004+00 s=0 e=0 z=0  None .rodata    @6558                                                        */
SECTION_RODATA u32 const lit_6558 = 0x47067100;

/* 80854C94-80854C98 0004+00 s=0 e=0 z=0  None .rodata    @6559                                                        */
SECTION_RODATA u32 const lit_6559 = 0x459C4000;

/* 80854C98-80854C9C 0004+00 s=0 e=0 z=0  None .rodata    @6917                                                        */
SECTION_RODATA u32 const lit_6917 = 0x449C4000;

/* 80854C9C-80854CA0 0004+00 s=0 e=0 z=0  None .rodata    @6918                                                        */
SECTION_RODATA u32 const lit_6918 = 0x40D66666;

/* 80854CA0-80854CA4 0004+00 s=0 e=0 z=0  None .rodata    @6919                                                        */
SECTION_RODATA u32 const lit_6919 = 0xC3C80000;

/* 80854CA4-80854CA8 0004+00 s=0 e=0 z=0  None .rodata    @6920                                                        */
SECTION_RODATA u32 const lit_6920 = 0x40E33333;

/* 80854CA8-80854CAC 0004+00 s=0 e=0 z=0  None .rodata    @6921                                                        */
SECTION_RODATA u32 const lit_6921 = 0x40800000;

/* 80854CAC-80854CB0 0004+00 s=0 e=0 z=0  None .rodata    @6922                                                        */
SECTION_RODATA u32 const lit_6922 = 0x43AF0000;

/* 80854CB0-80854CB4 0004+00 s=0 e=0 z=0  None .rodata    @6923                                                        */
SECTION_RODATA u32 const lit_6923 = 0x40C00000;

/* 80854CB4-80854CB8 0004+00 s=0 e=0 z=0  None .rodata    @7121                                                        */
SECTION_RODATA u32 const lit_7121 = 0xC42F0000;

/* 80854CB8-80854CBC 0004+00 s=0 e=0 z=0  None .rodata    @7122                                                        */
SECTION_RODATA u32 const lit_7122 = 0xC7918200;

/* 80854CBC-80854CC0 0004+00 s=0 e=0 z=0  None .rodata    @7123                                                        */
SECTION_RODATA u32 const lit_7123 = 0xC6479C00;

/* 80854CC0-80854CC4 0004+00 s=0 e=0 z=0  None .rodata    @7124                                                        */
SECTION_RODATA u32 const lit_7124 = 0x46F55000;

/* 80854CC4-80854CC8 0004+00 s=0 e=0 z=0  None .rodata    @7125                                                        */
SECTION_RODATA u32 const lit_7125 = 0xC79B3200;

/* 80854CC8-80854CCC 0004+00 s=0 e=0 z=0  None .rodata    @7126                                                        */
SECTION_RODATA u32 const lit_7126 = 0x47059800;

/* 80854CCC-80854CD0 0004+00 s=0 e=0 z=0  None .rodata    @7127                                                        */
SECTION_RODATA u32 const lit_7127 = 0xC7963200;

/* 80854CD0-80854CD4 0004+00 s=0 e=0 z=0  None .rodata    @7128                                                        */
SECTION_RODATA u32 const lit_7128 = 0xC690EC00;

/* 80854CD4-80854CD8 0004+00 s=0 e=0 z=0  None .rodata    @7129                                                        */
SECTION_RODATA u32 const lit_7129 = 0x4722BC00;

/* 80854CD8-80854CDC 0004+00 s=0 e=0 z=0  None .rodata    @7286                                                        */
SECTION_RODATA u32 const lit_7286 = 0x45B3B000;

/* 80854CDC-80854CE0 0004+00 s=0 e=0 z=0  None .rodata    @7287                                                        */
SECTION_RODATA u32 const lit_7287 = 0x44C80000;

/* 80854CE0-80854CE4 0004+00 s=0 e=0 z=0  None .rodata    @7288                                                        */
SECTION_RODATA u32 const lit_7288 = 0x45BEA000;

/* 80854CE4-80854CE8 0004+00 s=0 e=0 z=0  None .rodata    @7289                                                        */
SECTION_RODATA u32 const lit_7289 = 0x45354000;

/* 80854CE8-80854CEC 0004+00 s=0 e=0 z=0  None .rodata    @7290                                                        */
SECTION_RODATA u32 const lit_7290 = 0x4562E000;

/* 80854CEC-80854CF0 0004+00 s=0 e=0 z=0  None .rodata    @7291                                                        */
SECTION_RODATA u32 const lit_7291 = 0x44160000;

/* 80854CF0-80854CF4 0004+00 s=0 e=0 z=0  None .rodata    @7292                                                        */
SECTION_RODATA u32 const lit_7292 = 0x41700000;

/* 80854CF4-80854CF8 0004+00 s=0 e=0 z=0  None .rodata    @7293                                                        */
SECTION_RODATA u32 const lit_7293 = 0x45570000;

/* 80854CF8-80854CFC 0004+00 s=0 e=0 z=0  None .rodata    @7294                                                        */
SECTION_RODATA u32 const lit_7294 = 0x45600000;

/* 80854CFC-80854D00 0004+00 s=0 e=0 z=0  None .rodata    @7295                                                        */
SECTION_RODATA u32 const lit_7295 = 0x43870000;

/* 80854D00-80854D04 0004+00 s=0 e=0 z=0  None .rodata    @7296                                                        */
SECTION_RODATA u32 const lit_7296 = 0x447BC000;

/* 80854D04-80854D08 0004+00 s=0 e=0 z=0  None .rodata    @7910                                                        */
SECTION_RODATA u32 const lit_7910 = 0x41D80000;

/* 80854D08-80854D0C 0004+00 s=0 e=0 z=0  None .rodata    @7911                                                        */
SECTION_RODATA u32 const lit_7911 = 0x41E80000;

/* 80854D0C-80854D10 0004+00 s=0 e=0 z=0  None .rodata    @7912                                                        */
SECTION_RODATA u32 const lit_7912 = 0x41D00000;

/* 80854D10-80854D14 0004+00 s=0 e=0 z=0  None .rodata    @7981                                                        */
SECTION_RODATA u32 const lit_7981 = 0x3FC00000;

/* 80854D14-80854D4C 0038+00 s=2 e=0 z=0  None .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char const* const stringBase_80854D14 = "F_SP112";
SECTION_DEAD char const* const stringBase_80854D1C = "E_YC";
SECTION_DEAD char const* const stringBase_80854D21 = "KAGO_YAMI";
SECTION_DEAD char const* const stringBase_80854D2B = "E_KC";
SECTION_DEAD char const* const stringBase_80854D30 = "KAGO_HIKARI";
SECTION_DEAD char const* const stringBase_80854D3C = "F_SP115";
SECTION_DEAD char const* const stringBase_80854D44 = "F_SP126";
#pragma pop

/* 80849980-80849BA8 0228+00 s=1 e=0 z=0  None .text      executeBalloonMenu__8daKago_cFv                              */
//	80849998: 80181640 (dCam_getBody__Fv)
//	808499E8: 804061C0 (g_dComIfG_gameInfo)
//	808499EC: 804061C0 (g_dComIfG_gameInfo)
//	808499FC: 803DD2E8 (m_cpadInfo__8mDoCPd_c)
//	80849A00: 803DD2E8 (m_cpadInfo__8mDoCPd_c)
//	80849A48: 8001B908 (fopAcM_orderPotentialEvent__FP10fopAc_ac_cUsUsUs)
//	80849A70: 80249F90 (init__10dMsgFlow_cFP10fopAc_ac_ciiPP10fopAc_ac_c)
//	80849A78: 801614D0 (Stop__9dCamera_cFv)
//	80849A84: 8016300C (SetTrimSize__9dCamera_cFl)
//	80849AA4: 8024A2D8 (doFlow__10dMsgFlow_cFP10fopAc_ac_cPP10fopAc_ac_ci)
//	80849AB0: 80238440 (getSelectCursorPos__12dMsgObject_cFv)
//	80849AC8: 801614AC (Start__9dCamera_cFv)
//	80849AD4: 8016300C (SetTrimSize__9dCamera_cFl)
//	80849AD8: 804061C0 (g_dComIfG_gameInfo)
//	80849ADC: 804061C0 (g_dComIfG_gameInfo)
//	80849AE4: 80042468 (reset__14dEvt_control_cFv)
//	80849AF0: 80238440 (getSelectCursorPos__12dMsgObject_cFv)
//	80849B08: 80450D64 (struct_80450D64)
//	80849B0C: 80450D64 (struct_80450D64)
//	80849B18: 8002C97C (getLayerNo__14dComIfG_play_cFi)
//	80849B30: 80854D14 (stringBase0)
//	80849B34: 80854D14 (stringBase0)
//	80849B40: 80854B38 (lit_3942)
//	80849B44: 80854B38 (lit_3942)
//	80849B58: 8002D2FC (dComIfGp_setNextStage__FPCcsScScfUliScsii)
//	80849B6C: 80854B38 (lit_3942)
//	80849B70: 80854B38 (lit_3942)
//	80849B88: 80027170 (dStage_changeScene__FifUlScsi)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::executeBalloonMenu() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/executeBalloonMenu__8daKago_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80854F68-80854F6C 0004+00 s=2 e=0 z=0  None .bss       None                                                         */
static u8 data_80854F68[4];

/* 80854F6C-80854F78 000C+00 s=1 e=0 z=0  None .bss       @3924                                                        */
static u8 lit_3924[12];

/* 80854F78-80854FD4 005C+00 s=14 e=0 z=0  None .bss       l_HIO                                                        */
static u8 l_HIO[92];

/* 80849BA8-8084A070 04C8+00 s=4 e=0 z=0  None .text      checkGroundHeight__8daKago_cF4cXyzPf                         */
//	80849BC0: 803621D4 (_savegpr_27)
//	80849BD0: 80854B04 (lit_3929)
//	80849BD4: 80854B04 (lit_3929)
//	80849BF0: 800517B0 (dPath_GetPnt__FPC5dPathi)
//	80849C3C: 800517B0 (dPath_GetPnt__FPC5dPathi)
//	80849C60: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	80849C68: 803DD470 (now__14mDoMtx_stack_c)
//	80849C6C: 803DD470 (now__14mDoMtx_stack_c)
//	80849C7C: 8000C3DC (mDoMtx_YrotS__FPA4_fs)
//	80849C98: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	80849C9C: 803DD470 (now__14mDoMtx_stack_c)
//	80849CA0: 803DD470 (now__14mDoMtx_stack_c)
//	80849CAC: 80346D6C (PSMTXMultVec)
//	80849CC8: 803DD470 (now__14mDoMtx_stack_c)
//	80849CCC: 803DD470 (now__14mDoMtx_stack_c)
//	80849CD4: 8000C3DC (mDoMtx_YrotS__FPA4_fs)
//	80849CF0: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	80849CF4: 803DD470 (now__14mDoMtx_stack_c)
//	80849CF8: 803DD470 (now__14mDoMtx_stack_c)
//	80849D04: 80346D6C (PSMTXMultVec)
//	80849D7C: 8034739C (PSVECSquareDistance)
//	80849DEC: 80450AE0 (__float_nan)
//	80849DF0: 80450AE0 (__float_nan)
//	80849E5C: 80450AE0 (__float_nan)
//	80849E60: 80450AE0 (__float_nan)
//	80849E7C: 80854F78 (l_HIO)
//	80849E80: 80854F78 (l_HIO)
//	80849EA4: 8007757C (__ct__11dBgS_GndChkFv)
//	80849ED0: 80267D28 (SetPos__11cBgS_GndChkFPC4cXyz)
//	80849ED4: 804061C0 (g_dComIfG_gameInfo)
//	80849ED8: 804061C0 (g_dComIfG_gameInfo)
//	80849EE8: 800744A0 (GroundCross__4cBgSFP11cBgS_GndChk)
//	80849F10: 80074CBC (GetSpecialCode__4dBgSFRC13cBgS_PolyInfo)
//	80849F1C: 80854F78 (l_HIO)
//	80849F20: 80854F78 (l_HIO)
//	80849F70: 800777B0 (__ct__18dBgS_ObjGndChk_SplFv)
//	80849F7C: 80267D28 (SetPos__11cBgS_GndChkFPC4cXyz)
//	80849F88: 800744A0 (GroundCross__4cBgSFP11cBgS_GndChk)
//	80849F9C: 80854F78 (l_HIO)
//	80849FA0: 80854F78 (l_HIO)
//	8084A03C: 80077848 (__dt__18dBgS_ObjGndChk_SplFv)
//	8084A048: 800775F0 (__dt__11dBgS_GndChkFv)
//	8084A05C: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cXyz False
//  f32* False
// 	 f32 False
asm void daKago_c::checkGroundHeight(cXyz param_0, f32* param_1) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/checkGroundHeight__8daKago_cF4cXyzPf.s"
}
#pragma pop


/* 8084A070-8084A210 01A0+00 s=4 e=0 z=0  None .text      checkRoofHeight__8daKago_cF4cXyz                             */
//	8084A088: 803621D8 (_savegpr_28)
//	8084A094: 80854B04 (lit_3929)
//	8084A098: 80854B04 (lit_3929)
//	8084A0AC: 80078FF4 (__ct__12dBgS_RoofChkFv)
//	8084A0DC: 804061C0 (g_dComIfG_gameInfo)
//	8084A0E0: 804061C0 (g_dComIfG_gameInfo)
//	8084A0F0: 8007549C (RoofChk__4dBgSFP12dBgS_RoofChk)
//	8084A104: 80854F78 (l_HIO)
//	8084A108: 80854F78 (l_HIO)
//	8084A134: 80074CBC (GetSpecialCode__4dBgSFRC13cBgS_PolyInfo)
//	8084A168: 80074618 (GetActorPointer__4cBgSCFi)
//	8084A1E8: 80079090 (__dt__12dBgS_RoofChkFv)
//	8084A1FC: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cXyz False
asm void daKago_c::checkRoofHeight(cXyz param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/checkRoofHeight__8daKago_cF4cXyz.s"
}
#pragma pop


/* 8084A210-8084A2A8 0098+00 s=1 e=0 z=0  None .text      checkMoveHeight__8daKago_cFv                                 */
//	8084A224: 80854B44 (lit_4033)
//	8084A228: 80854B44 (lit_4033)
//	8084A250: 80849BA8 (checkGroundHeight__8daKago_cF4cXyzPf)
//	8084A25C: 80270740 (cLib_chaseF__FPfff)
//	8084A280: 8084A070 (checkRoofHeight__8daKago_cF4cXyz)
//	8084A288: 80854B78 (lit_4270)
//	8084A28C: 80854B78 (lit_4270)
//	8084A290: 80270740 (cLib_chaseF__FPfff)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::checkMoveHeight() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/checkMoveHeight__8daKago_cFv.s"
}
#pragma pop


/* 8084A2A8-8084A694 03EC+00 s=1 e=0 z=0  None .text      checkSizeBg__8daKago_cFv                                     */
//	8084A2B8: 803621D0 (_savegpr_26)
//	8084A2C0: 80854B04 (lit_3929)
//	8084A2C4: 80854B04 (lit_3929)
//	8084A2CC: 80077C68 (__ct__11dBgS_LinChkFv)
//	8084A2D0: 80854F48 (__vt__8cM3dGPla)
//	8084A2D4: 80854F48 (__vt__8cM3dGPla)
//	8084A304: 80077CDC (__dt__11dBgS_LinChkFv)
//	8084A318: 803DD470 (now__14mDoMtx_stack_c)
//	8084A31C: 803DD470 (now__14mDoMtx_stack_c)
//	8084A320: 803464B0 (PSMTXCopy)
//	8084A324: 803DD470 (now__14mDoMtx_stack_c)
//	8084A328: 803DD470 (now__14mDoMtx_stack_c)
//	8084A354: 803464B0 (PSMTXCopy)
//	8084A37C: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8084A38C: 80266B84 (__ml__4cXyzCFf)
//	8084A39C: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8084A3C8: 80077D64 (Set__11dBgS_LinChkFPC4cXyzPC4cXyzPC10fopAc_ac_c)
//	8084A3CC: 804061C0 (g_dComIfG_gameInfo)
//	8084A3D0: 804061C0 (g_dComIfG_gameInfo)
//	8084A3E0: 800743B4 (LineCross__4cBgSFP11cBgS_LinChk)
//	8084A3FC: 80074744 (GetTriPla__4cBgSCFRC13cBgS_PolyInfoP8cM3dGPla)
//	8084A408: 80074CBC (GetSpecialCode__4dBgSFRC13cBgS_PolyInfo)
//	8084A444: 803DD470 (now__14mDoMtx_stack_c)
//	8084A448: 803DD470 (now__14mDoMtx_stack_c)
//	8084A44C: 803464B0 (PSMTXCopy)
//	8084A474: 803DD470 (now__14mDoMtx_stack_c)
//	8084A478: 803DD470 (now__14mDoMtx_stack_c)
//	8084A47C: 803464B0 (PSMTXCopy)
//	8084A4A4: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8084A4B4: 80266B84 (__ml__4cXyzCFf)
//	8084A4C4: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8084A4F0: 80077D64 (Set__11dBgS_LinChkFPC4cXyzPC4cXyzPC10fopAc_ac_c)
//	8084A4FC: 800743B4 (LineCross__4cBgSFP11cBgS_LinChk)
//	8084A518: 80074744 (GetTriPla__4cBgSCFRC13cBgS_PolyInfoP8cM3dGPla)
//	8084A524: 80074CBC (GetSpecialCode__4dBgSFRC13cBgS_PolyInfo)
//	8084A578: 803DD470 (now__14mDoMtx_stack_c)
//	8084A57C: 803DD470 (now__14mDoMtx_stack_c)
//	8084A580: 803464B0 (PSMTXCopy)
//	8084A5A8: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	8084A5D4: 80077D64 (Set__11dBgS_LinChkFPC4cXyzPC4cXyzPC10fopAc_ac_c)
//	8084A5E0: 800743B4 (LineCross__4cBgSFP11cBgS_LinChk)
//	8084A5FC: 80074744 (GetTriPla__4cBgSCFRC13cBgS_PolyInfoP8cM3dGPla)
//	8084A608: 80074CBC (GetSpecialCode__4dBgSFRC13cBgS_PolyInfo)
//	8084A634: 8084B134 (checkYaguraPos__8daKago_cF4cXyz)
//	8084A664: 80854F48 (__vt__8cM3dGPla)
//	8084A668: 80854F48 (__vt__8cM3dGPla)
//	8084A678: 80077CDC (__dt__11dBgS_LinChkFv)
//	8084A680: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::checkSizeBg() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/checkSizeBg__8daKago_cFv.s"
}
#pragma pop


/* 8084A694-8084A6DC 0048+00 s=1 e=0 z=0  None .text      __dt__8cM3dGPlaFv                                            */
//	8084A6AC: 80854F48 (__vt__8cM3dGPla)
//	8084A6B0: 80854F48 (__vt__8cM3dGPla)
//	8084A6C0: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cM3dGPla::~cM3dGPla() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/__dt__8cM3dGPlaFv.s"
}
#pragma pop


/* 8084A6DC-8084A6E4 0008+00 s=1 e=0 z=0  None .text      getBeforeGroundHeight__8daKago_cFUc                          */
// True False
//  bool False
//  u8 False
bool daKago_c::getBeforeGroundHeight(u8 param_0) {
	return false;
}


/* 8084A6E4-8084AA64 0380+00 s=2 e=0 z=0  None .text      demo_skip__8daKago_cFi                                       */
//	8084A6F4: 803621D8 (_savegpr_28)
//	8084A700: 80854B04 (lit_3929)
//	8084A704: 80854B04 (lit_3929)
//	8084A708: 80181640 (dCam_getBody__Fv)
//	8084A718: 80854DC8 (lit_4496)
//	8084A71C: 80854DC8 (lit_4496)
//	8084A754: 8024A4C4 (remove__10dMsgFlow_cFv)
//	8084A75C: 8084AB40 (setMidnaRideOn__8daKago_cFv)
//	8084A764: 8084AB8C (setPlayerRideOn__8daKago_cFv)
//	8084A774: 804061C0 (g_dComIfG_gameInfo)
//	8084A778: 804061C0 (g_dComIfG_gameInfo)
//	8084A780: 803A7288 (saveBitLabels__16dSv_event_flag_c)
//	8084A784: 803A7288 (saveBitLabels__16dSv_event_flag_c)
//	8084A78C: 8003498C (onEventBit__11dSv_event_cFUs)
//	8084A7AC: 8084AE78 (setSceneChange__8daKago_cFi)
//	8084A7C4: 8084AE78 (setSceneChange__8daKago_cFi)
//	8084A7FC: 8084ABC8 (setRideOff__8daKago_cFv)
//	8084A848: 804061C0 (g_dComIfG_gameInfo)
//	8084A84C: 804061C0 (g_dComIfG_gameInfo)
//	8084A890: 8084AA98 (setActionMode__8daKago_cFii)
//	8084A8D8: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
//	8084A8E0: 80180C68 (Reset__9dCamera_cFv)
//	8084A8E8: 801614AC (Start__9dCamera_cFv)
//	8084A8F4: 8016300C (SetTrimSize__9dCamera_cFl)
//	8084A8F8: 804061C0 (g_dComIfG_gameInfo)
//	8084A8FC: 804061C0 (g_dComIfG_gameInfo)
//	8084A904: 80042468 (reset__14dEvt_control_cFv)
//	8084A908: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	8084A90C: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	8084A91C: 802B61E8 (setDemoName__11Z2StatusMgrFPc)
//	8084A928: 8084ABC8 (setRideOff__8daKago_cFv)
//	8084A974: 804061C0 (g_dComIfG_gameInfo)
//	8084A978: 804061C0 (g_dComIfG_gameInfo)
//	8084A9BC: 8084AA98 (setActionMode__8daKago_cFii)
//	8084AA04: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
//	8084AA0C: 80180C68 (Reset__9dCamera_cFv)
//	8084AA14: 801614AC (Start__9dCamera_cFv)
//	8084AA20: 8016300C (SetTrimSize__9dCamera_cFl)
//	8084AA24: 804061C0 (g_dComIfG_gameInfo)
//	8084AA28: 804061C0 (g_dComIfG_gameInfo)
//	8084AA30: 80042468 (reset__14dEvt_control_cFv)
//	8084AA34: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	8084AA38: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	8084AA48: 802B61E8 (setDemoName__11Z2StatusMgrFPc)
//	8084AA50: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
asm void daKago_c::demo_skip(int param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/demo_skip__8daKago_cFi.s"
}
#pragma pop


/* 8084AA64-8084AA98 0034+00 s=4 e=0 z=0  None .text      DemoSkipCallBack__8daKago_cFPvi                              */
//	8084AA78: 8084A6E4 (demo_skip__8daKago_cFi)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  void* False
// 	 void False
//  int False
asm void daKago_c::DemoSkipCallBack(void* param_0, int param_1) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/DemoSkipCallBack__8daKago_cFPvi.s"
}
#pragma pop


/* 8084AA98-8084AAAC 0014+00 s=17 e=0 z=0  None .text      setActionMode__8daKago_cFii                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
//  int False
asm void daKago_c::setActionMode(int param_0, int param_1) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/setActionMode__8daKago_cFii.s"
}
#pragma pop


/* 8084AAAC-8084AB40 0094+00 s=2 e=0 z=0  None .text      setMidnaTagPos__8daKago_cFv                                  */
//	8084AAC4: 80854AE0 (getMidnaActor__9daPy_py_cFv)
//	8084AAE4: 803DD470 (now__14mDoMtx_stack_c)
//	8084AAE8: 803DD470 (now__14mDoMtx_stack_c)
//	8084AAEC: 803464B0 (PSMTXCopy)
//	8084AAF0: 803DD470 (now__14mDoMtx_stack_c)
//	8084AAF4: 803DD470 (now__14mDoMtx_stack_c)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::setMidnaTagPos() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/setMidnaTagPos__8daKago_cFv.s"
}
#pragma pop


/* 8084AB40-8084AB8C 004C+00 s=5 e=0 z=0  None .text      setMidnaRideOn__8daKago_cFv                                  */
//	8084AB54: 80854AE0 (getMidnaActor__9daPy_py_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::setMidnaRideOn() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/setMidnaRideOn__8daKago_cFv.s"
}
#pragma pop


/* 8084AB8C-8084ABC8 003C+00 s=7 e=0 z=0  None .text      setPlayerRideOn__8daKago_cFv                                 */
//	8084AB9C: 804061C0 (g_dComIfG_gameInfo)
//	8084ABA0: 804061C0 (g_dComIfG_gameInfo)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::setPlayerRideOn() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/setPlayerRideOn__8daKago_cFv.s"
}
#pragma pop


/* 8084ABC8-8084AC2C 0064+00 s=5 e=0 z=0  None .text      setRideOff__8daKago_cFv                                      */
//	8084ABD4: 80854AE0 (getMidnaActor__9daPy_py_cFv)
//	8084ABFC: 804061C0 (g_dComIfG_gameInfo)
//	8084AC00: 804061C0 (g_dComIfG_gameInfo)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::setRideOff() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/setRideOff__8daKago_cFv.s"
}
#pragma pop


/* 8084AC2C-8084AE78 024C+00 s=1 e=0 z=0  None .text      searchNearPassPoint__8daKago_cFv                             */
//	8084AC64: 803621D8 (_savegpr_28)
//	8084AC6C: 80854B04 (lit_3929)
//	8084AC70: 80854B04 (lit_3929)
//	8084AC74: 804061C0 (g_dComIfG_gameInfo)
//	8084AC78: 804061C0 (g_dComIfG_gameInfo)
//	8084ACB8: 800517B0 (dPath_GetPnt__FPC5dPathi)
//	8084ACF4: 8034739C (PSVECSquareDistance)
//	8084AD60: 80450AE0 (__float_nan)
//	8084AD64: 80450AE0 (__float_nan)
//	8084ADD0: 80450AE0 (__float_nan)
//	8084ADD4: 80450AE0 (__float_nan)
//	8084AE64: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::searchNearPassPoint() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/searchNearPassPoint__8daKago_cFv.s"
}
#pragma pop


/* 8084AE78-8084AF40 00C8+00 s=4 e=0 z=0  None .text      setSceneChange__8daKago_cFi                                  */
//	8084AEDC: 8084B024 (endBalloonScore__8daKago_cFv)
//	8084AEF8: 8084B024 (endBalloonScore__8daKago_cFv)
//	8084AF08: 80854B38 (lit_3942)
//	8084AF0C: 80854B38 (lit_3942)
//	8084AF24: 80027170 (dStage_changeScene__FifUlScsi)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
asm void daKago_c::setSceneChange(int param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/setSceneChange__8daKago_cFi.s"
}
#pragma pop


/* 8084AF40-8084AFB0 0070+00 s=1 e=0 z=0  None .text      createBalloonScore__8daKago_cFv                              */
//	8084AF8C: 80019D98 (fopAcM_create__FsUlPC4cXyziPC5csXyzPC4cXyzSc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::createBalloonScore() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/createBalloonScore__8daKago_cFv.s"
}
#pragma pop


/* 8084AFB0-8084B024 0074+00 s=1 e=0 z=0  None .text      startBalloonScore__8daKago_cFv                               */
//	8084AFE4: 800199BC (fopAcM_SearchByID__FUiPP10fopAc_ac_c)
//	8084B004: 80653FC0 (setScoreCount__13daBalloon2D_cFUl)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::startBalloonScore() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/startBalloonScore__8daKago_cFv.s"
}
#pragma pop


/* 8084B024-8084B088 0064+00 s=1 e=0 z=0  None .text      endBalloonScore__8daKago_cFv                                 */
//	8084B044: 800199BC (fopAcM_SearchByID__FUiPP10fopAc_ac_c)
//	8084B064: 80019A2C (fopAcM_SearchByName__FsPP10fopAc_ac_c)
//	8084B074: 80BA80F4 (saveBestScore__15daObj_Balloon_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::endBalloonScore() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/endBalloonScore__8daKago_cFv.s"
}
#pragma pop


/* 8084B088-8084B108 0080+00 s=3 e=0 z=1  None .text      checkNextPath__8daKago_cF4cXyz                               */
//	8084B0A4: 803DD470 (now__14mDoMtx_stack_c)
//	8084B0A8: 803DD470 (now__14mDoMtx_stack_c)
//	8084B0B8: 8000C3DC (mDoMtx_YrotS__FPA4_fs)
//	8084B0D4: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	8084B0D8: 803DD470 (now__14mDoMtx_stack_c)
//	8084B0DC: 803DD470 (now__14mDoMtx_stack_c)
//	8084B0E8: 80346D6C (PSMTXMultVec)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cXyz False
asm void daKago_c::checkNextPath(cXyz param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/checkNextPath__8daKago_cF4cXyz.s"
}
#pragma pop


/* 8084B108-8084B134 002C+00 s=4 e=0 z=0  None .text      checkHeight__8daKago_cFv                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::checkHeight() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/checkHeight__8daKago_cFv.s"
}
#pragma pop


/* 8084B134-8084B1E0 00AC+00 s=2 e=0 z=0  None .text      checkYaguraPos__8daKago_cF4cXyz                              */
//	8084B14C: 80854B04 (lit_3929)
//	8084B150: 80854B04 (lit_3929)
//	8084B16C: 803DD470 (now__14mDoMtx_stack_c)
//	8084B170: 803DD470 (now__14mDoMtx_stack_c)
//	8084B178: 8000C3DC (mDoMtx_YrotS__FPA4_fs)
//	8084B194: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	8084B198: 803DD470 (now__14mDoMtx_stack_c)
//	8084B19C: 803DD470 (now__14mDoMtx_stack_c)
//	8084B1A8: 80346D6C (PSMTXMultVec)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cXyz False
asm void daKago_c::checkYaguraPos(cXyz param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/checkYaguraPos__8daKago_cF4cXyz.s"
}
#pragma pop


/* 8084B1E0-8084B56C 038C+00 s=3 e=0 z=0  None .text      checkWallHitFall__8daKago_cFi                                */
//	8084B1F0: 803621D8 (_savegpr_28)
//	8084B1FC: 80854B04 (lit_3929)
//	8084B200: 80854B04 (lit_3929)
//	8084B218: 8084AA98 (setActionMode__8daKago_cFii)
//	8084B230: 804061C0 (g_dComIfG_gameInfo)
//	8084B234: 804061C0 (g_dComIfG_gameInfo)
//	8084B248: 8006FA24 (StartShock__12dVibration_cFii4cXyz)
//	8084B288: 80853460 (setWallHitEffect__8daKago_cF4cXyzi)
//	8084B2D4: 8084B134 (checkYaguraPos__8daKago_cF4cXyz)
//	8084B2E4: 803650D0 (abs)
//	8084B2FC: 80439A20 (sincosTable___5JMath)
//	8084B300: 80439A20 (sincosTable___5JMath)
//	8084B358: 80439A20 (sincosTable___5JMath)
//	8084B35C: 80439A20 (sincosTable___5JMath)
//	8084B3B4: 80439A20 (sincosTable___5JMath)
//	8084B3B8: 80439A20 (sincosTable___5JMath)
//	8084B418: 8084AA98 (setActionMode__8daKago_cFii)
//	8084B430: 804061C0 (g_dComIfG_gameInfo)
//	8084B434: 804061C0 (g_dComIfG_gameInfo)
//	8084B448: 8006FA24 (StartShock__12dVibration_cFii4cXyz)
//	8084B470: 80853460 (setWallHitEffect__8daKago_cF4cXyzi)
//	8084B4AC: 804061C0 (g_dComIfG_gameInfo)
//	8084B4B0: 804061C0 (g_dComIfG_gameInfo)
//	8084B4C4: 8006FA24 (StartShock__12dVibration_cFii4cXyz)
//	8084B4E0: 8084AA98 (setActionMode__8daKago_cFii)
//	8084B508: 80853460 (setWallHitEffect__8daKago_cF4cXyzi)
//	8084B51C: 8084AA98 (setActionMode__8daKago_cFii)
//	8084B544: 80853460 (setWallHitEffect__8daKago_cF4cXyzi)
//	8084B558: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
asm void daKago_c::checkWallHitFall(int param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/checkWallHitFall__8daKago_cFi.s"
}
#pragma pop


/* 8084B56C-8084B5DC 0070+00 s=1 e=0 z=0  None .text      checkAttackStart__8daKago_cFv                                */
//	8084B594: 803DD2E8 (m_cpadInfo__8mDoCPd_c)
//	8084B598: 803DD2E8 (m_cpadInfo__8mDoCPd_c)
//	8084B5B0: 8084AA98 (setActionMode__8daKago_cFii)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::checkAttackStart() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/checkAttackStart__8daKago_cFv.s"
}
#pragma pop


/* 8084B5DC-8084B6F4 0118+00 s=1 e=0 z=0  None .text      getValueY__8daKago_cFf                                       */
//	8084B604: 80854B34 (lit_3941)
//	8084B608: 80854B34 (lit_3941)
//	8084B628: 80854B34 (lit_3941)
//	8084B62C: 80854B34 (lit_3941)
//	8084B63C: 80854BD4 (lit_4923)
//	8084B640: 80854BD4 (lit_4923)
//	8084B67C: 80854B34 (lit_3941)
//	8084B680: 80854B34 (lit_3941)
//	8084B6A4: 80854B34 (lit_3941)
//	8084B6A8: 80854B34 (lit_3941)
//	8084B6B8: 80854BD4 (lit_4923)
//	8084B6BC: 80854BD4 (lit_4923)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 False
asm void daKago_c::getValueY(f32 param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/getValueY__8daKago_cFf.s"
}
#pragma pop


/* 8084B6F4-8084B718 0024+00 s=1 e=0 z=0  None .text      getValueX__8daKago_cFf                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 False
asm void daKago_c::getValueX(f32 param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/getValueX__8daKago_cFf.s"
}
#pragma pop


/* 8084B718-8084B744 002C+00 s=1 e=0 z=0  None .text      getValueAbsX__8daKago_cFf                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 False
asm void daKago_c::getValueAbsX(f32 param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/getValueAbsX__8daKago_cFf.s"
}
#pragma pop


/* 8084B744-8084B96C 0228+00 s=1 e=0 z=0  None .text      flySpeedCalcLockOn__8daKago_cFv                              */
//	8084B754: 803621D8 (_savegpr_28)
//	8084B75C: 80854B04 (lit_3929)
//	8084B760: 80854B04 (lit_3929)
//	8084B770: 80270C74 (cLib_targetAngleX__FPC4cXyzPC4cXyz)
//	8084B788: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8084B7C8: 8034739C (PSVECSquareDistance)
//	8084B838: 80450AE0 (__float_nan)
//	8084B83C: 80450AE0 (__float_nan)
//	8084B8A8: 80450AE0 (__float_nan)
//	8084B8AC: 80450AE0 (__float_nan)
//	8084B8D8: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084B8FC: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084B928: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084B958: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::flySpeedCalcLockOn() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/flySpeedCalcLockOn__8daKago_cFv.s"
}
#pragma pop


/* 8084B96C-8084C078 070C+00 s=2 e=0 z=0  None .text      flySpeedCalc__8daKago_cFsi                                   */
//	8084B984: 803621D0 (_savegpr_26)
//	8084B994: 80854B04 (lit_3929)
//	8084B998: 80854B04 (lit_3929)
//	8084B9E8: 8084B5DC (getValueY__8daKago_cFf)
//	8084BA04: 80270C74 (cLib_targetAngleX__FPC4cXyzPC4cXyz)
//	8084BA20: 8084B5DC (getValueY__8daKago_cFf)
//	8084BAB0: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084BAC8: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084BB04: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084BB1C: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084BB44: 8084A6DC (getBeforeGroundHeight__8daKago_cFUc)
//	8084BB64: 8084A6DC (getBeforeGroundHeight__8daKago_cFUc)
//	8084BB88: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084BBA4: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084BC44: 8084B6F4 (getValueX__8daKago_cFf)
//	8084BC68: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8084BC7C: 803650D0 (abs)
//	8084BCA4: 8084B6F4 (getValueX__8daKago_cFf)
//	8084BCD8: 8084B718 (getValueAbsX__8daKago_cFf)
//	8084BD10: 8084B718 (getValueAbsX__8daKago_cFf)
//	8084BD3C: 8084B718 (getValueAbsX__8daKago_cFf)
//	8084BD78: 8084B718 (getValueAbsX__8daKago_cFf)
//	8084BD9C: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084BE10: 8084B6F4 (getValueX__8daKago_cFf)
//	8084BE44: 8084B718 (getValueAbsX__8daKago_cFf)
//	8084BE7C: 8084B718 (getValueAbsX__8daKago_cFf)
//	8084BEA8: 8084B718 (getValueAbsX__8daKago_cFf)
//	8084BEE4: 8084B718 (getValueAbsX__8daKago_cFf)
//	8084BF18: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084BF30: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084BF5C: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084C01C: 80854F78 (l_HIO)
//	8084C020: 80854F78 (l_HIO)
//	8084C03C: 80854F78 (l_HIO)
//	8084C040: 80854F78 (l_HIO)
//	8084C064: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  s16 False
//  int False
asm void daKago_c::flySpeedCalc(s16 param_0, int param_1) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/flySpeedCalc__8daKago_cFsi.s"
}
#pragma pop


/* 8084C078-8084C178 0100+00 s=3 e=0 z=0  None .text      checkFlySceneChange__8daKago_cFv                             */
//	8084C0D8: 8001E558 (fopOvlpM_IsPeek__Fv)
//	8084C0F0: 8084AA98 (setActionMode__8daKago_cFii)
//	8084C104: 80849798 (checkBck__8daKago_cFi)
//	8084C11C: 80854B3C (lit_3943)
//	8084C120: 80854B3C (lit_3943)
//	8084C124: 80854B10 (lit_3932)
//	8084C128: 80854B10 (lit_3932)
//	8084C12C: 808496F0 (setBck__8daKago_cFiUcff)
//	8084C144: 8084AE78 (setSceneChange__8daKago_cFi)
//	8084C154: 8084AE78 (setSceneChange__8daKago_cFi)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::checkFlySceneChange() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/checkFlySceneChange__8daKago_cFv.s"
}
#pragma pop


/* 8084C178-8084C204 008C+00 s=1 e=0 z=0  None .text      setFlyAway__8daKago_cFv                                      */
//	8084C19C: 8084AA98 (setActionMode__8daKago_cFii)
//	8084C1B0: 80849798 (checkBck__8daKago_cFi)
//	8084C1C8: 80854B3C (lit_3943)
//	8084C1CC: 80854B3C (lit_3943)
//	8084C1D0: 80854B10 (lit_3932)
//	8084C1D4: 80854B10 (lit_3932)
//	8084C1D8: 808496F0 (setBck__8daKago_cFiUcff)
//	8084C1DC: 804061C0 (g_dComIfG_gameInfo)
//	8084C1E0: 804061C0 (g_dComIfG_gameInfo)
//	8084C1EC: 8006FD94 (StopQuake__12dVibration_cFi)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::setFlyAway() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/setFlyAway__8daKago_cFv.s"
}
#pragma pop


/* 8084C204-8084C2CC 00C8+00 s=3 e=0 z=0  None .text      setFlyAnime__8daKago_cFv                                     */
//	8084C21C: 80854B04 (lit_3929)
//	8084C220: 80854B04 (lit_3929)
//	8084C224: 8026786C (cM_rnd__Fv)
//	8084C23C: 80849798 (checkBck__8daKago_cFi)
//	8084C25C: 808496F0 (setBck__8daKago_cFiUcff)
//	8084C278: 808496F0 (setBck__8daKago_cFiUcff)
//	8084C288: 80849798 (checkBck__8daKago_cFi)
//	8084C2A8: 808496F0 (setBck__8daKago_cFiUcff)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::setFlyAnime() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/setFlyAnime__8daKago_cFv.s"
}
#pragma pop


/* 8084C2CC-8084C8FC 0630+00 s=1 e=0 z=0  None .text      executeFly__8daKago_cFv                                      */
//	8084C2DC: 803621DC (_savegpr_29)
//	8084C2E4: 80854B04 (lit_3929)
//	8084C2E8: 80854B04 (lit_3929)
//	8084C2EC: 8084AFB0 (startBalloonScore__8daKago_cFv)
//	8084C30C: 804061C0 (g_dComIfG_gameInfo)
//	8084C310: 804061C0 (g_dComIfG_gameInfo)
//	8084C330: 804061C0 (g_dComIfG_gameInfo)
//	8084C334: 804061C0 (g_dComIfG_gameInfo)
//	8084C34C: 804061C0 (g_dComIfG_gameInfo)
//	8084C350: 804061C0 (g_dComIfG_gameInfo)
//	8084C370: 8085350C (setSibukiEffect__8daKago_cFv)
//	8084C378: 8084B108 (checkHeight__8daKago_cFv)
//	8084C3DC: 80849BA8 (checkGroundHeight__8daKago_cF4cXyzPf)
//	8084C404: 8084A070 (checkRoofHeight__8daKago_cF4cXyz)
//	8084C410: 8084AB8C (setPlayerRideOn__8daKago_cFv)
//	8084C418: 8084C204 (setFlyAnime__8daKago_cFv)
//	8084C440: 800517B0 (dPath_GetPnt__FPC5dPathi)
//	8084C474: 800517B0 (dPath_GetPnt__FPC5dPathi)
//	8084C498: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8084C4B0: 8084B96C (flySpeedCalc__8daKago_cFsi)
//	8084C4BC: 80849798 (checkBck__8daKago_cFi)
//	8084C4FC: 8084C204 (setFlyAnime__8daKago_cFv)
//	8084C518: 80849798 (checkBck__8daKago_cFi)
//	8084C538: 808496F0 (setBck__8daKago_cFiUcff)
//	8084C558: 80849798 (checkBck__8daKago_cFi)
//	8084C578: 808496F0 (setBck__8daKago_cFiUcff)
//	8084C598: 8084C204 (setFlyAnime__8daKago_cFv)
//	8084C5A4: 80439A20 (sincosTable___5JMath)
//	8084C5A8: 80439A20 (sincosTable___5JMath)
//	8084C5BC: 80854F78 (l_HIO)
//	8084C5C0: 80854F78 (l_HIO)
//	8084C5D8: 80854F78 (l_HIO)
//	8084C5DC: 80854F78 (l_HIO)
//	8084C614: 80270740 (cLib_chaseF__FPfff)
//	8084C624: 80270740 (cLib_chaseF__FPfff)
//	8084C628: 80439A20 (sincosTable___5JMath)
//	8084C62C: 80439A20 (sincosTable___5JMath)
//	8084C690: 8084B088 (checkNextPath__8daKago_cF4cXyz)
//	8084C6B0: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8084C6BC: 803650D0 (abs)
//	8084C6DC: 8084C078 (checkFlySceneChange__8daKago_cFv)
//	8084C710: 800517B0 (dPath_GetPnt__FPC5dPathi)
//	8084C744: 800517B0 (dPath_GetPnt__FPC5dPathi)
//	8084C768: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8084C778: 80270C74 (cLib_targetAngleX__FPC4cXyzPC4cXyz)
//	8084C79C: 8027065C (cLib_chaseUC__FPUcUcUc)
//	8084C7B4: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084C7CC: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084C7EC: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084C80C: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084C814: 80854F78 (l_HIO)
//	8084C818: 80854F78 (l_HIO)
//	8084C848: 80270740 (cLib_chaseF__FPfff)
//	8084C858: 80270740 (cLib_chaseF__FPfff)
//	8084C85C: 80439A20 (sincosTable___5JMath)
//	8084C860: 80439A20 (sincosTable___5JMath)
//	8084C8BC: 8084AA98 (setActionMode__8daKago_cFii)
//	8084C8CC: 8084B1E0 (checkWallHitFall__8daKago_cFi)
//	8084C8DC: 8084B56C (checkAttackStart__8daKago_cFv)
//	8084C8E8: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::executeFly() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/executeFly__8daKago_cFv.s"
}
#pragma pop


/* 8084C8FC-8084D108 080C+00 s=1 e=0 z=0  None .text      executeStagger__8daKago_cFv                                  */
//	8084C914: 80854B04 (lit_3929)
//	8084C918: 80854B04 (lit_3929)
//	8084C91C: 80181640 (dCam_getBody__Fv)
//	8084C92C: 800517B0 (dPath_GetPnt__FPC5dPathi)
//	8084C960: 800517B0 (dPath_GetPnt__FPC5dPathi)
//	8084C984: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8084C99C: 804061C0 (g_dComIfG_gameInfo)
//	8084C9A0: 804061C0 (g_dComIfG_gameInfo)
//	8084C9B8: 804061C0 (g_dComIfG_gameInfo)
//	8084C9BC: 804061C0 (g_dComIfG_gameInfo)
//	8084C9D0: 8084B108 (checkHeight__8daKago_cFv)
//	8084CA28: 8015F914 (setPlayerDamage__9daPy_py_cFii)
//	8084CA40: 803DD470 (now__14mDoMtx_stack_c)
//	8084CA44: 803DD470 (now__14mDoMtx_stack_c)
//	8084CA48: 803464B0 (PSMTXCopy)
//	8084CA4C: 803DD470 (now__14mDoMtx_stack_c)
//	8084CA50: 803DD470 (now__14mDoMtx_stack_c)
//	8084CB38: 808496F0 (setBck__8daKago_cFiUcff)
//	8084CBAC: 8015F914 (setPlayerDamage__9daPy_py_cFii)
//	8084CBC4: 808496F0 (setBck__8daKago_cFiUcff)
//	8084CBD0: 80854F78 (l_HIO)
//	8084CBD4: 80854F78 (l_HIO)
//	8084CC24: 803650D0 (abs)
//	8084CC64: 803650D0 (abs)
//	8084CCBC: 804061C0 (g_dComIfG_gameInfo)
//	8084CCC0: 804061C0 (g_dComIfG_gameInfo)
//	8084CCD4: 8006FB10 (StartQuake__12dVibration_cFii4cXyz)
//	8084CCEC: 8015F914 (setPlayerDamage__9daPy_py_cFii)
//	8084CD10: 803DD470 (now__14mDoMtx_stack_c)
//	8084CD14: 803DD470 (now__14mDoMtx_stack_c)
//	8084CD18: 803464B0 (PSMTXCopy)
//	8084CD1C: 803DD470 (now__14mDoMtx_stack_c)
//	8084CD20: 803DD470 (now__14mDoMtx_stack_c)
//	8084CE08: 808496F0 (setBck__8daKago_cFiUcff)
//	8084CE44: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084CE54: 80270740 (cLib_chaseF__FPfff)
//	8084CE6C: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084CE84: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084CE9C: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084CEA8: 8084B1E0 (checkWallHitFall__8daKago_cFi)
//	8084CEB4: 804061C0 (g_dComIfG_gameInfo)
//	8084CEB8: 804061C0 (g_dComIfG_gameInfo)
//	8084CEC4: 8006FD94 (StopQuake__12dVibration_cFi)
//	8084CEF4: 8084AA98 (setActionMode__8daKago_cFii)
//	8084CEF8: 804061C0 (g_dComIfG_gameInfo)
//	8084CEFC: 804061C0 (g_dComIfG_gameInfo)
//	8084CF08: 8006FD94 (StopQuake__12dVibration_cFi)
//	8084CF18: 80849798 (checkBck__8daKago_cFi)
//	8084CF28: 803DD470 (now__14mDoMtx_stack_c)
//	8084CF2C: 803DD470 (now__14mDoMtx_stack_c)
//	8084CF30: 803464B0 (PSMTXCopy)
//	8084CF34: 803DD470 (now__14mDoMtx_stack_c)
//	8084CF38: 803DD470 (now__14mDoMtx_stack_c)
//	8084CF88: 80077C68 (__ct__11dBgS_LinChkFv)
//	8084CF9C: 80077D64 (Set__11dBgS_LinChkFPC4cXyzPC4cXyzPC10fopAc_ac_c)
//	8084CFA0: 804061C0 (g_dComIfG_gameInfo)
//	8084CFA4: 804061C0 (g_dComIfG_gameInfo)
//	8084CFB0: 800743B4 (LineCross__4cBgSFP11cBgS_LinChk)
//	8084CFD0: 808530A4 (setDamageEffect__8daKago_cFv)
//	8084CFE8: 8032842C (checkPass__12J3DFrameCtrlFf)
//	8084CFF8: 8084ABC8 (setRideOff__8daKago_cFv)
//	8084D010: 808496F0 (setBck__8daKago_cFiUcff)
//	8084D01C: 80077CDC (__dt__11dBgS_LinChkFv)
//	8084D04C: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084D068: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084D078: 80270740 (cLib_chaseF__FPfff)
//	8084D088: 80270740 (cLib_chaseF__FPfff)
//	8084D0A0: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084D0B8: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084D0D0: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084D0E4: 8084C178 (setFlyAway__8daKago_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::executeStagger() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/executeStagger__8daKago_cFv.s"
}
#pragma pop


/* 8084D108-8084D354 024C+00 s=1 e=0 z=0  None .text      executeWait__8daKago_cFv                                     */
//	8084D120: 80854AE0 (getMidnaActor__9daPy_py_cFv)
//	8084D140: 8027065C (cLib_chaseUC__FPUcUcUc)
//	8084D150: 804061C0 (g_dComIfG_gameInfo)
//	8084D154: 804061C0 (g_dComIfG_gameInfo)
//	8084D178: 8084AF40 (createBalloonScore__8daKago_cFv)
//	8084D17C: 804061C0 (g_dComIfG_gameInfo)
//	8084D180: 804061C0 (g_dComIfG_gameInfo)
//	8084D1D0: 800517B0 (dPath_GetPnt__FPC5dPathi)
//	8084D220: 800517B0 (dPath_GetPnt__FPC5dPathi)
//	8084D244: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8084D25C: 8084AB40 (setMidnaRideOn__8daKago_cFv)
//	8084D264: 8084AB8C (setPlayerRideOn__8daKago_cFv)
//	8084D298: 804061C0 (g_dComIfG_gameInfo)
//	8084D29C: 804061C0 (g_dComIfG_gameInfo)
//	8084D2A8: 80034860 (isSwitch__12dSv_memBit_cCFi)
//	8084D2C0: 8084AA98 (setActionMode__8daKago_cFii)
//	8084D2D4: 8084AA98 (setActionMode__8daKago_cFii)
//	8084D2DC: 8084C204 (setFlyAnime__8daKago_cFv)
//	8084D2E4: 80852610 (moveDemoFly__8daKago_cFv)
//	8084D300: 8084AB40 (setMidnaRideOn__8daKago_cFv)
//	8084D308: 8084AB8C (setPlayerRideOn__8daKago_cFv)
//	8084D330: 8084AA98 (setActionMode__8daKago_cFii)
//	8084D338: 808525B0 (executeLanding__8daKago_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::executeWait() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/executeWait__8daKago_cFv.s"
}
#pragma pop


/* 8084D354-8084D50C 01B8+00 s=1 e=0 z=0  None .text      calcAttackMove__8daKago_cFi                                  */
//	8084D364: 803621DC (_savegpr_29)
//	8084D37C: 800517B0 (dPath_GetPnt__FPC5dPathi)
//	8084D3B0: 800517B0 (dPath_GetPnt__FPC5dPathi)
//	8084D3D4: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8084D3F0: 8084B744 (flySpeedCalcLockOn__8daKago_cFv)
//	8084D40C: 8084B96C (flySpeedCalc__8daKago_cFsi)
//	8084D420: 8084B96C (flySpeedCalc__8daKago_cFsi)
//	8084D424: 80439A20 (sincosTable___5JMath)
//	8084D428: 80439A20 (sincosTable___5JMath)
//	8084D48C: 8084B088 (checkNextPath__8daKago_cF4cXyz)
//	8084D498: 80854B38 (lit_3942)
//	8084D49C: 80854B38 (lit_3942)
//	8084D4B0: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8084D4BC: 803650D0 (abs)
//	8084D4DC: 8084C078 (checkFlySceneChange__8daKago_cFv)
//	8084D4F8: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
asm void daKago_c::calcAttackMove(int param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/calcAttackMove__8daKago_cFi.s"
}
#pragma pop


/* 8084D50C-8084DA18 050C+00 s=1 e=0 z=0  None .text      executeAttack__8daKago_cFv                                   */
//	8084D51C: 803621DC (_savegpr_29)
//	8084D524: 80854B04 (lit_3929)
//	8084D528: 80854B04 (lit_3929)
//	8084D544: 804061C0 (g_dComIfG_gameInfo)
//	8084D548: 804061C0 (g_dComIfG_gameInfo)
//	8084D560: 804061C0 (g_dComIfG_gameInfo)
//	8084D564: 804061C0 (g_dComIfG_gameInfo)
//	8084D578: 8084B108 (checkHeight__8daKago_cFv)
//	8084D594: 8085350C (setSibukiEffect__8daKago_cFv)
//	8084D59C: 8085366C (setDashSibukiEffect__8daKago_cFv)
//	8084D5D8: 80854F78 (l_HIO)
//	8084D5DC: 80854F78 (l_HIO)
//	8084D618: 80853228 (setDashBlurEffect__8daKago_cFi)
//	8084D62C: 80854F78 (l_HIO)
//	8084D630: 80854F78 (l_HIO)
//	8084D638: 808496F0 (setBck__8daKago_cFiUcff)
//	8084D650: 804061C0 (g_dComIfG_gameInfo)
//	8084D654: 804061C0 (g_dComIfG_gameInfo)
//	8084D668: 8006FA24 (StartShock__12dVibration_cFii4cXyz)
//	8084D67C: 800737E4 (LockonTruth__12dAttention_cFv)
//	8084D690: 8007353C (LockonTarget__12dAttention_cFl)
//	8084D6A4: 808123C4 (setLockByCargo__8daE_YM_cFv)
//	8084D6B0: 80852F14 (setDashEffect__8daKago_cFv)
//	8084D6BC: 8084D354 (calcAttackMove__8daKago_cFi)
//	8084D6D4: 80854F78 (l_HIO)
//	8084D6D8: 80854F78 (l_HIO)
//	8084D6E4: 80270740 (cLib_chaseF__FPfff)
//	8084D6F4: 8032842C (checkPass__12J3DFrameCtrlFf)
//	8084D774: 8032842C (checkPass__12J3DFrameCtrlFf)
//	8084D7A4: 804061C0 (g_dComIfG_gameInfo)
//	8084D7A8: 804061C0 (g_dComIfG_gameInfo)
//	8084D7C0: 8006FA24 (StartShock__12dVibration_cFii4cXyz)
//	8084D7E8: 8006FB10 (StartQuake__12dVibration_cFii4cXyz)
//	8084D7EC: 80854F78 (l_HIO)
//	8084D7F0: 80854F78 (l_HIO)
//	8084D820: 80852F14 (setDashEffect__8daKago_cFv)
//	8084D830: 8032842C (checkPass__12J3DFrameCtrlFf)
//	8084D850: 8084D354 (calcAttackMove__8daKago_cFi)
//	8084D868: 80270740 (cLib_chaseF__FPfff)
//	8084D894: 8084B1E0 (checkWallHitFall__8daKago_cFi)
//	8084D8A0: 804061C0 (g_dComIfG_gameInfo)
//	8084D8A4: 804061C0 (g_dComIfG_gameInfo)
//	8084D8B0: 8006FD94 (StopQuake__12dVibration_cFi)
//	8084D8E8: 80852F14 (setDashEffect__8daKago_cFv)
//	8084D8F4: 8084D354 (calcAttackMove__8daKago_cFi)
//	8084D90C: 80270740 (cLib_chaseF__FPfff)
//	8084D918: 8084B1E0 (checkWallHitFall__8daKago_cFi)
//	8084D924: 804061C0 (g_dComIfG_gameInfo)
//	8084D928: 804061C0 (g_dComIfG_gameInfo)
//	8084D934: 8006FD94 (StopQuake__12dVibration_cFi)
//	8084D964: 804061C0 (g_dComIfG_gameInfo)
//	8084D968: 804061C0 (g_dComIfG_gameInfo)
//	8084D974: 8006FD94 (StopQuake__12dVibration_cFi)
//	8084D980: 80852F14 (setDashEffect__8daKago_cFv)
//	8084D98C: 8084D354 (calcAttackMove__8daKago_cFi)
//	8084D99C: 80854F78 (l_HIO)
//	8084D9A0: 80854F78 (l_HIO)
//	8084D9AC: 80270740 (cLib_chaseF__FPfff)
//	8084D9E4: 8084AA98 (setActionMode__8daKago_cFii)
//	8084DA04: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::executeAttack() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/executeAttack__8daKago_cFv.s"
}
#pragma pop


/* 8084DA18-8084DBFC 01E4+00 s=2 e=0 z=0  None .text      calcCircleCamera__8daKago_cFi                                */
//	8084DA28: 803621D8 (_savegpr_28)
//	8084DA34: 80854B04 (lit_3929)
//	8084DA38: 80854B04 (lit_3929)
//	8084DA40: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	8084DA44: 803DD470 (now__14mDoMtx_stack_c)
//	8084DA48: 803DD470 (now__14mDoMtx_stack_c)
//	8084DA50: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	8084DA54: 803DD470 (now__14mDoMtx_stack_c)
//	8084DA58: 803DD470 (now__14mDoMtx_stack_c)
//	8084DA60: 8000C39C (mDoMtx_XrotM__FPA4_fs)
//	8084DA70: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	8084DA74: 803DD470 (now__14mDoMtx_stack_c)
//	8084DA78: 803DD470 (now__14mDoMtx_stack_c)
//	8084DAD8: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	8084DAFC: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	8084DB0C: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	8084DB6C: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	8084DB90: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	8084DBCC: 80181640 (dCam_getBody__Fv)
//	8084DBE0: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
//	8084DBE8: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
asm void daKago_c::calcCircleCamera(int param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/calcCircleCamera__8daKago_cFi.s"
}
#pragma pop


/* 8084DBFC-8084DD18 011C+00 s=1 e=0 z=0  None .text      executeEvent__8daKago_cFv                                    */
//	8084DC0C: 803621DC (_savegpr_29)
//	8084DC14: 80181640 (dCam_getBody__Fv)
//	8084DC2C: 8002C97C (getLayerNo__14dComIfG_play_cFi)
//	8084DC38: 804061C0 (g_dComIfG_gameInfo)
//	8084DC3C: 804061C0 (g_dComIfG_gameInfo)
//	8084DC4C: 80034860 (isSwitch__12dSv_memBit_cCFi)
//	8084DC60: 80034810 (onSwitch__12dSv_memBit_cFi)
//	8084DC70: 8084AA98 (setActionMode__8daKago_cFii)
//	8084DC98: 8001B908 (fopAcM_orderPotentialEvent__FP10fopAc_ac_cUsUsUs)
//	8084DCB0: 801614D0 (Stop__9dCamera_cFv)
//	8084DCBC: 8016300C (SetTrimSize__9dCamera_cFl)
//	8084DCD8: 8084AA98 (setActionMode__8daKago_cFii)
//	8084DCEC: 804061C0 (g_dComIfG_gameInfo)
//	8084DCF0: 804061C0 (g_dComIfG_gameInfo)
//	8084DCFC: 80034810 (onSwitch__12dSv_memBit_cFi)
//	8084DD04: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::executeEvent() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/executeEvent__8daKago_cFv.s"
}
#pragma pop


/* 8084DD18-8084E2D4 05BC+00 s=1 e=0 z=0  None .text      initPerchDemo__8daKago_cFv                                   */
//	8084DD28: 803621D8 (_savegpr_28)
//	8084DD30: 80854B04 (lit_3929)
//	8084DD34: 80854B04 (lit_3929)
//	8084DD38: 804061C0 (g_dComIfG_gameInfo)
//	8084DD3C: 804061C0 (g_dComIfG_gameInfo)
//	8084DD60: 80854AE0 (getMidnaActor__9daPy_py_cFv)
//	8084DDB4: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	8084DDB8: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	8084DDC8: 802B61E8 (setDemoName__11Z2StatusMgrFPc)
//	8084DDE0: 800517B0 (dPath_GetPnt__FPC5dPathi)
//	8084DE34: 800517B0 (dPath_GetPnt__FPC5dPathi)
//	8084DE58: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8084DE78: 800517B0 (dPath_GetPnt__FPC5dPathi)
//	8084DE9C: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8084DF0C: 8002C97C (getLayerNo__14dComIfG_play_cFi)
//	8084DF38: 8084DA18 (calcCircleCamera__8daKago_cFi)
//	8084DF6C: 8084AC2C (searchNearPassPoint__8daKago_cFv)
//	8084DFC0: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	8084DFC4: 803DD470 (now__14mDoMtx_stack_c)
//	8084DFC8: 803DD470 (now__14mDoMtx_stack_c)
//	8084DFD0: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	8084DFE0: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	8084DFE4: 803DD470 (now__14mDoMtx_stack_c)
//	8084DFE8: 803DD470 (now__14mDoMtx_stack_c)
//	8084E018: 808496F0 (setBck__8daKago_cFiUcff)
//	8084E020: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	8084E024: 803DD470 (now__14mDoMtx_stack_c)
//	8084E028: 803DD470 (now__14mDoMtx_stack_c)
//	8084E030: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	8084E040: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	8084E064: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8084E074: 80270C74 (cLib_targetAngleX__FPC4cXyzPC4cXyz)
//	8084E088: 80439A20 (sincosTable___5JMath)
//	8084E08C: 80439A20 (sincosTable___5JMath)
//	8084E0EC: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	8084E0F0: 803DD470 (now__14mDoMtx_stack_c)
//	8084E0F4: 803DD470 (now__14mDoMtx_stack_c)
//	8084E0FC: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	8084E10C: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	8084E134: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	8084E144: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	8084E198: 80181640 (dCam_getBody__Fv)
//	8084E1AC: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
//	8084E1D0: 808496F0 (setBck__8daKago_cFiUcff)
//	8084E1D8: 8084AAAC (setMidnaTagPos__8daKago_cFv)
//	8084E208: 808496F0 (setBck__8daKago_cFiUcff)
//	8084E240: 800517B0 (dPath_GetPnt__FPC5dPathi)
//	8084E260: 8084AB40 (setMidnaRideOn__8daKago_cFv)
//	8084E268: 8084AB8C (setPlayerRideOn__8daKago_cFv)
//	8084E280: 804061C0 (g_dComIfG_gameInfo)
//	8084E284: 804061C0 (g_dComIfG_gameInfo)
//	8084E298: 8006FA24 (StartShock__12dVibration_cFii4cXyz)
//	8084E2C0: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::initPerchDemo() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/initPerchDemo__8daKago_cFv.s"
}
#pragma pop


/* 8084E2D4-8084F09C 0DC8+00 s=2 e=0 z=0  None .text      executePerchDemo__8daKago_cFv                                */
//	8084E2F4: 803621D8 (_savegpr_28)
//	8084E2FC: 80854B04 (lit_3929)
//	8084E300: 80854B04 (lit_3929)
//	8084E304: 804061C0 (g_dComIfG_gameInfo)
//	8084E308: 804061C0 (g_dComIfG_gameInfo)
//	8084E32C: 80854AE0 (getMidnaActor__9daPy_py_cFv)
//	8084E368: 80854DF4 (lit_6166)
//	8084E36C: 80854DF4 (lit_6166)
//	8084E388: 8084DA18 (calcCircleCamera__8daKago_cFi)
//	8084E3A4: 80270740 (cLib_chaseF__FPfff)
//	8084E3B8: 80270740 (cLib_chaseF__FPfff)
//	8084E3E4: 800517B0 (dPath_GetPnt__FPC5dPathi)
//	8084E408: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8084E420: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084E42C: 8034739C (PSVECSquareDistance)
//	8084E49C: 80450AE0 (__float_nan)
//	8084E4A0: 80450AE0 (__float_nan)
//	8084E50C: 80450AE0 (__float_nan)
//	8084E510: 80450AE0 (__float_nan)
//	8084E560: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084E5E4: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8084E5FC: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084E608: 80270C74 (cLib_targetAngleX__FPC4cXyzPC4cXyz)
//	8084E624: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084E630: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8084E648: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084E668: 804061C0 (g_dComIfG_gameInfo)
//	8084E66C: 804061C0 (g_dComIfG_gameInfo)
//	8084E678: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	8084E67C: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	8084E684: 80042914 (setSkipProc__14dEvt_control_cFPvPFPvi_ii)
//	8084E694: 8084DA18 (calcCircleCamera__8daKago_cFi)
//	8084E6A0: 80270C74 (cLib_targetAngleX__FPC4cXyzPC4cXyz)
//	8084E6BC: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084E6C8: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8084E6E0: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084E700: 80270740 (cLib_chaseF__FPfff)
//	8084E704: 80439A20 (sincosTable___5JMath)
//	8084E708: 80439A20 (sincosTable___5JMath)
//	8084E754: 8034739C (PSVECSquareDistance)
//	8084E7C4: 80450AE0 (__float_nan)
//	8084E7C8: 80450AE0 (__float_nan)
//	8084E834: 80450AE0 (__float_nan)
//	8084E838: 80450AE0 (__float_nan)
//	8084E858: 804061C0 (g_dComIfG_gameInfo)
//	8084E85C: 804061C0 (g_dComIfG_gameInfo)
//	8084E868: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	8084E86C: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	8084E874: 80042914 (setSkipProc__14dEvt_control_cFPvPFPvi_ii)
//	8084E894: 804061C0 (g_dComIfG_gameInfo)
//	8084E898: 804061C0 (g_dComIfG_gameInfo)
//	8084E8A4: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	8084E8A8: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	8084E8B0: 80042914 (setSkipProc__14dEvt_control_cFPvPFPvi_ii)
//	8084E8C0: 804061C0 (g_dComIfG_gameInfo)
//	8084E8C4: 804061C0 (g_dComIfG_gameInfo)
//	8084E8D0: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	8084E8D4: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	8084E8DC: 80042914 (setSkipProc__14dEvt_control_cFPvPFPvi_ii)
//	8084E8F4: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8084E904: 80270C74 (cLib_targetAngleX__FPC4cXyzPC4cXyz)
//	8084E910: 80439A20 (sincosTable___5JMath)
//	8084E914: 80439A20 (sincosTable___5JMath)
//	8084E9F0: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084EA04: 8034739C (PSVECSquareDistance)
//	8084EA74: 80450AE0 (__float_nan)
//	8084EA78: 80450AE0 (__float_nan)
//	8084EAE4: 80450AE0 (__float_nan)
//	8084EAE8: 80450AE0 (__float_nan)
//	8084EB14: 808496F0 (setBck__8daKago_cFiUcff)
//	8084EB24: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	8084EB28: 803DD470 (now__14mDoMtx_stack_c)
//	8084EB2C: 803DD470 (now__14mDoMtx_stack_c)
//	8084EB34: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	8084EB44: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	8084EB48: 803DD470 (now__14mDoMtx_stack_c)
//	8084EB4C: 803DD470 (now__14mDoMtx_stack_c)
//	8084EB78: 80270740 (cLib_chaseF__FPfff)
//	8084EB84: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8084EB9C: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084EBB4: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084EBCC: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084EBD8: 80439A20 (sincosTable___5JMath)
//	8084EBDC: 80439A20 (sincosTable___5JMath)
//	8084EC50: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	8084EC54: 803DD470 (now__14mDoMtx_stack_c)
//	8084EC58: 803DD470 (now__14mDoMtx_stack_c)
//	8084EC60: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	8084EC70: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	8084EC74: 803DD470 (now__14mDoMtx_stack_c)
//	8084EC78: 803DD470 (now__14mDoMtx_stack_c)
//	8084ECA8: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	8084ECB0: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	8084ECB4: 803DD470 (now__14mDoMtx_stack_c)
//	8084ECB8: 803DD470 (now__14mDoMtx_stack_c)
//	8084ECC0: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	8084ECD0: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	8084ED00: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	8084ED34: 80181640 (dCam_getBody__Fv)
//	8084ED48: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
//	8084ED68: 804061C0 (g_dComIfG_gameInfo)
//	8084ED6C: 804061C0 (g_dComIfG_gameInfo)
//	8084ED78: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	8084ED7C: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	8084ED84: 80042914 (setSkipProc__14dEvt_control_cFPvPFPvi_ii)
//	8084ED94: 804061C0 (g_dComIfG_gameInfo)
//	8084ED98: 804061C0 (g_dComIfG_gameInfo)
//	8084EDA4: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	8084EDA8: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	8084EDB0: 80042914 (setSkipProc__14dEvt_control_cFPvPFPvi_ii)
//	8084EDB8: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	8084EDBC: 803DD470 (now__14mDoMtx_stack_c)
//	8084EDC0: 803DD470 (now__14mDoMtx_stack_c)
//	8084EDC8: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	8084EDD8: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	8084EDDC: 803DD470 (now__14mDoMtx_stack_c)
//	8084EDE0: 803DD470 (now__14mDoMtx_stack_c)
//	8084EE10: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	8084EE18: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	8084EE1C: 803DD470 (now__14mDoMtx_stack_c)
//	8084EE20: 803DD470 (now__14mDoMtx_stack_c)
//	8084EE28: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	8084EE38: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	8084EE68: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	8084EE78: 80270740 (cLib_chaseF__FPfff)
//	8084EEAC: 80181640 (dCam_getBody__Fv)
//	8084EEC0: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
//	8084EED8: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084EF18: 804061C0 (g_dComIfG_gameInfo)
//	8084EF1C: 804061C0 (g_dComIfG_gameInfo)
//	8084EF28: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	8084EF2C: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	8084EF34: 80042914 (setSkipProc__14dEvt_control_cFPvPFPvi_ii)
//	8084EF44: 804061C0 (g_dComIfG_gameInfo)
//	8084EF48: 804061C0 (g_dComIfG_gameInfo)
//	8084EF54: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	8084EF58: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	8084EF60: 80042914 (setSkipProc__14dEvt_control_cFPvPFPvi_ii)
//	8084EF68: 8084F09C (PerchDemoAwayForward__8daKago_cFv)
//	8084EF9C: 80270740 (cLib_chaseF__FPfff)
//	8084EFB4: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	8084EFBC: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	8084EFC0: 803DD470 (now__14mDoMtx_stack_c)
//	8084EFC4: 803DD470 (now__14mDoMtx_stack_c)
//	8084EFCC: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	8084EFDC: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	8084EFE0: 803DD470 (now__14mDoMtx_stack_c)
//	8084EFE4: 803DD470 (now__14mDoMtx_stack_c)
//	8084F014: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	8084F024: 80270740 (cLib_chaseF__FPfff)
//	8084F058: 80181640 (dCam_getBody__Fv)
//	8084F06C: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
//	8084F088: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::executePerchDemo() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/executePerchDemo__8daKago_cFv.s"
}
#pragma pop


/* 8084F09C-8084FA58 09BC+00 s=1 e=0 z=0  None .text      PerchDemoAwayForward__8daKago_cFv                            */
//	8084F0AC: 803621D4 (_savegpr_27)
//	8084F0B4: 80854B04 (lit_3929)
//	8084F0B8: 80854B04 (lit_3929)
//	8084F0BC: 804061C0 (g_dComIfG_gameInfo)
//	8084F0C0: 804061C0 (g_dComIfG_gameInfo)
//	8084F0E4: 80181640 (dCam_getBody__Fv)
//	8084F0EC: 80854AE0 (getMidnaActor__9daPy_py_cFv)
//	8084F148: 80347090 (PSVECAdd)
//	8084F158: 80347090 (PSVECAdd)
//	8084F160: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	8084F164: 803DD470 (now__14mDoMtx_stack_c)
//	8084F168: 803DD470 (now__14mDoMtx_stack_c)
//	8084F170: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	8084F18C: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	8084F1A0: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	8084F1A4: 803DD470 (now__14mDoMtx_stack_c)
//	8084F1A8: 803DD470 (now__14mDoMtx_stack_c)
//	8084F1D8: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	8084F1E0: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	8084F1E4: 803DD470 (now__14mDoMtx_stack_c)
//	8084F1E8: 803DD470 (now__14mDoMtx_stack_c)
//	8084F1F0: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	8084F20C: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	8084F220: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	8084F250: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	8084F260: 80270740 (cLib_chaseF__FPfff)
//	8084F2A8: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
//	8084F2D0: 80849BA8 (checkGroundHeight__8daKago_cF4cXyzPf)
//	8084F2F8: 8084A070 (checkRoofHeight__8daKago_cF4cXyz)
//	8084F30C: 80270740 (cLib_chaseF__FPfff)
//	8084F324: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084F338: 80439A20 (sincosTable___5JMath)
//	8084F33C: 80439A20 (sincosTable___5JMath)
//	8084F3A0: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084F3BC: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084F464: 8084AB8C (setPlayerRideOn__8daKago_cFv)
//	8084F47C: 804061C0 (g_dComIfG_gameInfo)
//	8084F480: 804061C0 (g_dComIfG_gameInfo)
//	8084F494: 8006FA24 (StartShock__12dVibration_cFii4cXyz)
//	8084F4F0: 80347090 (PSVECAdd)
//	8084F500: 80347090 (PSVECAdd)
//	8084F50C: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8084F518: 803650D0 (abs)
//	8084F538: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	8084F540: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	8084F544: 803DD470 (now__14mDoMtx_stack_c)
//	8084F548: 803DD470 (now__14mDoMtx_stack_c)
//	8084F550: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	8084F560: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	8084F564: 803DD470 (now__14mDoMtx_stack_c)
//	8084F568: 803DD470 (now__14mDoMtx_stack_c)
//	8084F598: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	8084F5B4: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	8084F5BC: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	8084F5C0: 803DD470 (now__14mDoMtx_stack_c)
//	8084F5C4: 803DD470 (now__14mDoMtx_stack_c)
//	8084F5CC: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	8084F5DC: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	8084F5E0: 803DD470 (now__14mDoMtx_stack_c)
//	8084F5E4: 803DD470 (now__14mDoMtx_stack_c)
//	8084F614: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	8084F630: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	8084F638: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	8084F63C: 803DD470 (now__14mDoMtx_stack_c)
//	8084F640: 803DD470 (now__14mDoMtx_stack_c)
//	8084F648: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	8084F658: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	8084F65C: 803DD470 (now__14mDoMtx_stack_c)
//	8084F660: 803DD470 (now__14mDoMtx_stack_c)
//	8084F690: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	8084F6A0: 80270740 (cLib_chaseF__FPfff)
//	8084F6E8: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
//	8084F710: 80849BA8 (checkGroundHeight__8daKago_cF4cXyzPf)
//	8084F738: 8084A070 (checkRoofHeight__8daKago_cF4cXyz)
//	8084F744: 80854F78 (l_HIO)
//	8084F748: 80854F78 (l_HIO)
//	8084F754: 80270740 (cLib_chaseF__FPfff)
//	8084F778: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084F794: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084F7A8: 80439A20 (sincosTable___5JMath)
//	8084F7AC: 80439A20 (sincosTable___5JMath)
//	8084F810: 8084AE78 (setSceneChange__8daKago_cFi)
//	8084F844: 8084AA98 (setActionMode__8daKago_cFii)
//	8084F884: 80180C18 (Reset__9dCamera_cF4cXyz4cXyz)
//	8084F88C: 801614AC (Start__9dCamera_cFv)
//	8084F898: 8016300C (SetTrimSize__9dCamera_cFl)
//	8084F89C: 804061C0 (g_dComIfG_gameInfo)
//	8084F8A0: 804061C0 (g_dComIfG_gameInfo)
//	8084F8A8: 80042468 (reset__14dEvt_control_cFv)
//	8084F8AC: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	8084F8B0: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	8084F8C0: 802B61E8 (setDemoName__11Z2StatusMgrFPc)
//	8084F8D4: 80270740 (cLib_chaseF__FPfff)
//	8084F8E4: 80347090 (PSVECAdd)
//	8084F8F4: 80266B84 (__ml__4cXyzCFf)
//	8084F904: 80347090 (PSVECAdd)
//	8084F93C: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	8084F98C: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
//	8084F99C: 80270740 (cLib_chaseF__FPfff)
//	8084F9B4: 80270540 (cLib_addCalcAngleS__FPsssss)
//	8084F9C8: 80439A20 (sincosTable___5JMath)
//	8084F9CC: 80439A20 (sincosTable___5JMath)
//	8084FA28: 8084AA98 (setActionMode__8daKago_cFii)
//	8084FA44: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::PerchDemoAwayForward() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/PerchDemoAwayForward__8daKago_cFv.s"
}
#pragma pop


/* 8084FA58-8084FAA8 0050+00 s=1 e=0 z=0  None .text      executePerch__8daKago_cFv                                    */
//	8084FA78: 8084DD18 (initPerchDemo__8daKago_cFv)
//	8084FA80: 8084E2D4 (executePerchDemo__8daKago_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::executePerch() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/executePerch__8daKago_cFv.s"
}
#pragma pop


/* 8084FAA8-8084FB50 00A8+00 s=1 e=0 z=0  None .text      executeEvent2__8daKago_cFv                                   */
//	8084FAC0: 80181640 (dCam_getBody__Fv)
//	8084FAE8: 8001B908 (fopAcM_orderPotentialEvent__FP10fopAc_ac_cUsUsUs)
//	8084FAFC: 801614D0 (Stop__9dCamera_cFv)
//	8084FB08: 8016300C (SetTrimSize__9dCamera_cFl)
//	8084FB24: 8084AA98 (setActionMode__8daKago_cFii)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::executeEvent2() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/executeEvent2__8daKago_cFv.s"
}
#pragma pop


/* 8084FB50-80850384 0834+00 s=2 e=0 z=0  None .text      initFirstDemo__8daKago_cFv                                   */
//	8084FB60: 803621D4 (_savegpr_27)
//	8084FB68: 80854B04 (lit_3929)
//	8084FB6C: 80854B04 (lit_3929)
//	8084FB70: 80181640 (dCam_getBody__Fv)
//	8084FB78: 804061C0 (g_dComIfG_gameInfo)
//	8084FB7C: 804061C0 (g_dComIfG_gameInfo)
//	8084FB9C: 80451018 (m_midnaActor__9daPy_py_c)
//	8084FBA0: 80451018 (m_midnaActor__9daPy_py_c)
//	8084FBD0: 80854E10 (lit_6560)
//	8084FBD4: 80854E10 (lit_6560)
//	8084FBE8: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	8084FBEC: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	8084FBFC: 802B61E8 (setDemoName__11Z2StatusMgrFPc)
//	8084FC64: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8084FC98: 80270DC0 (cLib_offsetPos__FP4cXyzPC4cXyzsPC4cXyz)
//	8084FCA4: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8084FD70: 80270DC0 (cLib_offsetPos__FP4cXyzPC4cXyzsPC4cXyz)
//	8084FDC0: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
//	8084FDE0: 808496F0 (setBck__8daKago_cFiUcff)
//	8084FE80: 80270DC0 (cLib_offsetPos__FP4cXyzPC4cXyzsPC4cXyz)
//	8084FED0: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
//	8084FEFC: 80249F90 (init__10dMsgFlow_cFP10fopAc_ac_ciiPP10fopAc_ac_c)
//	8084FF0C: 80270C74 (cLib_targetAngleX__FPC4cXyzPC4cXyz)
//	8084FF28: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8084FF6C: 80270DC0 (cLib_offsetPos__FP4cXyzPC4cXyzsPC4cXyz)
//	8084FF94: 80270DC0 (cLib_offsetPos__FP4cXyzPC4cXyzsPC4cXyz)
//	8084FFE4: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
//	8084FFF0: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8085001C: 8084AB40 (setMidnaRideOn__8daKago_cFv)
//	80850030: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8085003C: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	80850040: 803DD470 (now__14mDoMtx_stack_c)
//	80850044: 803DD470 (now__14mDoMtx_stack_c)
//	8085004C: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	8085005C: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	80850060: 803DD470 (now__14mDoMtx_stack_c)
//	80850064: 803DD470 (now__14mDoMtx_stack_c)
//	80850094: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	808500A0: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	808500A4: 803DD470 (now__14mDoMtx_stack_c)
//	808500A8: 803DD470 (now__14mDoMtx_stack_c)
//	808500B0: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	808500C0: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	808500C4: 803DD470 (now__14mDoMtx_stack_c)
//	808500C8: 803DD470 (now__14mDoMtx_stack_c)
//	808500FC: 8084AB8C (setPlayerRideOn__8daKago_cFv)
//	80850114: 804061C0 (g_dComIfG_gameInfo)
//	80850118: 804061C0 (g_dComIfG_gameInfo)
//	8085012C: 8006FA24 (StartShock__12dVibration_cFii4cXyz)
//	80850160: 808496F0 (setBck__8daKago_cFiUcff)
//	80850250: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
//	80850298: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	808502E0: 80270DC0 (cLib_offsetPos__FP4cXyzPC4cXyzsPC4cXyz)
//	80850350: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
//	80850370: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::initFirstDemo() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/initFirstDemo__8daKago_cFv.s"
}
#pragma pop


/* 80850384-808513E4 1060+00 s=2 e=0 z=0  None .text      executeFirstDemo__8daKago_cFv                                */
//	80850394: 803621DC (_savegpr_29)
//	8085039C: 80854B04 (lit_3929)
//	808503A0: 80854B04 (lit_3929)
//	808503A4: 80181640 (dCam_getBody__Fv)
//	808503AC: 804061C0 (g_dComIfG_gameInfo)
//	808503B0: 804061C0 (g_dComIfG_gameInfo)
//	808503B8: 80451018 (m_midnaActor__9daPy_py_c)
//	808503BC: 80451018 (m_midnaActor__9daPy_py_c)
//	80850408: 80854E34 (lit_6924)
//	8085040C: 80854E34 (lit_6924)
//	80850420: 804061C0 (g_dComIfG_gameInfo)
//	80850424: 804061C0 (g_dComIfG_gameInfo)
//	80850430: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	80850434: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	8085043C: 80042914 (setSkipProc__14dEvt_control_cFPvPFPvi_ii)
//	8085044C: 80270B90 (cLib_chaseAngleS__FPsss)
//	8085045C: 80270740 (cLib_chaseF__FPfff)
//	8085046C: 80270740 (cLib_chaseF__FPfff)
//	808504A4: 80270DC0 (cLib_offsetPos__FP4cXyzPC4cXyzsPC4cXyz)
//	808504CC: 802707AC (cLib_chasePos__FP4cXyzRC4cXyzf)
//	808504E0: 80270DC0 (cLib_offsetPos__FP4cXyzPC4cXyzsPC4cXyz)
//	80850530: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
//	80850544: 8084AAAC (setMidnaTagPos__8daKago_cFv)
//	80850564: 804061C0 (g_dComIfG_gameInfo)
//	80850568: 804061C0 (g_dComIfG_gameInfo)
//	80850574: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	80850578: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	80850580: 80042914 (setSkipProc__14dEvt_control_cFPvPFPvi_ii)
//	80850590: 80270B90 (cLib_chaseAngleS__FPsss)
//	808505C4: 80270DC0 (cLib_offsetPos__FP4cXyzPC4cXyzsPC4cXyz)
//	808505E8: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	8085064C: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
//	80850654: 8084AAAC (setMidnaTagPos__8daKago_cFv)
//	80850678: 808496F0 (setBck__8daKago_cFiUcff)
//	80850694: 80270740 (cLib_chaseF__FPfff)
//	808506AC: 80270540 (cLib_addCalcAngleS__FPsssss)
//	808506C0: 80270740 (cLib_chaseF__FPfff)
//	808506D8: 80270540 (cLib_addCalcAngleS__FPsssss)
//	808506EC: 8084AB40 (setMidnaRideOn__8daKago_cFv)
//	80850778: 804061C0 (g_dComIfG_gameInfo)
//	8085077C: 804061C0 (g_dComIfG_gameInfo)
//	80850788: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	8085078C: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	80850794: 80042914 (setSkipProc__14dEvt_control_cFPvPFPvi_ii)
//	8085079C: 8084AAAC (setMidnaTagPos__8daKago_cFv)
//	808507B4: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	808507FC: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
//	80850810: 8024A2D8 (doFlow__10dMsgFlow_cFP10fopAc_ac_cPP10fopAc_ac_ci)
//	8085083C: 808496F0 (setBck__8daKago_cFiUcff)
//	80850844: 8024A540 (getNowMsgNo__10dMsgFlow_cFv)
//	80850864: 808496F0 (setBck__8daKago_cFiUcff)
//	80850874: 8024A540 (getNowMsgNo__10dMsgFlow_cFv)
//	80850890: 804061C0 (g_dComIfG_gameInfo)
//	80850894: 804061C0 (g_dComIfG_gameInfo)
//	808508A0: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	808508A4: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	808508AC: 80042914 (setSkipProc__14dEvt_control_cFPvPFPvi_ii)
//	808508B4: 8084AAAC (setMidnaTagPos__8daKago_cFv)
//	808508C0: 80270C74 (cLib_targetAngleX__FPC4cXyzPC4cXyz)
//	808508E4: 80270540 (cLib_addCalcAngleS__FPsssss)
//	808508F0: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8085091C: 80270540 (cLib_addCalcAngleS__FPsssss)
//	80850930: 8024A2D8 (doFlow__10dMsgFlow_cFP10fopAc_ac_cPP10fopAc_ac_ci)
//	8085094C: 804061C0 (g_dComIfG_gameInfo)
//	80850950: 804061C0 (g_dComIfG_gameInfo)
//	8085095C: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	80850960: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	80850968: 80042914 (setSkipProc__14dEvt_control_cFPvPFPvi_ii)
//	80850980: 80270540 (cLib_addCalcAngleS__FPsssss)
//	80850998: 80270540 (cLib_addCalcAngleS__FPsssss)
//	808509A8: 80270740 (cLib_chaseF__FPfff)
//	808509B0: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	808509B4: 803DD470 (now__14mDoMtx_stack_c)
//	808509B8: 803DD470 (now__14mDoMtx_stack_c)
//	808509C0: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	808509D0: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	808509D4: 803DD470 (now__14mDoMtx_stack_c)
//	808509D8: 803DD470 (now__14mDoMtx_stack_c)
//	808509FC: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	80850A14: 80270540 (cLib_addCalcAngleS__FPsssss)
//	80850A20: 80270C74 (cLib_targetAngleX__FPC4cXyzPC4cXyz)
//	80850A3C: 80270540 (cLib_addCalcAngleS__FPsssss)
//	80850A5C: 80270740 (cLib_chaseF__FPfff)
//	80850A60: 80439A20 (sincosTable___5JMath)
//	80850A64: 80439A20 (sincosTable___5JMath)
//	80850AB4: 80347090 (PSVECAdd)
//	80850AC4: 80347090 (PSVECAdd)
//	80850AF0: 80270DC0 (cLib_offsetPos__FP4cXyzPC4cXyzsPC4cXyz)
//	80850B08: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	80850B2C: 80270DC0 (cLib_offsetPos__FP4cXyzPC4cXyzsPC4cXyz)
//	80850B44: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	80850B94: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
//	80850BA0: 8034739C (PSVECSquareDistance)
//	80850C10: 80450AE0 (__float_nan)
//	80850C14: 80450AE0 (__float_nan)
//	80850C80: 80450AE0 (__float_nan)
//	80850C84: 80450AE0 (__float_nan)
//	80850CA4: 804061C0 (g_dComIfG_gameInfo)
//	80850CA8: 804061C0 (g_dComIfG_gameInfo)
//	80850CB4: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	80850CB8: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	80850CC0: 80042914 (setSkipProc__14dEvt_control_cFPvPFPvi_ii)
//	80850CCC: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	80850CE4: 80270540 (cLib_addCalcAngleS__FPsssss)
//	80850CF0: 80270C74 (cLib_targetAngleX__FPC4cXyzPC4cXyz)
//	80850D0C: 80270540 (cLib_addCalcAngleS__FPsssss)
//	80850D2C: 80270740 (cLib_chaseF__FPfff)
//	80850D30: 80439A20 (sincosTable___5JMath)
//	80850D34: 80439A20 (sincosTable___5JMath)
//	80850D84: 80347090 (PSVECAdd)
//	80850D94: 80347090 (PSVECAdd)
//	80850DC0: 80270DC0 (cLib_offsetPos__FP4cXyzPC4cXyzsPC4cXyz)
//	80850DD8: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	80850E00: 80270DC0 (cLib_offsetPos__FP4cXyzPC4cXyzsPC4cXyz)
//	80850E18: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	80850E68: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
//	80850E74: 8034739C (PSVECSquareDistance)
//	80850EE4: 80450AE0 (__float_nan)
//	80850EE8: 80450AE0 (__float_nan)
//	80850F54: 80450AE0 (__float_nan)
//	80850F58: 80450AE0 (__float_nan)
//	80850F78: 804061C0 (g_dComIfG_gameInfo)
//	80850F7C: 804061C0 (g_dComIfG_gameInfo)
//	80850F88: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	80850F8C: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	80850F94: 80042914 (setSkipProc__14dEvt_control_cFPvPFPvi_ii)
//	80850FAC: 80270540 (cLib_addCalcAngleS__FPsssss)
//	80850FC0: 80439A20 (sincosTable___5JMath)
//	80850FC4: 80439A20 (sincosTable___5JMath)
//	80851020: 80347090 (PSVECAdd)
//	80851030: 80347090 (PSVECAdd)
//	8085105C: 80270DC0 (cLib_offsetPos__FP4cXyzPC4cXyzsPC4cXyz)
//	80851074: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	8085109C: 80270DC0 (cLib_offsetPos__FP4cXyzPC4cXyzsPC4cXyz)
//	808510B4: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	808510C8: 80270740 (cLib_chaseF__FPfff)
//	808510D8: 80347090 (PSVECAdd)
//	808510E8: 80266B84 (__ml__4cXyzCFf)
//	808510F8: 80347090 (PSVECAdd)
//	80851120: 80270DC0 (cLib_offsetPos__FP4cXyzPC4cXyzsPC4cXyz)
//	80851138: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	80851188: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
//	80851260: 804061C0 (g_dComIfG_gameInfo)
//	80851264: 804061C0 (g_dComIfG_gameInfo)
//	80851270: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	80851274: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	8085127C: 80042914 (setSkipProc__14dEvt_control_cFPvPFPvi_ii)
//	80851298: 8084AE78 (setSceneChange__8daKago_cFi)
//	808512B4: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	808512CC: 80270540 (cLib_addCalcAngleS__FPsssss)
//	808512D8: 80270C74 (cLib_targetAngleX__FPC4cXyzPC4cXyz)
//	808512F4: 80270540 (cLib_addCalcAngleS__FPsssss)
//	80851308: 80439A20 (sincosTable___5JMath)
//	8085130C: 80439A20 (sincosTable___5JMath)
//	80851374: 80270DC0 (cLib_offsetPos__FP4cXyzPC4cXyzsPC4cXyz)
//	808513C4: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
//	808513D0: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::executeFirstDemo() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/executeFirstDemo__8daKago_cFv.s"
}
#pragma pop


/* 808513E4-80851434 0050+00 s=1 e=0 z=0  None .text      executePerch2__8daKago_cFv                                   */
//	80851404: 8084FB50 (initFirstDemo__8daKago_cFv)
//	8085140C: 80850384 (executeFirstDemo__8daKago_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::executePerch2() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/executePerch2__8daKago_cFv.s"
}
#pragma pop


/* 80851434-80851DEC 09B8+00 s=2 e=0 z=0  None .text      executeLandingLakeHairia__8daKago_cFv                        */
//	80851444: 803621DC (_savegpr_29)
//	8085144C: 80854B04 (lit_3929)
//	80851450: 80854B04 (lit_3929)
//	80851454: 80181640 (dCam_getBody__Fv)
//	80851480: 80854E5C (lit_7130)
//	80851484: 80854E5C (lit_7130)
//	808514D0: 8001B908 (fopAcM_orderPotentialEvent__FP10fopAc_ac_cUsUsUs)
//	808514E4: 801614D0 (Stop__9dCamera_cFv)
//	808514F0: 8016300C (SetTrimSize__9dCamera_cFl)
//	80851558: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	80851594: 80347090 (PSVECAdd)
//	808515BC: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	808515C0: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	808515D0: 802B61E8 (setDemoName__11Z2StatusMgrFPc)
//	8085166C: 80270B90 (cLib_chaseAngleS__FPsss)
//	8085167C: 80270B90 (cLib_chaseAngleS__FPsss)
//	80851694: 80270B90 (cLib_chaseAngleS__FPsss)
//	808516A8: 80439A20 (sincosTable___5JMath)
//	808516AC: 80439A20 (sincosTable___5JMath)
//	80851704: 804061C0 (g_dComIfG_gameInfo)
//	80851708: 804061C0 (g_dComIfG_gameInfo)
//	80851714: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	80851718: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	80851720: 80042914 (setSkipProc__14dEvt_control_cFPvPFPvi_ii)
//	8085174C: 80347090 (PSVECAdd)
//	80851774: 80347090 (PSVECAdd)
//	8085179C: 80347090 (PSVECAdd)
//	808517C8: 80270C74 (cLib_targetAngleX__FPC4cXyzPC4cXyz)
//	808517E0: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	80851810: 808496F0 (setBck__8daKago_cFiUcff)
//	8085182C: 80439A20 (sincosTable___5JMath)
//	80851830: 80439A20 (sincosTable___5JMath)
//	80851890: 804061C0 (g_dComIfG_gameInfo)
//	80851894: 804061C0 (g_dComIfG_gameInfo)
//	808518A0: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	808518A4: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	808518AC: 80042914 (setSkipProc__14dEvt_control_cFPvPFPvi_ii)
//	808518CC: 80439A20 (sincosTable___5JMath)
//	808518D0: 80439A20 (sincosTable___5JMath)
//	80851920: 80270B90 (cLib_chaseAngleS__FPsss)
//	8085193C: 8084ABC8 (setRideOff__8daKago_cFv)
//	80851964: 808496F0 (setBck__8daKago_cFiUcff)
//	8085196C: 804061C0 (g_dComIfG_gameInfo)
//	80851970: 804061C0 (g_dComIfG_gameInfo)
//	8085197C: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	80851980: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	80851988: 80042914 (setSkipProc__14dEvt_control_cFPvPFPvi_ii)
//	808519C4: 80347090 (PSVECAdd)
//	808519D4: 802707AC (cLib_chasePos__FP4cXyzRC4cXyzf)
//	808519E0: 8034739C (PSVECSquareDistance)
//	80851A50: 80450AE0 (__float_nan)
//	80851A54: 80450AE0 (__float_nan)
//	80851AC0: 80450AE0 (__float_nan)
//	80851AC4: 80450AE0 (__float_nan)
//	80851AE0: 80270740 (cLib_chaseF__FPfff)
//	80851B08: 80347090 (PSVECAdd)
//	80851B18: 802707AC (cLib_chasePos__FP4cXyzRC4cXyzf)
//	80851B24: 8034739C (PSVECSquareDistance)
//	80851B94: 80450AE0 (__float_nan)
//	80851B98: 80450AE0 (__float_nan)
//	80851C04: 80450AE0 (__float_nan)
//	80851C08: 80450AE0 (__float_nan)
//	80851C24: 80270740 (cLib_chaseF__FPfff)
//	80851C38: 80270740 (cLib_chaseF__FPfff)
//	80851C3C: 80439A20 (sincosTable___5JMath)
//	80851C40: 80439A20 (sincosTable___5JMath)
//	80851C90: 80270B90 (cLib_chaseAngleS__FPsss)
//	80851D20: 8084AA98 (setActionMode__8daKago_cFii)
//	80851D28: 80180C68 (Reset__9dCamera_cFv)
//	80851D30: 801614AC (Start__9dCamera_cFv)
//	80851D3C: 8016300C (SetTrimSize__9dCamera_cFl)
//	80851D40: 804061C0 (g_dComIfG_gameInfo)
//	80851D44: 804061C0 (g_dComIfG_gameInfo)
//	80851D4C: 80042468 (reset__14dEvt_control_cFv)
//	80851D50: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80851D54: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80851D64: 802B61E8 (setDemoName__11Z2StatusMgrFPc)
//	80851D6C: 804061C0 (g_dComIfG_gameInfo)
//	80851D70: 804061C0 (g_dComIfG_gameInfo)
//	80851D7C: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	80851D80: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	80851D88: 80042914 (setSkipProc__14dEvt_control_cFPvPFPvi_ii)
//	80851DD0: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
//	80851DD8: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::executeLandingLakeHairia() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/executeLandingLakeHairia__8daKago_cFv.s"
}
#pragma pop


/* 80851DEC-808525B0 07C4+00 s=1 e=0 z=0  None .text      executeLandingBoartHouse__8daKago_cFv                        */
//	80851DFC: 803621DC (_savegpr_29)
//	80851E04: 80854B04 (lit_3929)
//	80851E08: 80854B04 (lit_3929)
//	80851E0C: 80181640 (dCam_getBody__Fv)
//	80851E80: 8001B908 (fopAcM_orderPotentialEvent__FP10fopAc_ac_cUsUsUs)
//	80851E94: 801614D0 (Stop__9dCamera_cFv)
//	80851EA0: 8016300C (SetTrimSize__9dCamera_cFl)
//	80851EB0: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80851EB4: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80851EC4: 802B61E8 (setDemoName__11Z2StatusMgrFPc)
//	80851EF4: 808496F0 (setBck__8daKago_cFiUcff)
//	80851F4C: 80270C74 (cLib_targetAngleX__FPC4cXyzPC4cXyz)
//	80851F64: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	80852014: 80439A20 (sincosTable___5JMath)
//	80852018: 80439A20 (sincosTable___5JMath)
//	80852078: 804061C0 (g_dComIfG_gameInfo)
//	8085207C: 804061C0 (g_dComIfG_gameInfo)
//	80852088: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	8085208C: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	80852094: 80042914 (setSkipProc__14dEvt_control_cFPvPFPvi_ii)
//	808520B4: 80439A20 (sincosTable___5JMath)
//	808520B8: 80439A20 (sincosTable___5JMath)
//	80852108: 80270B90 (cLib_chaseAngleS__FPsss)
//	80852124: 8084ABC8 (setRideOff__8daKago_cFv)
//	8085213C: 804061C0 (g_dComIfG_gameInfo)
//	80852140: 804061C0 (g_dComIfG_gameInfo)
//	8085214C: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	80852150: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	80852158: 80042914 (setSkipProc__14dEvt_control_cFPvPFPvi_ii)
//	80852194: 802707AC (cLib_chasePos__FP4cXyzRC4cXyzf)
//	808521A0: 8034739C (PSVECSquareDistance)
//	80852210: 80450AE0 (__float_nan)
//	80852214: 80450AE0 (__float_nan)
//	80852280: 80450AE0 (__float_nan)
//	80852284: 80450AE0 (__float_nan)
//	808522A0: 80270740 (cLib_chaseF__FPfff)
//	808522C8: 802707AC (cLib_chasePos__FP4cXyzRC4cXyzf)
//	808522D4: 8034739C (PSVECSquareDistance)
//	80852344: 80450AE0 (__float_nan)
//	80852348: 80450AE0 (__float_nan)
//	808523B4: 80450AE0 (__float_nan)
//	808523B8: 80450AE0 (__float_nan)
//	808523D4: 80270740 (cLib_chaseF__FPfff)
//	808523E8: 80270740 (cLib_chaseF__FPfff)
//	808523EC: 80439A20 (sincosTable___5JMath)
//	808523F0: 80439A20 (sincosTable___5JMath)
//	80852440: 80270B90 (cLib_chaseAngleS__FPsss)
//	808524D0: 8084AA98 (setActionMode__8daKago_cFii)
//	808524EC: 80180C68 (Reset__9dCamera_cFv)
//	808524F4: 801614AC (Start__9dCamera_cFv)
//	80852500: 8016300C (SetTrimSize__9dCamera_cFl)
//	80852504: 804061C0 (g_dComIfG_gameInfo)
//	80852508: 804061C0 (g_dComIfG_gameInfo)
//	80852510: 80042468 (reset__14dEvt_control_cFv)
//	80852514: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80852518: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80852528: 802B61E8 (setDemoName__11Z2StatusMgrFPc)
//	80852530: 804061C0 (g_dComIfG_gameInfo)
//	80852534: 804061C0 (g_dComIfG_gameInfo)
//	80852540: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	80852544: 8084AA64 (DemoSkipCallBack__8daKago_cFPvi)
//	8085254C: 80042914 (setSkipProc__14dEvt_control_cFPvPFPvi_ii)
//	80852594: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
//	8085259C: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::executeLandingBoartHouse() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/executeLandingBoartHouse__8daKago_cFv.s"
}
#pragma pop


/* 808525B0-80852610 0060+00 s=2 e=0 z=0  None .text      executeLanding__8daKago_cFv                                  */
//	808525D0: 80851434 (executeLandingLakeHairia__8daKago_cFv)
//	808525E0: 80851DEC (executeLandingBoartHouse__8daKago_cFv)
//	808525E8: 8084ABC8 (setRideOff__8daKago_cFv)
//	808525F8: 8084AA98 (setActionMode__8daKago_cFii)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::executeLanding() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/executeLanding__8daKago_cFv.s"
}
#pragma pop


/* 80852610-80852D90 0780+00 s=2 e=0 z=0  None .text      moveDemoFly__8daKago_cFv                                     */
//	80852620: 803621DC (_savegpr_29)
//	80852628: 80854B04 (lit_3929)
//	8085262C: 80854B04 (lit_3929)
//	80852640: 80854F78 (l_HIO)
//	80852644: 80854F78 (l_HIO)
//	80852650: 80270740 (cLib_chaseF__FPfff)
//	80852674: 8001B908 (fopAcM_orderPotentialEvent__FP10fopAc_ac_cUsUsUs)
//	8085268C: 8084AB8C (setPlayerRideOn__8daKago_cFv)
//	80852690: 80854F78 (l_HIO)
//	80852694: 80854F78 (l_HIO)
//	808526D0: 80853228 (setDashBlurEffect__8daKago_cFi)
//	808526E4: 80854F78 (l_HIO)
//	808526E8: 80854F78 (l_HIO)
//	808526F0: 808496F0 (setBck__8daKago_cFiUcff)
//	80852708: 804061C0 (g_dComIfG_gameInfo)
//	8085270C: 804061C0 (g_dComIfG_gameInfo)
//	80852720: 8006FA24 (StartShock__12dVibration_cFii4cXyz)
//	80852750: 80849BA8 (checkGroundHeight__8daKago_cF4cXyzPf)
//	80852778: 8084A070 (checkRoofHeight__8daKago_cF4cXyz)
//	8085278C: 804061C0 (g_dComIfG_gameInfo)
//	80852790: 804061C0 (g_dComIfG_gameInfo)
//	8085279C: 80034810 (onSwitch__12dSv_memBit_cFi)
//	808527B4: 80249F90 (init__10dMsgFlow_cFP10fopAc_ac_ciiPP10fopAc_ac_c)
//	808527BC: 8084B108 (checkHeight__8daKago_cFv)
//	808527E4: 8024A2D8 (doFlow__10dMsgFlow_cFP10fopAc_ac_cPP10fopAc_ac_ci)
//	808527F8: 80852F14 (setDashEffect__8daKago_cFv)
//	80852808: 804061C0 (g_dComIfG_gameInfo)
//	8085280C: 804061C0 (g_dComIfG_gameInfo)
//	80852850: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80852854: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80852864: 802B61E8 (setDemoName__11Z2StatusMgrFPc)
//	8085287C: 80854F78 (l_HIO)
//	80852880: 80854F78 (l_HIO)
//	8085288C: 80270740 (cLib_chaseF__FPfff)
//	8085289C: 8032842C (checkPass__12J3DFrameCtrlFf)
//	8085291C: 8032842C (checkPass__12J3DFrameCtrlFf)
//	8085294C: 804061C0 (g_dComIfG_gameInfo)
//	80852950: 804061C0 (g_dComIfG_gameInfo)
//	80852968: 8006FA24 (StartShock__12dVibration_cFii4cXyz)
//	80852990: 8006FB10 (StartQuake__12dVibration_cFii4cXyz)
//	808529AC: 80270740 (cLib_chaseF__FPfff)
//	808529E4: 804061C0 (g_dComIfG_gameInfo)
//	808529E8: 804061C0 (g_dComIfG_gameInfo)
//	808529F4: 8006FD94 (StopQuake__12dVibration_cFi)
//	80852A00: 80854F78 (l_HIO)
//	80852A04: 80854F78 (l_HIO)
//	80852A10: 80270740 (cLib_chaseF__FPfff)
//	80852A40: 804061C0 (g_dComIfG_gameInfo)
//	80852A44: 804061C0 (g_dComIfG_gameInfo)
//	80852A94: 80849BA8 (checkGroundHeight__8daKago_cF4cXyzPf)
//	80852ABC: 8084A070 (checkRoofHeight__8daKago_cF4cXyz)
//	80852AC8: 8084C204 (setFlyAnime__8daKago_cFv)
//	80852AF4: 8084C204 (setFlyAnime__8daKago_cFv)
//	80852B00: 80439A20 (sincosTable___5JMath)
//	80852B04: 80439A20 (sincosTable___5JMath)
//	80852B18: 80854F78 (l_HIO)
//	80852B1C: 80854F78 (l_HIO)
//	80852B34: 80854F78 (l_HIO)
//	80852B38: 80854F78 (l_HIO)
//	80852B70: 80270740 (cLib_chaseF__FPfff)
//	80852B80: 80270740 (cLib_chaseF__FPfff)
//	80852B9C: 8084AA98 (setActionMode__8daKago_cFii)
//	80852BA0: 804061C0 (g_dComIfG_gameInfo)
//	80852BA4: 804061C0 (g_dComIfG_gameInfo)
//	80852BAC: 80042468 (reset__14dEvt_control_cFv)
//	80852BB0: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80852BB4: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80852BC4: 802B61E8 (setDemoName__11Z2StatusMgrFPc)
//	80852BD8: 800517B0 (dPath_GetPnt__FPC5dPathi)
//	80852C0C: 800517B0 (dPath_GetPnt__FPC5dPathi)
//	80852C30: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	80852C3C: 804061C0 (g_dComIfG_gameInfo)
//	80852C40: 804061C0 (g_dComIfG_gameInfo)
//	80852C58: 80270C74 (cLib_targetAngleX__FPC4cXyzPC4cXyz)
//	80852C70: 80270540 (cLib_addCalcAngleS__FPsssss)
//	80852C8C: 80270540 (cLib_addCalcAngleS__FPsssss)
//	80852CA0: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	80852CB8: 80270540 (cLib_addCalcAngleS__FPsssss)
//	80852CC4: 80439A20 (sincosTable___5JMath)
//	80852CC8: 80439A20 (sincosTable___5JMath)
//	80852D2C: 8084B088 (checkNextPath__8daKago_cF4cXyz)
//	80852D44: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	80852D50: 803650D0 (abs)
//	80852D70: 8084C078 (checkFlySceneChange__8daKago_cFv)
//	80852D7C: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::moveDemoFly() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/moveDemoFly__8daKago_cFv.s"
}
#pragma pop


/* 80852D90-80852F14 0184+00 s=1 e=0 z=0  None .text      setFlyEffect__8daKago_cFv                                    */
//	80852DA0: 803621D8 (_savegpr_28)
//	80852DBC: 804061C0 (g_dComIfG_gameInfo)
//	80852DC0: 804061C0 (g_dComIfG_gameInfo)
//	80852E0C: 80854B10 (lit_3932)
//	80852E10: 80854B10 (lit_3932)
//	80852E14: 8004D4CC (set__13dPa_control_cFUlUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	80852E28: 8004B918 (getEmitter__Q213dPa_control_c7level_cFUl)
//	80852E4C: 80280808 (func_80280808)
//	80852EA8: 80854B10 (lit_3932)
//	80852EAC: 80854B10 (lit_3932)
//	80852EB0: 8004D4CC (set__13dPa_control_cFUlUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	80852EC4: 8004B918 (getEmitter__Q213dPa_control_c7level_cFUl)
//	80852EE8: 80280808 (func_80280808)
//	80852F00: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::setFlyEffect() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/setFlyEffect__8daKago_cFv.s"
}
#pragma pop


/* 80852F14-808530A4 0190+00 s=2 e=0 z=0  None .text      setDashEffect__8daKago_cFv                                   */
//	80852F24: 803621D8 (_savegpr_28)
//	80852F40: 804061C0 (g_dComIfG_gameInfo)
//	80852F44: 804061C0 (g_dComIfG_gameInfo)
//	80852F90: 80854B10 (lit_3932)
//	80852F94: 80854B10 (lit_3932)
//	80852F98: 8004D4CC (set__13dPa_control_cFUlUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	80852FAC: 8004B918 (getEmitter__Q213dPa_control_c7level_cFUl)
//	80852FD0: 80280808 (func_80280808)
//	8085302C: 80854B10 (lit_3932)
//	80853030: 80854B10 (lit_3932)
//	80853034: 8004D4CC (set__13dPa_control_cFUlUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	80853048: 8004B918 (getEmitter__Q213dPa_control_c7level_cFUl)
//	8085306C: 80280808 (func_80280808)
//	80853088: 80853228 (setDashBlurEffect__8daKago_cFi)
//	80853090: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::setDashEffect() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/setDashEffect__8daKago_cFv.s"
}
#pragma pop


/* 808530A4-80853228 0184+00 s=1 e=0 z=0  None .text      setDamageEffect__8daKago_cFv                                 */
//	808530B4: 803621D8 (_savegpr_28)
//	808530D0: 804061C0 (g_dComIfG_gameInfo)
//	808530D4: 804061C0 (g_dComIfG_gameInfo)
//	80853120: 80854B10 (lit_3932)
//	80853124: 80854B10 (lit_3932)
//	80853128: 8004D4CC (set__13dPa_control_cFUlUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	8085313C: 8004B918 (getEmitter__Q213dPa_control_c7level_cFUl)
//	80853160: 80280808 (func_80280808)
//	808531BC: 80854B10 (lit_3932)
//	808531C0: 80854B10 (lit_3932)
//	808531C4: 8004D4CC (set__13dPa_control_cFUlUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	808531D8: 8004B918 (getEmitter__Q213dPa_control_c7level_cFUl)
//	808531FC: 80280808 (func_80280808)
//	80853214: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::setDamageEffect() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/setDamageEffect__8daKago_cFv.s"
}
#pragma pop


/* 80853228-80853460 0238+00 s=3 e=0 z=0  None .text      setDashBlurEffect__8daKago_cFi                               */
//	80853240: 804061C0 (g_dComIfG_gameInfo)
//	80853244: 804061C0 (g_dComIfG_gameInfo)
//	8085325C: 80181640 (dCam_getBody__Fv)
//	80853268: 80181E64 (Eye__9dCamera_cFv)
//	80853290: 80439A20 (sincosTable___5JMath)
//	80853294: 80439A20 (sincosTable___5JMath)
//	808532B8: 80854F78 (l_HIO)
//	808532BC: 80854F78 (l_HIO)
//	80853328: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8085334C: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8085335C: 80270C74 (cLib_targetAngleX__FPC4cXyzPC4cXyz)
//	80853374: 80854F78 (l_HIO)
//	80853378: 80854F78 (l_HIO)
//	8085339C: 80854BF4 (lit_5481)
//	808533A0: 80854BF4 (lit_5481)
//	808533A8: 80854BD4 (lit_4923)
//	808533AC: 80854BD4 (lit_4923)
//	808533E8: 804061C0 (g_dComIfG_gameInfo)
//	808533EC: 804061C0 (g_dComIfG_gameInfo)
//	80853438: 80854B10 (lit_3932)
//	8085343C: 80854B10 (lit_3932)
//	80853440: 8004D4CC (set__13dPa_control_cFUlUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
asm void daKago_c::setDashBlurEffect(int param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/setDashBlurEffect__8daKago_cFi.s"
}
#pragma pop


/* 80853460-8085350C 00AC+00 s=1 e=0 z=0  None .text      setWallHitEffect__8daKago_cF4cXyzi                           */
//	80853470: 803621CC (_savegpr_25)
//	80853480: 804061C0 (g_dComIfG_gameInfo)
//	80853484: 804061C0 (g_dComIfG_gameInfo)
//	8085348C: 80854E78 (kago_wall_hit_id)
//	80853490: 80854E78 (kago_wall_hit_id)
//	80853494: 80854B10 (lit_3932)
//	80853498: 80854B10 (lit_3932)
//	808534E4: 8004CA90 (set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	808534F8: 80362218 (_restgpr_25)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cXyz False
//  int False
asm void daKago_c::setWallHitEffect(cXyz param_0, int param_1) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/setWallHitEffect__8daKago_cF4cXyzi.s"
}
#pragma pop


/* 8085350C-8085366C 0160+00 s=2 e=0 z=0  None .text      setSibukiEffect__8daKago_cFv                                 */
//	8085351C: 803621C8 (_savegpr_24)
//	8085352C: 80854F78 (l_HIO)
//	80853530: 80854F78 (l_HIO)
//	8085355C: 802673F4 (__ct__5csXyzFsss)
//	8085356C: 804061C0 (g_dComIfG_gameInfo)
//	80853570: 804061C0 (g_dComIfG_gameInfo)
//	80853574: 80854E84 (kago_wave_id_7737)
//	80853578: 80854E84 (kago_wave_id_7737)
//	8085357C: 80854B10 (lit_3932)
//	80853580: 80854B10 (lit_3932)
//	808535D0: 8004D4CC (set__13dPa_control_cFUlUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	80853658: 80362214 (_restgpr_24)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::setSibukiEffect() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/setSibukiEffect__8daKago_cFv.s"
}
#pragma pop


/* 8085366C-80853730 00C4+00 s=1 e=0 z=0  None .text      setDashSibukiEffect__8daKago_cFv                             */
//	80853688: 80854F78 (l_HIO)
//	8085368C: 80854F78 (l_HIO)
//	808536B8: 802673F4 (__ct__5csXyzFsss)
//	808536BC: 804061C0 (g_dComIfG_gameInfo)
//	808536C0: 804061C0 (g_dComIfG_gameInfo)
//	8085370C: 80854B10 (lit_3932)
//	80853710: 80854B10 (lit_3932)
//	80853714: 8004D4CC (set__13dPa_control_cFUlUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::setDashSibukiEffect() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/setDashSibukiEffect__8daKago_cFv.s"
}
#pragma pop


/* 80853730-80853880 0150+00 s=1 e=0 z=0  None .text      setWaterFallEffect__8daKago_cFv                              */
//	80853740: 803621C8 (_savegpr_24)
//	80853770: 802673F4 (__ct__5csXyzFsss)
//	80853780: 804061C0 (g_dComIfG_gameInfo)
//	80853784: 804061C0 (g_dComIfG_gameInfo)
//	80853788: 80854E8C (kago_wave_id_7791)
//	8085378C: 80854E8C (kago_wave_id_7791)
//	80853790: 80854B10 (lit_3932)
//	80853794: 80854B10 (lit_3932)
//	808537E4: 8004D4CC (set__13dPa_control_cFUlUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	8085386C: 80362214 (_restgpr_24)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::setWaterFallEffect() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/setWaterFallEffect__8daKago_cFv.s"
}
#pragma pop


/* 80853880-8085392C 00AC+00 s=1 e=0 z=0  None .text      s_waterfall__FPvPv                                           */
//	8085389C: 80018CE0 (fopAc_IsActor__FPv)
//	808538C8: 80022138 (fpcM_IsCreating__FUi)
//	808538F4: 80D64768 (checkHitWaterFall__16daTagWaterFall_cF4cXyz)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  void* False
// 	 void False
//  void* False
// 	 void False
asm static void s_waterfall(void* param_0, void* param_1) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/s_waterfall__FPvPv.s"
}
#pragma pop


/* 8085392C-80853BCC 02A0+00 s=1 e=0 z=0  None .text      setFlySound__8daKago_cFv                                     */
//	8085393C: 803621DC (_savegpr_29)
//	80853944: 80854B04 (lit_3929)
//	80853948: 80854B04 (lit_3929)
//	80853960: 80849798 (checkBck__8daKago_cFi)
//	80853974: 80849798 (checkBck__8daKago_cFi)
//	80853998: 8032842C (checkPass__12J3DFrameCtrlFf)
//	808539B8: 8032842C (checkPass__12J3DFrameCtrlFf)
//	808539D4: 80849798 (checkBck__8daKago_cFi)
//	808539EC: 8032842C (checkPass__12J3DFrameCtrlFf)
//	80853A08: 80849798 (checkBck__8daKago_cFi)
//	80853A20: 8032842C (checkPass__12J3DFrameCtrlFf)
//	80853A3C: 80849798 (checkBck__8daKago_cFi)
//	80853A54: 8032842C (checkPass__12J3DFrameCtrlFf)
//	80853A70: 80849798 (checkBck__8daKago_cFi)
//	80853A88: 8032842C (checkPass__12J3DFrameCtrlFf)
//	80853AA0: 8032842C (checkPass__12J3DFrameCtrlFf)
//	80853ABC: 80849798 (checkBck__8daKago_cFi)
//	80853AD0: 80849798 (checkBck__8daKago_cFi)
//	80853BB8: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::setFlySound() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/setFlySound__8daKago_cFv.s"
}
#pragma pop


/* 80853BCC-80853EF0 0324+00 s=2 e=0 z=0  None .text      action__8daKago_cFv                                          */
//	80853BDC: 803621DC (_savegpr_29)
//	80853BE4: 80854B04 (lit_3929)
//	80853BE8: 80854B04 (lit_3929)
//	80853BEC: 8084A210 (checkMoveHeight__8daKago_cFv)
//	80853BF4: 8084A2A8 (checkSizeBg__8daKago_cFv)
//	80853BFC: 80852D90 (setFlyEffect__8daKago_cFv)
//	80853C00: 803DD2E8 (m_cpadInfo__8mDoCPd_c)
//	80853C04: 803DD2E8 (m_cpadInfo__8mDoCPd_c)
//	80853C20: 80853880 (s_waterfall__FPvPv)
//	80853C24: 80853880 (s_waterfall__FPvPv)
//	80853C2C: 80021338 (fpcEx_Search__FPFPvPv_PvPv)
//	80853C60: 804061C0 (g_dComIfG_gameInfo)
//	80853C64: 804061C0 (g_dComIfG_gameInfo)
//	80853C78: 8006FB10 (StartQuake__12dVibration_cFii4cXyz)
//	80853CB8: 80853730 (setWaterFallEffect__8daKago_cFv)
//	80853CC8: 804061C0 (g_dComIfG_gameInfo)
//	80853CCC: 804061C0 (g_dComIfG_gameInfo)
//	80853CD8: 8006FD94 (StopQuake__12dVibration_cFi)
//	80853CF0: 80854E90 (lit_7982)
//	80853CF4: 80854E90 (lit_7982)
//	80853D0C: 8084C2CC (executeFly__8daKago_cFv)
//	80853D18: 8084C8FC (executeStagger__8daKago_cFv)
//	80853D24: 8084DBFC (executeEvent__8daKago_cFv)
//	80853D30: 8084FA58 (executePerch__8daKago_cFv)
//	80853D3C: 8084D108 (executeWait__8daKago_cFv)
//	80853D48: 8084D50C (executeAttack__8daKago_cFv)
//	80853D54: 8084FAA8 (executeEvent2__8daKago_cFv)
//	80853D60: 808513E4 (executePerch2__8daKago_cFv)
//	80853D6C: 808525B0 (executeLanding__8daKago_cFv)
//	80853D78: 80852610 (moveDemoFly__8daKago_cFv)
//	80853D84: 80852610 (moveDemoFly__8daKago_cFv)
//	80853DB8: 8085392C (setFlySound__8daKago_cFv)
//	80853DBC: 804061C0 (g_dComIfG_gameInfo)
//	80853DC0: 804061C0 (g_dComIfG_gameInfo)
//	80853DE8: 80181640 (dCam_getBody__Fv)
//	80853DF0: 80163028 (SetTrimTypeForce__9dCamera_cFl)
//	80853E04: 80181640 (dCam_getBody__Fv)
//	80853E0C: 80163028 (SetTrimTypeForce__9dCamera_cFl)
//	80853E10: 80181640 (dCam_getBody__Fv)
//	80853E18: 80163D50 (ModeFix__9dCamera_cFl)
//	80853E24: 8001A6CC (fopAcM_posMoveF__FP10fopAc_ac_cPC4cXyz)
//	80853E38: 804061C0 (g_dComIfG_gameInfo)
//	80853E3C: 804061C0 (g_dComIfG_gameInfo)
//	80853E44: 80076AAC (CrrPos__9dBgS_AcchFR4dBgS)
//	80853E5C: 8002D06C (dComIfGp_getReverb__Fi)
//	80853E6C: 800110B0 (play__16mDoExt_McaMorfSOFUlSc)
//	80853E94: 80270740 (cLib_chaseF__FPfff)
//	80853EB4: 80439A20 (sincosTable___5JMath)
//	80853EB8: 80439A20 (sincosTable___5JMath)
//	80853EDC: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::action() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/action__8daKago_cFv.s"
}
#pragma pop


/* 80853EF0-80853FB0 00C0+00 s=2 e=0 z=0  None .text      mtx_set__8daKago_cFv                                         */
//	80853F04: 803DD470 (now__14mDoMtx_stack_c)
//	80853F08: 803DD470 (now__14mDoMtx_stack_c)
//	80853F18: 803468E8 (PSMTXTrans)
//	80853F20: 8000CF44 (ZXYrotM__14mDoMtx_stack_cFRC5csXyz)
//	80853F24: 80854F78 (l_HIO)
//	80853F28: 80854F78 (l_HIO)
//	80853F38: 8000CE38 (scaleM__14mDoMtx_stack_cFfff)
//	80853F44: 803DD470 (now__14mDoMtx_stack_c)
//	80853F48: 803DD470 (now__14mDoMtx_stack_c)
//	80853F50: 803464B0 (PSMTXCopy)
//	80853F58: 800111EC (modelCalc__16mDoExt_McaMorfSOFv)
//	80853F70: 803DD470 (now__14mDoMtx_stack_c)
//	80853F74: 803DD470 (now__14mDoMtx_stack_c)
//	80853F78: 803464B0 (PSMTXCopy)
//	80853F7C: 803DD470 (now__14mDoMtx_stack_c)
//	80853F80: 803DD470 (now__14mDoMtx_stack_c)
//	80853F88: 8000C4CC (mDoMtx_ZrotM__FPA4_fs)
//	80853F8C: 803DD470 (now__14mDoMtx_stack_c)
//	80853F90: 803DD470 (now__14mDoMtx_stack_c)
//	80853F98: 803464B0 (PSMTXCopy)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::mtx_set() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/mtx_set__8daKago_cFv.s"
}
#pragma pop


/* 80853FB0-80854058 00A8+00 s=1 e=0 z=0  None .text      cc_set__8daKago_cFv                                          */
//	80854004: 80854B78 (lit_4270)
//	80854008: 80854B78 (lit_4270)
//	8085401C: 8026F648 (SetC__8cM3dGSphFRC4cXyz)
//	80854024: 80854C70 (lit_6550)
//	80854028: 80854C70 (lit_6550)
//	8085402C: 8026F708 (SetR__8cM3dGSphFf)
//	80854030: 804061C0 (g_dComIfG_gameInfo)
//	80854034: 804061C0 (g_dComIfG_gameInfo)
//	80854040: 80264BA8 (Set__4cCcSFP8cCcD_Obj)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::cc_set() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/cc_set__8daKago_cFv.s"
}
#pragma pop


/* 80854058-80854168 0110+00 s=1 e=0 z=0  None .text      execute__8daKago_cFv                                         */
//	8085406C: 80849980 (executeBalloonMenu__8daKago_cFv)
//	8085407C: 804061C0 (g_dComIfG_gameInfo)
//	80854080: 804061C0 (g_dComIfG_gameInfo)
//	80854114: 80853BCC (action__8daKago_cFv)
//	8085411C: 80853EF0 (mtx_set__8daKago_cFv)
//	80854124: 80853FB0 (cc_set__8daKago_cFv)
//	80854128: 80181640 (dCam_getBody__Fv)
//	80854134: 80181E64 (Eye__9dCamera_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::execute() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/execute__8daKago_cFv.s"
}
#pragma pop


/* 80854168-80854188 0020+00 s=2 e=0 z=0  None .text      daKago_Execute__FP8daKago_c                                  */
//	80854174: 80854058 (execute__8daKago_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daKago_c* False
// 	 daKago_c False
asm static void daKago_Execute(daKago_c* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/daKago_Execute__FP8daKago_c.s"
}
#pragma pop


/* 80854188-80854190 0008+00 s=1 e=0 z=0  None .text      daKago_IsDelete__FP8daKago_c                                 */
// True False
//  bool False
//  daKago_c* False
// 	 daKago_c False
static bool daKago_IsDelete(daKago_c* param_0) {
	return true;
}


/* 80854190-80854200 0070+00 s=1 e=0 z=0  None .text      _delete__8daKago_cFv                                         */
//	808541AC: 8002D008 (dComIfG_resDelete__FP30request_of_phase_process_classPCc)
//	808541C0: 80854F68 (data_80854F68)
//	808541C4: 80854F68 (data_80854F68)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::_delete() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/_delete__8daKago_cFv.s"
}
#pragma pop


/* 80854200-80854220 0020+00 s=1 e=0 z=0  None .text      daKago_Delete__FP8daKago_c                                   */
//	8085420C: 80854190 (_delete__8daKago_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daKago_c* False
// 	 daKago_c False
asm static void daKago_Delete(daKago_c* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/daKago_Delete__FP8daKago_c.s"
}
#pragma pop


/* 80854220-808542DC 00BC+00 s=1 e=0 z=0  None .text      ctrlJoint__8daKago_cFP8J3DJointP8J3DModel                    */
//	80854230: 803621D8 (_savegpr_28)
//	80854250: 803DD470 (now__14mDoMtx_stack_c)
//	80854254: 803DD470 (now__14mDoMtx_stack_c)
//	80854258: 803464B0 (PSMTXCopy)
//	80854274: 803DD470 (now__14mDoMtx_stack_c)
//	80854278: 803DD470 (now__14mDoMtx_stack_c)
//	80854280: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	80854284: 803DD470 (now__14mDoMtx_stack_c)
//	80854288: 803DD470 (now__14mDoMtx_stack_c)
//	80854290: 8000C4CC (mDoMtx_ZrotM__FPA4_fs)
//	80854294: 803DD470 (now__14mDoMtx_stack_c)
//	80854298: 803DD470 (now__14mDoMtx_stack_c)
//	808542A8: 803464B0 (PSMTXCopy)
//	808542AC: 803DD470 (now__14mDoMtx_stack_c)
//	808542B0: 803DD470 (now__14mDoMtx_stack_c)
//	808542B4: 80434BE4 (mCurrentMtx__6J3DSys)
//	808542B8: 80434BE4 (mCurrentMtx__6J3DSys)
//	808542BC: 803464B0 (PSMTXCopy)
//	808542C8: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  J3DJoint* False
// 	 J3DJoint False
//  J3DModel* False
// 	 J3DModel False
asm void daKago_c::ctrlJoint(J3DJoint* param_0, J3DModel* param_1) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/ctrlJoint__8daKago_cFP8J3DJointP8J3DModel.s"
}
#pragma pop


/* 808542DC-80854328 004C+00 s=1 e=0 z=0  None .text      JointCallBack__8daKago_cFP8J3DJointi                         */
//	808542F4: 80434AC8 (j3dSys)
//	808542F8: 80434AC8 (j3dSys)
//	80854310: 80854220 (ctrlJoint__8daKago_cFP8J3DJointP8J3DModel)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  J3DJoint* False
// 	 J3DJoint False
//  int False
asm void daKago_c::JointCallBack(J3DJoint* param_0, int param_1) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/JointCallBack__8daKago_cFP8J3DJointi.s"
}
#pragma pop


/* 80854328-808544B8 0190+00 s=1 e=0 z=0  None .text      CreateHeap__8daKago_cFv                                      */
//	80854338: 803621DC (_savegpr_29)
//	80854354: 804061C0 (g_dComIfG_gameInfo)
//	80854358: 804061C0 (g_dComIfG_gameInfo)
//	80854368: 8003C2EC (getRes__14dRes_control_cFPCclP11dRes_info_ci)
//	8085437C: 804061C0 (g_dComIfG_gameInfo)
//	80854380: 804061C0 (g_dComIfG_gameInfo)
//	80854390: 8003C2EC (getRes__14dRes_control_cFPCclP11dRes_info_ci)
//	8085439C: 802CEC4C (__nw__FUl)
//	808543B0: 80849660 (getBckName__8daKago_cFi)
//	808543BC: 804061C0 (g_dComIfG_gameInfo)
//	808543C0: 804061C0 (g_dComIfG_gameInfo)
//	808543D0: 8003C2EC (getRes__14dRes_control_cFPCclP11dRes_info_ci)
//	80854408: 80854B10 (lit_3932)
//	8085440C: 80854B10 (lit_3932)
//	80854418: 800107D0 (__ct__16mDoExt_McaMorfSOFP12J3DModelDataP25mDoExt_McaMorfCallBack1_cP25mDoExt_McaMorfCallBack2_cP15J3DAnmTransformifiiP10Z2CreatureUlUl)
//	8085444C: 808542DC (JointCallBack__8daKago_cFP8J3DJointi)
//	80854450: 808542DC (JointCallBack__8daKago_cFP8J3DJointi)
//	808544A4: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::CreateHeap() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/CreateHeap__8daKago_cFv.s"
}
#pragma pop


/* 808544B8-808544D8 0020+00 s=1 e=0 z=0  None .text      useHeapInit__FP10fopAc_ac_c                                  */
//	808544C4: 80854328 (CreateHeap__8daKago_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
asm static void useHeapInit(fopAc_ac_c* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/useHeapInit__FP10fopAc_ac_c.s"
}
#pragma pop


/* 808544D8-80854928 0450+00 s=1 e=0 z=0  None .text      create__8daKago_cFv                                          */
//	808544E8: 803621D8 (_savegpr_28)
//	808544F0: 80854B04 (lit_3929)
//	808544F4: 80854B04 (lit_3929)
//	80854510: 80018B64 (__ct__10fopAc_ac_cFv)
//	80854518: 802C0F64 (__ct__15Z2CreatureEnemyFv)
//	80854520: 80854A28 (__ct__4cXyzFv)
//	80854524: 80854A28 (__ct__4cXyzFv)
//	80854528: 80849924 (__dt__4cXyzFv)
//	8085452C: 80849924 (__dt__4cXyzFv)
//	80854538: 80361D60 (__construct_array)
//	80854540: 80075EAC (__ct__12dBgS_AcchCirFv)
//	8085454C: 800760A0 (__ct__9dBgS_AcchFv)
//	80854550: 80854F24 (__vt__12dBgS_ObjAcch)
//	80854554: 80854F24 (__vt__12dBgS_ObjAcch)
//	80854570: 80078E68 (SetObj__16dBgS_PolyPassChkFv)
//	80854574: 803C3728 (__vt__9cCcD_Stts)
//	80854578: 803C3728 (__vt__9cCcD_Stts)
//	80854584: 80083760 (__ct__10dCcD_GSttsFv)
//	80854588: 803AC2E4 (__vt__9dCcD_Stts)
//	8085458C: 803AC2E4 (__vt__9dCcD_Stts)
//	808545A4: 80083A28 (__ct__12dCcD_GObjInfFv)
//	808545A8: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	808545AC: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	808545B4: 80854F18 (__vt__8cM3dGAab)
//	808545B8: 80854F18 (__vt__8cM3dGAab)
//	808545C0: 80854F0C (__vt__8cM3dGSph)
//	808545C4: 80854F0C (__vt__8cM3dGSph)
//	808545CC: 803C3540 (__vt__12cCcD_SphAttr)
//	808545D0: 803C3540 (__vt__12cCcD_SphAttr)
//	808545E0: 803ABFC0 (__vt__8dCcD_Sph)
//	808545E4: 803ABFC0 (__vt__8dCcD_Sph)
//	80854600: 80249F00 (__ct__10dMsgFlow_cFv)
//	80854628: 800517EC (dPath_GetRoomPath__Fii)
//	80854670: 80854D14 (stringBase0)
//	80854674: 80854D14 (stringBase0)
//	8085468C: 80854D14 (stringBase0)
//	80854690: 80854D14 (stringBase0)
//	808546AC: 8002CEBC (dComIfG_resLoad__FP30request_of_phase_process_classPCc)
//	808546C0: 808544B8 (useHeapInit__FP10fopAc_ac_c)
//	808546C4: 808544B8 (useHeapInit__FP10fopAc_ac_c)
//	808546CC: 8001A4B0 (fopAcM_entrySolidHeap__FP10fopAc_ac_cPFP10fopAc_ac_c_iUl)
//	808546E0: 80854F68 (data_80854F68)
//	808546E4: 80854F68 (data_80854F68)
//	80854700: 80854F78 (l_HIO)
//	80854704: 80854F78 (l_HIO)
//	80854734: 8001A528 (fopAcM_SetMin__FP10fopAc_ac_cfff)
//	80854748: 8001A538 (fopAcM_SetMax__FP10fopAc_ac_cfff)
//	80854774: 80076248 (Set__9dBgS_AcchFP4cXyzP4cXyzP10fopAc_ac_ciP12dBgS_AcchCirP4cXyzP5csXyzP5csXyz)
//	80854784: 80075F58 (SetWall__12dBgS_AcchCirFff)
//	808547B8: 80083860 (Init__9dCcD_SttsFiiP10fopAc_ac_c)
//	808547C0: 80854D4C (data_80854D4C)
//	808547C4: 80854D4C (data_80854D4C)
//	808547C8: 80084A34 (Set__8dCcD_SphFRC11dCcD_SrcSph)
//	80854800: 802C1094 (init__15Z2CreatureEnemyFP3VecP3VecUcUc)
//	80854830: 8084AA98 (setActionMode__8daKago_cFii)
//	8085483C: 80854D14 (stringBase0)
//	80854840: 80854D14 (stringBase0)
//	80854848: 804061C0 (g_dComIfG_gameInfo)
//	8085484C: 804061C0 (g_dComIfG_gameInfo)
//	80854858: 80368994 (strcmp)
//	80854864: 804061C0 (g_dComIfG_gameInfo)
//	80854868: 804061C0 (g_dComIfG_gameInfo)
//	80854884: 80854D14 (stringBase0)
//	80854888: 80854D14 (stringBase0)
//	80854890: 80368994 (strcmp)
//	8085489C: 804061C0 (g_dComIfG_gameInfo)
//	808548A0: 804061C0 (g_dComIfG_gameInfo)
//	808548BC: 80854D14 (stringBase0)
//	808548C0: 80854D14 (stringBase0)
//	808548CC: 80368994 (strcmp)
//	808548D8: 804061C0 (g_dComIfG_gameInfo)
//	808548DC: 804061C0 (g_dComIfG_gameInfo)
//	80854900: 80853EF0 (mtx_set__8daKago_cFv)
//	80854908: 80854168 (daKago_Execute__FP8daKago_c)
//	80854914: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daKago_c::create() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/create__8daKago_cFv.s"
}
#pragma pop


/* 80854928-80854970 0048+00 s=1 e=0 z=0  None .text      __dt__8cM3dGSphFv                                            */
//	80854940: 80854F0C (__vt__8cM3dGSph)
//	80854944: 80854F0C (__vt__8cM3dGSph)
//	80854954: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cM3dGSph::~cM3dGSph() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/__dt__8cM3dGSphFv.s"
}
#pragma pop


/* 80854970-808549B8 0048+00 s=1 e=0 z=0  None .text      __dt__8cM3dGAabFv                                            */
//	80854988: 80854F18 (__vt__8cM3dGAab)
//	8085498C: 80854F18 (__vt__8cM3dGAab)
//	8085499C: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cM3dGAab::~cM3dGAab() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/__dt__8cM3dGAabFv.s"
}
#pragma pop


/* 808549B8-80854A28 0070+00 s=3 e=0 z=0  None .text      __dt__12dBgS_ObjAcchFv                                       */
//	808549D8: 80854F24 (__vt__12dBgS_ObjAcch)
//	808549DC: 80854F24 (__vt__12dBgS_ObjAcch)
//	808549F8: 80075F94 (__dt__9dBgS_AcchFv)
//	80854A08: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dBgS_ObjAcch::~dBgS_ObjAcch() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/__dt__12dBgS_ObjAcchFv.s"
}
#pragma pop


/* 80854A28-80854A2C 0004+00 s=1 e=0 z=0  None .text      __ct__4cXyzFv                                                */
// True False
cXyz::cXyz() {
	/* empty function */
}


/* 80854A2C-80854A4C 0020+00 s=1 e=0 z=0  None .text      daKago_Create__FP8daKago_c                                   */
//	80854A38: 808544D8 (create__8daKago_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daKago_c* False
// 	 daKago_c False
asm static void daKago_Create(daKago_c* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/daKago_Create__FP8daKago_c.s"
}
#pragma pop


/* 80854A4C-80854A94 0048+00 s=2 e=0 z=0  None .text      __dt__12daKago_HIO_cFv                                       */
//	80854A64: 80854F54 (__vt__12daKago_HIO_c)
//	80854A68: 80854F54 (__vt__12daKago_HIO_c)
//	80854A78: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm daKago_HIO_c::~daKago_HIO_c() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/__dt__12daKago_HIO_cFv.s"
}
#pragma pop


/* 80854A94-80854AD0 003C+00 s=0 e=1 z=0  None .text      __sinit_d_a_kago_cpp                                         */
//	80854AA0: 80854F78 (l_HIO)
//	80854AA4: 80854F78 (l_HIO)
//	80854AA8: 808495AC (__ct__12daKago_HIO_cFv)
//	80854AAC: 80854A4C (__dt__12daKago_HIO_cFv)
//	80854AB0: 80854A4C (__dt__12daKago_HIO_cFv)
//	80854AB4: 80854F6C (lit_3924)
//	80854AB8: 80854F6C (lit_3924)
//	80854ABC: 80849538 (__register_global_object)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void __sinit_d_a_kago_cpp() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/__sinit_d_a_kago_cpp.s"
}
#pragma pop

#pragma push
#pragma force_active on
#pragma section ".ctors$15"
__declspec(section ".ctors$15") void* const _ctors_80854A94 = (void*)__sinit_d_a_kago_cpp;
#pragma pop


/* 80854AD0-80854AD8 0008+00 s=1 e=0 z=0  None .text      @36@__dt__12dBgS_ObjAcchFv                                   */
//	80854AD4: 808549B8 (__dt__12dBgS_ObjAcchFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_80854AD0() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/func_80854AD0.s"
}
#pragma pop


/* 80854AD8-80854AE0 0008+00 s=1 e=0 z=0  None .text      @20@__dt__12dBgS_ObjAcchFv                                   */
//	80854ADC: 808549B8 (__dt__12dBgS_ObjAcchFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_80854AD8() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/func_80854AD8.s"
}
#pragma pop


/* 80854AE0-80854AF0 0010+00 s=7 e=0 z=0  None .text      getMidnaActor__9daPy_py_cFv                                  */
//	80854AE0: 80451018 (m_midnaActor__9daPy_py_c)
//	80854AE4: 80451018 (m_midnaActor__9daPy_py_c)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daPy_py_c::getMidnaActor() {
	nofralloc
#include "asm/rel/d/a/d_a_kago/d_a_kago/getMidnaActor__9daPy_py_cFv.s"
}
#pragma pop


