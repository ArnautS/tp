// 
// Generated By: dol2asm
// Translation Unit: d_a_movie_player
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "rel/d/a/d_a_movie_player/d_a_movie_player.h"

// 
// Types:
// 

struct mDoGph_gInf_c {
	/* 800080D0 */ // False False
//  f32 False
void fadeOut(f32);
	/* 80878534 */ // True False
//  f32 False
void fadeIn(f32);
	/* 80878558 */ // True False
void isFade();
	/* 80878D10 */ // True False
//  u16 False
void setFrameRate(u16);
};

struct fopAc_ac_c {
	/* 80018B64 */ // False False
fopAc_ac_c();
};

struct daMP_c {
	/* 80031A78 */ // False False
void daMP_c_Get_MovieRestFrame();
	/* 80031AA4 */ // False False
//  f32 False
void daMP_c_Set_PercentMovieVolume(f32);
	/* 80878BB8 */ // True False
void daMP_c_Get_arg_demoNo();
	/* 80878C04 */ // True False
void daMP_c_Get_arg_movieNo();
	/* 80878C28 */ // True False
void daMP_c_Init();
	/* 80878D64 */ // True False
void daMP_c_Finish();
	/* 80878D94 */ // True False
void daMP_c_Main();
	/* 80878DD8 */ // True False
void daMP_c_Draw();
	/* 80878E60 */ // True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
void daMP_c_Callback_Init(fopAc_ac_c*);
	/* 80878ED4 */ // True False
daMP_c();
	/* 80878F18 */ // True False
//  daMP_c* False
// 	 daMP_c False
void daMP_c_Callback_Finish(daMP_c*);
	/* 80878F38 */ // True False
//  daMP_c* False
// 	 daMP_c False
void daMP_c_Callback_Main(daMP_c*);
	/* 80878F70 */ // True False
//  daMP_c* False
// 	 daMP_c False
void daMP_c_Callback_Draw(daMP_c*);
};

struct daMP_THPReadBuffer {
};

struct daMP_Dlst_base_c {
	/* 80878DB8 */ // True False
void draw();
	/* 80878FD8 */ // True False
daMP_Dlst_base_c();
};

struct dEvt_control_c {
	/* 80042468 */ // False False
void reset();
};

struct dDlst_base_c {
	/* 80879014 */ // True False
dDlst_base_c();
	/* 80879024 */ // True False
//  void False
void draw();
};

struct dDlst_list_c {
	/* 80056794 */ // False False
//  dDlst_base_c**& False
// 	 dDlst_base_c** False
// 		 dDlst_base_c* False
// 			 dDlst_base_c False
//  dDlst_base_c**& False
// 	 dDlst_base_c** False
// 		 dDlst_base_c* False
// 			 dDlst_base_c False
//  dDlst_base_c* False
// 	 dDlst_base_c False
void set(dDlst_base_c**&, dDlst_base_c**&, dDlst_base_c*);
	/* 80878E34 */ // True False
//  dDlst_base_c* False
// 	 dDlst_base_c False
void set2DOpa(dDlst_base_c*);
};

struct dComIfG_play_c {
	/* 80878A64 */ // True False
void getEvent();
};

struct _GXRenderModeObj {
};

struct THPVideoInfo {
};

struct THPAudioInfo {
};

struct JUTVideo {
	/* 808788BC */ // True False
void getRenderMode() const;
	/* 808788C4 */ // True False
void getManager();
};

struct JKRHeap {
	/* 802CE4D4 */ // False False
//  u32 False
//  int False
void alloc(u32, int);
	/* 802CE500 */ // False False
//  void* False
// 	 void False
//  JKRHeap* False
// 	 JKRHeap False
void free(void*, JKRHeap*);
};

struct JFWDisplay {
	/* 80878D44 */ // True False
//  u16 False
void setFrameRate(u16);
	/* 80878D54 */ // True False
void getManager();
};

struct JASMixMode {
};

struct JASDriver {
	/* 8029C9DC */ // False False
//  s16* (*)(s32) False
// 	 * False
// 		  False
// 	 s16* False
// 		 s16 False
// 	 s32 False
//  JASMixMode False
void registerMixCallback(s16* (*)(s32), JASMixMode);
	/* 8029E180 */ // False False
void getOutputMode();
};

// 
// Forward References:
// 

// True False
static void daMP_PopReadedBuffer();
// True False
//  void* False
// 	 void False
static void daMP_PushReadedBuffer(void*);
// True False
static void daMP_PopFreeReadBuffer();
// True False
//  void* False
// 	 void False
static void daMP_PushFreeReadBuffer(void*);
// True False
static void daMP_PopReadedBuffer2();
// True False
//  void* False
// 	 void False
static void daMP_PushReadedBuffer2(void*);
// True False
static void daMP_ReadThreadStart();
// True False
static void daMP_ReadThreadCancel();
// True False
//  void* False
// 	 void False
static void daMP_Reader(void*);
// True False
//  daMP_THPReadBuffer* False
// 	 daMP_THPReadBuffer False
static void daMP_NEXT_READ_SIZE(daMP_THPReadBuffer*);
// True False
//  s32 False
static void daMP_CreateReadThread(s32);
// True False
static void daMP_PopFreeTextureSet();
// True False
//  void* False
// 	 void False
static void daMP_PushFreeTextureSet(void*);
// True False
//  s32 False
static void daMP_PopDecodedTextureSet(s32);
// True False
//  void* False
// 	 void False
static void daMP_PushDecodedTextureSet(void*);
// True False
//  daMP_THPReadBuffer* False
// 	 daMP_THPReadBuffer False
static void daMP_VideoDecode(daMP_THPReadBuffer*);
// True False
//  void* False
// 	 void False
static void daMP_VideoDecoder(void*);
// True False
//  void* False
// 	 void False
static void daMP_VideoDecoderForOnMemory(void*);
// True False
//  s32 False
//  u8* False
// 	 u8 False
static void daMP_CreateVideoDecodeThread(s32, u8*);
// True False
static void daMP_VideoDecodeThreadStart();
// True False
static void daMP_VideoDecodeThreadCancel();
// True False
static void daMP_PopFreeAudioBuffer();
// True False
//  void* False
// 	 void False
static void daMP_PushFreeAudioBuffer(void*);
// True False
//  s32 False
static void daMP_PopDecodedAudioBuffer(s32);
// True False
//  void* False
// 	 void False
static void daMP_PushDecodedAudioBuffer(void*);
// True False
//  daMP_THPReadBuffer* False
// 	 daMP_THPReadBuffer False
static void daMP_AudioDecode(daMP_THPReadBuffer*);
// True False
//  void* False
// 	 void False
static void daMP_AudioDecoder(void*);
// True False
//  void* False
// 	 void False
static void daMP_AudioDecoderForOnMemory(void*);
// True False
//  s32 False
//  u8* False
// 	 u8 False
static void daMP_CreateAudioDecodeThread(s32, u8*);
// True False
static void daMP_AudioDecodeThreadStart();
// True False
static void daMP_AudioDecodeThreadCancel();
// True False
static void daMP_THPGXRestore();
// True False
//  _GXRenderModeObj const* False
// 	 _GXRenderModeObj const False
// 		 _GXRenderModeObj False
static void daMP_THPGXYuv2RgbSetup(_GXRenderModeObj const*);
// True False
//  u8* False
// 	 u8 False
//  u8* False
// 	 u8 False
//  u8* False
// 	 u8 False
//  s16 False
//  s16 False
//  s16 False
//  s16 False
//  s16 False
//  s16 False
static void daMP_THPGXYuv2RgbDraw(u8*, u8*, u8*, s16, s16, s16, s16, s16, s16);
// True False
//  s16* False
// 	 s16 False
//  s16* False
// 	 s16 False
//  u32 False
static void daMP_MixAudio(s16*, s16*, u32);
// True False
//  s32 False
static void daMP_audioCallbackWithMSound(s32);
// True False
static void daMP_audioInitWithMSound();
// True False
static void daMP_audioQuitWithMSound();
// True False
//  void* False
// 	 void False
static void daMP_PushUsedTextureSet(void*);
// True False
static void daMP_PopUsedTextureSet();
// True False
//  s32 False
static void daMP_THPPlayerInit(s32);
// True False
static void daMP_THPPlayerQuit();
// True False
//  char const* False
// 	 char const False
// 		 char False
//  int False
static void daMP_THPPlayerOpen(char const*, int);
// True False
static void daMP_THPPlayerClose();
// True False
static void daMP_THPPlayerCalcNeedMemory();
// True False
//  u8* False
// 	 u8 False
static void daMP_THPPlayerSetBuffer(u8*);
// True False
static void daMP_InitAllMessageQueue();
// True False
static void daMP_ProperTimingForStart();
// True False
static void daMP_ProperTimingForGettingNextFrame();
// True False
//  u32 False
static void daMP_PlayControl(u32);
// True False
static void daMP_WaitUntilPrepare();
// True False
//  int False
static void daMP_PrepareReady(int);
// True False
//  s32 False
//  s32 False
//  s32 False
static void daMP_THPPlayerPrepare(s32, s32, s32);
// True False
static void daMP_THPPlayerDrawDone();
// True False
static void daMP_THPPlayerPlay();
// True False
static void daMP_THPPlayerStop();
// True False
static void daMP_THPPlayerPause();
// True False
//  _GXRenderModeObj const* False
// 	 _GXRenderModeObj const False
// 		 _GXRenderModeObj False
//  u32 False
//  u32 False
//  u32 False
//  u32 False
static void daMP_THPPlayerDrawCurrentFrame(_GXRenderModeObj const*, u32, u32, u32, u32);
// True False
//  THPVideoInfo* False
// 	 THPVideoInfo False
static void daMP_THPPlayerGetVideoInfo(THPVideoInfo*);
// True False
//  THPAudioInfo* False
// 	 THPAudioInfo False
static void daMP_THPPlayerGetAudioInfo(THPAudioInfo*);
// True False
static void daMP_THPPlayerGetTotalFrame();
// True False
static void daMP_THPPlayerGetState();
// True False
//  s32 False
//  s32 False
static void daMP_THPPlayerSetVolume(s32, s32);
// True False
//  char const* False
// 	 char const False
// 		 char False
static void daMP_ActivePlayer_Init(char const*);
// True False
static void daMP_ActivePlayer_Finish();
// True False
//  void* False
// 	 void False
static void JKRFree(void*);
// True False
static void daMP_ActivePlayer_Main();
// True False
static void daMP_ActivePlayer_Draw();
// True False
static void dComIfGp_event_reset();
// True False
static void daMP_Get_MovieRestFrame();
// True False
//  f32 False
static void daMP_Set_PercentMovieVolume(f32);
// True False
//  void const* False
// 	 void const False
// 		 void False
static void fopAcM_GetParam(void const*);
// True False
//  void const* False
// 	 void const False
// 		 void False
static void fpcM_GetParam(void const*);
// True False
//  dDlst_base_c* False
// 	 dDlst_base_c False
static void dComIfGd_set2DOpa(dDlst_base_c*);
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  u32 False
static void fopAcM_OnCondition(fopAc_ac_c*, u32);
// True False
//  void* False
// 	 void False
//  u32 False
//  void* False
// 	 void False
static void* operator new(u32, void*);
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  u32 False
static void fopAcM_CheckCondition(fopAc_ac_c*, u32);
// True False
//  bool False
//  daMP_c* False
// 	 daMP_c False
static bool daMP_Callback_Dummy(daMP_c*);

// True False
extern "C" static void THPAudioDecode();
// True False
extern "C" static void __THPAudioGetNewSample();
// True False
extern "C" static void __THPAudioInitialize();
// True False
extern "C" static void THPVideoDecode();
// True False
extern "C" static void __THPSetupBuffers();
// True False
extern "C" static void __THPReadFrameHeader();
// True False
extern "C" static void __THPReadScaneHeader();
// True False
extern "C" static void __THPReadQuantizationTable();
// True False
extern "C" static void __THPReadHuffmanTableSpecification();
// True False
extern "C" static void __THPHuffGenerateSizeTable();
// True False
extern "C" static void __THPHuffGenerateCodeTable();
// True False
extern "C" static void __THPHuffGenerateDecoderTables();
// True False
extern "C" static void __THPRestartDefinition();
// True False
extern "C" static void __THPPrepBitStream();
// True False
extern "C" static void __THPDecompressYUV();
// True False
extern "C" static void __THPGQRRestore();
// True False
extern "C" static void __THPGQRSetup();
// True False
extern "C" static void __THPDecompressiMCURow512x448();
// True False
extern "C" static void __THPInverseDCTY8();
// True False
extern "C" static void __THPInverseDCTNoYPos();
// True False
extern "C" static void __THPDecompressiMCURow640x480();
// True False
extern "C" static void __THPDecompressiMCURowNxN();
// True False
extern "C" static void __THPHuffDecodeDCTCompY();
// True False
extern "C" static void __THPHuffDecodeTab();
// True False
extern "C" static void __THPHuffDecodeDCTCompU();
// True False
extern "C" static void __THPHuffDecodeDCTCompV();
// True False
extern "C" static void THPInit();
// True False
extern "C" static void OSInitFastCast();
// True False
extern "C" static void daMP_PopReadedBuffer__Fv();
// True False
//  void* False
// 	 void False
extern "C" static void daMP_PushReadedBuffer__FPv();
// True False
extern "C" static void daMP_PopFreeReadBuffer__Fv();
// True False
//  void* False
// 	 void False
extern "C" static void daMP_PushFreeReadBuffer__FPv();
// True False
extern "C" static void daMP_PopReadedBuffer2__Fv();
// True False
//  void* False
// 	 void False
extern "C" static void daMP_PushReadedBuffer2__FPv();
// True False
extern "C" static void daMP_ReadThreadStart__Fv();
// True False
extern "C" static void daMP_ReadThreadCancel__Fv();
// True False
//  void* False
// 	 void False
extern "C" static void daMP_Reader__FPv();
// True False
//  daMP_THPReadBuffer* False
// 	 daMP_THPReadBuffer False
extern "C" static void daMP_NEXT_READ_SIZE__FP18daMP_THPReadBuffer();
// True False
//  s32 False
extern "C" static void daMP_CreateReadThread__Fl();
// True False
extern "C" static void daMP_PopFreeTextureSet__Fv();
// True False
//  void* False
// 	 void False
extern "C" static void daMP_PushFreeTextureSet__FPv();
// True False
//  s32 False
extern "C" static void daMP_PopDecodedTextureSet__Fl();
// True False
//  void* False
// 	 void False
extern "C" static void daMP_PushDecodedTextureSet__FPv();
// True False
//  daMP_THPReadBuffer* False
// 	 daMP_THPReadBuffer False
extern "C" static void daMP_VideoDecode__FP18daMP_THPReadBuffer();
// True False
//  void* False
// 	 void False
extern "C" static void daMP_VideoDecoder__FPv();
// True False
//  void* False
// 	 void False
extern "C" static void daMP_VideoDecoderForOnMemory__FPv();
// True False
//  s32 False
//  u8* False
// 	 u8 False
extern "C" static void daMP_CreateVideoDecodeThread__FlPUc();
// True False
extern "C" static void daMP_VideoDecodeThreadStart__Fv();
// True False
extern "C" static void daMP_VideoDecodeThreadCancel__Fv();
// True False
extern "C" static void daMP_PopFreeAudioBuffer__Fv();
// True False
//  void* False
// 	 void False
extern "C" static void daMP_PushFreeAudioBuffer__FPv();
// True False
//  s32 False
extern "C" static void daMP_PopDecodedAudioBuffer__Fl();
// True False
//  void* False
// 	 void False
extern "C" static void daMP_PushDecodedAudioBuffer__FPv();
// True False
//  daMP_THPReadBuffer* False
// 	 daMP_THPReadBuffer False
extern "C" static void daMP_AudioDecode__FP18daMP_THPReadBuffer();
// True False
//  void* False
// 	 void False
extern "C" static void daMP_AudioDecoder__FPv();
// True False
//  void* False
// 	 void False
extern "C" static void daMP_AudioDecoderForOnMemory__FPv();
// True False
//  s32 False
//  u8* False
// 	 u8 False
extern "C" static void daMP_CreateAudioDecodeThread__FlPUc();
// True False
extern "C" static void daMP_AudioDecodeThreadStart__Fv();
// True False
extern "C" static void daMP_AudioDecodeThreadCancel__Fv();
// True False
extern "C" static void daMP_THPGXRestore__Fv();
// True False
//  _GXRenderModeObj const* False
// 	 _GXRenderModeObj const False
// 		 _GXRenderModeObj False
extern "C" static void daMP_THPGXYuv2RgbSetup__FPC16_GXRenderModeObj();
// True False
extern "C" static void GXSetTexCoordGen();
// True False
//  u8* False
// 	 u8 False
//  u8* False
// 	 u8 False
//  u8* False
// 	 u8 False
//  s16 False
//  s16 False
//  s16 False
//  s16 False
//  s16 False
//  s16 False
extern "C" static void daMP_THPGXYuv2RgbDraw__FPUcPUcPUcssssss();
// True False
//  void False
extern "C" static void GXEnd();
// True False
extern "C" static void GXTexCoord2u16();
// True False
extern "C" static void GXPosition3s16();
// True False
//  s16* False
// 	 s16 False
//  s16* False
// 	 s16 False
//  u32 False
extern "C" static void daMP_MixAudio__FPsPsUl();
// True False
//  s32 False
extern "C" static void daMP_audioCallbackWithMSound__Fl();
// True False
extern "C" static void daMP_audioInitWithMSound__Fv();
// True False
extern "C" static void daMP_audioQuitWithMSound__Fv();
// True False
//  void* False
// 	 void False
extern "C" static void daMP_PushUsedTextureSet__FPv();
// True False
extern "C" static void daMP_PopUsedTextureSet__Fv();
// True False
//  s32 False
extern "C" static void daMP_THPPlayerInit__Fl();
// True False
extern "C" static void daMP_THPPlayerQuit__Fv();
// True False
//  char const* False
// 	 char const False
// 		 char False
//  int False
extern "C" static void daMP_THPPlayerOpen__FPCci();
// True False
extern "C" static void daMP_THPPlayerClose__Fv();
// True False
extern "C" static void daMP_THPPlayerCalcNeedMemory__Fv();
// True False
//  u8* False
// 	 u8 False
extern "C" static void daMP_THPPlayerSetBuffer__FPUc();
// True False
extern "C" static void daMP_InitAllMessageQueue__Fv();
// True False
extern "C" static void daMP_ProperTimingForStart__Fv();
// True False
extern "C" static void daMP_ProperTimingForGettingNextFrame__Fv();
// True False
//  u32 False
extern "C" static void daMP_PlayControl__FUl();
// True False
extern "C" static void daMP_WaitUntilPrepare__Fv();
// True False
//  int False
extern "C" static void daMP_PrepareReady__Fi();
// True False
//  s32 False
//  s32 False
//  s32 False
extern "C" static void daMP_THPPlayerPrepare__Flll();
// True False
extern "C" static void daMP_THPPlayerDrawDone__Fv();
// True False
extern "C" static void daMP_THPPlayerPlay__Fv();
// True False
extern "C" static void daMP_THPPlayerStop__Fv();
// True False
extern "C" static void daMP_THPPlayerPause__Fv();
// True False
//  _GXRenderModeObj const* False
// 	 _GXRenderModeObj const False
// 		 _GXRenderModeObj False
//  u32 False
//  u32 False
//  u32 False
//  u32 False
extern "C" static void daMP_THPPlayerDrawCurrentFrame__FPC16_GXRenderModeObjUlUlUlUl();
// True False
//  f32 False
extern "C" void fadeIn__13mDoGph_gInf_cFf();
// True False
extern "C" void isFade__13mDoGph_gInf_cFv();
// True False
//  THPVideoInfo* False
// 	 THPVideoInfo False
extern "C" static void daMP_THPPlayerGetVideoInfo__FP12THPVideoInfo();
// True False
//  THPAudioInfo* False
// 	 THPAudioInfo False
extern "C" static void daMP_THPPlayerGetAudioInfo__FP12THPAudioInfo();
// True False
extern "C" static void daMP_THPPlayerGetTotalFrame__Fv();
// True False
extern "C" static void daMP_THPPlayerGetState__Fv();
// True False
//  s32 False
//  s32 False
extern "C" static void daMP_THPPlayerSetVolume__Fll();
// True False
//  char const* False
// 	 char const False
// 		 char False
extern "C" static void daMP_ActivePlayer_Init__FPCc();
// True False
extern "C" void getRenderMode__8JUTVideoCFv();
// True False
extern "C" void getManager__8JUTVideoFv();
// True False
extern "C" static void daMP_ActivePlayer_Finish__Fv();
// True False
//  void* False
// 	 void False
extern "C" static void JKRFree__FPv();
// True False
extern "C" static void daMP_ActivePlayer_Main__Fv();
// True False
extern "C" static void daMP_ActivePlayer_Draw__Fv();
// True False
extern "C" static void dComIfGp_event_reset__Fv();
// True False
extern "C" void getEvent__14dComIfG_play_cFv();
// True False
extern "C" static void daMP_Get_MovieRestFrame__Fv();
// True False
//  f32 False
extern "C" static void daMP_Set_PercentMovieVolume__Ff();
// True False
extern "C" void daMP_c_Get_arg_demoNo__6daMP_cFv();
// True False
//  void const* False
// 	 void const False
// 		 void False
extern "C" static void fopAcM_GetParam__FPCv();
// True False
//  void const* False
// 	 void const False
// 		 void False
extern "C" static void fpcM_GetParam__FPCv();
// True False
extern "C" void daMP_c_Get_arg_movieNo__6daMP_cFv();
// True False
extern "C" void daMP_c_Init__6daMP_cFv();
// True False
//  u16 False
extern "C" void setFrameRate__13mDoGph_gInf_cFUs();
// True False
//  u16 False
extern "C" void setFrameRate__10JFWDisplayFUs();
// True False
extern "C" void getManager__10JFWDisplayFv();
// True False
extern "C" void daMP_c_Finish__6daMP_cFv();
// True False
extern "C" void daMP_c_Main__6daMP_cFv();
// True False
extern "C" void draw__16daMP_Dlst_base_cFv();
// True False
extern "C" void daMP_c_Draw__6daMP_cFv();
// True False
//  dDlst_base_c* False
// 	 dDlst_base_c False
extern "C" static void dComIfGd_set2DOpa__FP12dDlst_base_c();
// True False
//  dDlst_base_c* False
// 	 dDlst_base_c False
extern "C" void set2DOpa__12dDlst_list_cFP12dDlst_base_c();
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
extern "C" void daMP_c_Callback_Init__6daMP_cFP10fopAc_ac_c();
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  u32 False
extern "C" static void fopAcM_OnCondition__FP10fopAc_ac_cUl();
// True False
extern "C" void __ct__6daMP_cFv();
// True False
//  void* False
// 	 void False
//  u32 False
//  void* False
// 	 void False
extern "C" static void* __nw__FUlPv();
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  u32 False
extern "C" static void fopAcM_CheckCondition__FP10fopAc_ac_cUl();
// True False
//  daMP_c* False
// 	 daMP_c False
extern "C" void daMP_c_Callback_Finish__6daMP_cFP6daMP_c();
// True False
//  daMP_c* False
// 	 daMP_c False
extern "C" void daMP_c_Callback_Main__6daMP_cFP6daMP_c();
// True False
//  daMP_c* False
// 	 daMP_c False
extern "C" void daMP_c_Callback_Draw__6daMP_cFP6daMP_c();
// True False
//  bool False
//  daMP_c* False
// 	 daMP_c False
extern "C" static bool daMP_Callback_Dummy__FP6daMP_c();
// False False
extern "C" void __sinit_d_a_movie_player_cpp();
// True False
extern "C" void __ct__16daMP_Dlst_base_cFv();
// True False
extern "C" void __ct__12dDlst_base_cFv();
// True False
//  void False
extern "C" void draw__12dDlst_base_cFv();
extern "C" extern u32 const lit_4205;
extern "C" extern u32 const lit_4206;
extern "C" extern u32 const lit_4207;
extern "C" extern u32 const lit_4208;
extern "C" extern u32 const lit_4209;
extern "C" extern u32 const lit_4466;
extern "C" extern u8 const lit_4779[8];
extern "C" extern u32 const lit_4782;
extern "C" extern u32 const lit_4785;
extern "C" extern u32 const lit_4788;
extern "C" extern u32 const lit_4810;
extern "C" extern char const* const stringBase0;
extern "C" extern void* g_profile_MOVIE_PLAYER[12];
extern "C" extern void* __vt__16daMP_Dlst_base_c[3];
extern "C" extern void* __vt__12dDlst_base_c[3];
extern "C" extern u8 lit_1107[1 + 3 /* padding */];
extern "C" extern u8 lit_1105[1 + 3 /* padding */];
extern "C" extern u8 lit_1104[1 + 3 /* padding */];
extern "C" extern u8 lit_1099[1 + 3 /* padding */];
extern "C" extern u8 lit_1097[1 + 3 /* padding */];
extern "C" extern u8 lit_1095[1 + 3 /* padding */];
extern "C" extern u8 lit_1094[1 + 3 /* padding */];
extern "C" extern u8 lit_1057[1 + 3 /* padding */];
extern "C" extern u8 lit_1055[1 + 3 /* padding */];
extern "C" extern u8 lit_1053[1 + 3 /* padding */];
extern "C" extern u8 lit_1052[1 + 3 /* padding */];
extern "C" extern u8 lit_1014[1 + 3 /* padding */];
extern "C" extern u8 lit_1012[1 + 3 /* padding */];
extern "C" extern u8 lit_1010[1 + 3 /* padding */];
extern "C" extern u8 lit_1009[1 + 3 /* padding */];
extern "C" extern u8 THPStatistics[1120];
extern "C" extern u8 __THPIDCTWorkspace[256];
extern "C" extern u8 Gbase[4 + 16 /* padding */];
extern "C" extern u8 Gwid[4];
extern "C" extern u8 Gq[4];
extern "C" extern u8 __THPLCWork512[12];
extern "C" extern u8 __THPLCWork640[12];
extern "C" extern u8 __THPInitFlag[4 + 4 /* padding */];
extern "C" extern u8 daMP_FreeReadBufferMessage[40];
extern "C" extern u8 daMP_ReadedBufferMessage[40];
extern "C" extern u8 daMP_ReadedBufferMessage2[40 + 4 /* padding */];
extern "C" extern u8 daMP_ReadThreadStack[8192];
extern "C" extern u8 daMP_FreeTextureSetMessage[12];
extern "C" extern u8 daMP_DecodedTextureSetMessage[12];
extern "C" extern u8 daMP_AudioDecodeThreadStack[409600];
extern "C" extern u8 daMP_FreeAudioBufferMessage[12];
extern "C" extern u8 daMP_DecodedAudioBufferMessage[12];
extern "C" extern u8 daMP_UsedTextureSetMessage[12];
extern "C" extern u8 daMP_OldAIDCallback[4];
extern "C" extern u8 daMP_LastAudioBuffer[4];
extern "C" extern u8 daMP_CurAudioBuffer[4];
extern "C" extern u8 daMP_AudioSystem[4 + 24 /* padding */];
extern "C" extern u8 daMP_audioInfo[16];
extern "C" extern u8 data_80945B10[4];
extern "C" extern u8 data_80945B14[4];
extern "C" extern u8 data_80945B18[4];
extern "C" extern u8 data_80945B1C[4];
extern "C" extern u8 data_80945B20[4];
extern "C" extern u8 data_80945B24[4];
extern "C" extern u8 data_80945B28[4];
extern "C" extern u8 data_80945B2C[4];
extern "C" extern u8 data_80945B30[4];
extern "C" extern u8 data_80945B34[4];
extern "C" extern u8 data_80945B38[4];
extern "C" extern u8 data_80945B3C[4];
extern "C" extern u8 data_80945B40[4];
extern "C" extern u8 data_80945B44[4];
extern "C" extern u8 data_80945B48[4];
extern "C" extern u8 data_80945B4C[4];
extern "C" extern u8 data_80945B50[4];
extern "C" extern u8 data_80945B54[4];
extern "C" extern u8 data_80945B58[4];
extern "C" extern u8 data_80945B5C[4];
extern "C" extern u8 data_80945B60[4];
extern "C" extern u8 data_80945B64[4];
extern "C" extern u8 data_80945B68[4];
extern "C" extern u8 data_80945B6C[4];
extern "C" extern u8 data_80945B70[4];

// 
// External References:
// 

// False False
void mDoExt_getArchiveHeap();
// False False
void fopOvlpM_IsPeek();
// False False
//  u32 False
void cAPICPad_ANY_BUTTON(u32);

// False False
SECTION_INIT void memset();
// False False
SECTION_INIT void memcpy();
// False False
extern "C" void OSReport();
// False False
//  f32 False
extern "C" void fadeOut__13mDoGph_gInf_cFf();
// False False
extern "C" void mDoExt_getArchiveHeap__Fv();
// False False
extern "C" void __ct__10fopAc_ac_cFv();
// False False
extern "C" void fopOvlpM_IsPeek__Fv();
// False False
extern "C" void daMP_c_Get_MovieRestFrame__6daMP_cFv();
// False False
//  f32 False
extern "C" void daMP_c_Set_PercentMovieVolume__6daMP_cFf();
// False False
extern "C" void reset__14dEvt_control_cFv();
// False False
//  dDlst_base_c**& False
// 	 dDlst_base_c** False
// 		 dDlst_base_c* False
// 			 dDlst_base_c False
//  dDlst_base_c**& False
// 	 dDlst_base_c** False
// 		 dDlst_base_c* False
// 			 dDlst_base_c False
//  dDlst_base_c* False
// 	 dDlst_base_c False
extern "C" void set__12dDlst_list_cFRPP12dDlst_base_cRPP12dDlst_base_cP12dDlst_base_c();
// False False
//  u32 False
extern "C" void cAPICPad_ANY_BUTTON__FUl();
// False False
//  s16* (*)(s32) False
// 	 * False
// 		  False
// 	 s16* False
// 		 s16 False
// 	 s32 False
//  JASMixMode False
extern "C" void registerMixCallback__9JASDriverFPFl_Ps10JASMixMode();
// False False
extern "C" void getOutputMode__9JASDriverFv();
// False False
//  u32 False
//  int False
extern "C" void alloc__7JKRHeapFUli();
// False False
//  void* False
// 	 void False
//  JKRHeap* False
// 	 JKRHeap False
extern "C" void free__7JKRHeapFPvP7JKRHeap();
// False False
extern "C" void PPCMfhid2();
// False False
extern "C" void DCInvalidateRange();
// False False
extern "C" void DCStoreRange();
// False False
extern "C" void DCZeroRange();
// False False
extern "C" void LCEnable();
// False False
extern "C" void LCDisable();
// False False
extern "C" void LCStoreData();
// False False
extern "C" void LCQueueWait();
// False False
extern "C" void OSDisableInterrupts();
// False False
extern "C" void OSEnableInterrupts();
// False False
extern "C" void OSRestoreInterrupts();
// False False
extern "C" void OSInitMessageQueue();
// False False
extern "C" void OSSendMessage();
// False False
extern "C" void OSReceiveMessage();
// False False
extern "C" void OSCreateThread();
// False False
extern "C" void OSCancelThread();
// False False
extern "C" void OSResumeThread();
// False False
extern "C" void OSSuspendThread();
// False False
extern "C" void OSGetTick();
// False False
extern "C" void PSMTXIdentity();
// False False
extern "C" void C_MTXOrtho();
// False False
extern "C" void DVDOpen();
// False False
extern "C" void DVDClose();
// False False
extern "C" void DVDReadPrio();
// False False
extern "C" void DVDCancel();
// False False
extern "C" void VISetPostRetraceCallback();
// False False
extern "C" void VIGetNextField();
// False False
extern "C" void VIGetTvFormat();
// False False
extern "C" void AIGetDSPSampleRate();
// False False
extern "C" void GXSetVtxDesc();
// False False
extern "C" void GXClearVtxDesc();
// False False
extern "C" void GXSetVtxAttrFmt();
// False False
extern "C" void GXSetTexCoordGen2();
// False False
extern "C" void GXSetNumTexGens();
// False False
extern "C" void GXDrawDone();
// False False
extern "C" void GXBegin();
// False False
extern "C" void GXSetCullMode();
// False False
extern "C" void GXSetNumChans();
// False False
extern "C" void GXInitTexObj();
// False False
extern "C" void GXInitTexObjLOD();
// False False
extern "C" void GXLoadTexObj();
// False False
extern "C" void GXInvalidateTexAll();
// False False
extern "C" void GXSetNumIndStages();
// False False
extern "C" void GXSetTevOp();
// False False
extern "C" void GXSetTevColorIn();
// False False
extern "C" void GXSetTevAlphaIn();
// False False
extern "C" void GXSetTevColorOp();
// False False
extern "C" void GXSetTevAlphaOp();
// False False
extern "C" void GXSetTevColorS10();
// False False
extern "C" void GXSetTevKColor();
// False False
extern "C" void GXSetTevKColorSel();
// False False
extern "C" void GXSetTevKAlphaSel();
// False False
extern "C" void GXSetTevSwapMode();
// False False
extern "C" void GXSetTevSwapModeTable();
// False False
extern "C" void GXSetAlphaCompare();
// False False
extern "C" void GXSetTevOrder();
// False False
extern "C" void GXSetNumTevStages();
// False False
extern "C" void GXSetFog();
// False False
extern "C" void GXSetFogRangeAdj();
// False False
extern "C" void GXSetBlendMode();
// False False
extern "C" void GXSetColorUpdate();
// False False
extern "C" void GXSetAlphaUpdate();
// False False
extern "C" void GXSetZMode();
// False False
extern "C" void GXSetZCompLoc();
// False False
extern "C" void GXSetPixelFmt();
// False False
extern "C" void GXSetDither();
// False False
extern "C" void GXSetProjection();
// False False
extern "C" void GXLoadPosMtxImm();
// False False
extern "C" void GXSetCurrentMtx();
// False False
extern "C" void GXSetViewport();
// False False
extern "C" void GXSetScissor();
// False False
extern "C" void _savegpr_21();
// False False
extern "C" void _savegpr_22();
// False False
extern "C" void _savegpr_23();
// False False
extern "C" void _savegpr_24();
// False False
extern "C" void _savegpr_25();
// False False
extern "C" void _savegpr_26();
// False False
extern "C" void _savegpr_27();
// False False
extern "C" void _restgpr_21();
// False False
extern "C" void _restgpr_22();
// False False
extern "C" void _restgpr_23();
// False False
extern "C" void _restgpr_24();
// False False
extern "C" void _restgpr_25();
// False False
extern "C" void _restgpr_26();
// False False
extern "C" void _restgpr_27();
// False False
extern "C" void __div2i();
// False False
extern "C" void sprintf();
// False False
extern "C" void strcmp();
extern "C" extern void* g_fopAc_Method[8];
extern "C" extern void* g_fpcLf_Method[5 + 1 /* padding */];
extern "C" extern u8 g_dComIfG_gameInfo[122384];
extern "C" extern u8 g_clearColor[4];
extern "C" extern u8 struct_80450BE4[4];
extern "C" extern u8 m_myObj__6daMP_c[4];
extern "C" extern u8 sManager__10JFWDisplay[4];
extern "C" extern u8 sManager__8JUTVideo[4];

// 
// Declarations:
// 

/* 80872758-80872BF0 0498+00 s=1 e=0 z=0  None .text      THPAudioDecode                                               */
//	80872768: 803621BC (_savegpr_21)
//	808727CC: 80872C80 (__THPAudioInitialize)
//	808727F8: 80872BF0 (__THPAudioGetNewSample)
//	80872930: 80872C80 (__THPAudioInitialize)
//	8087295C: 80872BF0 (__THPAudioGetNewSample)
//	80872A88: 80872C80 (__THPAudioInitialize)
//	80872AB0: 80872BF0 (__THPAudioGetNewSample)
//	80872BDC: 80362208 (_restgpr_21)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void THPAudioDecode() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/THPAudioDecode.s"
}
#pragma pop


/* 80872BF0-80872C80 0090+00 s=1 e=0 z=0  None .text      __THPAudioGetNewSample                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void __THPAudioGetNewSample() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__THPAudioGetNewSample.s"
}
#pragma pop


/* 80872C80-80872CBC 003C+00 s=1 e=0 z=0  None .text      __THPAudioInitialize                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void __THPAudioInitialize() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__THPAudioInitialize.s"
}
#pragma pop


/* ############################################################################################## */
/* 808795A0-808795A4 0001+03 s=15 e=0 z=0  None .bss       @1109                                                        */
static u8 lit_1109[1 + 3 /* padding */];

/* 80872CBC-80872F00 0244+00 s=1 e=0 z=0  None .text      THPVideoDecode                                               */
//	80872CCC: 803621D0 (_savegpr_26)
//	80872CE4: 808795A0 (lit_1109)
//	80872CE8: 808795A0 (lit_1109)
//	80872D10: 80339D8C (PPCMfhid2)
//	80872D44: 8033B664 (DCZeroRange)
//	80872DC8: 80873574 (__THPReadHuffmanTableSpecification)
//	80872DE0: 80872F48 (__THPReadFrameHeader)
//	80872E08: 808739A8 (__THPRestartDefinition)
//	80872E18: 808731B4 (__THPReadQuantizationTable)
//	80872E30: 80873088 (__THPReadScaneHeader)
//	80872E90: 80872F00 (__THPSetupBuffers)
//	80872EA0: 80873C44 (__THPDecompressYUV)
//	80872EEC: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void THPVideoDecode() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/THPVideoDecode.s"
}
#pragma pop


/* ############################################################################################## */
/* 808795A4-808795A8 0001+03 s=0 e=0 z=0  None .bss       @1107                                                        */
u8 lit_1107[1 + 3 /* padding */];

/* 808795A8-808795AC 0001+03 s=0 e=0 z=0  None .bss       @1105                                                        */
u8 lit_1105[1 + 3 /* padding */];

/* 808795AC-808795B0 0001+03 s=0 e=0 z=0  None .bss       @1104                                                        */
u8 lit_1104[1 + 3 /* padding */];

/* 808795B0-808795B4 0001+03 s=0 e=0 z=0  None .bss       @1099                                                        */
u8 lit_1099[1 + 3 /* padding */];

/* 808795B4-808795B8 0001+03 s=0 e=0 z=0  None .bss       @1097                                                        */
u8 lit_1097[1 + 3 /* padding */];

/* 808795B8-808795BC 0001+03 s=0 e=0 z=0  None .bss       @1095                                                        */
u8 lit_1095[1 + 3 /* padding */];

/* 808795BC-808795C0 0001+03 s=0 e=0 z=0  None .bss       @1094                                                        */
u8 lit_1094[1 + 3 /* padding */];

/* 808795C0-808795C4 0001+03 s=0 e=0 z=0  None .bss       @1057                                                        */
u8 lit_1057[1 + 3 /* padding */];

/* 808795C4-808795C8 0001+03 s=0 e=0 z=0  None .bss       @1055                                                        */
u8 lit_1055[1 + 3 /* padding */];

/* 808795C8-808795CC 0001+03 s=0 e=0 z=0  None .bss       @1053                                                        */
u8 lit_1053[1 + 3 /* padding */];

/* 808795CC-808795D0 0001+03 s=0 e=0 z=0  None .bss       @1052                                                        */
u8 lit_1052[1 + 3 /* padding */];

/* 808795D0-808795D4 0001+03 s=0 e=0 z=0  None .bss       @1014                                                        */
u8 lit_1014[1 + 3 /* padding */];

/* 808795D4-808795D8 0001+03 s=0 e=0 z=0  None .bss       @1012                                                        */
u8 lit_1012[1 + 3 /* padding */];

/* 808795D8-808795DC 0001+03 s=0 e=0 z=0  None .bss       @1010                                                        */
u8 lit_1010[1 + 3 /* padding */];

/* 808795DC-808795E0 0001+03 s=0 e=0 z=0  None .bss       @1009                                                        */
u8 lit_1009[1 + 3 /* padding */];

/* 808795E0-80879A40 0460+00 s=0 e=0 z=0  None .bss       THPStatistics                                                */
u8 THPStatistics[1120];

/* 80879A40-80879A44 0004+00 s=1 e=0 z=0  None .bss       Ydchuff                                                      */
static u8 Ydchuff[4];

/* 80879A44-80879A48 0004+00 s=1 e=0 z=0  None .bss       Udchuff                                                      */
static u8 Udchuff[4];

/* 80879A48-80879A4C 0004+00 s=1 e=0 z=0  None .bss       Vdchuff                                                      */
static u8 Vdchuff[4];

/* 80879A4C-80879A50 0004+00 s=1 e=0 z=0  None .bss       Yachuff                                                      */
static u8 Yachuff[4];

/* 80879A50-80879A54 0004+00 s=1 e=0 z=0  None .bss       Uachuff                                                      */
static u8 Uachuff[4];

/* 80879A54-80879A60 0004+08 s=1 e=0 z=0  None .bss       Vachuff                                                      */
static u8 Vachuff[4 + 8 /* padding */];

/* 80879A60-80879B60 0100+00 s=0 e=0 z=0  None .bss       __THPIDCTWorkspace                                           */
u8 __THPIDCTWorkspace[256];

/* 80879B60-80879B64 0004+00 s=1 e=0 z=0  None .bss       __THPHuffmanBits                                             */
static u8 __THPHuffmanBits[4];

/* 80879B64-80879B68 0004+00 s=2 e=0 z=0  None .bss       __THPHuffmanSizeTab                                          */
static u8 __THPHuffmanSizeTab[4];

/* 80879B68-80879B6C 0004+00 s=1 e=0 z=0  None .bss       __THPHuffmanCodeTab                                          */
static u8 __THPHuffmanCodeTab[4];

/* 80879B6C-80879B80 0004+10 s=0 e=0 z=0  None .bss       Gbase                                                        */
u8 Gbase[4 + 16 /* padding */];

/* 80879B80-80879B84 0004+00 s=0 e=0 z=0  None .bss       Gwid                                                         */
u8 Gwid[4];

/* 80879B84-80879B88 0004+00 s=0 e=0 z=0  None .bss       Gq                                                           */
u8 Gq[4];

/* 80879B88-80879B94 000C+00 s=0 e=0 z=0  None .bss       __THPLCWork512                                               */
u8 __THPLCWork512[12];

/* 80879B94-80879BA0 000C+00 s=0 e=0 z=0  None .bss       __THPLCWork640                                               */
u8 __THPLCWork640[12];

/* 80879BA0-80879BA4 0004+00 s=2 e=0 z=0  None .bss       __THPOldGQR5                                                 */
static u8 __THPOldGQR5[4];

/* 80879BA4-80879BA8 0004+00 s=2 e=0 z=0  None .bss       __THPOldGQR6                                                 */
static u8 __THPOldGQR6[4];

/* 80879BA8-80879BAC 0004+00 s=1 e=0 z=0  None .bss       __THPWorkArea                                                */
static u8 __THPWorkArea[4];

/* 80879BAC-80879BC4 0018+00 s=1 e=0 z=0  None .bss       __THPMCUBuffer                                               */
static u8 __THPMCUBuffer[24];

/* 80872F00-80872F48 0048+00 s=1 e=0 z=0  None .text      __THPSetupBuffers                                            */
//	80872F00: 80879BA8 (__THPWorkArea)
//	80872F04: 80879BA8 (__THPWorkArea)
//	80872F14: 80879BAC (__THPMCUBuffer)
//	80872F18: 80879BAC (__THPMCUBuffer)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void __THPSetupBuffers() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__THPSetupBuffers.s"
}
#pragma pop


/* ############################################################################################## */
/* 80879BC4-80879BC8 0004+00 s=5 e=0 z=0  None .bss       __THPInfo                                                    */
static u8 __THPInfo[4];

/* 80872F48-80873088 0140+00 s=1 e=0 z=0  None .text      __THPReadFrameHeader                                         */
//	80872F48: 80879BC4 (__THPInfo)
//	80872F4C: 80879BC4 (__THPInfo)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void __THPReadFrameHeader() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__THPReadFrameHeader.s"
}
#pragma pop


/* 80873088-808731B4 012C+00 s=1 e=0 z=0  None .text      __THPReadScaneHeader                                         */
//	80873088: 80879BC4 (__THPInfo)
//	8087308C: 80879BC4 (__THPInfo)
//	80873160: 80879BC4 (__THPInfo)
//	80873164: 80879BC4 (__THPInfo)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void __THPReadScaneHeader() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__THPReadScaneHeader.s"
}
#pragma pop


/* ############################################################################################## */
/* 80879034-80879084 0050+00 s=8 e=0 z=0  None .rodata    __THPJpegNaturalOrder                                        */
SECTION_RODATA static u8 const __THPJpegNaturalOrder[80] = {
	0x00, 0x01, 0x08, 0x10, 0x09, 0x02, 0x03, 0x0A, 0x11, 0x18, 0x20, 0x19, 0x12, 0x0B, 0x04, 0x05,
	0x0C, 0x13, 0x1A, 0x21, 0x28, 0x30, 0x29, 0x22, 0x1B, 0x14, 0x0D, 0x06, 0x07, 0x0E, 0x15, 0x1C,
	0x23, 0x2A, 0x31, 0x38, 0x39, 0x32, 0x2B, 0x24, 0x1D, 0x16, 0x0F, 0x17, 0x1E, 0x25, 0x2C, 0x33,
	0x3A, 0x3B, 0x34, 0x2D, 0x26, 0x1F, 0x27, 0x2E, 0x35, 0x3C, 0x3D, 0x36, 0x2F, 0x37, 0x3E, 0x3F,
	0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
};

/* 80879084-808790C4 0040+00 s=1 e=0 z=0  None .rodata    __THPAANScaleFactor                                          */
SECTION_RODATA static u8 const __THPAANScaleFactor[64] = {
	0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xF6, 0x31, 0x50, 0xC0, 0x00, 0x00, 0x00,
	0x3F, 0xF4, 0xE7, 0xAE, 0xA0, 0x00, 0x00, 0x00, 0x3F, 0xF2, 0xD0, 0x62, 0xE0, 0x00, 0x00, 0x00,
	0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xE9, 0x24, 0x69, 0xC0, 0x00, 0x00, 0x00,
	0x3F, 0xE1, 0x51, 0x7A, 0x80, 0x00, 0x00, 0x00, 0x3F, 0xD1, 0xA8, 0x55, 0xE0, 0x00, 0x00, 0x00,
};

/* 808790C4-808790CC 0008+00 s=1 e=0 z=0  None .rodata    @3998                                                        */
SECTION_RODATA static u8 const lit_3998[8] = {
	0x43, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 808731B4-80873574 03C0+00 s=1 e=0 z=0  None .text      __THPReadQuantizationTable                                   */
//	808731BC: 80879BC4 (__THPInfo)
//	808731C0: 80879BC4 (__THPInfo)
//	808731E4: 808790C4 (lit_3998)
//	808731E8: 808790C4 (lit_3998)
//	808731F0: 80879034 (__THPJpegNaturalOrder)
//	808731F4: 80879034 (__THPJpegNaturalOrder)
//	808731FC: 80879084 (__THPAANScaleFactor)
//	80873200: 80879084 (__THPAANScaleFactor)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void __THPReadQuantizationTable() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__THPReadQuantizationTable.s"
}
#pragma pop


/* 80873574-8087375C 01E8+00 s=1 e=0 z=0  None .text      __THPReadHuffmanTableSpecification                           */
//	80873590: 808795A0 (lit_1109)
//	80873594: 808795A0 (lit_1109)
//	80873700: 8087375C (__THPHuffGenerateSizeTable)
//	80873704: 8087383C (__THPHuffGenerateCodeTable)
//	8087370C: 808738B0 (__THPHuffGenerateDecoderTables)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void __THPReadHuffmanTableSpecification() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__THPReadHuffmanTableSpecification.s"
}
#pragma pop


/* 8087375C-8087383C 00E0+00 s=1 e=0 z=0  None .text      __THPHuffGenerateSizeTable                                   */
//	80873764: 80879B64 (__THPHuffmanSizeTab)
//	80873768: 80879B64 (__THPHuffmanSizeTab)
//	8087376C: 80879B60 (__THPHuffmanBits)
//	80873770: 80879B60 (__THPHuffmanBits)
//	80873828: 80879B64 (__THPHuffmanSizeTab)
//	8087382C: 80879B64 (__THPHuffmanSizeTab)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void __THPHuffGenerateSizeTable() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__THPHuffGenerateSizeTable.s"
}
#pragma pop


/* 8087383C-808738B0 0074+00 s=1 e=0 z=0  None .text      __THPHuffGenerateCodeTable                                   */
//	80873844: 80879B64 (__THPHuffmanSizeTab)
//	80873848: 80879B64 (__THPHuffmanSizeTab)
//	80873854: 80879B68 (__THPHuffmanCodeTab)
//	80873858: 80879B68 (__THPHuffmanCodeTab)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void __THPHuffGenerateCodeTable() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__THPHuffGenerateCodeTable.s"
}
#pragma pop


/* 808738B0-808739A8 00F8+00 s=1 e=0 z=0  None .text      __THPHuffGenerateDecoderTables                               */
//	808738B0: 808795A0 (lit_1109)
//	808738B4: 808795A0 (lit_1109)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void __THPHuffGenerateDecoderTables() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__THPHuffGenerateDecoderTables.s"
}
#pragma pop


/* 808739A8-80873A04 005C+00 s=1 e=0 z=0  None .text      __THPRestartDefinition                                       */
//	808739AC: 80879BC4 (__THPInfo)
//	808739B0: 80879BC4 (__THPInfo)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void __THPRestartDefinition() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__THPRestartDefinition.s"
}
#pragma pop


/* 80873A04-80873C44 0240+00 s=1 e=0 z=0  None .text      __THPPrepBitStream                                           */
//	80873A04: 808795A0 (lit_1109)
//	80873A08: 808795A0 (lit_1109)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void __THPPrepBitStream() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__THPPrepBitStream.s"
}
#pragma pop


/* 80873C44-80873D28 00E4+00 s=1 e=0 z=0  None .text      __THPDecompressYUV                                           */
//	80873C58: 80879BC4 (__THPInfo)
//	80873C5C: 80879BC4 (__THPInfo)
//	80873C84: 80873D48 (__THPGQRSetup)
//	80873C88: 80873A04 (__THPPrepBitStream)
//	80873C8C: 80879BC4 (__THPInfo)
//	80873C90: 80879BC4 (__THPInfo)
//	80873CB0: 80873D7C (__THPDecompressiMCURow512x448)
//	80873CDC: 808748F4 (__THPDecompressiMCURow640x480)
//	80873CF8: 80874B38 (__THPDecompressiMCURowNxN)
//	80873D0C: 80873D28 (__THPGQRRestore)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void __THPDecompressYUV() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__THPDecompressYUV.s"
}
#pragma pop


/* 80873D28-80873D48 0020+00 s=1 e=0 z=0  None .text      __THPGQRRestore                                              */
//	80873D28: 80879BA0 (__THPOldGQR5)
//	80873D2C: 80879BA0 (__THPOldGQR5)
//	80873D30: 80879BA4 (__THPOldGQR6)
//	80873D34: 80879BA4 (__THPOldGQR6)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void __THPGQRRestore() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__THPGQRRestore.s"
}
#pragma pop


/* 80873D48-80873D7C 0034+00 s=1 e=0 z=0  None .text      __THPGQRSetup                                                */
//	80873D50: 80879BA0 (__THPOldGQR5)
//	80873D54: 80879BA0 (__THPOldGQR5)
//	80873D58: 80879BA4 (__THPOldGQR6)
//	80873D5C: 80879BA4 (__THPOldGQR6)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void __THPGQRSetup() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__THPGQRSetup.s"
}
#pragma pop


/* 80873D7C-80873FBC 0240+00 s=1 e=0 z=0  None .text      __THPDecompressiMCURow512x448                                */
//	80873D8C: 803621D4 (_savegpr_27)
//	80873D90: 808795A0 (lit_1109)
//	80873D94: 808795A0 (lit_1109)
//	80873D9C: 8033B8E4 (LCQueueWait)
//	80873DB4: 80874D8C (__THPHuffDecodeDCTCompY)
//	80873DC0: 80874D8C (__THPHuffDecodeDCTCompY)
//	80873DCC: 80874D8C (__THPHuffDecodeDCTCompY)
//	80873DD8: 80874D8C (__THPHuffDecodeDCTCompY)
//	80873DE4: 80875410 (__THPHuffDecodeDCTCompU)
//	80873DF0: 808755F8 (__THPHuffDecodeDCTCompV)
//	80873E24: 8087445C (__THPInverseDCTNoYPos)
//	80873E30: 8087445C (__THPInverseDCTNoYPos)
//	80873E3C: 80873FBC (__THPInverseDCTY8)
//	80873E48: 80873FBC (__THPInverseDCTY8)
//	80873E7C: 8087445C (__THPInverseDCTNoYPos)
//	80873EA4: 8087445C (__THPInverseDCTNoYPos)
//	80873F48: 8033B838 (LCStoreData)
//	80873F5C: 8033B838 (LCStoreData)
//	80873F70: 8033B838 (LCStoreData)
//	80873FA8: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void __THPDecompressiMCURow512x448() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__THPDecompressiMCURow512x448.s"
}
#pragma pop


/* 80873FBC-8087445C 04A0+00 s=3 e=0 z=0  None .text      __THPInverseDCTY8                                            */
//	80873FF0: 80879034 (__THPJpegNaturalOrder)
//	80873FF4: 80879034 (__THPJpegNaturalOrder)
//	80873FF8: 808795A0 (lit_1109)
//	80873FFC: 808795A0 (lit_1109)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void __THPInverseDCTY8() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__THPInverseDCTY8.s"
}
#pragma pop


/* 8087445C-808748F4 0498+00 s=3 e=0 z=0  None .text      __THPInverseDCTNoYPos                                        */
//	80874490: 80879034 (__THPJpegNaturalOrder)
//	80874494: 80879034 (__THPJpegNaturalOrder)
//	80874498: 808795A0 (lit_1109)
//	8087449C: 808795A0 (lit_1109)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void __THPInverseDCTNoYPos() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__THPInverseDCTNoYPos.s"
}
#pragma pop


/* 808748F4-80874B38 0244+00 s=1 e=0 z=0  None .text      __THPDecompressiMCURow640x480                                */
//	80874904: 803621D4 (_savegpr_27)
//	80874908: 808795A0 (lit_1109)
//	8087490C: 808795A0 (lit_1109)
//	80874914: 8033B8E4 (LCQueueWait)
//	8087492C: 80874D8C (__THPHuffDecodeDCTCompY)
//	80874938: 80874D8C (__THPHuffDecodeDCTCompY)
//	80874944: 80874D8C (__THPHuffDecodeDCTCompY)
//	80874950: 80874D8C (__THPHuffDecodeDCTCompY)
//	8087495C: 80875410 (__THPHuffDecodeDCTCompU)
//	80874968: 808755F8 (__THPHuffDecodeDCTCompV)
//	8087499C: 8087445C (__THPInverseDCTNoYPos)
//	808749A8: 8087445C (__THPInverseDCTNoYPos)
//	808749B4: 80873FBC (__THPInverseDCTY8)
//	808749C0: 80873FBC (__THPInverseDCTY8)
//	808749F4: 8087445C (__THPInverseDCTNoYPos)
//	80874A1C: 8087445C (__THPInverseDCTNoYPos)
//	80874AC4: 8033B838 (LCStoreData)
//	80874AD8: 8033B838 (LCStoreData)
//	80874AEC: 8033B838 (LCStoreData)
//	80874B24: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void __THPDecompressiMCURow640x480() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__THPDecompressiMCURow640x480.s"
}
#pragma pop


/* 80874B38-80874D8C 0254+00 s=1 e=0 z=0  None .text      __THPDecompressiMCURowNxN                                    */
//	80874B48: 803621CC (_savegpr_25)
//	80874B4C: 808795A0 (lit_1109)
//	80874B50: 808795A0 (lit_1109)
//	80874B60: 8033B8E4 (LCQueueWait)
//	80874B7C: 80874D8C (__THPHuffDecodeDCTCompY)
//	80874B88: 80874D8C (__THPHuffDecodeDCTCompY)
//	80874B94: 80874D8C (__THPHuffDecodeDCTCompY)
//	80874BA0: 80874D8C (__THPHuffDecodeDCTCompY)
//	80874BAC: 80875410 (__THPHuffDecodeDCTCompU)
//	80874BB8: 808755F8 (__THPHuffDecodeDCTCompV)
//	80874BE8: 8087445C (__THPInverseDCTNoYPos)
//	80874BF4: 8087445C (__THPInverseDCTNoYPos)
//	80874C00: 80873FBC (__THPInverseDCTY8)
//	80874C0C: 80873FBC (__THPInverseDCTY8)
//	80874C3C: 8087445C (__THPInverseDCTNoYPos)
//	80874C64: 8087445C (__THPInverseDCTNoYPos)
//	80874D14: 8033B838 (LCStoreData)
//	80874D2C: 8033B838 (LCStoreData)
//	80874D40: 8033B838 (LCStoreData)
//	80874D78: 80362218 (_restgpr_25)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void __THPDecompressiMCURowNxN() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__THPDecompressiMCURowNxN.s"
}
#pragma pop


/* 80874D8C-80875198 040C+00 s=3 e=0 z=0  None .text      __THPHuffDecodeDCTCompY                                      */
//	80874DAC: 80879A40 (Ydchuff)
//	80874DB0: 80879A40 (Ydchuff)
//	80874DB8: 80875198 (__THPHuffDecodeTab)
//	80874E74: 80879A4C (Yachuff)
//	80874E78: 80879A4C (Yachuff)
//	80875148: 80879034 (__THPJpegNaturalOrder)
//	8087514C: 80879034 (__THPJpegNaturalOrder)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void __THPHuffDecodeDCTCompY() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__THPHuffDecodeDCTCompY.s"
}
#pragma pop


/* 80875198-80875410 0278+00 s=3 e=0 z=0  None .text      __THPHuffDecodeTab                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void __THPHuffDecodeTab() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__THPHuffDecodeTab.s"
}
#pragma pop


/* 80875410-808755F8 01E8+00 s=3 e=0 z=0  None .text      __THPHuffDecodeDCTCompU                                      */
//	80875438: 80879A44 (Udchuff)
//	8087543C: 80879A44 (Udchuff)
//	80875444: 80875198 (__THPHuffDecodeTab)
//	80875504: 80879A50 (Uachuff)
//	80875508: 80879A50 (Uachuff)
//	80875518: 80875198 (__THPHuffDecodeTab)
//	808755A8: 80879034 (__THPJpegNaturalOrder)
//	808755AC: 80879034 (__THPJpegNaturalOrder)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void __THPHuffDecodeDCTCompU() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__THPHuffDecodeDCTCompU.s"
}
#pragma pop


/* 808755F8-808757E0 01E8+00 s=3 e=0 z=0  None .text      __THPHuffDecodeDCTCompV                                      */
//	80875620: 80879A48 (Vdchuff)
//	80875624: 80879A48 (Vdchuff)
//	8087562C: 80875198 (__THPHuffDecodeTab)
//	808756EC: 80879A54 (Vachuff)
//	808756F0: 80879A54 (Vachuff)
//	80875700: 80875198 (__THPHuffDecodeTab)
//	80875790: 80879034 (__THPJpegNaturalOrder)
//	80875794: 80879034 (__THPJpegNaturalOrder)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void __THPHuffDecodeDCTCompV() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__THPHuffDecodeDCTCompV.s"
}
#pragma pop


/* 808757E0-8087584C 006C+00 s=1 e=0 z=0  None .text      THPInit                                                      */
//	808757F0: 808795A0 (lit_1109)
//	808757F4: 808795A0 (lit_1109)
//	80875828: 8087584C (OSInitFastCast)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void THPInit() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/THPInit.s"
}
#pragma pop


/* 8087584C-80875880 0034+00 s=1 e=0 z=0  None .text      OSInitFastCast                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void OSInitFastCast() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/OSInitFastCast.s"
}
#pragma pop


/* ############################################################################################## */
/* 80879BC8-80879BD0 0004+04 s=0 e=0 z=0  None .bss       __THPInitFlag                                                */
u8 __THPInitFlag[4 + 4 /* padding */];

/* 80879BD0-80879DA0 01D0+00 s=28 e=0 z=0  None .bss       daMP_ActivePlayer                                            */
static u8 daMP_ActivePlayer[464];

/* 80879DA0-80879DA4 0004+00 s=2 e=0 z=0  None .bss       daMP_ReadThreadCreated                                       */
static u8 daMP_ReadThreadCreated[4];

/* 80879DA4-80879DC4 0020+00 s=2 e=0 z=0  None .bss       daMP_FreeReadBufferQueue                                     */
static u8 daMP_FreeReadBufferQueue[32];

/* 80879DC4-80879DE4 0020+00 s=2 e=0 z=0  None .bss       daMP_ReadedBufferQueue                                       */
static u8 daMP_ReadedBufferQueue[32];

/* 80875880-808758B4 0034+00 s=2 e=0 z=0  None .text      daMP_PopReadedBuffer__Fv                                     */
//	8087588C: 80879DC4 (daMP_ReadedBufferQueue)
//	80875890: 80879DC4 (daMP_ReadedBufferQueue)
//	8087589C: 8033EABC (OSReceiveMessage)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_PopReadedBuffer() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_PopReadedBuffer__Fv.s"
}
#pragma pop


/* 808758B4-808758E4 0030+00 s=1 e=0 z=0  None .text      daMP_PushReadedBuffer__FPv                                   */
//	808758C4: 80879DC4 (daMP_ReadedBufferQueue)
//	808758C8: 80879DC4 (daMP_ReadedBufferQueue)
//	808758D0: 8033E9F4 (OSSendMessage)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  void* False
// 	 void False
asm static void daMP_PushReadedBuffer(void* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_PushReadedBuffer__FPv.s"
}
#pragma pop


/* 808758E4-80875918 0034+00 s=1 e=0 z=0  None .text      daMP_PopFreeReadBuffer__Fv                                   */
//	808758F0: 80879DA4 (daMP_FreeReadBufferQueue)
//	808758F4: 80879DA4 (daMP_FreeReadBufferQueue)
//	80875900: 8033EABC (OSReceiveMessage)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_PopFreeReadBuffer() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_PopFreeReadBuffer__Fv.s"
}
#pragma pop


/* 80875918-80875948 0030+00 s=2 e=0 z=0  None .text      daMP_PushFreeReadBuffer__FPv                                 */
//	80875928: 80879DA4 (daMP_FreeReadBufferQueue)
//	8087592C: 80879DA4 (daMP_FreeReadBufferQueue)
//	80875934: 8033E9F4 (OSSendMessage)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  void* False
// 	 void False
asm static void daMP_PushFreeReadBuffer(void* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_PushFreeReadBuffer__FPv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80879DE4-80879E04 0020+00 s=2 e=0 z=0  None .bss       daMP_ReadedBufferQueue2                                      */
static u8 daMP_ReadedBufferQueue2[32];

/* 80875948-8087597C 0034+00 s=1 e=0 z=0  None .text      daMP_PopReadedBuffer2__Fv                                    */
//	80875954: 80879DE4 (daMP_ReadedBufferQueue2)
//	80875958: 80879DE4 (daMP_ReadedBufferQueue2)
//	80875964: 8033EABC (OSReceiveMessage)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_PopReadedBuffer2() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_PopReadedBuffer2__Fv.s"
}
#pragma pop


/* 8087597C-808759AC 0030+00 s=1 e=0 z=0  None .text      daMP_PushReadedBuffer2__FPv                                  */
//	8087598C: 80879DE4 (daMP_ReadedBufferQueue2)
//	80875990: 80879DE4 (daMP_ReadedBufferQueue2)
//	80875998: 8033E9F4 (OSSendMessage)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  void* False
// 	 void False
asm static void daMP_PushReadedBuffer2(void* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_PushReadedBuffer2__FPv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80879E04-80879E2C 0028+00 s=0 e=0 z=0  None .bss       daMP_FreeReadBufferMessage                                   */
u8 daMP_FreeReadBufferMessage[40];

/* 80879E2C-80879E54 0028+00 s=0 e=0 z=0  None .bss       daMP_ReadedBufferMessage                                     */
u8 daMP_ReadedBufferMessage[40];

/* 80879E54-80879E80 0028+04 s=0 e=0 z=0  None .bss       daMP_ReadedBufferMessage2                                    */
u8 daMP_ReadedBufferMessage2[40 + 4 /* padding */];

/* 80879E80-8087A198 0318+00 s=3 e=0 z=0  None .bss       daMP_ReadThread                                              */
static u8 daMP_ReadThread[792];

/* 808759AC-808759E4 0038+00 s=1 e=0 z=0  None .text      daMP_ReadThreadStart__Fv                                     */
//	808759B8: 80879DA0 (daMP_ReadThreadCreated)
//	808759BC: 80879DA0 (daMP_ReadThreadCreated)
//	808759C8: 80879E80 (daMP_ReadThread)
//	808759CC: 80879E80 (daMP_ReadThread)
//	808759D0: 803417B4 (OSResumeThread)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_ReadThreadStart() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_ReadThreadStart__Fv.s"
}
#pragma pop


/* 808759E4-80875A28 0044+00 s=1 e=0 z=0  None .text      daMP_ReadThreadCancel__Fv                                    */
//	808759F0: 80879DA0 (daMP_ReadThreadCreated)
//	808759F4: 80879DA0 (daMP_ReadThreadCreated)
//	80875A00: 80879E80 (daMP_ReadThread)
//	80875A04: 80879E80 (daMP_ReadThread)
//	80875A08: 80341558 (OSCancelThread)
//	80875A10: 80879DA0 (daMP_ReadThreadCreated)
//	80875A14: 80879DA0 (daMP_ReadThreadCreated)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_ReadThreadCancel() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_ReadThreadCancel__Fv.s"
}
#pragma pop


/* 80875A28-80875B0C 00E4+00 s=1 e=0 z=0  None .text      daMP_Reader__FPv                                             */
//	80875A38: 803621D4 (_savegpr_27)
//	80875A40: 80879BD0 (daMP_ActivePlayer)
//	80875A44: 80879BD0 (daMP_ActivePlayer)
//	80875A50: 808758E4 (daMP_PopFreeReadBuffer__Fv)
//	80875A6C: 80348E44 (DVDReadPrio)
//	80875A94: 80877F88 (daMP_PrepareReady__Fi)
//	80875A98: 80879E80 (daMP_ReadThread)
//	80875A9C: 80879E80 (daMP_ReadThread)
//	80875AA0: 80341A3C (OSSuspendThread)
//	80875AAC: 808758B4 (daMP_PushReadedBuffer__FPv)
//	80875AB8: 80875B0C (daMP_NEXT_READ_SIZE__FP18daMP_THPReadBuffer)
//	80875AF8: 80879E80 (daMP_ReadThread)
//	80875AFC: 80879E80 (daMP_ReadThread)
//	80875B00: 80341A3C (OSSuspendThread)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  void* False
// 	 void False
asm static void daMP_Reader(void* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_Reader__FPv.s"
}
#pragma pop


/* 80875B0C-80875B18 000C+00 s=1 e=0 z=0  None .text      daMP_NEXT_READ_SIZE__FP18daMP_THPReadBuffer                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daMP_THPReadBuffer* False
// 	 daMP_THPReadBuffer False
asm static void daMP_NEXT_READ_SIZE(daMP_THPReadBuffer* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_NEXT_READ_SIZE__FP18daMP_THPReadBuffer.s"
}
#pragma pop


/* ############################################################################################## */
/* 808790CC-808790D0 0004+00 s=0 e=0 z=0  None .rodata    @4205                                                        */
SECTION_RODATA u32 const lit_4205 = 0x3FB504F3;

/* 808790D0-808790D4 0004+00 s=0 e=0 z=0  None .rodata    @4206                                                        */
SECTION_RODATA u32 const lit_4206 = 0x3FEC835E;

/* 808790D4-808790D8 0004+00 s=0 e=0 z=0  None .rodata    @4207                                                        */
SECTION_RODATA u32 const lit_4207 = 0x3F8A8BD4;

/* 808790D8-808790DC 0004+00 s=0 e=0 z=0  None .rodata    @4208                                                        */
SECTION_RODATA u32 const lit_4208 = 0xC0273D75;

/* 808790DC-808790E0 0004+00 s=0 e=0 z=0  None .rodata    @4209                                                        */
SECTION_RODATA u32 const lit_4209 = 0x44800000;

/* 808790E0-808790E4 0004+00 s=1 e=0 z=0  None .rodata    @4465                                                        */
SECTION_RODATA static u32 const lit_4465 = 0x42C80000;

/* 808790E4-808790E8 0004+00 s=0 e=0 z=0  None .rodata    @4466                                                        */
SECTION_RODATA u32 const lit_4466 = 0x42700000;

/* 808790E8-808790F0 0008+00 s=0 e=0 z=0  None .rodata    @4779                                                        */
SECTION_RODATA u8 const lit_4779[8] = {
	0xFF, 0xA6, 0x00, 0x00, 0xFF, 0x8E, 0x00, 0x87,
};

/* 808790F0-808790F4 0004+00 s=0 e=0 z=0  None .rodata    @4782                                                        */
SECTION_RODATA u32 const lit_4782 = 0x0000E258;

/* 808790F4-808790F8 0004+00 s=0 e=0 z=0  None .rodata    @4785                                                        */
SECTION_RODATA u32 const lit_4785 = 0xB30000B6;

/* 808790F8-808790FC 0004+00 s=0 e=0 z=0  None .rodata    @4788                                                        */
SECTION_RODATA u32 const lit_4788 = 0xFF00FF80;

/* 808790FC-80879100 0004+00 s=2 e=0 z=0  None .rodata    @4809                                                        */
SECTION_RODATA static u8 const lit_4809[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 80879100-80879104 0004+00 s=0 e=0 z=0  None .rodata    @4810                                                        */
SECTION_RODATA u32 const lit_4810 = 0xBF800000;

/* 80879104-8087910C 0004+04 s=1 e=0 z=0  None .rodata    @4811                                                        */
SECTION_RODATA static u32 const lit_4811[1 + 1 /* padding */] = {
	0x3F800000,
	/* padding */
	0x00000000,
};

/* 8087910C-80879114 0008+00 s=2 e=0 z=0  None .rodata    @4814                                                        */
SECTION_RODATA static u8 const lit_4814[8] = {
	0x43, 0x30, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
};

/* 80879114-80879118 0004+00 s=1 e=0 z=0  None .rodata    @4894                                                        */
SECTION_RODATA static u32 const lit_4894 = 0x3F333333;

/* 80879118-8087911C 0004+00 s=1 e=0 z=0  None .rodata    @4983                                                        */
SECTION_RODATA static u32 const lit_4983 = 0x42FE0000;

/* 8087911C-80879434 0318+00 s=8 e=0 z=0  None .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char const* const stringBase_8087911C = "Can't create read thread\n";
SECTION_DEAD char const* const stringBase_80879136 = 
    "Can't create video decode thread\n";
SECTION_DEAD char const* const stringBase_80879158 = 
    "Can't create audio decode thread\n";
SECTION_DEAD char const* const stringBase_8087917A = 
    "You must call daMP_THPPlayerInit before you call"
    " this function\n";
SECTION_DEAD char const* const stringBase_808791BA = 
    "Can't open %s. Because thp file have already ope"
    "ned.\n";
SECTION_DEAD char const* const stringBase_808791F0 = "Can't open %s.\n";
SECTION_DEAD char const* const stringBase_80879200 = 
    "Fail to read the header from THP file.\n";
SECTION_DEAD char const* const stringBase_80879228 = "THP";
SECTION_DEAD char const* const stringBase_8087922C = "This file is not THP file.\n";
SECTION_DEAD char const* const stringBase_80879248 = "invalid version.\n";
SECTION_DEAD char const* const stringBase_8087925A = 
    "Fail to read the frame component infomation from"
    " THP file.\n";
SECTION_DEAD char const* const stringBase_80879296 = 
    "Fail to read the video infomation from THP file."
    "\n";
SECTION_DEAD char const* const stringBase_808792C8 = "Unknow frame components.\n";
SECTION_DEAD char const* const stringBase_808792E2 = 
    "This thp file doesn't have the offset data\n";
SECTION_DEAD char const* const stringBase_8087930E = 
    "Fail to read the offset data from THP file.\n";
SECTION_DEAD char const* const stringBase_8087933B = 
    "Specified frame number is over total frame numbe"
    "r\n";
SECTION_DEAD char const* const stringBase_8087936E = 
    "Specified audio track number is invalid\n";
SECTION_DEAD char const* const stringBase_80879397 = 
    "Fail to read all movie data from THP file\n";
SECTION_DEAD char const* const stringBase_808793C2 = "Fail to open the thp file\n";
SECTION_DEAD char const* const stringBase_808793DD = "Can't allocate the memory";
SECTION_DEAD char const* const stringBase_808793F7 = "Fail to prepare\n";
SECTION_DEAD char const* const stringBase_80879408 = "Error happen";
SECTION_DEAD char const* const stringBase_80879415 = "/Movie/demo_movie%02d_%02d.thp";
#pragma pop

/* 80875B18-80875BC8 00B0+00 s=1 e=0 z=0  None .text      daMP_CreateReadThread__Fl                                    */
//	80875B2C: 808795A0 (lit_1109)
//	80875B30: 808795A0 (lit_1109)
//	80875B38: 80875A28 (daMP_Reader__FPv)
//	80875B3C: 80875A28 (daMP_Reader__FPv)
//	80875B54: 8034128C (OSCreateThread)
//	80875B60: 8087911C (stringBase0)
//	80875B64: 8087911C (stringBase0)
//	80875B6C: 80006ABC (OSReport)
//	80875B84: 8033E994 (OSInitMessageQueue)
//	80875B94: 8033E994 (OSInitMessageQueue)
//	80875BA4: 8033E994 (OSInitMessageQueue)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  s32 False
asm static void daMP_CreateReadThread(s32 param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_CreateReadThread__Fl.s"
}
#pragma pop


/* ############################################################################################## */
/* 8087A198-8087C198 2000+00 s=0 e=0 z=0  None .bss       daMP_ReadThreadStack                                         */
u8 daMP_ReadThreadStack[8192];

/* 8087C198-8087C1A0 0004+04 s=2 e=0 z=0  None .bss       daMP_VideoDecodeThreadCreated                                */
static u8 daMP_VideoDecodeThreadCreated[4 + 4 /* padding */];

/* 8087C1A0-8087C4B8 0318+00 s=4 e=0 z=0  None .bss       daMP_VideoDecodeThread                                       */
static u8 daMP_VideoDecodeThread[792];

/* 8087C4B8-808E04B8 64000+00 s=1 e=0 z=0  None .bss       daMP_VideoDecodeThreadStack                                  */
static u8 daMP_VideoDecodeThreadStack[409600];

/* 808E04B8-808E04D8 0020+00 s=2 e=0 z=0  None .bss       daMP_FreeTextureSetQueue                                     */
static u8 daMP_FreeTextureSetQueue[32];

/* 80875BC8-80875BFC 0034+00 s=1 e=0 z=0  None .text      daMP_PopFreeTextureSet__Fv                                   */
//	80875BD4: 808E04B8 (daMP_FreeTextureSetQueue)
//	80875BD8: 808E04B8 (daMP_FreeTextureSetQueue)
//	80875BE4: 8033EABC (OSReceiveMessage)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_PopFreeTextureSet() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_PopFreeTextureSet__Fv.s"
}
#pragma pop


/* 80875BFC-80875C2C 0030+00 s=2 e=0 z=0  None .text      daMP_PushFreeTextureSet__FPv                                 */
//	80875C0C: 808E04B8 (daMP_FreeTextureSetQueue)
//	80875C10: 808E04B8 (daMP_FreeTextureSetQueue)
//	80875C18: 8033E9F4 (OSSendMessage)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  void* False
// 	 void False
asm static void daMP_PushFreeTextureSet(void* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_PushFreeTextureSet__FPv.s"
}
#pragma pop


/* ############################################################################################## */
/* 808E04D8-808E04F8 0020+00 s=2 e=0 z=0  None .bss       daMP_DecodedTextureSetQueue                                  */
static u8 daMP_DecodedTextureSetQueue[32];

/* 80875C2C-80875C70 0044+00 s=1 e=0 z=0  None .text      daMP_PopDecodedTextureSet__Fl                                */
//	80875C3C: 808E04D8 (daMP_DecodedTextureSetQueue)
//	80875C40: 808E04D8 (daMP_DecodedTextureSetQueue)
//	80875C48: 8033EABC (OSReceiveMessage)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  s32 False
asm static void daMP_PopDecodedTextureSet(s32 param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_PopDecodedTextureSet__Fl.s"
}
#pragma pop


/* 80875C70-80875CA0 0030+00 s=1 e=0 z=0  None .text      daMP_PushDecodedTextureSet__FPv                              */
//	80875C80: 808E04D8 (daMP_DecodedTextureSetQueue)
//	80875C84: 808E04D8 (daMP_DecodedTextureSetQueue)
//	80875C8C: 8033E9F4 (OSSendMessage)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  void* False
// 	 void False
asm static void daMP_PushDecodedTextureSet(void* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_PushDecodedTextureSet__FPv.s"
}
#pragma pop


/* ############################################################################################## */
/* 808E04F8-808E0504 000C+00 s=0 e=0 z=0  None .bss       daMP_FreeTextureSetMessage                                   */
u8 daMP_FreeTextureSetMessage[12];

/* 808E0504-808E0510 000C+00 s=0 e=0 z=0  None .bss       daMP_DecodedTextureSetMessage                                */
u8 daMP_DecodedTextureSetMessage[12];

/* 808E0510-808E0514 0004+00 s=1 e=0 z=0  None .bss       daMP_First                                                   */
static u8 daMP_First[4];

/* 80875CA0-80875DD8 0138+00 s=2 e=0 z=0  None .text      daMP_VideoDecode__FP18daMP_THPReadBuffer                     */
//	80875CB0: 803621C8 (_savegpr_24)
//	80875CC0: 80879BD0 (daMP_ActivePlayer)
//	80875CC4: 80879BD0 (daMP_ActivePlayer)
//	80875CD8: 80875BC8 (daMP_PopFreeTextureSet__Fv)
//	80875CE4: 80879BD0 (daMP_ActivePlayer)
//	80875CE8: 80879BD0 (daMP_ActivePlayer)
//	80875D18: 80872CBC (THPVideoDecode)
//	80875D28: 808E0510 (daMP_First)
//	80875D2C: 808E0510 (daMP_First)
//	80875D3C: 80877F88 (daMP_PrepareReady__Fi)
//	80875D44: 808E0510 (daMP_First)
//	80875D48: 808E0510 (daMP_First)
//	80875D4C: 8087C1A0 (daMP_VideoDecodeThread)
//	80875D50: 8087C1A0 (daMP_VideoDecodeThread)
//	80875D54: 80341A3C (OSSuspendThread)
//	80875D64: 80875C70 (daMP_PushDecodedTextureSet__FPv)
//	80875D68: 8033D6F4 (OSDisableInterrupts)
//	80875D78: 8033D71C (OSRestoreInterrupts)
//	80875D9C: 808E0510 (daMP_First)
//	80875DA0: 808E0510 (daMP_First)
//	80875DB0: 80877F88 (daMP_PrepareReady__Fi)
//	80875DB8: 808E0510 (daMP_First)
//	80875DBC: 808E0510 (daMP_First)
//	80875DC4: 80362214 (_restgpr_24)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daMP_THPReadBuffer* False
// 	 daMP_THPReadBuffer False
asm static void daMP_VideoDecode(daMP_THPReadBuffer* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_VideoDecode__FP18daMP_THPReadBuffer.s"
}
#pragma pop


/* 80875DD8-80875EA0 00C8+00 s=1 e=0 z=0  None .text      daMP_VideoDecoder__FPv                                       */
//	80875DEC: 80879BD0 (daMP_ActivePlayer)
//	80875DF0: 80879BD0 (daMP_ActivePlayer)
//	80875E04: 80875948 (daMP_PopReadedBuffer2__Fv)
//	80875E40: 80875CA0 (daMP_VideoDecode__FP18daMP_THPReadBuffer)
//	80875E48: 80875918 (daMP_PushFreeReadBuffer__FPv)
//	80875E4C: 8033D6F4 (OSDisableInterrupts)
//	80875E5C: 8033D71C (OSRestoreInterrupts)
//	80875E78: 80875948 (daMP_PopReadedBuffer2__Fv)
//	80875E84: 80875880 (daMP_PopReadedBuffer__Fv)
//	80875E90: 80875CA0 (daMP_VideoDecode__FP18daMP_THPReadBuffer)
//	80875E98: 80875918 (daMP_PushFreeReadBuffer__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  void* False
// 	 void False
asm static void daMP_VideoDecoder(void* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_VideoDecoder__FPv.s"
}
#pragma pop


/* 80875EA0-80875FD4 0134+00 s=1 e=0 z=0  None .text      daMP_VideoDecoderForOnMemory__FPv                            */
//	80875EB8: 80879BD0 (daMP_ActivePlayer)
//	80875EBC: 80879BD0 (daMP_ActivePlayer)
//	80875EDC: 8033D6F4 (OSDisableInterrupts)
//	80875EEC: 8033D71C (OSRestoreInterrupts)
//	80875F60: 80875CA0 (daMP_VideoDecode__FP18daMP_THPReadBuffer)
//	80875FA8: 8087C1A0 (daMP_VideoDecodeThread)
//	80875FAC: 8087C1A0 (daMP_VideoDecodeThread)
//	80875FB0: 80341A3C (OSSuspendThread)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  void* False
// 	 void False
asm static void daMP_VideoDecoderForOnMemory(void* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_VideoDecoderForOnMemory__FPv.s"
}
#pragma pop


/* 80875FD4-808760EC 0118+00 s=1 e=0 z=0  None .text      daMP_CreateVideoDecodeThread__FlPUc                          */
//	80875FF0: 808795A0 (lit_1109)
//	80875FF4: 808795A0 (lit_1109)
//	80876004: 80875EA0 (daMP_VideoDecoderForOnMemory__FPv)
//	80876008: 80875EA0 (daMP_VideoDecoderForOnMemory__FPv)
//	8087600C: 8087C4B8 (daMP_VideoDecodeThreadStack)
//	80876010: 8087C4B8 (daMP_VideoDecodeThreadStack)
//	80876028: 8034128C (OSCreateThread)
//	80876034: 8087911C (stringBase0)
//	80876038: 8087911C (stringBase0)
//	80876044: 80006ABC (OSReport)
//	80876054: 80875DD8 (daMP_VideoDecoder__FPv)
//	80876058: 80875DD8 (daMP_VideoDecoder__FPv)
//	80876060: 8087C4B8 (daMP_VideoDecodeThreadStack)
//	80876064: 8087C4B8 (daMP_VideoDecodeThreadStack)
//	8087607C: 8034128C (OSCreateThread)
//	80876088: 8087911C (stringBase0)
//	8087608C: 8087911C (stringBase0)
//	80876098: 80006ABC (OSReport)
//	808760B0: 8033E994 (OSInitMessageQueue)
//	808760C0: 8033E994 (OSInitMessageQueue)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  s32 False
//  u8* False
// 	 u8 False
asm static void daMP_CreateVideoDecodeThread(s32 param_0, u8* param_1) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_CreateVideoDecodeThread__FlPUc.s"
}
#pragma pop


/* 808760EC-80876124 0038+00 s=1 e=0 z=0  None .text      daMP_VideoDecodeThreadStart__Fv                              */
//	808760F8: 8087C198 (daMP_VideoDecodeThreadCreated)
//	808760FC: 8087C198 (daMP_VideoDecodeThreadCreated)
//	80876108: 8087C1A0 (daMP_VideoDecodeThread)
//	8087610C: 8087C1A0 (daMP_VideoDecodeThread)
//	80876110: 803417B4 (OSResumeThread)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_VideoDecodeThreadStart() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_VideoDecodeThreadStart__Fv.s"
}
#pragma pop


/* 80876124-80876168 0044+00 s=1 e=0 z=0  None .text      daMP_VideoDecodeThreadCancel__Fv                             */
//	80876130: 8087C198 (daMP_VideoDecodeThreadCreated)
//	80876134: 8087C198 (daMP_VideoDecodeThreadCreated)
//	80876140: 8087C1A0 (daMP_VideoDecodeThread)
//	80876144: 8087C1A0 (daMP_VideoDecodeThread)
//	80876148: 80341558 (OSCancelThread)
//	80876150: 8087C198 (daMP_VideoDecodeThreadCreated)
//	80876154: 8087C198 (daMP_VideoDecodeThreadCreated)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_VideoDecodeThreadCancel() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_VideoDecodeThreadCancel__Fv.s"
}
#pragma pop


/* ############################################################################################## */
/* 808E0514-808E0518 0004+00 s=2 e=0 z=0  None .bss       daMP_AudioDecodeThreadCreated                                */
static u8 daMP_AudioDecodeThreadCreated[4];

/* 808E0518-808E0830 0318+00 s=3 e=0 z=0  None .bss       daMP_AudioDecodeThread                                       */
static u8 daMP_AudioDecodeThread[792];

/* 808E0830-80944830 64000+00 s=0 e=0 z=0  None .bss       daMP_AudioDecodeThreadStack                                  */
u8 daMP_AudioDecodeThreadStack[409600];

/* 80944830-80944850 0020+00 s=2 e=0 z=0  None .bss       daMP_FreeAudioBufferQueue                                    */
static u8 daMP_FreeAudioBufferQueue[32];

/* 80876168-8087619C 0034+00 s=1 e=0 z=0  None .text      daMP_PopFreeAudioBuffer__Fv                                  */
//	80876174: 80944830 (daMP_FreeAudioBufferQueue)
//	80876178: 80944830 (daMP_FreeAudioBufferQueue)
//	80876184: 8033EABC (OSReceiveMessage)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_PopFreeAudioBuffer() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_PopFreeAudioBuffer__Fv.s"
}
#pragma pop


/* 8087619C-808761CC 0030+00 s=2 e=0 z=0  None .text      daMP_PushFreeAudioBuffer__FPv                                */
//	808761AC: 80944830 (daMP_FreeAudioBufferQueue)
//	808761B0: 80944830 (daMP_FreeAudioBufferQueue)
//	808761B8: 8033E9F4 (OSSendMessage)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  void* False
// 	 void False
asm static void daMP_PushFreeAudioBuffer(void* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_PushFreeAudioBuffer__FPv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80944850-80944870 0020+00 s=2 e=0 z=0  None .bss       daMP_DecodedAudioBufferQueue                                 */
static u8 daMP_DecodedAudioBufferQueue[32];

/* 808761CC-80876210 0044+00 s=1 e=0 z=0  None .text      daMP_PopDecodedAudioBuffer__Fl                               */
//	808761DC: 80944850 (daMP_DecodedAudioBufferQueue)
//	808761E0: 80944850 (daMP_DecodedAudioBufferQueue)
//	808761E8: 8033EABC (OSReceiveMessage)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  s32 False
asm static void daMP_PopDecodedAudioBuffer(s32 param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_PopDecodedAudioBuffer__Fl.s"
}
#pragma pop


/* 80876210-80876240 0030+00 s=1 e=0 z=0  None .text      daMP_PushDecodedAudioBuffer__FPv                             */
//	80876220: 80944850 (daMP_DecodedAudioBufferQueue)
//	80876224: 80944850 (daMP_DecodedAudioBufferQueue)
//	8087622C: 8033E9F4 (OSSendMessage)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  void* False
// 	 void False
asm static void daMP_PushDecodedAudioBuffer(void* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_PushDecodedAudioBuffer__FPv.s"
}
#pragma pop


/* 80876240-8087631C 00DC+00 s=2 e=0 z=0  None .text      daMP_AudioDecode__FP18daMP_THPReadBuffer                     */
//	80876264: 80879BD0 (daMP_ActivePlayer)
//	80876268: 80879BD0 (daMP_ActivePlayer)
//	8087627C: 80876168 (daMP_PopFreeAudioBuffer__Fv)
//	80876284: 80879BD0 (daMP_ActivePlayer)
//	80876288: 80879BD0 (daMP_ActivePlayer)
//	808762B4: 80879BD0 (daMP_ActivePlayer)
//	808762B8: 80879BD0 (daMP_ActivePlayer)
//	808762CC: 80872758 (THPAudioDecode)
//	808762E0: 80876210 (daMP_PushDecodedAudioBuffer__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daMP_THPReadBuffer* False
// 	 daMP_THPReadBuffer False
asm static void daMP_AudioDecode(daMP_THPReadBuffer* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_AudioDecode__FP18daMP_THPReadBuffer.s"
}
#pragma pop


/* 8087631C-80876344 0028+00 s=1 e=0 z=0  None .text      daMP_AudioDecoder__FPv                                       */
//	8087632C: 80875880 (daMP_PopReadedBuffer__Fv)
//	80876334: 80876240 (daMP_AudioDecode__FP18daMP_THPReadBuffer)
//	8087633C: 8087597C (daMP_PushReadedBuffer2__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  void* False
// 	 void False
asm static void daMP_AudioDecoder(void* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_AudioDecoder__FPv.s"
}
#pragma pop


/* 80876344-808763EC 00A8+00 s=1 e=0 z=0  None .text      daMP_AudioDecoderForOnMemory__FPv                            */
//	8087635C: 80879BD0 (daMP_ActivePlayer)
//	80876360: 80879BD0 (daMP_ActivePlayer)
//	80876378: 80876240 (daMP_AudioDecode__FP18daMP_THPReadBuffer)
//	808763C0: 808E0518 (daMP_AudioDecodeThread)
//	808763C4: 808E0518 (daMP_AudioDecodeThread)
//	808763C8: 80341A3C (OSSuspendThread)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  void* False
// 	 void False
asm static void daMP_AudioDecoderForOnMemory(void* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_AudioDecoderForOnMemory__FPv.s"
}
#pragma pop


/* 808763EC-808764E8 00FC+00 s=1 e=0 z=0  None .text      daMP_CreateAudioDecodeThread__FlPUc                          */
//	80876408: 808795A0 (lit_1109)
//	8087640C: 808795A0 (lit_1109)
//	80876420: 80876344 (daMP_AudioDecoderForOnMemory__FPv)
//	80876424: 80876344 (daMP_AudioDecoderForOnMemory__FPv)
//	80876440: 8034128C (OSCreateThread)
//	80876458: 8087631C (daMP_AudioDecoder__FPv)
//	8087645C: 8087631C (daMP_AudioDecoder__FPv)
//	8087647C: 8034128C (OSCreateThread)
//	80876488: 8087911C (stringBase0)
//	8087648C: 8087911C (stringBase0)
//	80876498: 80006ABC (OSReport)
//	808764B0: 8033E994 (OSInitMessageQueue)
//	808764C0: 8033E994 (OSInitMessageQueue)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  s32 False
//  u8* False
// 	 u8 False
asm static void daMP_CreateAudioDecodeThread(s32 param_0, u8* param_1) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_CreateAudioDecodeThread__FlPUc.s"
}
#pragma pop


/* 808764E8-80876520 0038+00 s=1 e=0 z=0  None .text      daMP_AudioDecodeThreadStart__Fv                              */
//	808764F4: 808E0514 (daMP_AudioDecodeThreadCreated)
//	808764F8: 808E0514 (daMP_AudioDecodeThreadCreated)
//	80876504: 808E0518 (daMP_AudioDecodeThread)
//	80876508: 808E0518 (daMP_AudioDecodeThread)
//	8087650C: 803417B4 (OSResumeThread)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_AudioDecodeThreadStart() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_AudioDecodeThreadStart__Fv.s"
}
#pragma pop


/* 80876520-80876564 0044+00 s=1 e=0 z=0  None .text      daMP_AudioDecodeThreadCancel__Fv                             */
//	8087652C: 808E0514 (daMP_AudioDecodeThreadCreated)
//	80876530: 808E0514 (daMP_AudioDecodeThreadCreated)
//	8087653C: 808E0518 (daMP_AudioDecodeThread)
//	80876540: 808E0518 (daMP_AudioDecodeThread)
//	80876544: 80341558 (OSCancelThread)
//	8087654C: 808E0514 (daMP_AudioDecodeThreadCreated)
//	80876550: 808E0514 (daMP_AudioDecodeThreadCreated)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_AudioDecodeThreadCancel() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_AudioDecodeThreadCancel__Fv.s"
}
#pragma pop


/* 80876564-8087667C 0118+00 s=1 e=0 z=0  None .text      daMP_THPGXRestore__Fv                                        */
//	8087657C: 8035FC9C (GXSetZMode)
//	80876590: 8035FBF0 (GXSetBlendMode)
//	80876598: 8035BDFC (GXSetNumTexGens)
//	808765A0: 8035DB30 (GXSetNumChans)
//	808765A8: 8035F890 (GXSetNumTevStages)
//	808765BC: 8035F6F4 (GXSetTevOrder)
//	808765C8: 8035F198 (GXSetTevOp)
//	808765D8: 8035F55C (GXSetTevSwapMode)
//	808765E8: 8035F55C (GXSetTevSwapMode)
//	808765F8: 8035F55C (GXSetTevSwapMode)
//	80876608: 8035F55C (GXSetTevSwapMode)
//	80876620: 8035F5A4 (GXSetTevSwapModeTable)
//	80876638: 8035F5A4 (GXSetTevSwapModeTable)
//	80876650: 8035F5A4 (GXSetTevSwapModeTable)
//	80876668: 8035F5A4 (GXSetTevSwapModeTable)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_THPGXRestore() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_THPGXRestore__Fv.s"
}
#pragma pop


/* 8087667C-80876BA8 052C+00 s=1 e=0 z=0  None .text      daMP_THPGXYuv2RgbSetup__FPC16_GXRenderModeObj                */
//	80876694: 80879034 (__THPJpegNaturalOrder)
//	80876698: 80879034 (__THPJpegNaturalOrder)
//	808766AC: 8035FD04 (GXSetPixelFmt)
//	808766F8: 80346FF8 (C_MTXOrtho)
//	80876704: 803600D4 (GXSetProjection)
//	80876748: 80360464 (GXSetViewport)
//	8087675C: 803604D0 (GXSetScissor)
//	80876764: 80346484 (PSMTXIdentity)
//	80876770: 8036024C (GXLoadPosMtxImm)
//	80876778: 803602EC (GXSetCurrentMtx)
//	80876780: 8035FCD0 (GXSetZCompLoc)
//	80876790: 8035FC9C (GXSetZMode)
//	808767A4: 8035FBF0 (GXSetBlendMode)
//	808767BC: 8035F624 (GXSetAlphaCompare)
//	808767C0: 80450600 (g_clearColor)
//	808767C4: 80450600 (g_clearColor)
//	808767E4: 8035F8B8 (GXSetFog)
//	808767F4: 8035FACC (GXSetFogRangeAdj)
//	808767FC: 8035C984 (GXSetCullMode)
//	80876804: 8035FDD8 (GXSetDither)
//	8087680C: 8035FC44 (GXSetColorUpdate)
//	80876814: 8035FC70 (GXSetAlphaUpdate)
//	8087681C: 8035F0D4 (GXSetNumIndStages)
//	80876824: 8035DB30 (GXSetNumChans)
//	8087682C: 8035BDFC (GXSetNumTexGens)
//	80876840: 80876BA8 (GXSetTexCoordGen)
//	80876854: 80876BA8 (GXSetTexCoordGen)
//	80876858: 8035E664 (GXInvalidateTexAll)
//	8087685C: 8035B58C (GXClearVtxDesc)
//	80876868: 8035AEB8 (GXSetVtxDesc)
//	80876874: 8035AEB8 (GXSetVtxDesc)
//	8087688C: 8035B5C4 (GXSetVtxAttrFmt)
//	808768A4: 8035B5C4 (GXSetVtxAttrFmt)
//	808768AC: 8035F890 (GXSetNumTevStages)
//	808768C0: 8035F6F4 (GXSetTevOrder)
//	808768D8: 8035F224 (GXSetTevColorIn)
//	808768F4: 8035F2AC (GXSetTevColorOp)
//	8087690C: 8035F268 (GXSetTevAlphaIn)
//	80876928: 8035F314 (GXSetTevAlphaOp)
//	80876934: 8035F4A4 (GXSetTevKColorSel)
//	80876940: 8035F500 (GXSetTevKAlphaSel)
//	80876950: 8035F55C (GXSetTevSwapMode)
//	80876964: 8035F6F4 (GXSetTevOrder)
//	8087697C: 8035F224 (GXSetTevColorIn)
//	80876998: 8035F2AC (GXSetTevColorOp)
//	808769B0: 8035F268 (GXSetTevAlphaIn)
//	808769CC: 8035F314 (GXSetTevAlphaOp)
//	808769D8: 8035F4A4 (GXSetTevKColorSel)
//	808769E4: 8035F500 (GXSetTevKAlphaSel)
//	808769F4: 8035F55C (GXSetTevSwapMode)
//	80876A08: 8035F6F4 (GXSetTevOrder)
//	80876A20: 8035F224 (GXSetTevColorIn)
//	80876A3C: 8035F2AC (GXSetTevColorOp)
//	80876A54: 8035F268 (GXSetTevAlphaIn)
//	80876A70: 8035F314 (GXSetTevAlphaOp)
//	80876A80: 8035F55C (GXSetTevSwapMode)
//	80876A94: 8035F6F4 (GXSetTevOrder)
//	80876AAC: 8035F224 (GXSetTevColorIn)
//	80876AC8: 8035F2AC (GXSetTevColorOp)
//	80876AE0: 8035F268 (GXSetTevAlphaIn)
//	80876AFC: 8035F314 (GXSetTevAlphaOp)
//	80876B0C: 8035F55C (GXSetTevSwapMode)
//	80876B18: 8035F4A4 (GXSetTevKColorSel)
//	80876B34: 8035F3DC (GXSetTevColorS10)
//	80876B48: 8035F440 (GXSetTevKColor)
//	80876B5C: 8035F440 (GXSetTevKColor)
//	80876B70: 8035F440 (GXSetTevKColor)
//	80876B88: 8035F5A4 (GXSetTevSwapModeTable)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  _GXRenderModeObj const* False
// 	 _GXRenderModeObj const False
// 		 _GXRenderModeObj False
asm static void daMP_THPGXYuv2RgbSetup(_GXRenderModeObj const* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_THPGXYuv2RgbSetup__FPC16_GXRenderModeObj.s"
}
#pragma pop


/* 80876BA8-80876BD0 0028+00 s=1 e=0 z=0  None .text      GXSetTexCoordGen                                             */
//	80876BBC: 8035BB7C (GXSetTexCoordGen2)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void GXSetTexCoordGen() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/GXSetTexCoordGen.s"
}
#pragma pop


/* 80876BD0-80876DE4 0214+00 s=1 e=0 z=0  None .text      daMP_THPGXYuv2RgbDraw__FPUcPUcPUcssssss                      */
//	80876BE0: 803621C8 (_savegpr_24)
//	80876C28: 8035DE40 (GXInitTexObj)
//	80876C38: 808790FC (lit_4809)
//	80876C3C: 808790FC (lit_4809)
//	80876C54: 8035E0D4 (GXInitTexObjLOD)
//	80876C60: 8035E414 (GXLoadTexObj)
//	80876C94: 8035DE40 (GXInitTexObj)
//	80876CA4: 808790FC (lit_4809)
//	80876CA8: 808790FC (lit_4809)
//	80876CC0: 8035E0D4 (GXInitTexObjLOD)
//	80876CCC: 8035E414 (GXLoadTexObj)
//	80876CF0: 8035DE40 (GXInitTexObj)
//	80876D00: 808790FC (lit_4809)
//	80876D04: 808790FC (lit_4809)
//	80876D1C: 8035E0D4 (GXInitTexObjLOD)
//	80876D28: 8035E414 (GXLoadTexObj)
//	80876D38: 8035C764 (GXBegin)
//	80876D50: 80876DF8 (GXPosition3s16)
//	80876D5C: 80876DE8 (GXTexCoord2u16)
//	80876D78: 80876DF8 (GXPosition3s16)
//	80876D84: 80876DE8 (GXTexCoord2u16)
//	80876D9C: 80876DF8 (GXPosition3s16)
//	80876DA8: 80876DE8 (GXTexCoord2u16)
//	80876DB8: 80876DF8 (GXPosition3s16)
//	80876DC4: 80876DE8 (GXTexCoord2u16)
//	80876DC8: 80876DE4 (GXEnd)
//	80876DD0: 80362214 (_restgpr_24)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u8* False
// 	 u8 False
//  u8* False
// 	 u8 False
//  u8* False
// 	 u8 False
//  s16 False
//  s16 False
//  s16 False
//  s16 False
//  s16 False
//  s16 False
asm static void daMP_THPGXYuv2RgbDraw(u8* param_0, u8* param_1, u8* param_2, s16 param_3, s16 param_4, s16 param_5, s16 param_6, s16 param_7, s16 param_8) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_THPGXYuv2RgbDraw__FPUcPUcPUcssssss.s"
}
#pragma pop


/* 80876DE4-80876DE8 0004+00 s=1 e=0 z=0  None .text      GXEnd                                                        */
// True False
//  void False
extern "C" static void GXEnd() {
	/* empty function */
}


/* 80876DE8-80876DF8 0010+00 s=1 e=0 z=0  None .text      GXTexCoord2u16                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void GXTexCoord2u16() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/GXTexCoord2u16.s"
}
#pragma pop


/* 80876DF8-80876E0C 0014+00 s=1 e=0 z=0  None .text      GXPosition3s16                                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void GXPosition3s16() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/GXPosition3s16.s"
}
#pragma pop


/* ############################################################################################## */
/* 80879434-80879534 0100+00 s=1 e=0 z=0  None .data      daMP_VolumeTable                                             */
SECTION_DATA static u8 daMP_VolumeTable[256] = {
	0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x12, 0x00, 0x20, 0x00, 0x32, 0x00, 0x49, 0x00, 0x63,
	0x00, 0x82, 0x00, 0xA4, 0x00, 0xCB, 0x00, 0xF5, 0x01, 0x24, 0x01, 0x57, 0x01, 0x8E, 0x01, 0xC9,
	0x02, 0x08, 0x02, 0x4B, 0x02, 0x92, 0x02, 0xDD, 0x03, 0x2C, 0x03, 0x7F, 0x03, 0xD7, 0x04, 0x32,
	0x04, 0x92, 0x04, 0xF5, 0x05, 0x5D, 0x05, 0xC9, 0x06, 0x38, 0x06, 0xAC, 0x07, 0x24, 0x07, 0xA0,
	0x08, 0x20, 0x08, 0xA4, 0x09, 0x2C, 0x09, 0xB8, 0x0A, 0x48, 0x0A, 0xDD, 0x0B, 0x75, 0x0C, 0x12,
	0x0C, 0xB2, 0x0D, 0x57, 0x0D, 0xFF, 0x0E, 0xAC, 0x0F, 0x5D, 0x10, 0x12, 0x10, 0xCA, 0x11, 0x87,
	0x12, 0x48, 0x13, 0x0D, 0x13, 0xD7, 0x14, 0xA4, 0x15, 0x75, 0x16, 0x4A, 0x17, 0x24, 0x18, 0x01,
	0x18, 0xE3, 0x19, 0xC8, 0x1A, 0xB2, 0x1B, 0xA0, 0x1C, 0x91, 0x1D, 0x87, 0x1E, 0x81, 0x1F, 0x7F,
	0x20, 0x81, 0x21, 0x87, 0x22, 0x91, 0x23, 0x9F, 0x24, 0xB2, 0x25, 0xC8, 0x26, 0xE2, 0x28, 0x01,
	0x29, 0x23, 0x2A, 0x4A, 0x2B, 0x75, 0x2C, 0xA3, 0x2D, 0xD6, 0x2F, 0x0D, 0x30, 0x48, 0x31, 0x87,
	0x32, 0xCA, 0x34, 0x11, 0x35, 0x5C, 0x36, 0xAB, 0x37, 0xFF, 0x39, 0x56, 0x3A, 0xB1, 0x3C, 0x11,
	0x3D, 0x74, 0x3E, 0xDC, 0x40, 0x48, 0x41, 0xB7, 0x43, 0x2B, 0x44, 0xA3, 0x46, 0x1F, 0x47, 0x9F,
	0x49, 0x23, 0x4A, 0xAB, 0x4C, 0x37, 0x4D, 0xC7, 0x4F, 0x5C, 0x50, 0xF4, 0x52, 0x90, 0x54, 0x31,
	0x55, 0xD6, 0x57, 0x7E, 0x59, 0x2B, 0x5A, 0xDC, 0x5C, 0x90, 0x5E, 0x49, 0x60, 0x06, 0x61, 0xC7,
	0x63, 0x8C, 0x65, 0x55, 0x67, 0x22, 0x68, 0xF4, 0x6A, 0xC9, 0x6C, 0xA2, 0x6E, 0x80, 0x70, 0x61,
	0x72, 0x47, 0x74, 0x30, 0x76, 0x1E, 0x78, 0x10, 0x7A, 0x06, 0x7C, 0x00, 0x7D, 0xFE, 0x80, 0x00,
};

/* 80876E0C-80877074 0268+00 s=1 e=0 z=0  None .text      daMP_MixAudio__FPsPsUl                                       */
//	80876E2C: 803621C0 (_savegpr_22)
//	80876E30: 80879BD0 (daMP_ActivePlayer)
//	80876E34: 80879BD0 (daMP_ActivePlayer)
//	80876E74: 808761CC (daMP_PopDecodedAudioBuffer__Fl)
//	80876E90: 80003458 (memset)
//	80876EC8: 80879434 (daMP_VolumeTable)
//	80876ECC: 80879434 (daMP_VolumeTable)
//	80876ED0: 80879114 (lit_4894)
//	80876ED4: 80879114 (lit_4894)
//	80876ED8: 8087910C (lit_4814)
//	80876EDC: 8087910C (lit_4814)
//	80876FC0: 8029E180 (getOutputMode__9JASDriverFv)
//	80877028: 8087619C (daMP_PushFreeAudioBuffer__FPv)
//	80877048: 80003458 (memset)
//	80877060: 8036220C (_restgpr_22)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  s16* False
// 	 s16 False
//  s16* False
// 	 s16 False
//  u32 False
asm static void daMP_MixAudio(s16* param_0, s16* param_1, u32 param_2) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_MixAudio__FPsPsUl.s"
}
#pragma pop


/* ############################################################################################## */
/* 80944870-8094487C 000C+00 s=0 e=0 z=0  None .bss       daMP_FreeAudioBufferMessage                                  */
u8 daMP_FreeAudioBufferMessage[12];

/* 8094487C-80944888 000C+00 s=0 e=0 z=0  None .bss       daMP_DecodedAudioBufferMessage                               */
u8 daMP_DecodedAudioBufferMessage[12];

/* 80944888-809448A0 0004+14 s=3 e=0 z=0  None .bss       daMP_Initialized                                             */
static u8 daMP_Initialized[4 + 20 /* padding */];

/* 809448A0-809448E0 0040+00 s=2 e=0 z=0  None .bss       daMP_WorkBuffer                                              */
static u8 daMP_WorkBuffer[64];

/* 809448E0-80944900 0020+00 s=3 e=0 z=0  None .bss       daMP_PrepareReadyQueue                                       */
static u8 daMP_PrepareReadyQueue[32];

/* 80944900-80944920 0020+00 s=2 e=0 z=0  None .bss       daMP_UsedTextureSetQueue                                     */
static u8 daMP_UsedTextureSetQueue[32];

/* 80944920-80944924 0004+00 s=1 e=0 z=0  None .bss       daMP_PrepareReadyMessage                                     */
static u8 daMP_PrepareReadyMessage[4];

/* 80944924-80944930 000C+00 s=0 e=0 z=0  None .bss       daMP_UsedTextureSetMessage                                   */
u8 daMP_UsedTextureSetMessage[12];

/* 80944930-80944934 0004+00 s=3 e=0 z=0  None .bss       daMP_OldVIPostCallback                                       */
static u8 daMP_OldVIPostCallback[4];

/* 80944934-80944938 0004+00 s=1 e=0 z=0  None .bss       daMP_SoundBufferIndex                                        */
static u8 daMP_SoundBufferIndex[4];

/* 80944938-8094493C 0004+00 s=0 e=0 z=0  None .bss       daMP_OldAIDCallback                                          */
u8 daMP_OldAIDCallback[4];

/* 8094493C-80944940 0004+00 s=0 e=0 z=0  None .bss       daMP_LastAudioBuffer                                         */
u8 daMP_LastAudioBuffer[4];

/* 80944940-80944944 0004+00 s=0 e=0 z=0  None .bss       daMP_CurAudioBuffer                                          */
u8 daMP_CurAudioBuffer[4];

/* 80944944-80944960 0004+18 s=0 e=0 z=0  None .bss       daMP_AudioSystem                                             */
u8 daMP_AudioSystem[4 + 24 /* padding */];

/* 80944960-80945AE0 1180+00 s=1 e=0 z=0  None .bss       daMP_SoundBuffer                                             */
static u8 daMP_SoundBuffer[4480];

/* 80877074-8087712C 00B8+00 s=1 e=0 z=0  None .text      daMP_audioCallbackWithMSound__Fl                             */
//	8087708C: 80879BD0 (daMP_ActivePlayer)
//	80877090: 80879BD0 (daMP_ActivePlayer)
//	808770C0: 8033D708 (OSEnableInterrupts)
//	808770C8: 80944934 (daMP_SoundBufferIndex)
//	808770CC: 80944934 (daMP_SoundBufferIndex)
//	808770DC: 80944960 (daMP_SoundBuffer)
//	808770E0: 80944960 (daMP_SoundBuffer)
//	808770F0: 80876E0C (daMP_MixAudio__FPsPsUl)
//	808770F8: 8033D71C (OSRestoreInterrupts)
//	808770FC: 80944934 (daMP_SoundBufferIndex)
//	80877100: 80944934 (daMP_SoundBufferIndex)
//	80877108: 80944960 (daMP_SoundBuffer)
//	8087710C: 80944960 (daMP_SoundBuffer)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  s32 False
asm static void daMP_audioCallbackWithMSound(s32 param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_audioCallbackWithMSound__Fl.s"
}
#pragma pop


/* 8087712C-80877158 002C+00 s=1 e=0 z=0  None .text      daMP_audioInitWithMSound__Fv                                 */
//	80877138: 80877074 (daMP_audioCallbackWithMSound__Fl)
//	8087713C: 80877074 (daMP_audioCallbackWithMSound__Fl)
//	80877144: 8029C9DC (registerMixCallback__9JASDriverFPFl_Ps10JASMixMode)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_audioInitWithMSound() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_audioInitWithMSound__Fv.s"
}
#pragma pop


/* 80877158-80877180 0028+00 s=2 e=0 z=0  None .text      daMP_audioQuitWithMSound__Fv                                 */
//	8087716C: 8029C9DC (registerMixCallback__9JASDriverFPFl_Ps10JASMixMode)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_audioQuitWithMSound() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_audioQuitWithMSound__Fv.s"
}
#pragma pop


/* 80877180-808771B0 0030+00 s=1 e=0 z=0  None .text      daMP_PushUsedTextureSet__FPv                                 */
//	80877190: 80944900 (daMP_UsedTextureSetQueue)
//	80877194: 80944900 (daMP_UsedTextureSetQueue)
//	8087719C: 8033E9F4 (OSSendMessage)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  void* False
// 	 void False
asm static void daMP_PushUsedTextureSet(void* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_PushUsedTextureSet__FPv.s"
}
#pragma pop


/* 808771B0-808771F4 0044+00 s=2 e=0 z=0  None .text      daMP_PopUsedTextureSet__Fv                                   */
//	808771BC: 80944900 (daMP_UsedTextureSetQueue)
//	808771C0: 80944900 (daMP_UsedTextureSetQueue)
//	808771CC: 8033EABC (OSReceiveMessage)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_PopUsedTextureSet() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_PopUsedTextureSet__Fv.s"
}
#pragma pop


/* 808771F4-808772CC 00D8+00 s=1 e=0 z=0  None .text      daMP_THPPlayerInit__Fl                                       */
//	80877210: 808795A0 (lit_1109)
//	80877214: 808795A0 (lit_1109)
//	80877228: 80003458 (memset)
//	8087722C: 8033B7B4 (LCEnable)
//	8087723C: 8033E994 (OSInitMessageQueue)
//	80877240: 808757E0 (THPInit)
//	80877254: 8033D6F4 (OSDisableInterrupts)
//	80877270: 8087712C (daMP_audioInitWithMSound__Fv)
//	80877278: 8033D71C (OSRestoreInterrupts)
//	80877294: 80003458 (memset)
//	808772A0: 8033B5DC (DCStoreRange)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  s32 False
asm static void daMP_THPPlayerInit(s32 param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_THPPlayerInit__Fl.s"
}
#pragma pop


/* 808772CC-8087730C 0040+00 s=1 e=0 z=0  None .text      daMP_THPPlayerQuit__Fv                                       */
//	808772D8: 8033B7EC (LCDisable)
//	808772DC: 80877158 (daMP_audioQuitWithMSound__Fv)
//	808772E4: 80944888 (daMP_Initialized)
//	808772E8: 80944888 (daMP_Initialized)
//	808772EC: 80879BD0 (daMP_ActivePlayer)
//	808772F0: 80879BD0 (daMP_ActivePlayer)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_THPPlayerQuit() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_THPPlayerQuit__Fv.s"
}
#pragma pop


/* 8087730C-808776EC 03E0+00 s=1 e=0 z=0  None .text      daMP_THPPlayerOpen__FPCci                                    */
//	8087731C: 803621C4 (_savegpr_23)
//	80877328: 80944888 (daMP_Initialized)
//	8087732C: 80944888 (daMP_Initialized)
//	80877338: 8087911C (stringBase0)
//	8087733C: 8087911C (stringBase0)
//	80877348: 80006ABC (OSReport)
//	80877354: 80879BD0 (daMP_ActivePlayer)
//	80877358: 80879BD0 (daMP_ActivePlayer)
//	80877368: 8087911C (stringBase0)
//	8087736C: 8087911C (stringBase0)
//	80877378: 80006ABC (OSReport)
//	80877394: 80003458 (memset)
//	80877398: 80879BD0 (daMP_ActivePlayer)
//	8087739C: 80879BD0 (daMP_ActivePlayer)
//	808773B0: 80003458 (memset)
//	808773B8: 80879BD0 (daMP_ActivePlayer)
//	808773BC: 80879BD0 (daMP_ActivePlayer)
//	808773C0: 80348890 (DVDOpen)
//	808773CC: 8087911C (stringBase0)
//	808773D0: 8087911C (stringBase0)
//	808773E0: 80006ABC (OSReport)
//	808773EC: 80879BD0 (daMP_ActivePlayer)
//	808773F0: 80879BD0 (daMP_ActivePlayer)
//	808773F4: 809448A0 (daMP_WorkBuffer)
//	808773F8: 809448A0 (daMP_WorkBuffer)
//	80877408: 80348E44 (DVDReadPrio)
//	80877414: 8087911C (stringBase0)
//	80877418: 8087911C (stringBase0)
//	80877424: 80006ABC (OSReport)
//	80877428: 80879BD0 (daMP_ActivePlayer)
//	8087742C: 80879BD0 (daMP_ActivePlayer)
//	80877430: 80348958 (DVDClose)
//	8087743C: 80879BD0 (daMP_ActivePlayer)
//	80877440: 80879BD0 (daMP_ActivePlayer)
//	8087744C: 809448A0 (daMP_WorkBuffer)
//	80877450: 809448A0 (daMP_WorkBuffer)
//	80877458: 80003540 (memcpy)
//	80877460: 8087911C (stringBase0)
//	80877464: 8087911C (stringBase0)
//	8087746C: 80368994 (strcmp)
//	80877478: 8087911C (stringBase0)
//	8087747C: 8087911C (stringBase0)
//	80877488: 80006ABC (OSReport)
//	8087748C: 80879BD0 (daMP_ActivePlayer)
//	80877490: 80879BD0 (daMP_ActivePlayer)
//	80877494: 80348958 (DVDClose)
//	808774A0: 80879BD0 (daMP_ActivePlayer)
//	808774A4: 80879BD0 (daMP_ActivePlayer)
//	808774B8: 8087911C (stringBase0)
//	808774BC: 8087911C (stringBase0)
//	808774C8: 80006ABC (OSReport)
//	808774CC: 80879BD0 (daMP_ActivePlayer)
//	808774D0: 80879BD0 (daMP_ActivePlayer)
//	808774D4: 80348958 (DVDClose)
//	808774E4: 809448A0 (daMP_WorkBuffer)
//	808774E8: 809448A0 (daMP_WorkBuffer)
//	808774F8: 80348E44 (DVDReadPrio)
//	80877504: 8087911C (stringBase0)
//	80877508: 8087911C (stringBase0)
//	80877514: 80006ABC (OSReport)
//	80877518: 80879BD0 (daMP_ActivePlayer)
//	8087751C: 80879BD0 (daMP_ActivePlayer)
//	80877520: 80348958 (DVDClose)
//	8087752C: 80879BD0 (daMP_ActivePlayer)
//	80877530: 80879BD0 (daMP_ActivePlayer)
//	8087753C: 809448A0 (daMP_WorkBuffer)
//	80877540: 809448A0 (daMP_WorkBuffer)
//	80877548: 80003540 (memcpy)
//	80877550: 80879BD0 (daMP_ActivePlayer)
//	80877554: 80879BD0 (daMP_ActivePlayer)
//	80877588: 80879BD0 (daMP_ActivePlayer)
//	8087758C: 80879BD0 (daMP_ActivePlayer)
//	80877590: 809448A0 (daMP_WorkBuffer)
//	80877594: 809448A0 (daMP_WorkBuffer)
//	808775A4: 80348E44 (DVDReadPrio)
//	808775B0: 8087911C (stringBase0)
//	808775B4: 8087911C (stringBase0)
//	808775C0: 80006ABC (OSReport)
//	808775C4: 80879BD0 (daMP_ActivePlayer)
//	808775C8: 80879BD0 (daMP_ActivePlayer)
//	808775CC: 80348958 (DVDClose)
//	808775DC: 809448A0 (daMP_WorkBuffer)
//	808775E0: 809448A0 (daMP_WorkBuffer)
//	808775E8: 80003540 (memcpy)
//	808775F4: 80879BD0 (daMP_ActivePlayer)
//	808775F8: 80879BD0 (daMP_ActivePlayer)
//	808775FC: 809448A0 (daMP_WorkBuffer)
//	80877600: 809448A0 (daMP_WorkBuffer)
//	80877610: 80348E44 (DVDReadPrio)
//	8087761C: 8087911C (stringBase0)
//	80877620: 8087911C (stringBase0)
//	8087762C: 80006ABC (OSReport)
//	80877630: 80879BD0 (daMP_ActivePlayer)
//	80877634: 80879BD0 (daMP_ActivePlayer)
//	80877638: 80348958 (DVDClose)
//	80877648: 809448A0 (daMP_WorkBuffer)
//	8087764C: 809448A0 (daMP_WorkBuffer)
//	80877654: 80003540 (memcpy)
//	80877668: 8087911C (stringBase0)
//	8087766C: 8087911C (stringBase0)
//	80877678: 80006ABC (OSReport)
//	8087769C: 80879BD0 (daMP_ActivePlayer)
//	808776A0: 80879BD0 (daMP_ActivePlayer)
//	808776BC: 80879118 (lit_4983)
//	808776C0: 80879118 (lit_4983)
//	808776D8: 80362210 (_restgpr_23)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  char const* False
// 	 char const False
// 		 char False
//  int False
asm static void daMP_THPPlayerOpen(char const* param_0, int param_1) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_THPPlayerOpen__FPCci.s"
}
#pragma pop


/* 808776EC-80877740 0054+00 s=2 e=0 z=0  None .text      daMP_THPPlayerClose__Fv                                      */
//	808776F8: 80879BD0 (daMP_ActivePlayer)
//	808776FC: 80879BD0 (daMP_ActivePlayer)
//	80877720: 80348958 (DVDClose)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_THPPlayerClose() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_THPPlayerClose__Fv.s"
}
#pragma pop


/* 80877740-808777F0 00B0+00 s=1 e=0 z=0  None .text      daMP_THPPlayerCalcNeedMemory__Fv                             */
//	80877740: 80879BD0 (daMP_ActivePlayer)
//	80877744: 80879BD0 (daMP_ActivePlayer)
//	80877780: 80879BD0 (daMP_ActivePlayer)
//	80877784: 80879BD0 (daMP_ActivePlayer)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_THPPlayerCalcNeedMemory() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_THPPlayerCalcNeedMemory__Fv.s"
}
#pragma pop


/* 808777F0-80877A08 0218+00 s=1 e=0 z=0  None .text      daMP_THPPlayerSetBuffer__FPUc                                */
//	80877800: 803621D4 (_savegpr_27)
//	80877804: 80879BD0 (daMP_ActivePlayer)
//	80877808: 80879BD0 (daMP_ActivePlayer)
//	80877908: 80879BD0 (daMP_ActivePlayer)
//	8087790C: 80879BD0 (daMP_ActivePlayer)
//	80877940: 8033B580 (DCInvalidateRange)
//	80877954: 8033B580 (DCInvalidateRange)
//	80877968: 8033B580 (DCInvalidateRange)
//	80877980: 80879BD0 (daMP_ActivePlayer)
//	80877984: 80879BD0 (daMP_ActivePlayer)
//	808779D8: 80879BD0 (daMP_ActivePlayer)
//	808779DC: 80879BD0 (daMP_ActivePlayer)
//	808779F4: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u8* False
// 	 u8 False
asm static void daMP_THPPlayerSetBuffer(u8* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_THPPlayerSetBuffer__FPUc.s"
}
#pragma pop


/* 80877A08-80877ADC 00D4+00 s=1 e=0 z=0  None .text      daMP_InitAllMessageQueue__Fv                                 */
//	80877A20: 80879BD0 (daMP_ActivePlayer)
//	80877A24: 80879BD0 (daMP_ActivePlayer)
//	80877A3C: 80875918 (daMP_PushFreeReadBuffer__FPv)
//	80877A54: 80879BD0 (daMP_ActivePlayer)
//	80877A58: 80879BD0 (daMP_ActivePlayer)
//	80877A64: 80875BFC (daMP_PushFreeTextureSet__FPv)
//	80877A78: 80879BD0 (daMP_ActivePlayer)
//	80877A7C: 80879BD0 (daMP_ActivePlayer)
//	80877A94: 8087619C (daMP_PushFreeAudioBuffer__FPv)
//	80877AA8: 809448E0 (daMP_PrepareReadyQueue)
//	80877AAC: 809448E0 (daMP_PrepareReadyQueue)
//	80877AB0: 80944920 (daMP_PrepareReadyMessage)
//	80877AB4: 80944920 (daMP_PrepareReadyMessage)
//	80877ABC: 8033E994 (OSInitMessageQueue)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_InitAllMessageQueue() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_InitAllMessageQueue__Fv.s"
}
#pragma pop


/* 80877ADC-80877B48 006C+00 s=1 e=0 z=0  None .text      daMP_ProperTimingForStart__Fv                                */
//	80877AE8: 80879BD0 (daMP_ActivePlayer)
//	80877AEC: 80879BD0 (daMP_ActivePlayer)
//	80877AFC: 8034D968 (VIGetNextField)
//	80877B18: 8034D968 (VIGetNextField)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_ProperTimingForStart() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_ProperTimingForStart__Fv.s"
}
#pragma pop


/* 80877B48-80877C8C 0144+00 s=1 e=0 z=0  None .text      daMP_ProperTimingForGettingNextFrame__Fv                     */
//	80877B58: 80879BD0 (daMP_ActivePlayer)
//	80877B5C: 80879BD0 (daMP_ActivePlayer)
//	80877B6C: 8034D968 (VIGetNextField)
//	80877B88: 8034D968 (VIGetNextField)
//	80877B9C: 808790E0 (lit_4465)
//	80877BA0: 808790E0 (lit_4465)
//	80877BB8: 8034DA9C (VIGetTvFormat)
//	80877BC4: 80879BD0 (daMP_ActivePlayer)
//	80877BC8: 80879BD0 (daMP_ActivePlayer)
//	80877BF8: 80362324 (__div2i)
//	80877BFC: 80879BD0 (daMP_ActivePlayer)
//	80877C00: 80879BD0 (daMP_ActivePlayer)
//	80877C0C: 80879BD0 (daMP_ActivePlayer)
//	80877C10: 80879BD0 (daMP_ActivePlayer)
//	80877C40: 80362324 (__div2i)
//	80877C44: 80879BD0 (daMP_ActivePlayer)
//	80877C48: 80879BD0 (daMP_ActivePlayer)
//	80877C50: 80879BD0 (daMP_ActivePlayer)
//	80877C54: 80879BD0 (daMP_ActivePlayer)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_ProperTimingForGettingNextFrame() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_ProperTimingForGettingNextFrame__Fv.s"
}
#pragma pop


/* 80877C8C-80877F48 02BC+00 s=1 e=0 z=0  None .text      daMP_PlayControl__FUl                                        */
//	80877CA4: 80944930 (daMP_OldVIPostCallback)
//	80877CA8: 80944930 (daMP_OldVIPostCallback)
//	80877CC0: 80879BD0 (daMP_ActivePlayer)
//	80877CC4: 80879BD0 (daMP_ActivePlayer)
//	80877CFC: 80879BD0 (daMP_ActivePlayer)
//	80877D00: 80879BD0 (daMP_ActivePlayer)
//	80877D40: 80877ADC (daMP_ProperTimingForStart__Fv)
//	80877D4C: 80879BD0 (daMP_ActivePlayer)
//	80877D50: 80879BD0 (daMP_ActivePlayer)
//	80877D78: 80875C2C (daMP_PopDecodedTextureSet__Fl)
//	80877D80: 80879BD0 (daMP_ActivePlayer)
//	80877D84: 80879BD0 (daMP_ActivePlayer)
//	80877DB4: 80875C2C (daMP_PopDecodedTextureSet__Fl)
//	80877DE8: 80877B48 (daMP_ProperTimingForGettingNextFrame__Fv)
//	80877DF4: 80879BD0 (daMP_ActivePlayer)
//	80877DF8: 80879BD0 (daMP_ActivePlayer)
//	80877E20: 80875C2C (daMP_PopDecodedTextureSet__Fl)
//	80877E28: 80879BD0 (daMP_ActivePlayer)
//	80877E2C: 80879BD0 (daMP_ActivePlayer)
//	80877E50: 80875C2C (daMP_PopDecodedTextureSet__Fl)
//	80877E6C: 80879BD0 (daMP_ActivePlayer)
//	80877E70: 80879BD0 (daMP_ActivePlayer)
//	80877E80: 80877180 (daMP_PushUsedTextureSet__FPv)
//	80877E88: 80879BD0 (daMP_ActivePlayer)
//	80877E8C: 80879BD0 (daMP_ActivePlayer)
//	80877F00: 80879BD0 (daMP_ActivePlayer)
//	80877F04: 80879BD0 (daMP_ActivePlayer)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
asm static void daMP_PlayControl(u32 param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_PlayControl__FUl.s"
}
#pragma pop


/* 80877F48-80877F88 0040+00 s=1 e=0 z=0  None .text      daMP_WaitUntilPrepare__Fv                                    */
//	80877F54: 809448E0 (daMP_PrepareReadyQueue)
//	80877F58: 809448E0 (daMP_PrepareReadyQueue)
//	80877F64: 8033EABC (OSReceiveMessage)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_WaitUntilPrepare() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_WaitUntilPrepare__Fv.s"
}
#pragma pop


/* 80877F88-80877FB8 0030+00 s=2 e=0 z=0  None .text      daMP_PrepareReady__Fi                                        */
//	80877F98: 809448E0 (daMP_PrepareReadyQueue)
//	80877F9C: 809448E0 (daMP_PrepareReadyQueue)
//	80877FA4: 8033E9F4 (OSSendMessage)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
asm static void daMP_PrepareReady(int param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_PrepareReady__Fi.s"
}
#pragma pop


/* 80877FB8-808782A0 02E8+00 s=1 e=0 z=0  None .text      daMP_THPPlayerPrepare__Flll                                  */
//	80877FE0: 80879BD0 (daMP_ActivePlayer)
//	80877FE4: 80879BD0 (daMP_ActivePlayer)
//	80878014: 8087911C (stringBase0)
//	80878018: 8087911C (stringBase0)
//	80878024: 80006ABC (OSReport)
//	80878040: 809448A0 (daMP_WorkBuffer)
//	80878044: 809448A0 (daMP_WorkBuffer)
//	8087805C: 80348E44 (DVDReadPrio)
//	80878068: 8087911C (stringBase0)
//	8087806C: 8087911C (stringBase0)
//	80878078: 80006ABC (OSReport)
//	80878084: 80879BD0 (daMP_ActivePlayer)
//	80878088: 80879BD0 (daMP_ActivePlayer)
//	80878090: 809448A0 (daMP_WorkBuffer)
//	80878094: 809448A0 (daMP_WorkBuffer)
//	808780B4: 8087911C (stringBase0)
//	808780B8: 8087911C (stringBase0)
//	808780C4: 80006ABC (OSReport)
//	808780E4: 80879BD0 (daMP_ActivePlayer)
//	808780E8: 80879BD0 (daMP_ActivePlayer)
//	8087810C: 8087911C (stringBase0)
//	80878110: 8087911C (stringBase0)
//	8087811C: 80006ABC (OSReport)
//	80878130: 80879BD0 (daMP_ActivePlayer)
//	80878134: 80879BD0 (daMP_ActivePlayer)
//	80878164: 80348E44 (DVDReadPrio)
//	80878170: 8087911C (stringBase0)
//	80878174: 8087911C (stringBase0)
//	80878180: 80006ABC (OSReport)
//	80878194: 80879BD0 (daMP_ActivePlayer)
//	80878198: 80879BD0 (daMP_ActivePlayer)
//	808781B0: 80875FD4 (daMP_CreateVideoDecodeThread__FlPUc)
//	808781C8: 808763EC (daMP_CreateAudioDecodeThread__FlPUc)
//	808781D8: 80875FD4 (daMP_CreateVideoDecodeThread__FlPUc)
//	808781F0: 808763EC (daMP_CreateAudioDecodeThread__FlPUc)
//	808781F8: 80875B18 (daMP_CreateReadThread__Fl)
//	808781FC: 80877A08 (daMP_InitAllMessageQueue__Fv)
//	80878200: 808760EC (daMP_VideoDecodeThreadStart__Fv)
//	80878210: 808764E8 (daMP_AudioDecodeThreadStart__Fv)
//	80878220: 808759AC (daMP_ReadThreadStart__Fv)
//	80878224: 80877F48 (daMP_WaitUntilPrepare__Fv)
//	80878244: 80879BD0 (daMP_ActivePlayer)
//	80878248: 80879BD0 (daMP_ActivePlayer)
//	80878260: 80877C8C (daMP_PlayControl__FUl)
//	80878264: 80877C8C (daMP_PlayControl__FUl)
//	80878268: 8034C224 (VISetPostRetraceCallback)
//	8087826C: 80944930 (daMP_OldVIPostCallback)
//	80878270: 80944930 (daMP_OldVIPostCallback)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  s32 False
//  s32 False
//  s32 False
asm static void daMP_THPPlayerPrepare(s32 param_0, s32 param_1, s32 param_2) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_THPPlayerPrepare__Flll.s"
}
#pragma pop


/* 808782A0-808782E4 0044+00 s=1 e=0 z=0  None .text      daMP_THPPlayerDrawDone__Fv                                   */
//	808782AC: 8035C2F4 (GXDrawDone)
//	808782B0: 80944888 (daMP_Initialized)
//	808782B4: 80944888 (daMP_Initialized)
//	808782C0: 808771B0 (daMP_PopUsedTextureSet__Fv)
//	808782CC: 80875BFC (daMP_PushFreeTextureSet__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_THPPlayerDrawDone() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_THPPlayerDrawDone__Fv.s"
}
#pragma pop


/* 808782E4-80878344 0060+00 s=1 e=0 z=0  None .text      daMP_THPPlayerPlay__Fv                                       */
//	808782E4: 80879BD0 (daMP_ActivePlayer)
//	808782E8: 80879BD0 (daMP_ActivePlayer)
//	80878318: 80879BD0 (daMP_ActivePlayer)
//	8087831C: 80879BD0 (daMP_ActivePlayer)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_THPPlayerPlay() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_THPPlayerPlay__Fv.s"
}
#pragma pop


/* 80878344-808783FC 00B8+00 s=3 e=0 z=0  None .text      daMP_THPPlayerStop__Fv                                       */
//	80878350: 80879BD0 (daMP_ActivePlayer)
//	80878354: 80879BD0 (daMP_ActivePlayer)
//	8087837C: 80944930 (daMP_OldVIPostCallback)
//	80878380: 80944930 (daMP_OldVIPostCallback)
//	80878388: 8034C224 (VISetPostRetraceCallback)
//	8087838C: 80879BD0 (daMP_ActivePlayer)
//	80878390: 80879BD0 (daMP_ActivePlayer)
//	808783A0: 8034B550 (DVDCancel)
//	808783A4: 808759E4 (daMP_ReadThreadCancel__Fv)
//	808783A8: 80876124 (daMP_VideoDecodeThreadCancel__Fv)
//	808783AC: 80879BD0 (daMP_ActivePlayer)
//	808783B0: 80879BD0 (daMP_ActivePlayer)
//	808783C0: 80876520 (daMP_AudioDecodeThreadCancel__Fv)
//	808783C4: 80877158 (daMP_audioQuitWithMSound__Fv)
//	808783C8: 808771B0 (daMP_PopUsedTextureSet__Fv)
//	808783D4: 80879BD0 (daMP_ActivePlayer)
//	808783D8: 80879BD0 (daMP_ActivePlayer)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_THPPlayerStop() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_THPPlayerStop__Fv.s"
}
#pragma pop


/* 808783FC-80878438 003C+00 s=1 e=0 z=0  None .text      daMP_THPPlayerPause__Fv                                      */
//	808783FC: 80879BD0 (daMP_ActivePlayer)
//	80878400: 80879BD0 (daMP_ActivePlayer)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_THPPlayerPause() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_THPPlayerPause__Fv.s"
}
#pragma pop


/* 80878438-80878534 00FC+00 s=1 e=0 z=0  None .text      daMP_THPPlayerDrawCurrentFrame__FPC16_GXRenderModeObjUlUlUlUl */
//	80878448: 803621D4 (_savegpr_27)
//	8087845C: 80879BD0 (daMP_ActivePlayer)
//	80878460: 80879BD0 (daMP_ActivePlayer)
//	80878488: 8087667C (daMP_THPGXYuv2RgbSetup__FPC16_GXRenderModeObj)
//	808784AC: 80879BD0 (daMP_ActivePlayer)
//	808784B0: 80879BD0 (daMP_ActivePlayer)
//	808784C8: 80876BD0 (daMP_THPGXYuv2RgbDraw__FPUcPUcPUcssssss)
//	808784CC: 80876564 (daMP_THPGXRestore__Fv)
//	808784D8: 80879BD0 (daMP_ActivePlayer)
//	808784DC: 80879BD0 (daMP_ActivePlayer)
//	808784F8: 80878558 (isFade__13mDoGph_gInf_cFv)
//	80878504: 80879104 (lit_4811)
//	80878508: 80879104 (lit_4811)
//	8087850C: 80878534 (fadeIn__13mDoGph_gInf_cFf)
//	80878520: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  _GXRenderModeObj const* False
// 	 _GXRenderModeObj const False
// 		 _GXRenderModeObj False
//  u32 False
//  u32 False
//  u32 False
//  u32 False
asm static void daMP_THPPlayerDrawCurrentFrame(_GXRenderModeObj const* param_0, u32 param_1, u32 param_2, u32 param_3, u32 param_4) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_THPPlayerDrawCurrentFrame__FPC16_GXRenderModeObjUlUlUlUl.s"
}
#pragma pop


/* 80878534-80878558 0024+00 s=1 e=0 z=0  None .text      fadeIn__13mDoGph_gInf_cFf                                    */
//	80878544: 800080D0 (fadeOut__13mDoGph_gInf_cFf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 False
asm void mDoGph_gInf_c::fadeIn(f32 param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/fadeIn__13mDoGph_gInf_cFf.s"
}
#pragma pop


/* 80878558-80878568 0010+00 s=1 e=0 z=0  None .text      isFade__13mDoGph_gInf_cFv                                    */
//	80878558: 80450BE6 (struct_80450BE4)
//	8087855C: 80450BE6 (struct_80450BE4)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void mDoGph_gInf_c::isFade() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/isFade__13mDoGph_gInf_cFv.s"
}
#pragma pop


/* 80878568-808785B0 0048+00 s=1 e=0 z=0  None .text      daMP_THPPlayerGetVideoInfo__FP12THPVideoInfo                 */
//	80878574: 80879BD0 (daMP_ActivePlayer)
//	80878578: 80879BD0 (daMP_ActivePlayer)
//	80878590: 80003540 (memcpy)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  THPVideoInfo* False
// 	 THPVideoInfo False
asm static void daMP_THPPlayerGetVideoInfo(THPVideoInfo* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_THPPlayerGetVideoInfo__FP12THPVideoInfo.s"
}
#pragma pop


/* 808785B0-808785F8 0048+00 s=1 e=0 z=0  None .text      daMP_THPPlayerGetAudioInfo__FP12THPAudioInfo                 */
//	808785BC: 80879BD0 (daMP_ActivePlayer)
//	808785C0: 80879BD0 (daMP_ActivePlayer)
//	808785D8: 80003540 (memcpy)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  THPAudioInfo* False
// 	 THPAudioInfo False
asm static void daMP_THPPlayerGetAudioInfo(THPAudioInfo* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_THPPlayerGetAudioInfo__FP12THPAudioInfo.s"
}
#pragma pop


/* 808785F8-8087861C 0024+00 s=2 e=0 z=0  None .text      daMP_THPPlayerGetTotalFrame__Fv                              */
//	808785F8: 80879BD0 (daMP_ActivePlayer)
//	808785FC: 80879BD0 (daMP_ActivePlayer)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_THPPlayerGetTotalFrame() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_THPPlayerGetTotalFrame__Fv.s"
}
#pragma pop


/* 8087861C-8087862C 0010+00 s=2 e=0 z=0  None .text      daMP_THPPlayerGetState__Fv                                   */
//	8087861C: 80879BD0 (daMP_ActivePlayer)
//	80878620: 80879BD0 (daMP_ActivePlayer)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_THPPlayerGetState() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_THPPlayerGetState__Fv.s"
}
#pragma pop


/* 8087862C-80878758 012C+00 s=1 e=0 z=0  None .text      daMP_THPPlayerSetVolume__Fll                                 */
//	8087864C: 80879BD0 (daMP_ActivePlayer)
//	80878650: 80879BD0 (daMP_ActivePlayer)
//	8087866C: 8034FF34 (AIGetDSPSampleRate)
//	808786B8: 8033D6F4 (OSDisableInterrupts)
//	808786BC: 8087910C (lit_4814)
//	808786C0: 8087910C (lit_4814)
//	808786DC: 80879BD0 (daMP_ActivePlayer)
//	808786E0: 80879BD0 (daMP_ActivePlayer)
//	8087872C: 8033D71C (OSRestoreInterrupts)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  s32 False
//  s32 False
asm static void daMP_THPPlayerSetVolume(s32 param_0, s32 param_1) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_THPPlayerSetVolume__Fll.s"
}
#pragma pop


/* 80878758-808788BC 0164+00 s=1 e=0 z=0  None .text      daMP_ActivePlayer_Init__FPCc                                 */
//	80878770: 808795A0 (lit_1109)
//	80878774: 808795A0 (lit_1109)
//	80878780: 808771F4 (daMP_THPPlayerInit__Fl)
//	8087878C: 8087730C (daMP_THPPlayerOpen__FPCci)
//	80878798: 8087911C (stringBase0)
//	8087879C: 8087911C (stringBase0)
//	808787A8: 80006ABC (OSReport)
//	808787B8: 80878568 (daMP_THPPlayerGetVideoInfo__FP12THPVideoInfo)
//	808787C0: 808785B0 (daMP_THPPlayerGetAudioInfo__FP12THPAudioInfo)
//	808787C4: 808788C4 (getManager__8JUTVideoFv)
//	808787C8: 808788BC (getRenderMode__8JUTVideoCFv)
//	808787D0: 808788C4 (getManager__8JUTVideoFv)
//	808787D4: 808788BC (getRenderMode__8JUTVideoCFv)
//	80878800: 80877740 (daMP_THPPlayerCalcNeedMemory__Fv)
//	80878808: 8000EDEC (mDoExt_getArchiveHeap__Fv)
//	80878814: 802CE4D4 (alloc__7JKRHeapFUli)
//	80878824: 8087911C (stringBase0)
//	80878828: 8087911C (stringBase0)
//	80878834: 80006ABC (OSReport)
//	80878840: 808777F0 (daMP_THPPlayerSetBuffer__FPUc)
//	80878854: 80342714 (OSGetTick)
//	80878878: 80877FB8 (daMP_THPPlayerPrepare__Flll)
//	80878884: 8087911C (stringBase0)
//	80878888: 8087911C (stringBase0)
//	80878894: 80006ABC (OSReport)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  char const* False
// 	 char const False
// 		 char False
asm static void daMP_ActivePlayer_Init(char const* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_ActivePlayer_Init__FPCc.s"
}
#pragma pop


/* 808788BC-808788C4 0008+00 s=2 e=0 z=0  None .text      getRenderMode__8JUTVideoCFv                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void JUTVideo::getRenderMode() const {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/getRenderMode__8JUTVideoCFv.s"
}
#pragma pop


/* 808788C4-808788D4 0010+00 s=2 e=0 z=0  None .text      getManager__8JUTVideoFv                                      */
//	808788C4: 80451538 (sManager__8JUTVideo)
//	808788C8: 80451538 (sManager__8JUTVideo)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void JUTVideo::getManager() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/getManager__8JUTVideoFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80945AE0-80945AEC 000C+00 s=1 e=0 z=0  None .bss       daMP_videoInfo                                               */
static u8 daMP_videoInfo[12];

/* 80945AEC-80945AFC 0010+00 s=0 e=0 z=0  None .bss       daMP_audioInfo                                               */
u8 daMP_audioInfo[16];

/* 80945AFC-80945B00 0004+00 s=1 e=0 z=0  None .bss       daMP_DrawPosX                                                */
static u8 daMP_DrawPosX[4];

/* 80945B00-80945B04 0004+00 s=1 e=0 z=0  None .bss       daMP_DrawPosY                                                */
static u8 daMP_DrawPosY[4];

/* 80945B04-80945B08 0004+00 s=2 e=0 z=0  None .bss       daMP_buffer                                                  */
static u8 daMP_buffer[4];

/* 808788D4-80878914 0040+00 s=1 e=0 z=0  None .text      daMP_ActivePlayer_Finish__Fv                                 */
//	808788E0: 80878344 (daMP_THPPlayerStop__Fv)
//	808788E4: 808776EC (daMP_THPPlayerClose__Fv)
//	808788E8: 808772CC (daMP_THPPlayerQuit__Fv)
//	808788EC: 80945B04 (daMP_buffer)
//	808788F0: 80945B04 (daMP_buffer)
//	80878900: 80878914 (JKRFree__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_ActivePlayer_Finish() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_ActivePlayer_Finish__Fv.s"
}
#pragma pop


/* 80878914-80878938 0024+00 s=2 e=0 z=0  None .text      JKRFree__FPv                                                 */
//	80878924: 802CE500 (free__7JKRHeapFPvP7JKRHeap)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  void* False
// 	 void False
asm static void JKRFree(void* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/JKRFree__FPv.s"
}
#pragma pop


/* 80878938-80878994 005C+00 s=1 e=0 z=0  None .text      daMP_ActivePlayer_Main__Fv                                   */
//	80878944: 8087861C (daMP_THPPlayerGetState__Fv)
//	80878950: 80878344 (daMP_THPPlayerStop__Fv)
//	80878954: 808776EC (daMP_THPPlayerClose__Fv)
//	80878958: 80945B04 (daMP_buffer)
//	8087895C: 80945B04 (daMP_buffer)
//	8087896C: 80878914 (JKRFree__FPv)
//	80878970: 8087911C (stringBase0)
//	80878974: 8087911C (stringBase0)
//	80878980: 80006ABC (OSReport)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_ActivePlayer_Main() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_ActivePlayer_Main__Fv.s"
}
#pragma pop


/* 80878994-80878A34 00A0+00 s=1 e=0 z=0  None .text      daMP_ActivePlayer_Draw__Fv                                   */
//	808789A4: 808788C4 (getManager__8JUTVideoFv)
//	808789A8: 808788BC (getRenderMode__8JUTVideoCFv)
//	808789AC: 80945AFC (daMP_DrawPosX)
//	808789B0: 80945AFC (daMP_DrawPosX)
//	808789B8: 80945B00 (daMP_DrawPosY)
//	808789BC: 80945B00 (daMP_DrawPosY)
//	808789C4: 80945AE0 (daMP_videoInfo)
//	808789C8: 80945AE0 (daMP_videoInfo)
//	808789D4: 80878438 (daMP_THPPlayerDrawCurrentFrame__FPC16_GXRenderModeObjUlUlUlUl)
//	808789DC: 808782A0 (daMP_THPPlayerDrawDone__Fv)
//	808789E0: 8001E558 (fopOvlpM_IsPeek__Fv)
//	808789F8: 802632AC (cAPICPad_ANY_BUTTON__FUl)
//	80878A04: 80031A78 (daMP_c_Get_MovieRestFrame__6daMP_cFv)
//	80878A10: 80878A34 (dComIfGp_event_reset__Fv)
//	80878A14: 808790FC (lit_4809)
//	80878A18: 808790FC (lit_4809)
//	80878A1C: 80031AA4 (daMP_c_Set_PercentMovieVolume__6daMP_cFf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_ActivePlayer_Draw() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_ActivePlayer_Draw__Fv.s"
}
#pragma pop


/* 80878A34-80878A64 0030+00 s=1 e=0 z=0  None .text      dComIfGp_event_reset__Fv                                     */
//	80878A40: 804061C0 (g_dComIfG_gameInfo)
//	80878A44: 804061C0 (g_dComIfG_gameInfo)
//	80878A4C: 80878A64 (getEvent__14dComIfG_play_cFv)
//	80878A50: 80042468 (reset__14dEvt_control_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void dComIfGp_event_reset() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/dComIfGp_event_reset__Fv.s"
}
#pragma pop


/* 80878A64-80878A6C 0008+00 s=1 e=0 z=0  None .text      getEvent__14dComIfG_play_cFv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dComIfG_play_c::getEvent() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/getEvent__14dComIfG_play_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80945B08-80945B0C 0004+00 s=5 e=0 z=0  None .bss       daMP_Fail_alloc                                              */
static u8 daMP_Fail_alloc[4];

/* 80878A6C-80878B38 00CC+00 s=1 e=0 z=0  None .text      daMP_Get_MovieRestFrame__Fv                                  */
//	80878A7C: 80945B08 (daMP_Fail_alloc)
//	80878A80: 80945B08 (daMP_Fail_alloc)
//	80878A8C: 8087861C (daMP_THPPlayerGetState__Fv)
//	80878AA0: 80879BD0 (daMP_ActivePlayer)
//	80878AA4: 80879BD0 (daMP_ActivePlayer)
//	80878AE8: 808785F8 (daMP_THPPlayerGetTotalFrame__Fv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm static void daMP_Get_MovieRestFrame() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_Get_MovieRestFrame__Fv.s"
}
#pragma pop


/* 80878B38-80878BB8 0080+00 s=1 e=0 z=0  None .text      daMP_Set_PercentMovieVolume__Ff                              */
//	80878B44: 80879034 (__THPJpegNaturalOrder)
//	80878B48: 80879034 (__THPJpegNaturalOrder)
//	80878B4C: 80945B08 (daMP_Fail_alloc)
//	80878B50: 80945B08 (daMP_Fail_alloc)
//	80878BA4: 8087862C (daMP_THPPlayerSetVolume__Fll)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 False
asm static void daMP_Set_PercentMovieVolume(f32 param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_Set_PercentMovieVolume__Ff.s"
}
#pragma pop


/* 80878BB8-80878BDC 0024+00 s=1 e=0 z=0  None .text      daMP_c_Get_arg_demoNo__6daMP_cFv                             */
//	80878BC4: 80878BDC (fopAcM_GetParam__FPCv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daMP_c::daMP_c_Get_arg_demoNo() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_c_Get_arg_demoNo__6daMP_cFv.s"
}
#pragma pop


/* 80878BDC-80878BFC 0020+00 s=2 e=0 z=0  None .text      fopAcM_GetParam__FPCv                                        */
//	80878BE8: 80878BFC (fpcM_GetParam__FPCv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  void const* False
// 	 void const False
// 		 void False
asm static void fopAcM_GetParam(void const* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/fopAcM_GetParam__FPCv.s"
}
#pragma pop


/* 80878BFC-80878C04 0008+00 s=1 e=0 z=0  None .text      fpcM_GetParam__FPCv                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  void const* False
// 	 void const False
// 		 void False
asm static void fpcM_GetParam(void const* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/fpcM_GetParam__FPCv.s"
}
#pragma pop


/* 80878C04-80878C28 0024+00 s=1 e=0 z=0  None .text      daMP_c_Get_arg_movieNo__6daMP_cFv                            */
//	80878C10: 80878BDC (fopAcM_GetParam__FPCv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daMP_c::daMP_c_Get_arg_movieNo() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_c_Get_arg_movieNo__6daMP_cFv.s"
}
#pragma pop


/* 80878C28-80878D10 00E8+00 s=1 e=0 z=0  None .text      daMP_c_Init__6daMP_cFv                                       */
//	80878C44: 80878D10 (setFrameRate__13mDoGph_gInf_cFUs)
//	80878C4C: 80945B08 (daMP_Fail_alloc)
//	80878C50: 80945B08 (daMP_Fail_alloc)
//	80878C58: 80878BB8 (daMP_c_Get_arg_demoNo__6daMP_cFv)
//	80878C64: 80878C04 (daMP_c_Get_arg_movieNo__6daMP_cFv)
//	80878C70: 8087911C (stringBase0)
//	80878C74: 8087911C (stringBase0)
//	80878C84: 803664DC (sprintf)
//	80878C8C: 80878758 (daMP_ActivePlayer_Init__FPCc)
//	80878C9C: 80945B08 (daMP_Fail_alloc)
//	80878CA0: 80945B08 (daMP_Fail_alloc)
//	80878CA4: 80878A6C (daMP_Get_MovieRestFrame__Fv)
//	80878CA8: 80878A6C (daMP_Get_MovieRestFrame__Fv)
//	80878CB0: 80878B38 (daMP_Set_PercentMovieVolume__Ff)
//	80878CB4: 80878B38 (daMP_Set_PercentMovieVolume__Ff)
//	80878CBC: 808785F8 (daMP_THPPlayerGetTotalFrame__Fv)
//	80878CC0: 808785F8 (daMP_THPPlayerGetTotalFrame__Fv)
//	80878CC8: 808782E4 (daMP_THPPlayerPlay__Fv)
//	80878CCC: 808782E4 (daMP_THPPlayerPlay__Fv)
//	80878CD4: 80878344 (daMP_THPPlayerStop__Fv)
//	80878CD8: 80878344 (daMP_THPPlayerStop__Fv)
//	80878CE0: 808783FC (daMP_THPPlayerPause__Fv)
//	80878CE4: 808783FC (daMP_THPPlayerPause__Fv)
//	80878CEC: 80450DB8 (m_myObj__6daMP_c)
//	80878CF0: 80450DB8 (m_myObj__6daMP_c)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daMP_c::daMP_c_Init() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_c_Init__6daMP_cFv.s"
}
#pragma pop


/* 80878D10-80878D44 0034+00 s=1 e=0 z=0  None .text      setFrameRate__13mDoGph_gInf_cFUs                             */
//	80878D24: 80878D54 (getManager__10JFWDisplayFv)
//	80878D2C: 80878D44 (setFrameRate__10JFWDisplayFUs)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u16 False
asm void mDoGph_gInf_c::setFrameRate(u16 param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/setFrameRate__13mDoGph_gInf_cFUs.s"
}
#pragma pop


/* 80878D44-80878D54 0010+00 s=1 e=0 z=0  None .text      setFrameRate__10JFWDisplayFUs                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u16 False
asm void JFWDisplay::setFrameRate(u16 param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/setFrameRate__10JFWDisplayFUs.s"
}
#pragma pop


/* 80878D54-80878D64 0010+00 s=1 e=0 z=0  None .text      getManager__10JFWDisplayFv                                   */
//	80878D54: 804511C0 (sManager__10JFWDisplay)
//	80878D58: 804511C0 (sManager__10JFWDisplay)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void JFWDisplay::getManager() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/getManager__10JFWDisplayFv.s"
}
#pragma pop


/* 80878D64-80878D94 0030+00 s=1 e=0 z=0  None .text      daMP_c_Finish__6daMP_cFv                                     */
//	80878D70: 808788D4 (daMP_ActivePlayer_Finish__Fv)
//	80878D78: 80450DB8 (m_myObj__6daMP_c)
//	80878D7C: 80450DB8 (m_myObj__6daMP_c)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daMP_c::daMP_c_Finish() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_c_Finish__6daMP_cFv.s"
}
#pragma pop


/* 80878D94-80878DB8 0024+00 s=1 e=0 z=0  None .text      daMP_c_Main__6daMP_cFv                                       */
//	80878DA0: 80878938 (daMP_ActivePlayer_Main__Fv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daMP_c::daMP_c_Main() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_c_Main__6daMP_cFv.s"
}
#pragma pop


/* 80878DB8-80878DD8 0020+00 s=1 e=0 z=0  None .text      draw__16daMP_Dlst_base_cFv                                   */
//	80878DC4: 80878994 (daMP_ActivePlayer_Draw__Fv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daMP_Dlst_base_c::draw() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/draw__16daMP_Dlst_base_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80945B0C-80945B10 0004+00 s=2 e=0 z=0  None .bss       daMP_c_Dlst_base                                             */
static u8 daMP_c_Dlst_base[4];

/* 80878DD8-80878E04 002C+00 s=1 e=0 z=0  None .text      daMP_c_Draw__6daMP_cFv                                       */
//	80878DE4: 80945B0C (daMP_c_Dlst_base)
//	80878DE8: 80945B0C (daMP_c_Dlst_base)
//	80878DEC: 80878E04 (dComIfGd_set2DOpa__FP12dDlst_base_c)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daMP_c::daMP_c_Draw() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_c_Draw__6daMP_cFv.s"
}
#pragma pop


/* 80878E04-80878E34 0030+00 s=1 e=0 z=0  None .text      dComIfGd_set2DOpa__FP12dDlst_base_c                          */
//	80878E14: 804061C0 (g_dComIfG_gameInfo)
//	80878E18: 804061C0 (g_dComIfG_gameInfo)
//	80878E20: 80878E34 (set2DOpa__12dDlst_list_cFP12dDlst_base_c)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  dDlst_base_c* False
// 	 dDlst_base_c False
asm static void dComIfGd_set2DOpa(dDlst_base_c* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/dComIfGd_set2DOpa__FP12dDlst_base_c.s"
}
#pragma pop


/* 80878E34-80878E60 002C+00 s=1 e=0 z=0  None .text      set2DOpa__12dDlst_list_cFP12dDlst_base_c                     */
//	80878E4C: 80056794 (set__12dDlst_list_cFRPP12dDlst_base_cRPP12dDlst_base_cP12dDlst_base_c)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  dDlst_base_c* False
// 	 dDlst_base_c False
asm void dDlst_list_c::set2DOpa(dDlst_base_c* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/set2DOpa__12dDlst_list_cFP12dDlst_base_c.s"
}
#pragma pop


/* 80878E60-80878EC4 0064+00 s=1 e=0 z=0  None .text      daMP_c_Callback_Init__6daMP_cFP10fopAc_ac_c                  */
//	80878E78: 80878F0C (fopAcM_CheckCondition__FP10fopAc_ac_cUl)
//	80878E8C: 80878F04 (__nw__FUlPv)
//	80878E98: 80878ED4 (__ct__6daMP_cFv)
//	80878EA4: 80878EC4 (fopAcM_OnCondition__FP10fopAc_ac_cUl)
//	80878EAC: 80878C28 (daMP_c_Init__6daMP_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
asm void daMP_c::daMP_c_Callback_Init(fopAc_ac_c* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_c_Callback_Init__6daMP_cFP10fopAc_ac_c.s"
}
#pragma pop


/* 80878EC4-80878ED4 0010+00 s=1 e=0 z=0  None .text      fopAcM_OnCondition__FP10fopAc_ac_cUl                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  u32 False
asm static void fopAcM_OnCondition(fopAc_ac_c* param_0, u32 param_1) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/fopAcM_OnCondition__FP10fopAc_ac_cUl.s"
}
#pragma pop


/* 80878ED4-80878F04 0030+00 s=1 e=0 z=0  None .text      __ct__6daMP_cFv                                              */
//	80878EE8: 80018B64 (__ct__10fopAc_ac_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm daMP_c::daMP_c() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__ct__6daMP_cFv.s"
}
#pragma pop


/* 80878F04-80878F0C 0008+00 s=1 e=0 z=0  None .text      __nw__FUlPv                                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  void* False
// 	 void False
//  u32 False
//  void* False
// 	 void False
asm static void* operator new(u32 param_0, void* param_1) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__nw__FUlPv.s"
}
#pragma pop


/* 80878F0C-80878F18 000C+00 s=1 e=0 z=0  None .text      fopAcM_CheckCondition__FP10fopAc_ac_cUl                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  u32 False
asm static void fopAcM_CheckCondition(fopAc_ac_c* param_0, u32 param_1) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/fopAcM_CheckCondition__FP10fopAc_ac_cUl.s"
}
#pragma pop


/* 80878F18-80878F38 0020+00 s=1 e=0 z=0  None .text      daMP_c_Callback_Finish__6daMP_cFP6daMP_c                     */
//	80878F24: 80878D64 (daMP_c_Finish__6daMP_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daMP_c* False
// 	 daMP_c False
asm void daMP_c::daMP_c_Callback_Finish(daMP_c* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_c_Callback_Finish__6daMP_cFP6daMP_c.s"
}
#pragma pop


/* 80878F38-80878F70 0038+00 s=1 e=0 z=0  None .text      daMP_c_Callback_Main__6daMP_cFP6daMP_c                       */
//	80878F44: 80945B08 (daMP_Fail_alloc)
//	80878F48: 80945B08 (daMP_Fail_alloc)
//	80878F5C: 80878D94 (daMP_c_Main__6daMP_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daMP_c* False
// 	 daMP_c False
asm void daMP_c::daMP_c_Callback_Main(daMP_c* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_c_Callback_Main__6daMP_cFP6daMP_c.s"
}
#pragma pop


/* 80878F70-80878FA8 0038+00 s=1 e=0 z=0  None .text      daMP_c_Callback_Draw__6daMP_cFP6daMP_c                       */
//	80878F7C: 80945B08 (daMP_Fail_alloc)
//	80878F80: 80945B08 (daMP_Fail_alloc)
//	80878F94: 80878DD8 (daMP_c_Draw__6daMP_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daMP_c* False
// 	 daMP_c False
asm void daMP_c::daMP_c_Callback_Draw(daMP_c* param_0) {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/daMP_c_Callback_Draw__6daMP_cFP6daMP_c.s"
}
#pragma pop


/* 80878FA8-80878FB0 0008+00 s=1 e=0 z=0  None .text      daMP_Callback_Dummy__FP6daMP_c                               */
// True False
//  bool False
//  daMP_c* False
// 	 daMP_c False
static bool daMP_Callback_Dummy(daMP_c* param_0) {
	return true;
}


/* 80878FB0-80878FD8 0028+00 s=0 e=1 z=0  None .text      __sinit_d_a_movie_player_cpp                                 */
//	80878FBC: 80945B0C (daMP_c_Dlst_base)
//	80878FC0: 80945B0C (daMP_c_Dlst_base)
//	80878FC4: 80878FD8 (__ct__16daMP_Dlst_base_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void __sinit_d_a_movie_player_cpp() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__sinit_d_a_movie_player_cpp.s"
}
#pragma pop

#pragma push
#pragma force_active on
#pragma section ".ctors$15"
__declspec(section ".ctors$15") void* const _ctors_80878FB0 = (void*)__sinit_d_a_movie_player_cpp;
#pragma pop


/* ############################################################################################## */
/* 80879534-80879554 0020+00 s=1 e=0 z=0  None .data      daMP_METHODS                                                 */
SECTION_DATA static void* daMP_METHODS[8] = {
	(void*)daMP_c_Callback_Init__6daMP_cFP10fopAc_ac_c,
	(void*)daMP_c_Callback_Finish__6daMP_cFP6daMP_c,
	(void*)daMP_c_Callback_Main__6daMP_cFP6daMP_c,
	(void*)daMP_Callback_Dummy__FP6daMP_c,
	(void*)daMP_c_Callback_Draw__6daMP_cFP6daMP_c,
	(void*)NULL,
	(void*)NULL,
	(void*)NULL,
};

/* 80879554-80879584 0030+00 s=0 e=0 z=1  None .data      g_profile_MOVIE_PLAYER                                       */
SECTION_DATA void* g_profile_MOVIE_PLAYER[12] = {
	(void*)0xFFFFFFFD,
	(void*)0x0007FFFD,
	(void*)0x02E00000,
	(void*)&g_fpcLf_Method,
	(void*)0x00000580,
	(void*)NULL,
	(void*)NULL,
	(void*)&g_fopAc_Method,
	(void*)0x00090000,
	(void*)&daMP_METHODS,
	(void*)0x0006C000,
	(void*)0x000E0000,
};

/* 80879584-80879590 000C+00 s=1 e=0 z=0  None .data      __vt__16daMP_Dlst_base_c                                     */
SECTION_DATA void* __vt__16daMP_Dlst_base_c[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)draw__16daMP_Dlst_base_cFv,
};

/* 80878FD8-80879014 003C+00 s=1 e=0 z=0  None .text      __ct__16daMP_Dlst_base_cFv                                   */
//	80878FEC: 80879014 (__ct__12dDlst_base_cFv)
//	80878FF0: 80879584 (__vt__16daMP_Dlst_base_c)
//	80878FF4: 80879584 (__vt__16daMP_Dlst_base_c)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm daMP_Dlst_base_c::daMP_Dlst_base_c() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__ct__16daMP_Dlst_base_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80879590-8087959C 000C+00 s=1 e=0 z=0  None .data      __vt__12dDlst_base_c                                         */
SECTION_DATA void* __vt__12dDlst_base_c[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)draw__12dDlst_base_cFv,
};

/* 80879014-80879024 0010+00 s=1 e=0 z=0  None .text      __ct__12dDlst_base_cFv                                       */
//	80879014: 80879590 (__vt__12dDlst_base_c)
//	80879018: 80879590 (__vt__12dDlst_base_c)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dDlst_base_c::dDlst_base_c() {
	nofralloc
#include "asm/rel/d/a/d_a_movie_player/d_a_movie_player/__ct__12dDlst_base_cFv.s"
}
#pragma pop


/* 80879024-80879028 0004+00 s=1 e=0 z=0  None .text      draw__12dDlst_base_cFv                                       */
// True False
//  void False
void dDlst_base_c::draw() {
	/* empty function */
}


/* ############################################################################################## */
/* 80945B10-80945B14 0004+00 s=0 e=0 z=0  None .bss       sInstance__40JASGlobalInstance<19JASDefaultBankTable>        */
u8 data_80945B10[4];

/* 80945B14-80945B18 0004+00 s=0 e=0 z=0  None .bss       sInstance__35JASGlobalInstance<14JASAudioThread>             */
u8 data_80945B14[4];

/* 80945B18-80945B1C 0004+00 s=0 e=0 z=0  None .bss       sInstance__27JASGlobalInstance<7Z2SeMgr>                     */
u8 data_80945B18[4];

/* 80945B1C-80945B20 0004+00 s=0 e=0 z=0  None .bss       sInstance__28JASGlobalInstance<8Z2SeqMgr>                    */
u8 data_80945B1C[4];

/* 80945B20-80945B24 0004+00 s=0 e=0 z=0  None .bss       sInstance__31JASGlobalInstance<10Z2SceneMgr>                 */
u8 data_80945B20[4];

/* 80945B24-80945B28 0004+00 s=0 e=0 z=0  None .bss       sInstance__32JASGlobalInstance<11Z2StatusMgr>                */
u8 data_80945B24[4];

/* 80945B28-80945B2C 0004+00 s=0 e=0 z=0  None .bss       sInstance__31JASGlobalInstance<10Z2DebugSys>                 */
u8 data_80945B28[4];

/* 80945B2C-80945B30 0004+00 s=0 e=0 z=0  None .bss       sInstance__36JASGlobalInstance<15JAISoundStarter>            */
u8 data_80945B2C[4];

/* 80945B30-80945B34 0004+00 s=0 e=0 z=0  None .bss       sInstance__35JASGlobalInstance<14Z2SoundStarter>             */
u8 data_80945B30[4];

/* 80945B34-80945B38 0004+00 s=0 e=0 z=0  None .bss       sInstance__33JASGlobalInstance<12Z2SpeechMgr2>               */
u8 data_80945B34[4];

/* 80945B38-80945B3C 0004+00 s=0 e=0 z=0  None .bss       sInstance__28JASGlobalInstance<8JAISeMgr>                    */
u8 data_80945B38[4];

/* 80945B3C-80945B40 0004+00 s=0 e=0 z=0  None .bss       sInstance__29JASGlobalInstance<9JAISeqMgr>                   */
u8 data_80945B3C[4];

/* 80945B40-80945B44 0004+00 s=0 e=0 z=0  None .bss       sInstance__33JASGlobalInstance<12JAIStreamMgr>               */
u8 data_80945B40[4];

/* 80945B44-80945B48 0004+00 s=0 e=0 z=0  None .bss       sInstance__31JASGlobalInstance<10Z2SoundMgr>                 */
u8 data_80945B44[4];

/* 80945B48-80945B4C 0004+00 s=0 e=0 z=0  None .bss       sInstance__33JASGlobalInstance<12JAISoundInfo>               */
u8 data_80945B48[4];

/* 80945B4C-80945B50 0004+00 s=0 e=0 z=0  None .bss       sInstance__34JASGlobalInstance<13JAUSoundTable>              */
u8 data_80945B4C[4];

/* 80945B50-80945B54 0004+00 s=0 e=0 z=0  None .bss       sInstance__38JASGlobalInstance<17JAUSoundNameTable>          */
u8 data_80945B50[4];

/* 80945B54-80945B58 0004+00 s=0 e=0 z=0  None .bss       sInstance__33JASGlobalInstance<12JAUSoundInfo>               */
u8 data_80945B54[4];

/* 80945B58-80945B5C 0004+00 s=0 e=0 z=0  None .bss       sInstance__32JASGlobalInstance<11Z2SoundInfo>                */
u8 data_80945B58[4];

/* 80945B5C-80945B60 0004+00 s=0 e=0 z=0  None .bss       sInstance__34JASGlobalInstance<13Z2SoundObjMgr>              */
u8 data_80945B5C[4];

/* 80945B60-80945B64 0004+00 s=0 e=0 z=0  None .bss       sInstance__31JASGlobalInstance<10Z2Audience>                 */
u8 data_80945B60[4];

/* 80945B64-80945B68 0004+00 s=0 e=0 z=0  None .bss       sInstance__32JASGlobalInstance<11Z2FxLineMgr>                */
u8 data_80945B64[4];

/* 80945B68-80945B6C 0004+00 s=0 e=0 z=0  None .bss       sInstance__31JASGlobalInstance<10Z2EnvSeMgr>                 */
u8 data_80945B68[4];

/* 80945B6C-80945B70 0004+00 s=0 e=0 z=0  None .bss       sInstance__32JASGlobalInstance<11Z2SpeechMgr>                */
u8 data_80945B6C[4];

/* 80945B70-80945B74 0004+00 s=0 e=0 z=0  None .bss       sInstance__34JASGlobalInstance<13Z2WolfHowlMgr>              */
u8 data_80945B70[4];

