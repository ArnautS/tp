// 
// Generated By: dol2asm
// Translation Unit: d_a_b_zant_magic
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "rel/d/a/b/d_a_b_zant_magic/d_a_b_zant_magic.h"

// 
// Types:
// 

struct cXyz {
	/* 80266B84 */ // False False
//  f32 False
void operator*(f32) const;
};

struct mDoMtx_stack_c {
	/* 8000CD64 */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
void transS(cXyz const&);
};

struct fopAc_ac_c {
	/* 80018B64 */ // False False
fopAc_ac_c();
};

struct daPy_py_c {
	/* 8015F398 */ // False False
void checkMasterSwordEquip();
};

struct daB_ZANT_c {
	/* 80640654 */ // False False
void getMagicSpeed();
	/* 80640664 */ // False False
void getMagicWaterSpeed();
};

struct daB_ZANTM_c {
	/* 8064F778 */ // True False
void draw();
	/* 8064F7D4 */ // True False
void setMagicEffect();
	/* 8064F938 */ // True False
void setMagicHitEffect();
	/* 8064FA50 */ // True False
void executeSmall();
	/* 8064FD6C */ // True False
void cc_set();
	/* 8064FE6C */ // True False
void execute();
	/* 8064FF2C */ // True False
//  bool False
bool _delete();
	/* 8064FF54 */ // True False
void create();
	/* 806500A8 */ // True False
daB_ZANTM_c();
};

struct dKy_tevstr_c {
};

struct dScnKy_env_light_c {
	/* 801A37C4 */ // False False
//  int False
//  cXyz* False
// 	 cXyz False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
void settingTevStruct(int, cXyz*, dKy_tevstr_c*);
};

struct dPa_levelEcallBack {
};

struct csXyz {
};

struct _GXColor {
};

struct dPa_control_c {
	struct level_c {
		/* 8004B918 */ // False False
//  u32 False
void getEmitter(u32);
	};

	/* 8004CA90 */ // False False
//  u8 False
//  u16 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u8 False
//  dPa_levelEcallBack* False
// 	 dPa_levelEcallBack False
//  s8 False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
void set(u8, u16, cXyz const*, dKy_tevstr_c const*, csXyz const*, cXyz const*, u8, dPa_levelEcallBack*, s8, _GXColor const*, _GXColor const*, cXyz const*, f32);
	/* 8004D4CC */ // False False
//  u32 False
//  u8 False
//  u16 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u8 False
//  dPa_levelEcallBack* False
// 	 dPa_levelEcallBack False
//  s8 False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
void set(u32, u8, u16, cXyz const*, dKy_tevstr_c const*, csXyz const*, cXyz const*, u8, dPa_levelEcallBack*, s8, _GXColor const*, _GXColor const*, cXyz const*, f32);
};

struct dCcD_Stts {
	/* 80083860 */ // False False
//  int False
//  int False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
void Init(int, int, fopAc_ac_c*);
};

struct dCcD_SrcSph {
};

struct dCcD_SrcCps {
};

struct dCcD_Sph {
	/* 80084A34 */ // False False
//  dCcD_SrcSph const& False
// 	 dCcD_SrcSph const False
// 		 dCcD_SrcSph False
void Set(dCcD_SrcSph const&);
};

struct dCcD_GStts {
	/* 80083760 */ // False False
dCcD_GStts();
	/* 80083830 */ // False False
void Move();
	/* 806502E0 */ // True False
~dCcD_GStts();
};

struct dCcD_GObjInf {
	/* 80083A28 */ // False False
dCcD_GObjInf();
	/* 800842C0 */ // False False
void ChkAtHit();
	/* 80084460 */ // False False
void ChkTgHit();
};

struct dCcD_Cps {
	/* 800847D0 */ // False False
//  dCcD_SrcCps const& False
// 	 dCcD_SrcCps const False
// 		 dCcD_SrcCps False
void Set(dCcD_SrcCps const&);
	/* 80084824 */ // False False
void CalcAtVec();
};

struct dBgS_PolyPassChk {
	/* 80078E68 */ // False False
void SetObj();
};

struct dBgS_ObjAcch {
	/* 8065033C */ // True False
~dBgS_ObjAcch();
};

struct dBgS_AcchCir {
	/* 80075EAC */ // False False
dBgS_AcchCir();
	/* 80075F58 */ // False False
//  f32 False
//  f32 False
void SetWall(f32, f32);
	/* 806503AC */ // True False
~dBgS_AcchCir();
};

struct dBgS {
};

struct dBgS_Acch {
	/* 80075F94 */ // False False
~dBgS_Acch();
	/* 800760A0 */ // False False
dBgS_Acch();
	/* 80076248 */ // False False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  int False
//  dBgS_AcchCir* False
// 	 dBgS_AcchCir False
//  cXyz* False
// 	 cXyz False
//  csXyz* False
// 	 csXyz False
//  csXyz* False
// 	 csXyz False
void Set(cXyz*, cXyz*, fopAc_ac_c*, int, dBgS_AcchCir*, cXyz*, csXyz*, csXyz*);
	/* 80076AAC */ // False False
//  dBgS& False
// 	 dBgS False
void CrrPos(dBgS&);
};

struct cM3dGSph {
	/* 8026F648 */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
void SetC(cXyz const&);
	/* 8026F708 */ // False False
//  f32 False
void SetR(f32);
	/* 80650250 */ // True False
~cM3dGSph();
};

struct cM3dGCps {
	/* 8026EF88 */ // False False
cM3dGCps();
	/* 8026F000 */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
void Set(cXyz const&, cXyz const&, f32);
};

struct cM3dGCir {
	/* 8026EF18 */ // False False
~cM3dGCir();
};

struct cM3dGAab {
	/* 80650298 */ // True False
~cM3dGAab();
};

struct cCcD_Obj {
};

struct cCcS {
	/* 80264BA8 */ // False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
void Set(cCcD_Obj*);
};

struct cCcD_GStts {
	/* 8065043C */ // True False
~cCcD_GStts();
};

struct cBgS_PolyInfo {
	/* 802680B0 */ // False False
~cBgS_PolyInfo();
};

struct Vec {
};

struct JAISoundID {
};

struct Z2SeMgr {
	/* 802AB984 */ // False False
//  JAISoundID False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  u32 False
//  s8 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  u8 False
void seStart(JAISoundID, Vec const*, u32, s8, f32, f32, f32, f32, u8);
	/* 802AC50C */ // False False
//  JAISoundID False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  u32 False
//  s8 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  u8 False
void seStartLevel(JAISoundID, Vec const*, u32, s8, f32, f32, f32, f32, u8);
};

// 
// Forward References:
// 

// True False
//  daB_ZANTM_c* False
// 	 daB_ZANTM_c False
static void daB_ZANTM_Draw(daB_ZANTM_c*);
// True False
//  daB_ZANTM_c* False
// 	 daB_ZANTM_c False
static void daB_ZANTM_Execute(daB_ZANTM_c*);
// True False
//  bool False
//  daB_ZANTM_c* False
// 	 daB_ZANTM_c False
static bool daB_ZANTM_IsDelete(daB_ZANTM_c*);
// True False
//  daB_ZANTM_c* False
// 	 daB_ZANTM_c False
static void daB_ZANTM_Delete(daB_ZANTM_c*);
// True False
//  daB_ZANTM_c* False
// 	 daB_ZANTM_c False
static void daB_ZANTM_Create(daB_ZANTM_c*);

// True False
extern "C" void draw__11daB_ZANTM_cFv();
// True False
//  daB_ZANTM_c* False
// 	 daB_ZANTM_c False
extern "C" static void daB_ZANTM_Draw__FP11daB_ZANTM_c();
// True False
extern "C" void setMagicEffect__11daB_ZANTM_cFv();
// True False
extern "C" void setMagicHitEffect__11daB_ZANTM_cFv();
// True False
extern "C" void executeSmall__11daB_ZANTM_cFv();
// True False
extern "C" void cc_set__11daB_ZANTM_cFv();
// True False
extern "C" void execute__11daB_ZANTM_cFv();
// True False
//  daB_ZANTM_c* False
// 	 daB_ZANTM_c False
extern "C" static void daB_ZANTM_Execute__FP11daB_ZANTM_c();
// True False
//  bool False
//  daB_ZANTM_c* False
// 	 daB_ZANTM_c False
extern "C" static bool daB_ZANTM_IsDelete__FP11daB_ZANTM_c();
// True False
//  bool False
extern "C" bool _delete__11daB_ZANTM_cFv();
// True False
//  daB_ZANTM_c* False
// 	 daB_ZANTM_c False
extern "C" static void daB_ZANTM_Delete__FP11daB_ZANTM_c();
// True False
extern "C" void create__11daB_ZANTM_cFv();
// True False
extern "C" void __ct__11daB_ZANTM_cFv();
// True False
extern "C" void __dt__8cM3dGSphFv();
// True False
extern "C" void __dt__8cM3dGAabFv();
// True False
extern "C" void __dt__10dCcD_GSttsFv();
// True False
extern "C" void __dt__12dBgS_ObjAcchFv();
// True False
extern "C" void __dt__12dBgS_AcchCirFv();
// True False
//  daB_ZANTM_c* False
// 	 daB_ZANTM_c False
extern "C" static void daB_ZANTM_Create__FP11daB_ZANTM_c();
// True False
extern "C" void __dt__10cCcD_GSttsFv();
// True False
extern "C" static void func_80650484();
// True False
extern "C" static void func_8065048C();
extern "C" extern u32 const lit_3722;
extern "C" extern u32 const lit_3723;
extern "C" extern u32 const lit_3753;
extern "C" extern u32 const lit_3754;
extern "C" extern u32 const lit_3858;
extern "C" extern u32 const lit_3859;
extern "C" extern u8 const lit_3860[4];
extern "C" extern u32 const lit_3861;
extern "C" extern u32 const lit_3862;
extern "C" extern u32 const lit_3863[1 + 1 /* padding */];
extern "C" extern u8 const lit_3865[8];
extern "C" extern u32 const lit_3878;
extern "C" extern u32 const lit_3879;
extern "C" extern u32 const lit_3880;
extern "C" extern u32 const lit_3939;
extern "C" extern u32 const lit_3940;
extern "C" extern u32 lit_1787[1 + 4 /* padding */];
extern "C" extern u8 data_80650508[76];
extern "C" extern u8 data_80650554[64];
extern "C" extern u8 data_80650594[64];
extern "C" extern void* g_profile_B_ZANTM[12];
extern "C" extern void* __vt__12dBgS_AcchCir[3];
extern "C" extern void* __vt__10cCcD_GStts[3];
extern "C" extern void* __vt__10dCcD_GStts[3];
extern "C" extern void* __vt__8cM3dGSph[3];
extern "C" extern void* __vt__8cM3dGAab[3];
extern "C" extern void* __vt__12dBgS_ObjAcch[9];

// 
// External References:
// 

// False False
//  unsigned int False
//  fopAc_ac_c** False
// 	 fopAc_ac_c* False
// 		 fopAc_ac_c False
void fopAcM_SearchByID(unsigned int, fopAc_ac_c**);
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
void fopAcM_delete(fopAc_ac_c*);
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  f32 False
//  f32 False
//  f32 False
void fopAcM_SetMin(fopAc_ac_c*, f32, f32, f32);
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  f32 False
//  f32 False
//  f32 False
void fopAcM_SetMax(fopAc_ac_c*, f32, f32, f32);
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
void fopAcM_posMoveF(fopAc_ac_c*, cXyz const*);
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
void cLib_chaseF(f32*, f32, f32);
// False False
//  s16* False
// 	 s16 False
//  s16 False
//  s16 False
void cLib_chaseAngleS(s16*, s16, s16);
// False False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
void cLib_targetAngleY(Vec const*, Vec const*);
// False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
void cLib_targetAngleX(cXyz const*, cXyz const*);
// False False
//  void False
//  void* False
// 	 void False
void operator delete(void*);

// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
extern "C" void transS__14mDoMtx_stack_cFRC4cXyz();
// False False
extern "C" void __ct__10fopAc_ac_cFv();
// False False
//  unsigned int False
//  fopAc_ac_c** False
// 	 fopAc_ac_c* False
// 		 fopAc_ac_c False
extern "C" void fopAcM_SearchByID__FUiPP10fopAc_ac_c();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
extern "C" void fopAcM_delete__FP10fopAc_ac_c();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  f32 False
//  f32 False
//  f32 False
extern "C" void fopAcM_SetMin__FP10fopAc_ac_cfff();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  f32 False
//  f32 False
//  f32 False
extern "C" void fopAcM_SetMax__FP10fopAc_ac_cfff();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
extern "C" void fopAcM_posMoveF__FP10fopAc_ac_cPC4cXyz();
// False False
//  u32 False
extern "C" void getEmitter__Q213dPa_control_c7level_cFUl();
// False False
//  u8 False
//  u16 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u8 False
//  dPa_levelEcallBack* False
// 	 dPa_levelEcallBack False
//  s8 False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
extern "C" void set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf();
// False False
//  u32 False
//  u8 False
//  u16 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u8 False
//  dPa_levelEcallBack* False
// 	 dPa_levelEcallBack False
//  s8 False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
extern "C" void set__13dPa_control_cFUlUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf();
// False False
extern "C" void __ct__12dBgS_AcchCirFv();
// False False
//  f32 False
//  f32 False
extern "C" void SetWall__12dBgS_AcchCirFff();
// False False
extern "C" void __dt__9dBgS_AcchFv();
// False False
extern "C" void __ct__9dBgS_AcchFv();
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  int False
//  dBgS_AcchCir* False
// 	 dBgS_AcchCir False
//  cXyz* False
// 	 cXyz False
//  csXyz* False
// 	 csXyz False
//  csXyz* False
// 	 csXyz False
extern "C" void Set__9dBgS_AcchFP4cXyzP4cXyzP10fopAc_ac_ciP12dBgS_AcchCirP4cXyzP5csXyzP5csXyz();
// False False
//  dBgS& False
// 	 dBgS False
extern "C" void CrrPos__9dBgS_AcchFR4dBgS();
// False False
extern "C" void SetObj__16dBgS_PolyPassChkFv();
// False False
extern "C" void __ct__10dCcD_GSttsFv();
// False False
extern "C" void Move__10dCcD_GSttsFv();
// False False
//  int False
//  int False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
extern "C" void Init__9dCcD_SttsFiiP10fopAc_ac_c();
// False False
extern "C" void __ct__12dCcD_GObjInfFv();
// False False
extern "C" void ChkAtHit__12dCcD_GObjInfFv();
// False False
extern "C" void ChkTgHit__12dCcD_GObjInfFv();
// False False
//  dCcD_SrcCps const& False
// 	 dCcD_SrcCps const False
// 		 dCcD_SrcCps False
extern "C" void Set__8dCcD_CpsFRC11dCcD_SrcCps();
// False False
extern "C" void CalcAtVec__8dCcD_CpsFv();
// False False
//  dCcD_SrcSph const& False
// 	 dCcD_SrcSph const False
// 		 dCcD_SrcSph False
extern "C" void Set__8dCcD_SphFRC11dCcD_SrcSph();
// False False
extern "C" void checkMasterSwordEquip__9daPy_py_cFv();
// False False
//  int False
//  cXyz* False
// 	 cXyz False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
extern "C" void settingTevStruct__18dScnKy_env_light_cFiP4cXyzP12dKy_tevstr_c();
// False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
extern "C" void Set__4cCcSFP8cCcD_Obj();
// False False
//  f32 False
extern "C" void __ml__4cXyzCFf();
// False False
extern "C" void __dt__13cBgS_PolyInfoFv();
// False False
extern "C" void __dt__8cM3dGCirFv();
// False False
extern "C" void __ct__8cM3dGCpsFv();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
extern "C" void Set__8cM3dGCpsFRC4cXyzRC4cXyzf();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
extern "C" void SetC__8cM3dGSphFRC4cXyz();
// False False
//  f32 False
extern "C" void SetR__8cM3dGSphFf();
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
extern "C" void cLib_chaseF__FPfff();
// False False
//  s16* False
// 	 s16 False
//  s16 False
//  s16 False
extern "C" void cLib_chaseAngleS__FPsss();
// False False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
extern "C" void cLib_targetAngleY__FPC3VecPC3Vec();
// False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
extern "C" void cLib_targetAngleX__FPC4cXyzPC4cXyz();
// False False
//  JAISoundID False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  u32 False
//  s8 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  u8 False
extern "C" void seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc();
// False False
//  JAISoundID False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  u32 False
//  s8 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  u8 False
extern "C" void seStartLevel__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc();
// False False
//  void False
//  void* False
// 	 void False
extern "C" void __dl__FPv();
// False False
extern "C" void PSMTXCopy();
// False False
extern "C" void _savegpr_23();
// False False
extern "C" void _savegpr_26();
// False False
extern "C" void _savegpr_27();
// False False
extern "C" void _savegpr_29();
// False False
extern "C" void _restgpr_23();
// False False
extern "C" void _restgpr_26();
// False False
extern "C" void _restgpr_27();
// False False
extern "C" void _restgpr_29();
extern "C" extern void* g_fopAc_Method[8];
extern "C" extern void* g_fpcLf_Method[5 + 1 /* padding */];
extern "C" extern void* __vt__8dCcD_Sph[36];
extern "C" extern void* __vt__8dCcD_Cps[36];
extern "C" extern void* __vt__9dCcD_Stts[11];
extern "C" extern void* __vt__12cCcD_SphAttr[25];
extern "C" extern void* __vt__12cCcD_CpsAttr[25];
extern "C" extern void* __vt__14cCcD_ShapeAttr[22];
extern "C" extern void* __vt__9cCcD_Stts[8];
extern "C" extern u8 now__14mDoMtx_stack_c[48];
extern "C" extern u8 g_dComIfG_gameInfo[122384];
extern "C" extern u8 g_env_light[4880];
extern "C" extern u8 sincosTable___5JMath[65536];
extern "C" extern u8 struct_80450D64[4];
extern "C" extern u8 mParticleTracePCB__13dPa_control_c[4 + 4 /* padding */];
extern "C" extern u8 mAudioMgrPtr__10Z2AudioMgr[4 + 4 /* padding */];
// False False
extern "C" void getMagicSpeed__10daB_ZANT_cFv();
// False False
extern "C" void getMagicWaterSpeed__10daB_ZANT_cFv();

// 
// Declarations:
// 

/* 8064F778-8064F7B4 003C+00 s=1 e=0 z=0  None .text      draw__11daB_ZANTM_cFv                                        */
//	8064F788: 8042CA54 (g_env_light)
//	8064F78C: 8042CA54 (g_env_light)
//	8064F79C: 801A37C4 (settingTevStruct__18dScnKy_env_light_cFiP4cXyzP12dKy_tevstr_c)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_ZANTM_c::draw() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_zant_magic/d_a_b_zant_magic/draw__11daB_ZANTM_cFv.s"
}
#pragma pop


/* 8064F7B4-8064F7D4 0020+00 s=1 e=0 z=0  None .text      daB_ZANTM_Draw__FP11daB_ZANTM_c                              */
//	8064F7C0: 8064F778 (draw__11daB_ZANTM_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daB_ZANTM_c* False
// 	 daB_ZANTM_c False
asm static void daB_ZANTM_Draw(daB_ZANTM_c* param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_zant_magic/d_a_b_zant_magic/daB_ZANTM_Draw__FP11daB_ZANTM_c.s"
}
#pragma pop


/* ############################################################################################## */
/* 8065049C-806504A0 0004+00 s=5 e=0 z=0  None .rodata    @3721                                                        */
SECTION_RODATA static u32 const lit_3721 = 0x3F000000;

/* 806504E8-806504F4 000C+00 s=1 e=0 z=0  None .data      cNullVec__6Z2Calc                                            */
SECTION_DATA static u8 cNullVec__6Z2Calc[12] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 806504F4-80650508 0004+10 s=0 e=0 z=0  None .data      @1787                                                        */
SECTION_DATA u32 lit_1787[1 + 4 /* padding */] = {
	0x02000201,
	/* padding */
	0x40080000, 0x00000000, 0x3FE00000, 0x00000000,
};

/* 80650508-80650554 004C+00 s=0 e=0 z=0  None .data      cc_zant_src__30@unnamed@d_a_b_zant_magic_cpp@                */
SECTION_DATA u8 data_80650508[76] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D,
	0xD8, 0xFB, 0xFD, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00,
};

/* 80650554-80650594 0040+00 s=0 e=0 z=0  None .data      cc_zant_src2__30@unnamed@d_a_b_zant_magic_cpp@               */
SECTION_DATA u8 data_80650554[64] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x20, 0x00, 0x00,
};

/* 80650594-806505D4 0040+00 s=0 e=0 z=0  None .data      cc_zant_src3__30@unnamed@d_a_b_zant_magic_cpp@               */
SECTION_DATA u8 data_80650594[64] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x20, 0x00, 0x00,
};

/* 806505D4-806505DC 0008+00 s=1 e=0 z=0  None .data      magic_effect_id$3667                                         */
SECTION_DATA static u8 magic_effect_id_3667[8] = {
	0x89, 0x0D, 0x89, 0x0E, 0x89, 0x0F, 0x89, 0x10,
};

/* 8064F7D4-8064F938 0164+00 s=1 e=0 z=0  None .text      setMagicEffect__11daB_ZANTM_cFv                              */
//	8064F7E4: 803621C4 (_savegpr_23)
//	8064F7EC: 8065049C (lit_3721)
//	8064F7F0: 8065049C (lit_3721)
//	8064F828: 80266B84 (__ml__4cXyzCFf)
//	8064F850: 804061C0 (g_dComIfG_gameInfo)
//	8064F854: 804061C0 (g_dComIfG_gameInfo)
//	8064F85C: 806505D4 (magic_effect_id_3667)
//	8064F860: 806505D4 (magic_effect_id_3667)
//	8064F8B0: 8004D4CC (set__13dPa_control_cFUlUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	8064F8C4: 8004B918 (getEmitter__Q213dPa_control_c7level_cFUl)
//	8064F8FC: 80450EC8 (mParticleTracePCB__13dPa_control_c)
//	8064F900: 80450EC8 (mParticleTracePCB__13dPa_control_c)
//	8064F924: 80362210 (_restgpr_23)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_ZANTM_c::setMagicEffect() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_zant_magic/d_a_b_zant_magic/setMagicEffect__11daB_ZANTM_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 806505DC-806505E4 0008+00 s=1 e=0 z=0  None .data      magic_effect_id$3729                                         */
SECTION_DATA static u8 magic_effect_id_3729[8] = {
	0x88, 0x62, 0x88, 0x63, 0x88, 0x64, 0x88, 0x65,
};

/* 8064F938-8064FA50 0118+00 s=1 e=0 z=0  None .text      setMagicHitEffect__11daB_ZANTM_cFv                           */
//	8064F948: 803621D0 (_savegpr_26)
//	8064F950: 8065049C (lit_3721)
//	8064F954: 8065049C (lit_3721)
//	8064F964: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	8064F968: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	8064F994: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
//	8064F9D4: 804061C0 (g_dComIfG_gameInfo)
//	8064F9D8: 804061C0 (g_dComIfG_gameInfo)
//	8064F9DC: 806505DC (magic_effect_id_3729)
//	8064F9E0: 806505DC (magic_effect_id_3729)
//	8064FA24: 8004CA90 (set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	8064FA3C: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_ZANTM_c::setMagicHitEffect() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_zant_magic/d_a_b_zant_magic/setMagicHitEffect__11daB_ZANTM_cFv.s"
}
#pragma pop


/* 8064FA50-8064FD6C 031C+00 s=1 e=0 z=0  None .text      executeSmall__11daB_ZANTM_cFv                                */
//	8064FA68: 803621DC (_savegpr_29)
//	8064FA70: 8065049C (lit_3721)
//	8064FA74: 8065049C (lit_3721)
//	8064FA78: 8015F398 (checkMasterSwordEquip__9daPy_py_cFv)
//	8064FAA8: 800199BC (fopAcM_SearchByID__FUiPP10fopAc_ac_c)
//	8064FAB8: 80450D64 (struct_80450D64)
//	8064FABC: 80450D64 (struct_80450D64)
//	8064FAC8: 80640664 (getMagicWaterSpeed__10daB_ZANT_cFv)
//	8064FAD4: 80640654 (getMagicSpeed__10daB_ZANT_cFv)
//	8064FAE0: 80450D64 (struct_80450D64)
//	8064FAE4: 80450D64 (struct_80450D64)
//	8064FB30: 804061C0 (g_dComIfG_gameInfo)
//	8064FB34: 804061C0 (g_dComIfG_gameInfo)
//	8064FB88: 80450D64 (struct_80450D64)
//	8064FB8C: 80450D64 (struct_80450D64)
//	8064FBA0: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	8064FBB0: 80270B90 (cLib_chaseAngleS__FPsss)
//	8064FBBC: 80270C74 (cLib_targetAngleX__FPC4cXyzPC4cXyz)
//	8064FBCC: 80270B90 (cLib_chaseAngleS__FPsss)
//	8064FBD0: 80439A20 (sincosTable___5JMath)
//	8064FBD4: 80439A20 (sincosTable___5JMath)
//	8064FC18: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	8064FC1C: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	8064FC48: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
//	8064FC58: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	8064FC5C: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	8064FC88: 802AC50C (seStartLevel__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
//	8064FC98: 80270740 (cLib_chaseF__FPfff)
//	8064FCD0: 8064F938 (setMagicHitEffect__11daB_ZANTM_cFv)
//	8064FCD8: 80019C7C (fopAcM_delete__FP10fopAc_ac_c)
//	8064FCE4: 800842C0 (ChkAtHit__12dCcD_GObjInfFv)
//	8064FCFC: 80084460 (ChkTgHit__12dCcD_GObjInfFv)
//	8064FD40: 8064F938 (setMagicHitEffect__11daB_ZANTM_cFv)
//	8064FD48: 80019C7C (fopAcM_delete__FP10fopAc_ac_c)
//	8064FD58: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_ZANTM_c::executeSmall() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_zant_magic/d_a_b_zant_magic/executeSmall__11daB_ZANTM_cFv.s"
}
#pragma pop


/* 8064FD6C-8064FE6C 0100+00 s=1 e=0 z=0  None .text      cc_set__11daB_ZANTM_cFv                                      */
//	8064FD7C: 803621DC (_savegpr_29)
//	8064FD84: 8065049C (lit_3721)
//	8064FD88: 8065049C (lit_3721)
//	8064FDE8: 8026F000 (Set__8cM3dGCpsFRC4cXyzRC4cXyzf)
//	8064FDF0: 80084824 (CalcAtVec__8dCcD_CpsFv)
//	8064FDF4: 804061C0 (g_dComIfG_gameInfo)
//	8064FDF8: 804061C0 (g_dComIfG_gameInfo)
//	8064FE08: 80264BA8 (Set__4cCcSFP8cCcD_Obj)
//	8064FE14: 8026F648 (SetC__8cM3dGSphFRC4cXyz)
//	8064FE20: 8026F708 (SetR__8cM3dGSphFf)
//	8064FE2C: 80264BA8 (Set__4cCcSFP8cCcD_Obj)
//	8064FE38: 8026F648 (SetC__8cM3dGSphFRC4cXyz)
//	8064FE44: 8026F708 (SetR__8cM3dGSphFf)
//	8064FE50: 80264BA8 (Set__4cCcSFP8cCcD_Obj)
//	8064FE58: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_ZANTM_c::cc_set() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_zant_magic/d_a_b_zant_magic/cc_set__11daB_ZANTM_cFv.s"
}
#pragma pop


/* 8064FE6C-8064FF04 0098+00 s=1 e=0 z=0  None .text      execute__11daB_ZANTM_cFv                                     */
//	8064FE98: 8064FA50 (executeSmall__11daB_ZANTM_cFv)
//	8064FEA0: 8064F7D4 (setMagicEffect__11daB_ZANTM_cFv)
//	8064FEA8: 80083830 (Move__10dCcD_GSttsFv)
//	8064FEB4: 8001A6CC (fopAcM_posMoveF__FP10fopAc_ac_cPC4cXyz)
//	8064FEBC: 804061C0 (g_dComIfG_gameInfo)
//	8064FEC0: 804061C0 (g_dComIfG_gameInfo)
//	8064FEC8: 80076AAC (CrrPos__9dBgS_AcchFR4dBgS)
//	8064FED0: 8064FD6C (cc_set__11daB_ZANTM_cFv)
//	8064FED8: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	8064FEDC: 803DD470 (now__14mDoMtx_stack_c)
//	8064FEE0: 803DD470 (now__14mDoMtx_stack_c)
//	8064FEE8: 803464B0 (PSMTXCopy)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_ZANTM_c::execute() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_zant_magic/d_a_b_zant_magic/execute__11daB_ZANTM_cFv.s"
}
#pragma pop


/* 8064FF04-8064FF24 0020+00 s=1 e=0 z=0  None .text      daB_ZANTM_Execute__FP11daB_ZANTM_c                           */
//	8064FF10: 8064FE6C (execute__11daB_ZANTM_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daB_ZANTM_c* False
// 	 daB_ZANTM_c False
asm static void daB_ZANTM_Execute(daB_ZANTM_c* param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_zant_magic/d_a_b_zant_magic/daB_ZANTM_Execute__FP11daB_ZANTM_c.s"
}
#pragma pop


/* 8064FF24-8064FF2C 0008+00 s=1 e=0 z=0  None .text      daB_ZANTM_IsDelete__FP11daB_ZANTM_c                          */
// True False
//  bool False
//  daB_ZANTM_c* False
// 	 daB_ZANTM_c False
static bool daB_ZANTM_IsDelete(daB_ZANTM_c* param_0) {
	return true;
}


/* 8064FF2C-8064FF34 0008+00 s=1 e=0 z=0  None .text      _delete__11daB_ZANTM_cFv                                     */
// True False
//  bool False
bool daB_ZANTM_c::_delete() {
	return true;
}


/* 8064FF34-8064FF54 0020+00 s=1 e=0 z=0  None .text      daB_ZANTM_Delete__FP11daB_ZANTM_c                            */
//	8064FF40: 8064FF2C (_delete__11daB_ZANTM_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daB_ZANTM_c* False
// 	 daB_ZANTM_c False
asm static void daB_ZANTM_Delete(daB_ZANTM_c* param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_zant_magic/d_a_b_zant_magic/daB_ZANTM_Delete__FP11daB_ZANTM_c.s"
}
#pragma pop


/* 8064FF54-806500A8 0154+00 s=1 e=0 z=0  None .text      create__11daB_ZANTM_cFv                                      */
//	8064FF64: 803621DC (_savegpr_29)
//	8064FF6C: 806504E8 (cNullVec__6Z2Calc)
//	8064FF70: 806504E8 (cNullVec__6Z2Calc)
//	8064FF74: 8065049C (lit_3721)
//	8064FF78: 8065049C (lit_3721)
//	8064FF90: 806500A8 (__ct__11daB_ZANTM_cFv)
//	8064FFD4: 80076248 (Set__9dBgS_AcchFP4cXyzP4cXyzP10fopAc_ac_ciP12dBgS_AcchCirP4cXyzP5csXyzP5csXyz)
//	8064FFF0: 8001A528 (fopAcM_SetMin__FP10fopAc_ac_cfff)
//	80650004: 8001A538 (fopAcM_SetMax__FP10fopAc_ac_cfff)
//	80650024: 80083860 (Init__9dCcD_SttsFiiP10fopAc_ac_c)
//	80650030: 800847D0 (Set__8dCcD_CpsFRC11dCcD_SrcCps)
//	80650040: 80075F58 (SetWall__12dBgS_AcchCirFff)
//	80650064: 80084A34 (Set__8dCcD_SphFRC11dCcD_SrcSph)
//	80650078: 80084A34 (Set__8dCcD_SphFRC11dCcD_SrcSph)
//	80650094: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_ZANTM_c::create() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_zant_magic/d_a_b_zant_magic/create__11daB_ZANTM_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 806505E4-80650604 0020+00 s=1 e=0 z=0  None .data      l_daB_ZANTM_Method                                           */
SECTION_DATA static void* l_daB_ZANTM_Method[8] = {
	(void*)daB_ZANTM_Create__FP11daB_ZANTM_c,
	(void*)daB_ZANTM_Delete__FP11daB_ZANTM_c,
	(void*)daB_ZANTM_Execute__FP11daB_ZANTM_c,
	(void*)daB_ZANTM_IsDelete__FP11daB_ZANTM_c,
	(void*)daB_ZANTM_Draw__FP11daB_ZANTM_c,
	(void*)NULL,
	(void*)NULL,
	(void*)NULL,
};

/* 80650604-80650634 0030+00 s=0 e=0 z=1  None .data      g_profile_B_ZANTM                                            */
SECTION_DATA void* g_profile_B_ZANTM[12] = {
	(void*)0xFFFFFFFD,
	(void*)0x0004FFFD,
	(void*)0x00FA0000,
	(void*)&g_fpcLf_Method,
	(void*)0x00000C0C,
	(void*)NULL,
	(void*)NULL,
	(void*)&g_fopAc_Method,
	(void*)0x00E30000,
	(void*)&l_daB_ZANTM_Method,
	(void*)0x00040100,
	(void*)0x020E0000,
};

/* 80650634-80650640 000C+00 s=1 e=0 z=0  None .data      __vt__12dBgS_AcchCir                                         */
SECTION_DATA void* __vt__12dBgS_AcchCir[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__12dBgS_AcchCirFv,
};

/* 80650640-8065064C 000C+00 s=2 e=0 z=0  None .data      __vt__10cCcD_GStts                                           */
SECTION_DATA void* __vt__10cCcD_GStts[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__10cCcD_GSttsFv,
};

/* 8065064C-80650658 000C+00 s=1 e=0 z=0  None .data      __vt__10dCcD_GStts                                           */
SECTION_DATA void* __vt__10dCcD_GStts[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__10dCcD_GSttsFv,
};

/* 80650658-80650664 000C+00 s=2 e=0 z=0  None .data      __vt__8cM3dGSph                                              */
SECTION_DATA void* __vt__8cM3dGSph[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__8cM3dGSphFv,
};

/* 80650664-80650670 000C+00 s=2 e=0 z=0  None .data      __vt__8cM3dGAab                                              */
SECTION_DATA void* __vt__8cM3dGAab[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__8cM3dGAabFv,
};

/* 80650670-80650694 0024+00 s=2 e=0 z=0  None .data      __vt__12dBgS_ObjAcch                                         */
SECTION_DATA void* __vt__12dBgS_ObjAcch[9] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__12dBgS_ObjAcchFv,
	(void*)NULL,
	(void*)NULL,
	(void*)func_8065048C,
	(void*)NULL,
	(void*)NULL,
	(void*)func_80650484,
};

/* 806500A8-80650250 01A8+00 s=1 e=0 z=0  None .text      __ct__11daB_ZANTM_cFv                                        */
//	806500B8: 803621D4 (_savegpr_27)
//	806500C0: 80018B64 (__ct__10fopAc_ac_cFv)
//	806500C8: 80075EAC (__ct__12dBgS_AcchCirFv)
//	806500D4: 800760A0 (__ct__9dBgS_AcchFv)
//	806500D8: 80650670 (__vt__12dBgS_ObjAcch)
//	806500DC: 80650670 (__vt__12dBgS_ObjAcch)
//	806500F8: 80078E68 (SetObj__16dBgS_PolyPassChkFv)
//	806500FC: 803C3728 (__vt__9cCcD_Stts)
//	80650100: 803C3728 (__vt__9cCcD_Stts)
//	8065010C: 80083760 (__ct__10dCcD_GSttsFv)
//	80650110: 803AC2E4 (__vt__9dCcD_Stts)
//	80650114: 803AC2E4 (__vt__9dCcD_Stts)
//	8065012C: 80083A28 (__ct__12dCcD_GObjInfFv)
//	80650130: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	80650134: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	8065013C: 80650664 (__vt__8cM3dGAab)
//	80650140: 80650664 (__vt__8cM3dGAab)
//	80650148: 80650658 (__vt__8cM3dGSph)
//	8065014C: 80650658 (__vt__8cM3dGSph)
//	80650154: 803C3540 (__vt__12cCcD_SphAttr)
//	80650158: 803C3540 (__vt__12cCcD_SphAttr)
//	80650168: 803ABFC0 (__vt__8dCcD_Sph)
//	8065016C: 803ABFC0 (__vt__8dCcD_Sph)
//	8065018C: 80083A28 (__ct__12dCcD_GObjInfFv)
//	80650190: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	80650194: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	8065019C: 80650664 (__vt__8cM3dGAab)
//	806501A0: 80650664 (__vt__8cM3dGAab)
//	806501A8: 80650658 (__vt__8cM3dGSph)
//	806501AC: 80650658 (__vt__8cM3dGSph)
//	806501B4: 803C3540 (__vt__12cCcD_SphAttr)
//	806501B8: 803C3540 (__vt__12cCcD_SphAttr)
//	806501C4: 803ABFC0 (__vt__8dCcD_Sph)
//	806501C8: 803ABFC0 (__vt__8dCcD_Sph)
//	806501E0: 80083A28 (__ct__12dCcD_GObjInfFv)
//	806501E4: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	806501E8: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	806501F0: 80650664 (__vt__8cM3dGAab)
//	806501F4: 80650664 (__vt__8cM3dGAab)
//	80650200: 8026EF88 (__ct__8cM3dGCpsFv)
//	80650204: 803C3608 (__vt__12cCcD_CpsAttr)
//	80650208: 803C3608 (__vt__12cCcD_CpsAttr)
//	80650218: 803AC170 (__vt__8dCcD_Cps)
//	8065021C: 803AC170 (__vt__8dCcD_Cps)
//	8065023C: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm daB_ZANTM_c::daB_ZANTM_c() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_zant_magic/d_a_b_zant_magic/__ct__11daB_ZANTM_cFv.s"
}
#pragma pop


/* 80650250-80650298 0048+00 s=1 e=0 z=0  None .text      __dt__8cM3dGSphFv                                            */
//	80650268: 80650658 (__vt__8cM3dGSph)
//	8065026C: 80650658 (__vt__8cM3dGSph)
//	8065027C: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cM3dGSph::~cM3dGSph() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_zant_magic/d_a_b_zant_magic/__dt__8cM3dGSphFv.s"
}
#pragma pop


/* 80650298-806502E0 0048+00 s=1 e=0 z=0  None .text      __dt__8cM3dGAabFv                                            */
//	806502B0: 80650664 (__vt__8cM3dGAab)
//	806502B4: 80650664 (__vt__8cM3dGAab)
//	806502C4: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cM3dGAab::~cM3dGAab() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_zant_magic/d_a_b_zant_magic/__dt__8cM3dGAabFv.s"
}
#pragma pop


/* 806502E0-8065033C 005C+00 s=1 e=0 z=0  None .text      __dt__10dCcD_GSttsFv                                         */
//	806502F8: 8065064C (__vt__10dCcD_GStts)
//	806502FC: 8065064C (__vt__10dCcD_GStts)
//	80650308: 80650640 (__vt__10cCcD_GStts)
//	8065030C: 80650640 (__vt__10cCcD_GStts)
//	80650320: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dCcD_GStts::~dCcD_GStts() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_zant_magic/d_a_b_zant_magic/__dt__10dCcD_GSttsFv.s"
}
#pragma pop


/* 8065033C-806503AC 0070+00 s=3 e=0 z=0  None .text      __dt__12dBgS_ObjAcchFv                                       */
//	8065035C: 80650670 (__vt__12dBgS_ObjAcch)
//	80650360: 80650670 (__vt__12dBgS_ObjAcch)
//	8065037C: 80075F94 (__dt__9dBgS_AcchFv)
//	8065038C: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dBgS_ObjAcch::~dBgS_ObjAcch() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_zant_magic/d_a_b_zant_magic/__dt__12dBgS_ObjAcchFv.s"
}
#pragma pop


/* 806503AC-8065041C 0070+00 s=1 e=0 z=0  None .text      __dt__12dBgS_AcchCirFv                                       */
//	806503CC: 80650634 (__vt__12dBgS_AcchCir)
//	806503D0: 80650634 (__vt__12dBgS_AcchCir)
//	806503E0: 8026EF18 (__dt__8cM3dGCirFv)
//	806503EC: 802680B0 (__dt__13cBgS_PolyInfoFv)
//	806503FC: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dBgS_AcchCir::~dBgS_AcchCir() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_zant_magic/d_a_b_zant_magic/__dt__12dBgS_AcchCirFv.s"
}
#pragma pop


/* 8065041C-8065043C 0020+00 s=1 e=0 z=0  None .text      daB_ZANTM_Create__FP11daB_ZANTM_c                            */
//	80650428: 8064FF54 (create__11daB_ZANTM_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daB_ZANTM_c* False
// 	 daB_ZANTM_c False
asm static void daB_ZANTM_Create(daB_ZANTM_c* param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_zant_magic/d_a_b_zant_magic/daB_ZANTM_Create__FP11daB_ZANTM_c.s"
}
#pragma pop


/* 8065043C-80650484 0048+00 s=1 e=0 z=0  None .text      __dt__10cCcD_GSttsFv                                         */
//	80650454: 80650640 (__vt__10cCcD_GStts)
//	80650458: 80650640 (__vt__10cCcD_GStts)
//	80650468: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cCcD_GStts::~cCcD_GStts() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_zant_magic/d_a_b_zant_magic/__dt__10cCcD_GSttsFv.s"
}
#pragma pop


/* 80650484-8065048C 0008+00 s=1 e=0 z=0  None .text      @36@__dt__12dBgS_ObjAcchFv                                   */
//	80650488: 8065033C (__dt__12dBgS_ObjAcchFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_80650484() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_zant_magic/d_a_b_zant_magic/func_80650484.s"
}
#pragma pop


/* 8065048C-80650494 0008+00 s=1 e=0 z=0  None .text      @20@__dt__12dBgS_ObjAcchFv                                   */
//	80650490: 8065033C (__dt__12dBgS_ObjAcchFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_8065048C() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_zant_magic/d_a_b_zant_magic/func_8065048C.s"
}
#pragma pop


/* ############################################################################################## */
/* 806504A0-806504A4 0004+00 s=0 e=0 z=0  None .rodata    @3722                                                        */
SECTION_RODATA u32 const lit_3722 = 0x3F4CCCCD;

/* 806504A4-806504A8 0004+00 s=0 e=0 z=0  None .rodata    @3723                                                        */
SECTION_RODATA u32 const lit_3723 = 0x3F800000;

/* 806504A8-806504AC 0004+00 s=0 e=0 z=0  None .rodata    @3753                                                        */
SECTION_RODATA u32 const lit_3753 = 0xBF800000;

/* 806504AC-806504B0 0004+00 s=0 e=0 z=0  None .rodata    @3754                                                        */
SECTION_RODATA u32 const lit_3754 = 0x41C80000;

/* 806504B0-806504B4 0004+00 s=0 e=0 z=0  None .rodata    @3858                                                        */
SECTION_RODATA u32 const lit_3858 = 0x42200000;

/* 806504B4-806504B8 0004+00 s=0 e=0 z=0  None .rodata    @3859                                                        */
SECTION_RODATA u32 const lit_3859 = 0x42C80000;

/* 806504B8-806504BC 0004+00 s=0 e=0 z=0  None .rodata    @3860                                                        */
SECTION_RODATA u8 const lit_3860[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 806504BC-806504C0 0004+00 s=0 e=0 z=0  None .rodata    @3861                                                        */
SECTION_RODATA u32 const lit_3861 = 0x42700000;

/* 806504C0-806504C4 0004+00 s=0 e=0 z=0  None .rodata    @3862                                                        */
SECTION_RODATA u32 const lit_3862 = 0x43820000;

/* 806504C4-806504CC 0004+04 s=0 e=0 z=0  None .rodata    @3863                                                        */
SECTION_RODATA u32 const lit_3863[1 + 1 /* padding */] = {
	0x3DCCCCCD,
	/* padding */
	0x00000000,
};

/* 806504CC-806504D4 0008+00 s=0 e=0 z=0  None .rodata    @3865                                                        */
SECTION_RODATA u8 const lit_3865[8] = {
	0x43, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 806504D4-806504D8 0004+00 s=0 e=0 z=0  None .rodata    @3878                                                        */
SECTION_RODATA u32 const lit_3878 = 0x41F00000;

/* 806504D8-806504DC 0004+00 s=0 e=0 z=0  None .rodata    @3879                                                        */
SECTION_RODATA u32 const lit_3879 = 0x41A00000;

/* 806504DC-806504E0 0004+00 s=0 e=0 z=0  None .rodata    @3880                                                        */
SECTION_RODATA u32 const lit_3880 = 0x42480000;

/* 806504E0-806504E4 0004+00 s=0 e=0 z=0  None .rodata    @3939                                                        */
SECTION_RODATA u32 const lit_3939 = 0xC3C80000;

/* 806504E4-806504E8 0004+00 s=0 e=0 z=0  None .rodata    @3940                                                        */
SECTION_RODATA u32 const lit_3940 = 0x43C80000;

