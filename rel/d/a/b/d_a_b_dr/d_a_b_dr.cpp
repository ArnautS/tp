// 
// Generated By: dol2asm
// Translation Unit: d_a_b_dr
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "rel/d/a/b/d_a_b_dr/d_a_b_dr.h"

// 
// Types:
// 

struct request_of_phase_process_class {
};

struct Vec {
};

struct cXyz {
	/* 80266AE4 */ // False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
void operator+(Vec const&) const;
	/* 80266B34 */ // False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
void operator-(Vec const&) const;
	/* 80267128 */ // False False
void atan2sX_Z() const;
	/* 80267150 */ // False False
void atan2sY_XZ() const;
	/* 805BB0E4 */ // True False
~cXyz();
};

struct csXyz {
};

struct mDoMtx_stack_c {
	/* 8000CD64 */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
void transS(cXyz const&);
	/* 8000CD9C */ // False False
//  f32 False
//  f32 False
//  f32 False
void transM(f32, f32, f32);
	/* 8000CE38 */ // False False
//  f32 False
//  f32 False
//  f32 False
void scaleM(f32, f32, f32);
	/* 8000CF44 */ // False False
//  csXyz const& False
// 	 csXyz const False
// 		 csXyz False
void ZXYrotM(csXyz const&);
};

struct J3DAnmTevRegKey {
};

struct J3DMaterialTable {
};

struct mDoExt_brkAnm {
	/* 8000D70C */ // False False
//  J3DMaterialTable* False
// 	 J3DMaterialTable False
//  J3DAnmTevRegKey* False
// 	 J3DAnmTevRegKey False
//  int False
//  int False
//  f32 False
//  s16 False
//  s16 False
void init(J3DMaterialTable*, J3DAnmTevRegKey*, int, int, f32, s16, s16);
	/* 8000D7A8 */ // False False
//  J3DMaterialTable* False
// 	 J3DMaterialTable False
//  f32 False
void entry(J3DMaterialTable*, f32);
};

struct mDoExt_baseAnm {
	/* 8000D428 */ // False False
void play();
};

struct mDoExt_McaMorfCallBack2_c {
};

struct Z2Creature {
};

struct J3DAnmTransform {
};

struct mDoExt_McaMorfCallBack1_c {
};

struct J3DModelData {
};

struct mDoExt_McaMorfSO {
	/* 800107D0 */ // False False
//  J3DModelData* False
// 	 J3DModelData False
//  mDoExt_McaMorfCallBack1_c* False
// 	 mDoExt_McaMorfCallBack1_c False
//  mDoExt_McaMorfCallBack2_c* False
// 	 mDoExt_McaMorfCallBack2_c False
//  J3DAnmTransform* False
// 	 J3DAnmTransform False
//  int False
//  f32 False
//  int False
//  int False
//  Z2Creature* False
// 	 Z2Creature False
//  u32 False
//  u32 False
mDoExt_McaMorfSO(J3DModelData*, mDoExt_McaMorfCallBack1_c*, mDoExt_McaMorfCallBack2_c*, J3DAnmTransform*, int, f32, int, int, Z2Creature*, u32, u32);
	/* 80010E70 */ // False False
//  J3DAnmTransform* False
// 	 J3DAnmTransform False
//  int False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
void setAnm(J3DAnmTransform*, int, f32, f32, f32, f32);
	/* 800110B0 */ // False False
//  u32 False
//  s8 False
void play(u32, s8);
	/* 800111C0 */ // False False
void entryDL();
	/* 800111EC */ // False False
void modelCalc();
};

struct fopAc_ac_c {
	/* 80018B64 */ // False False
fopAc_ac_c();
};

struct daPy_py_c {
	/* 8015F398 */ // False False
void checkMasterSwordEquip();
};

struct J3DJoint {
};

struct J3DModel {
};

struct daB_DR_c {
	/* 805BAF80 */ // True False
//  J3DJoint* False
// 	 J3DJoint False
//  J3DModel* False
// 	 J3DModel False
void ctrlJoint(J3DJoint*, J3DModel*);
	/* 805BB120 */ // True False
//  J3DJoint* False
// 	 J3DJoint False
//  int False
void JointCallBack(J3DJoint*, int);
	/* 805BB16C */ // True False
void draw();
	/* 805BB408 */ // True False
//  int False
//  u8 False
//  f32 False
//  f32 False
void setBck(int, u8, f32, f32);
	/* 805BB4B4 */ // True False
//  int False
//  int False
void setActionMode(int, int);
	/* 805BB4CC */ // True False
void mGlider_WindPosSet();
	/* 805BB540 */ // True False
//  bool False
void mBoot_c_tranceSet(bool);
	/* 805BB64C */ // True False
//  int False
void mStatusONOFF(int);
	/* 805BB6E8 */ // True False
void setSe();
	/* 805BBFC0 */ // True False
void setDeathLightEffect();
	/* 805BC0B8 */ // True False
//  bool False
void chkPartCreate(bool);
	/* 805BC248 */ // True False
//  int False
void mHabatakiAnmSet(int);
	/* 805BC57C */ // True False
//  bool False
void mGlider_AniSet(bool);
	/* 805BC8B4 */ // True False
void mGliderAtAniSet();
	/* 805BCA10 */ // True False
void tail_hit_check();
	/* 805BCAD4 */ // True False
void week_hit_check();
	/* 805BCBD0 */ // True False
void mTimerClr();
	/* 805BCBF4 */ // True False
void mCountClr();
	/* 805BCC18 */ // True False
void mAllClr();
	/* 805BCC4C */ // True False
void mHeadAngleSet();
	/* 805BCD7C */ // True False
//  bool False
void flapMove(bool);
	/* 805BCEA4 */ // True False
void revolutionMove();
	/* 805BD05C */ // True False
void mPlayerHighCheck();
	/* 805BD15C */ // True False
void mBgFallGroundCheck();
	/* 805BD3E4 */ // True False
void normalHoverMove();
	/* 805BD5FC */ // True False
void executeWait();
	/* 805BD98C */ // True False
void executeFlyWait();
	/* 805BDBC4 */ // True False
void executeTailHit();
	/* 805BE9B4 */ // True False
void executeWeekHit();
	/* 805BF4C8 */ // True False
void mBreathSet();
	/* 805BF768 */ // True False
//  bool False
void mBreathHighSet(bool);
	/* 805BFA6C */ // True False
void mFeintBreath();
	/* 805BFD88 */ // True False
void executeBreathAttack();
	/* 805C062C */ // True False
void executeWindAttack();
	/* 805C0CAC */ // True False
//  f32 False
void mGliderMoveSub(f32);
	/* 805C0EF8 */ // True False
void executeGliderAttack();
	/* 805C1E0C */ // True False
void executePillarSearch();
	/* 805C24BC */ // True False
void executePillarWait();
	/* 805C2BE8 */ // True False
void startDemoCheck();
	/* 805C2CD0 */ // True False
void executeDamageDemo();
	/* 805C3558 */ // True False
void executeMiddleDemo();
	/* 805C36A4 */ // True False
void executeDead();
	/* 805C382C */ // True False
void executeBullet();
	/* 805C39D8 */ // True False
void executeParts();
	/* 805C3CB0 */ // True False
void action();
	/* 805C40E0 */ // True False
void action_fire();
	/* 805C4130 */ // True False
void action_parts();
	/* 805C41A4 */ // True False
void mtx_set();
	/* 805C4684 */ // True False
void parts_mtx_set();
	/* 805C46E0 */ // True False
void cc_set();
	/* 805C4E14 */ // True False
void down_cc_set();
	/* 805C4FB4 */ // True False
//  int False
void demo_skip(int);
	/* 805C50BC */ // True False
//  void* False
// 	 void False
//  int False
void DemoSkipCallBack(void*, int);
	/* 805C50F0 */ // True False
void execute();
	/* 805C55B0 */ // True False
void _delete();
	/* 805C56A4 */ // True False
void CreateHeap();
	/* 805C5974 */ // True False
void create();
	/* 805C62B0 */ // True False
daB_DR_c();
};

struct daB_DR_HIO_c {
	/* 805BAE6C */ // True False
daB_DR_HIO_c();
	/* 805C6B94 */ // True False
~daB_DR_HIO_c();
};

struct dVibration_c {
	/* 8006FA24 */ // False False
//  int False
//  int False
//  cXyz False
void StartShock(int, int, cXyz);
	/* 8006FB10 */ // False False
//  int False
//  int False
//  cXyz False
void StartQuake(int, int, cXyz);
	/* 8006FD94 */ // False False
//  int False
void StopQuake(int);
};

struct dSv_restart_c {
	/* 80034F80 */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  s16 False
//  s8 False
void setRoom(cXyz const&, s16, s8);
};

struct dSv_memBit_c {
	/* 80034934 */ // False False
//  int False
void isDungeonItem(int) const;
};

struct dSv_info_c {
	/* 80035200 */ // False False
//  int False
//  int False
void onSwitch(int, int);
	/* 800352B0 */ // False False
//  int False
//  int False
void offSwitch(int, int);
};

struct dSv_event_c {
	/* 8003498C */ // False False
//  u16 False
void onEventBit(u16);
};

struct dSv_danBit_c {
	/* 80034B98 */ // False False
//  int False
void onSwitch(int);
	/* 80034BC0 */ // False False
//  int False
void offSwitch(int);
};

struct dKy_tevstr_c {
};

struct dScnKy_env_light_c {
	/* 801A37C4 */ // False False
//  int False
//  cXyz* False
// 	 cXyz False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
void settingTevStruct(int, cXyz*, dKy_tevstr_c*);
	/* 801A4DA0 */ // False False
//  J3DModelData* False
// 	 J3DModelData False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
void setLightTevColorType_MAJI(J3DModelData*, dKy_tevstr_c*);
};

struct dRes_info_c {
};

struct dRes_control_c {
	/* 8003C2EC */ // False False
//  char const* False
// 	 char const False
// 		 char False
//  s32 False
//  dRes_info_c* False
// 	 dRes_info_c False
//  int False
void getRes(char const*, s32, dRes_info_c*, int);
};

struct dPa_levelEcallBack {
};

struct _GXColor {
};

struct cBgS_PolyInfo {
	/* 802680B0 */ // False False
~cBgS_PolyInfo();
};

struct dPa_control_c {
	struct level_c {
		/* 8004B918 */ // False False
//  u32 False
void getEmitter(u32);
	};

	/* 8004CA90 */ // False False
//  u8 False
//  u16 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u8 False
//  dPa_levelEcallBack* False
// 	 dPa_levelEcallBack False
//  s8 False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
void set(u8, u16, cXyz const*, dKy_tevstr_c const*, csXyz const*, cXyz const*, u8, dPa_levelEcallBack*, s8, _GXColor const*, _GXColor const*, cXyz const*, f32);
	/* 8004D4CC */ // False False
//  u32 False
//  u8 False
//  u16 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u8 False
//  dPa_levelEcallBack* False
// 	 dPa_levelEcallBack False
//  s8 False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
void set(u32, u8, u16, cXyz const*, dKy_tevstr_c const*, csXyz const*, cXyz const*, u8, dPa_levelEcallBack*, s8, _GXColor const*, _GXColor const*, cXyz const*, f32);
	/* 8004D6A4 */ // False False
//  u32 False
//  u16 False
//  cBgS_PolyInfo& False
// 	 cBgS_PolyInfo False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  int False
//  dPa_levelEcallBack* False
// 	 dPa_levelEcallBack False
//  s8 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
void setPoly(u32, u16, cBgS_PolyInfo&, cXyz const*, dKy_tevstr_c const*, csXyz const*, cXyz const*, int, dPa_levelEcallBack*, s8, cXyz const*);
};

struct dMsgFlow_c {
	/* 80249F00 */ // False False
dMsgFlow_c();
};

struct dEvt_control_c {
	/* 80042468 */ // False False
void reset();
	/* 80042914 */ // False False
//  void* False
// 	 void False
//  int (*)(void*, int) False
// 	 * False
// 		  False
// 	 int False
// 	 void* False
// 		 void False
// 	 int False
//  int False
void setSkipProc(void*, int (*)(void*, int), int);
};

struct dCcD_Stts {
	/* 80083860 */ // False False
//  int False
//  int False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
void Init(int, int, fopAc_ac_c*);
};

struct dCcD_SrcSph {
};

struct dCcD_SrcCyl {
};

struct dCcD_Sph {
	/* 80084A34 */ // False False
//  dCcD_SrcSph const& False
// 	 dCcD_SrcSph const False
// 		 dCcD_SrcSph False
void Set(dCcD_SrcSph const&);
	/* 805C6744 */ // True False
~dCcD_Sph();
	/* 805C6810 */ // True False
dCcD_Sph();
};

struct dCcD_GStts {
	/* 80083760 */ // False False
dCcD_GStts();
	/* 80083830 */ // False False
void Move();
	/* 805C69F0 */ // True False
~dCcD_GStts();
};

struct dCcD_GObjInf {
	/* 80083A28 */ // False False
dCcD_GObjInf();
	/* 800840E4 */ // False False
~dCcD_GObjInf();
	/* 80084460 */ // False False
void ChkTgHit();
	/* 800844F8 */ // False False
void GetTgHitObj();
};

struct dCcD_Cyl {
	/* 800848B4 */ // False False
//  dCcD_SrcCyl const& False
// 	 dCcD_SrcCyl const False
// 		 dCcD_SrcCyl False
void Set(dCcD_SrcCyl const&);
	/* 805C6678 */ // True False
dCcD_Cyl();
	/* 805C6894 */ // True False
~dCcD_Cyl();
};

struct dCamera_c {
	/* 801614AC */ // False False
void Start();
	/* 801614D0 */ // False False
void Stop();
	/* 8016300C */ // False False
//  s32 False
void SetTrimSize(s32);
	/* 80163028 */ // False False
//  s32 False
void SetTrimTypeForce(s32);
	/* 80180AA8 */ // False False
//  cXyz False
//  cXyz False
void Set(cXyz, cXyz);
};

struct dBgS_PolyPassChk {
	/* 80078E68 */ // False False
void SetObj();
};

struct dBgS_ObjAcch {
	/* 805C6A4C */ // True False
~dBgS_ObjAcch();
};

struct dBgS_GndChk {
	/* 8007757C */ // False False
dBgS_GndChk();
	/* 800775F0 */ // False False
~dBgS_GndChk();
};

struct dBgS_AcchCir {
	/* 80075EAC */ // False False
dBgS_AcchCir();
	/* 80075F58 */ // False False
//  f32 False
//  f32 False
void SetWall(f32, f32);
	/* 805C6ABC */ // True False
~dBgS_AcchCir();
};

struct dBgS {
};

struct dBgS_Acch {
	/* 80075F94 */ // False False
~dBgS_Acch();
	/* 800760A0 */ // False False
dBgS_Acch();
	/* 80076248 */ // False False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  int False
//  dBgS_AcchCir* False
// 	 dBgS_AcchCir False
//  cXyz* False
// 	 cXyz False
//  csXyz* False
// 	 csXyz False
//  csXyz* False
// 	 csXyz False
void Set(cXyz*, cXyz*, fopAc_ac_c*, int, dBgS_AcchCir*, cXyz*, csXyz*, csXyz*);
	/* 80076AAC */ // False False
//  dBgS& False
// 	 dBgS False
void CrrPos(dBgS&);
	/* 80077114 */ // False False
//  f32 False
void SetGroundUpY(f32);
};

struct dAttention_c {
	/* 80070844 */ // False False
//  s32 False
void GetLockonList(s32);
	/* 800737E4 */ // False False
void LockonTruth();
};

struct dAttList_c {
	/* 80073864 */ // False False
void getActor();
};

struct cM3dGSph {
	/* 8026F648 */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
void SetC(cXyz const&);
	/* 8026F708 */ // False False
//  f32 False
void SetR(f32);
	/* 805C66FC */ // True False
~cM3dGSph();
};

struct cM3dGCyl {
	/* 8026F1DC */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
void SetC(cXyz const&);
	/* 8026F1F8 */ // False False
//  f32 False
void SetH(f32);
	/* 8026F200 */ // False False
//  f32 False
void SetR(f32);
	/* 805C6960 */ // True False
~cM3dGCyl();
};

struct cM3dGCir {
	/* 8026EF18 */ // False False
~cM3dGCir();
};

struct cM3dGAab {
	/* 805C69A8 */ // True False
~cM3dGAab();
};

struct cCcD_Obj {
};

struct cCcS {
	/* 80264BA8 */ // False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
void Set(cCcD_Obj*);
};

struct cCcD_GStts {
	/* 805C6B4C */ // True False
~cCcD_GStts();
};

struct cBgS_GndChk {
	/* 80267D28 */ // False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
void SetPos(cXyz const*);
};

struct cBgS {
	/* 800744A0 */ // False False
//  cBgS_GndChk* False
// 	 cBgS_GndChk False
void GroundCross(cBgS_GndChk*);
};

struct _GXTexObj {
};

struct Z2SeqMgr {
	/* 802AF010 */ // False False
//  u32 False
//  u32 False
//  s32 False
void bgmStart(u32, u32, s32);
	/* 802AF408 */ // False False
//  u32 False
//  s32 False
void bgmStop(u32, s32);
	/* 802AF49C */ // False False
//  u32 False
void subBgmStart(u32);
	/* 802AF884 */ // False False
void subBgmStop();
	/* 802AFB94 */ // False False
//  u32 False
void bgmStreamPrepare(u32);
	/* 802AFE18 */ // False False
void bgmStreamPlay();
	/* 802AFF8C */ // False False
//  s32 False
void changeBgmStatus(s32);
};

struct JAISoundID {
};

struct Z2SeMgr {
	/* 802AB984 */ // False False
//  JAISoundID False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  u32 False
//  s8 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  u8 False
void seStart(JAISoundID, Vec const*, u32, s8, f32, f32, f32, f32, u8);
};

struct Z2CreatureEnemy {
	/* 802C0F64 */ // False False
Z2CreatureEnemy();
	/* 802C1094 */ // False False
//  Vec* False
// 	 Vec False
//  Vec* False
// 	 Vec False
//  u8 False
//  u8 False
void init(Vec*, Vec*, u8, u8);
	/* 802C10B4 */ // False False
//  Vec* False
// 	 Vec False
//  Vec* False
// 	 Vec False
//  Vec* False
// 	 Vec False
//  u8 False
//  u8 False
//  u8 False
void init(Vec*, Vec*, Vec*, u8, u8, u8);
};

struct JGeometry {
	template <typename A1>
	struct TVec3 { };
	/* TVec3<f32> */
	struct TVec3__template0 {
	};

};

struct J3DFrameCtrl {
	/* 803283FC */ // False False
//  s16 False
void init(s16);
	/* 8032842C */ // False False
//  f32 False
void checkPass(f32);
	/* 805C590C */ // True False
~J3DFrameCtrl();
};

// 
// Forward References:
// 

// True False
//  daB_DR_c* False
// 	 daB_DR_c False
static void daB_DR_Draw(daB_DR_c*);
// True False
//  daB_DR_c* False
// 	 daB_DR_c False
static void daB_DR_Execute(daB_DR_c*);
// True False
//  bool False
//  daB_DR_c* False
// 	 daB_DR_c False
static bool daB_DR_IsDelete(daB_DR_c*);
// True False
//  daB_DR_c* False
// 	 daB_DR_c False
static void daB_DR_Delete(daB_DR_c*);
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
static void useHeapInit(fopAc_ac_c*);
// True False
//  daB_DR_c* False
// 	 daB_DR_c False
static void daB_DR_Create(daB_DR_c*);
// False True
//  int* False
// 	 int False
void cLib_calcTimer__template0(int*);
// False True
//  u8* False
// 	 u8 False
void cLib_calcTimer__template1(u8*);

// True False
extern "C" void __ct__12daB_DR_HIO_cFv();
// True False
//  J3DJoint* False
// 	 J3DJoint False
//  J3DModel* False
// 	 J3DModel False
extern "C" void ctrlJoint__8daB_DR_cFP8J3DJointP8J3DModel();
// True False
extern "C" void __dt__4cXyzFv();
// True False
//  J3DJoint* False
// 	 J3DJoint False
//  int False
extern "C" void JointCallBack__8daB_DR_cFP8J3DJointi();
// True False
extern "C" void draw__8daB_DR_cFv();
// True False
//  daB_DR_c* False
// 	 daB_DR_c False
extern "C" static void daB_DR_Draw__FP8daB_DR_c();
// True False
//  int False
//  u8 False
//  f32 False
//  f32 False
extern "C" void setBck__8daB_DR_cFiUcff();
// True False
//  int False
//  int False
extern "C" void setActionMode__8daB_DR_cFii();
// True False
extern "C" void mGlider_WindPosSet__8daB_DR_cFv();
// True False
//  bool False
extern "C" void mBoot_c_tranceSet__8daB_DR_cFb();
// True False
//  int False
extern "C" void mStatusONOFF__8daB_DR_cFi();
// True False
extern "C" void setSe__8daB_DR_cFv();
// True False
extern "C" void setDeathLightEffect__8daB_DR_cFv();
// True False
//  bool False
extern "C" void chkPartCreate__8daB_DR_cFb();
// True False
//  int False
extern "C" void mHabatakiAnmSet__8daB_DR_cFi();
// True False
//  bool False
extern "C" void mGlider_AniSet__8daB_DR_cFb();
// True False
extern "C" void mGliderAtAniSet__8daB_DR_cFv();
// True False
extern "C" void tail_hit_check__8daB_DR_cFv();
// True False
extern "C" void week_hit_check__8daB_DR_cFv();
// True False
extern "C" void mTimerClr__8daB_DR_cFv();
// True False
extern "C" void mCountClr__8daB_DR_cFv();
// True False
extern "C" void mAllClr__8daB_DR_cFv();
// True False
extern "C" void mHeadAngleSet__8daB_DR_cFv();
// True False
//  bool False
extern "C" void flapMove__8daB_DR_cFb();
// True False
extern "C" void revolutionMove__8daB_DR_cFv();
// True False
extern "C" void mPlayerHighCheck__8daB_DR_cFv();
// True False
extern "C" void mBgFallGroundCheck__8daB_DR_cFv();
// True False
extern "C" void normalHoverMove__8daB_DR_cFv();
// True False
extern "C" void executeWait__8daB_DR_cFv();
// True False
extern "C" void executeFlyWait__8daB_DR_cFv();
// True False
extern "C" void executeTailHit__8daB_DR_cFv();
// True False
extern "C" void executeWeekHit__8daB_DR_cFv();
// True False
extern "C" void mBreathSet__8daB_DR_cFv();
// True False
//  bool False
extern "C" void mBreathHighSet__8daB_DR_cFb();
// True False
extern "C" void mFeintBreath__8daB_DR_cFv();
// True False
extern "C" void executeBreathAttack__8daB_DR_cFv();
// True False
extern "C" void executeWindAttack__8daB_DR_cFv();
// True False
//  f32 False
extern "C" void mGliderMoveSub__8daB_DR_cFf();
// True False
extern "C" void executeGliderAttack__8daB_DR_cFv();
// True False
extern "C" void executePillarSearch__8daB_DR_cFv();
// True False
extern "C" void executePillarWait__8daB_DR_cFv();
// True False
extern "C" void startDemoCheck__8daB_DR_cFv();
// True False
extern "C" void executeDamageDemo__8daB_DR_cFv();
// True False
extern "C" void executeMiddleDemo__8daB_DR_cFv();
// True False
extern "C" void executeDead__8daB_DR_cFv();
// True False
extern "C" void executeBullet__8daB_DR_cFv();
// True False
extern "C" void executeParts__8daB_DR_cFv();
// True False
extern "C" void action__8daB_DR_cFv();
// True False
extern "C" void action_fire__8daB_DR_cFv();
// True False
extern "C" void action_parts__8daB_DR_cFv();
// True False
extern "C" void mtx_set__8daB_DR_cFv();
// True False
extern "C" void parts_mtx_set__8daB_DR_cFv();
// True False
extern "C" void cc_set__8daB_DR_cFv();
// True False
extern "C" void down_cc_set__8daB_DR_cFv();
// True False
//  int False
extern "C" void demo_skip__8daB_DR_cFi();
// True False
//  void* False
// 	 void False
//  int False
extern "C" void DemoSkipCallBack__8daB_DR_cFPvi();
// True False
extern "C" void execute__8daB_DR_cFv();
// True False
//  daB_DR_c* False
// 	 daB_DR_c False
extern "C" static void daB_DR_Execute__FP8daB_DR_c();
// True False
//  bool False
//  daB_DR_c* False
// 	 daB_DR_c False
extern "C" static bool daB_DR_IsDelete__FP8daB_DR_c();
// True False
extern "C" void _delete__8daB_DR_cFv();
// True False
//  daB_DR_c* False
// 	 daB_DR_c False
extern "C" static void daB_DR_Delete__FP8daB_DR_c();
// True False
extern "C" void CreateHeap__8daB_DR_cFv();
// True False
extern "C" void __dt__12J3DFrameCtrlFv();
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
extern "C" static void useHeapInit__FP10fopAc_ac_c();
// True False
extern "C" void create__8daB_DR_cFv();
// True False
extern "C" void __ct__8daB_DR_cFv();
// True False
extern "C" void __ct__8dCcD_CylFv();
// True False
extern "C" void __dt__8cM3dGSphFv();
// True False
extern "C" void __dt__8dCcD_SphFv();
// True False
extern "C" void __ct__8dCcD_SphFv();
// True False
extern "C" void __dt__8dCcD_CylFv();
// True False
extern "C" void __dt__8cM3dGCylFv();
// True False
extern "C" void __dt__8cM3dGAabFv();
// True False
extern "C" void __dt__10dCcD_GSttsFv();
// True False
extern "C" void __dt__12dBgS_ObjAcchFv();
// True False
extern "C" void __dt__12dBgS_AcchCirFv();
// True False
//  daB_DR_c* False
// 	 daB_DR_c False
extern "C" static void daB_DR_Create__FP8daB_DR_c();
// True False
extern "C" void __dt__10cCcD_GSttsFv();
// True False
extern "C" void __dt__12daB_DR_HIO_cFv();
// False True
//  int* False
// 	 int False
extern "C" void func_805C6BDC();
// False True
//  u8* False
// 	 u8 False
extern "C" void func_805C6BF8();
// False False
extern "C" void __sinit_d_a_b_dr_cpp();
// True False
extern "C" static void func_805C6C50();
// True False
extern "C" static void func_805C6C58();
extern "C" extern u32 const lit_3801;
extern "C" extern u32 const lit_3802;
extern "C" extern u32 const lit_3803;
extern "C" extern u32 const lit_3804;
extern "C" extern u32 const lit_3805;
extern "C" extern u32 const lit_3806;
extern "C" extern u32 const lit_3807;
extern "C" extern u32 const lit_3808;
extern "C" extern u32 const lit_3809;
extern "C" extern u32 const lit_3810;
extern "C" extern u32 const lit_4010;
extern "C" extern u32 const lit_4066;
extern "C" extern u32 const lit_4067;
extern "C" extern u32 const lit_4068;
extern "C" extern u32 const lit_4310;
extern "C" extern u32 const lit_4311;
extern "C" extern u32 const lit_4312;
extern "C" extern u32 const lit_4313;
extern "C" extern u32 const lit_4314;
extern "C" extern u32 const lit_4315;
extern "C" extern u32 const lit_4316;
extern "C" extern u32 const lit_4317;
extern "C" extern u32 const lit_4318;
extern "C" extern u32 const lit_4319;
extern "C" extern u32 const lit_4320;
extern "C" extern u32 const lit_4321;
extern "C" extern u32 const lit_4322;
extern "C" extern u32 const lit_4323;
extern "C" extern u32 const lit_4324;
extern "C" extern u32 const lit_4325;
extern "C" extern u32 const lit_4326;
extern "C" extern u32 const lit_4327;
extern "C" extern u32 const lit_4328;
extern "C" extern u32 const lit_4329;
extern "C" extern u32 const lit_4330;
extern "C" extern u32 const lit_4331;
extern "C" extern u32 const lit_4332;
extern "C" extern u32 const lit_4333;
extern "C" extern u32 const lit_4334;
extern "C" extern u32 const lit_4335;
extern "C" extern u32 const lit_4336;
extern "C" extern u32 const lit_4337;
extern "C" extern u32 const lit_4338;
extern "C" extern u32 const lit_4339;
extern "C" extern u32 const lit_4340;
extern "C" extern u32 const lit_4341;
extern "C" extern u8 const lit_4530[8];
extern "C" extern u32 const lit_4617;
extern "C" extern u32 const lit_4794;
extern "C" extern u32 const lit_4795;
extern "C" extern u32 const lit_4796;
extern "C" extern u32 const lit_4797;
extern "C" extern u32 const lit_4847;
extern "C" extern u32 const lit_4848;
extern "C" extern u32 const lit_4946;
extern "C" extern u32 const lit_5001;
extern "C" extern u32 const lit_5002;
extern "C" extern u32 const lit_5003;
extern "C" extern u32 const lit_5004[1 + 1 /* padding */];
extern "C" extern u8 const lit_5005[8];
extern "C" extern u8 const lit_5006[8];
extern "C" extern u8 const lit_5007[8];
extern "C" extern u32 const lit_5008;
extern "C" extern u32 const lit_5009;
extern "C" extern u32 const lit_5482;
extern "C" extern u32 const lit_5483;
extern "C" extern u32 const lit_5484;
extern "C" extern u32 const lit_5485;
extern "C" extern u32 const lit_5486;
extern "C" extern u32 const lit_5487;
extern "C" extern u32 const lit_5775;
extern "C" extern u32 const lit_5776;
extern "C" extern u32 const lit_5866;
extern "C" extern u32 const lit_6185;
extern "C" extern u32 const lit_6349;
extern "C" extern u32 const lit_6350;
extern "C" extern u32 const lit_6351;
extern "C" extern u32 const lit_6412;
extern "C" extern u32 const lit_6767;
extern "C" extern u32 const lit_6768;
extern "C" extern u32 const lit_6769;
extern "C" extern u32 const lit_6770;
extern "C" extern u32 const lit_6771;
extern "C" extern u32 const lit_6772;
extern "C" extern u32 const lit_6773;
extern "C" extern u32 const lit_6774;
extern "C" extern u32 const lit_6775;
extern "C" extern u32 const lit_6927;
extern "C" extern u32 const lit_6928;
extern "C" extern u32 const lit_6929;
extern "C" extern u32 const lit_6930;
extern "C" extern u32 const lit_7083;
extern "C" extern u32 const lit_7084;
extern "C" extern u32 const lit_7085;
extern "C" extern u32 const lit_7382;
extern "C" extern u32 const lit_7383;
extern "C" extern u32 const lit_7384;
extern "C" extern u32 const lit_7385;
extern "C" extern u32 const lit_7386;
extern "C" extern u32 const lit_7511;
extern "C" extern u32 const lit_7555;
extern "C" extern u32 const lit_7556;
extern "C" extern u32 const lit_7557;
extern "C" extern u32 const lit_7558;
extern "C" extern u32 const lit_7824;
extern "C" extern u32 const lit_7825;
extern "C" extern u32 const lit_7826;
extern "C" extern u32 const lit_8050;
extern "C" extern u32 const lit_8051;
extern "C" extern u32 const lit_8052;
extern "C" extern u32 const lit_8053;
extern "C" extern u32 const lit_8054;
extern "C" extern u32 const lit_8055;
extern "C" extern u32 const lit_8056;
extern "C" extern u32 const lit_8057;
extern "C" extern u32 const lit_8254;
extern "C" extern u32 const lit_8659;
extern "C" extern u32 const lit_8660;
extern "C" extern u32 const lit_8661;
extern "C" extern u32 const lit_8662;
extern "C" extern u32 const lit_8663;
extern "C" extern u32 const lit_8664;
extern "C" extern char const* const stringBase0;
extern "C" extern u32 lit_1787[1 + 4 /* padding */];
extern "C" extern u8 data_805C7268[68];
extern "C" extern u8 data_805C72AC[64];
extern "C" extern u8 data_805C72EC[64];
extern "C" extern u8 data_805C732C[64];
extern "C" extern u8 data_805C736C[64];
extern "C" extern u8 data_805C73AC[68];
extern "C" extern u8 data_805C73F0[68];
extern "C" extern u8 data_805C7434[64];
extern "C" extern u8 data_805C77CC[24];
extern "C" extern void* g_profile_B_DR[12];
extern "C" extern void* __vt__12dBgS_AcchCir[3];
extern "C" extern void* __vt__10cCcD_GStts[3];
extern "C" extern void* __vt__10dCcD_GStts[3];
extern "C" extern void* __vt__8cM3dGSph[3];
extern "C" extern void* __vt__8cM3dGCyl[3];
extern "C" extern void* __vt__8cM3dGAab[3];
extern "C" extern void* __vt__12dBgS_ObjAcch[9];
extern "C" extern void* __vt__12J3DFrameCtrl[3];
extern "C" extern void* __vt__12daB_DR_HIO_c[3];
extern "C" extern u8 lit_1107[1 + 3 /* padding */];
extern "C" extern u8 lit_1105[1 + 3 /* padding */];
extern "C" extern u8 lit_1104[1 + 3 /* padding */];
extern "C" extern u8 lit_1099[1 + 3 /* padding */];
extern "C" extern u8 lit_1097[1 + 3 /* padding */];
extern "C" extern u8 lit_1095[1 + 3 /* padding */];
extern "C" extern u8 lit_1094[1 + 3 /* padding */];
extern "C" extern u8 lit_1057[1 + 3 /* padding */];
extern "C" extern u8 lit_1055[1 + 3 /* padding */];
extern "C" extern u8 lit_1053[1 + 3 /* padding */];
extern "C" extern u8 lit_1052[1 + 3 /* padding */];
extern "C" extern u8 lit_1014[1 + 3 /* padding */];
extern "C" extern u8 lit_1012[1 + 3 /* padding */];
extern "C" extern u8 lit_1010[1 + 3 /* padding */];
extern "C" extern u8 lit_6782[12 + 4 /* padding */];
extern "C" extern u8 lit_6785[12];
extern "C" extern u8 lit_6786[12];
extern "C" extern u8 lit_6787[12];
extern "C" extern u8 data_805C79AC[48];
extern "C" extern u8 data_805C79DC[4];
extern "C" extern u8 data_805C79E0[4];
extern "C" extern u8 data_805C79E4[4];
extern "C" extern u8 data_805C79E8[4];
extern "C" extern u8 data_805C79EC[4];
extern "C" extern u8 data_805C79F0[4];
extern "C" extern u8 data_805C79F4[4];
extern "C" extern u8 data_805C79F8[4];
extern "C" extern u8 data_805C79FC[4];
extern "C" extern u8 data_805C7A00[4];
extern "C" extern u8 data_805C7A04[4];
extern "C" extern u8 data_805C7A08[4];
extern "C" extern u8 data_805C7A0C[4];
extern "C" extern u8 data_805C7A10[4];
extern "C" extern u8 data_805C7A14[4];
extern "C" extern u8 data_805C7A18[4];
extern "C" extern u8 data_805C7A1C[4];
extern "C" extern u8 data_805C7A20[4];
extern "C" extern u8 data_805C7A24[4];
extern "C" extern u8 data_805C7A28[4];
extern "C" extern u8 data_805C7A2C[4];
extern "C" extern u8 data_805C7A30[4];
extern "C" extern u8 data_805C7A34[4];
extern "C" extern u8 data_805C7A38[4];
extern "C" extern u8 data_805C7A3C[4];

// 
// External References:
// 

// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
void mDoMtx_XrotM(f32 (* )[4], s16);
// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
void mDoMtx_YrotS(f32 (* )[4], s16);
// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
void mDoMtx_YrotM(f32 (* )[4], s16);
// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
void mDoMtx_ZrotM(f32 (* )[4], s16);
// False False
//  f32 const (* )[4] False
// 	 f32 const False
// 		 f32 False
// 	 * False
// 		  False
//  csXyz* False
// 	 csXyz False
void mDoMtx_MtxToRot(f32 const (* )[4], csXyz*);
// False False
//  J3DModel* False
// 	 J3DModel False
void mDoExt_modelUpdateDL(J3DModel*);
// False False
//  J3DModelData* False
// 	 J3DModelData False
//  u32 False
//  u32 False
void mDoExt_J3DModel__create(J3DModelData*, u32, u32);
// False False
//  void* (*)(void*, void*) False
// 	 * False
// 		  False
// 	 void* False
// 		 void False
// 	 void* False
// 		 void False
// 	 void* False
// 		 void False
//  void* False
// 	 void False
void fopAcIt_Judge(void* (*)(void*, void*), void*);
// False False
//  unsigned int False
//  fopAc_ac_c** False
// 	 fopAc_ac_c* False
// 		 fopAc_ac_c False
void fopAcM_SearchByID(unsigned int, fopAc_ac_c**);
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
void fopAcM_delete(fopAc_ac_c*);
// False False
//  s16 False
//  u32 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  int False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  s8 False
void fopAcM_create(s16, u32, cXyz const*, int, csXyz const*, cXyz const*, s8);
// False False
//  s16 False
//  unsigned int False
//  u32 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  int False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  s8 False
//  int (*)(void*) False
// 	 * False
// 		  False
// 	 int False
// 	 void* False
// 		 void False
void fopAcM_createChild(s16, unsigned int, u32, cXyz const*, int, csXyz const*, cXyz const*, s8, int (*)(void*));
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  int (*)(fopAc_ac_c*) False
// 	 * False
// 		  False
// 	 int False
// 	 fopAc_ac_c* False
// 		 fopAc_ac_c False
//  u32 False
void fopAcM_entrySolidHeap(fopAc_ac_c*, int (*)(fopAc_ac_c*), u32);
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  f32 False
//  f32 False
//  f32 False
void fopAcM_SetMin(fopAc_ac_c*, f32, f32, f32);
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  f32 False
//  f32 False
//  f32 False
void fopAcM_SetMax(fopAc_ac_c*, f32, f32, f32);
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
void fopAcM_posMove(fopAc_ac_c*, cXyz const*);
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
void fopAcM_posMoveF(fopAc_ac_c*, cXyz const*);
// False False
//  fopAc_ac_c const* False
// 	 fopAc_ac_c const False
// 		 fopAc_ac_c False
//  fopAc_ac_c const* False
// 	 fopAc_ac_c const False
// 		 fopAc_ac_c False
void fopAcM_searchActorAngleY(fopAc_ac_c const*, fopAc_ac_c const*);
// False False
//  fopAc_ac_c const* False
// 	 fopAc_ac_c const False
// 		 fopAc_ac_c False
//  fopAc_ac_c const* False
// 	 fopAc_ac_c const False
// 		 fopAc_ac_c False
void fopAcM_searchActorDistanceXZ(fopAc_ac_c const*, fopAc_ac_c const*);
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  u16 False
//  u16 False
//  u16 False
void fopAcM_orderPotentialEvent(fopAc_ac_c*, u16, u16, u16);
// False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  int False
//  int False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
//  f32 False
//  int False
void fopAcM_createItemForBoss(cXyz const*, int, int, csXyz const*, cXyz const*, f32, f32, int);
// False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  int False
//  u8 False
//  u8 False
//  u8 False
void fopAcM_createWarpHole(cXyz const*, csXyz const*, int, u8, u8, u8);
// False False
//  void* False
// 	 void False
//  void* False
// 	 void False
void fpcSch_JudgeByID(void*, void*);
// False False
//  int False
//  f32 False
//  u32 False
//  s8 False
//  s16 False
//  int False
void dStage_changeScene(int, f32, u32, s8, s16, int);
// False False
//  request_of_phase_process_class* False
// 	 request_of_phase_process_class False
//  char const* False
// 	 char const False
// 		 char False
void dComIfG_resLoad(request_of_phase_process_class*, char const*);
// False False
//  request_of_phase_process_class* False
// 	 request_of_phase_process_class False
//  char const* False
// 	 char const False
// 		 char False
void dComIfG_resDelete(request_of_phase_process_class*, char const*);
// False False
//  int False
void dComIfGp_getReverb(int);
// False False
//  int False
void dComIfGs_onStageBossEnemy(int);
// False False
//  int False
//  int False
void dComIfGs_onZoneSwitch(int, int);
// False False
//  int False
//  int False
void dComIfGs_isZoneSwitch(int, int);
// False False
//  u32 False
//  s8 False
//  J3DModel* False
// 	 J3DModel False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  cBgS_PolyInfo& False
// 	 cBgS_PolyInfo False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
//  s16 False
//  f32 False
//  _GXTexObj* False
// 	 _GXTexObj False
void dComIfGd_setShadow(u32, s8, J3DModel*, cXyz*, f32, f32, f32, f32, cBgS_PolyInfo&, dKy_tevstr_c*, s16, f32, _GXTexObj*);
// False False
//  f32 False
void dKyw_custom_windpower(f32);
// False False
//  s16 False
//  s16 False
void dKyw_evt_wind_set(s16, s16);
// False False
//  int False
//  int False
//  cXyz& False
// 	 cXyz False
//  csXyz& False
// 	 csXyz False
void daNpcF_getPlayerInfoFromPlayerList(int, int, cXyz&, csXyz&);
// False False
void dCam_getBody();
// False False
void dMw_onPauseWindow();
// False False
void dMw_offPauseWindow();
// False False
void cM_rnd();
// False False
//  f32 False
void cM_rndF(f32);
// False False
//  f32 False
void cM_rndFX(f32);
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
void cLib_addCalc(f32*, f32, f32, f32, f32);
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
//  f32 False
void cLib_addCalc2(f32*, f32, f32, f32);
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
void cLib_addCalc0(f32*, f32, f32);
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
//  f32 False
//  f32 False
void cLib_addCalcPos(cXyz*, cXyz const&, f32, f32, f32);
// False False
//  s16* False
// 	 s16 False
//  s16 False
//  s16 False
//  s16 False
void cLib_addCalcAngleS2(s16*, s16, s16, s16);
// False False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
void cLib_targetAngleY(Vec const*, Vec const*);
// False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
void cLib_targetAngleX(cXyz const*, cXyz const*);
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
void MtxPosition(cXyz*, cXyz*);
// False True
//  f32 const (* )[4] False
// 	 f32 const False
// 		 f32 False
// 	 * False
// 		  False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  JGeometry::TVec3<f32>* False
// 	 JGeometry::TVec3<f32> True
// 		 f32 False
//  JGeometry::TVec3<f32>* False
// 	 JGeometry::TVec3<f32> True
// 		 f32 False
void JPASetRMtxSTVecfromMtx(f32 const (* )[4], f32 (* )[4], JGeometry::TVec3__template0*, JGeometry::TVec3__template0*);
// False False
//  void* False
// 	 void False
//  u32 False
void* operator new(u32);
// False False
//  void False
//  void* False
// 	 void False
void operator delete(void*);

// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
extern "C" void mDoMtx_XrotM__FPA4_fs();
// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
extern "C" void mDoMtx_YrotS__FPA4_fs();
// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
extern "C" void mDoMtx_YrotM__FPA4_fs();
// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
extern "C" void mDoMtx_ZrotM__FPA4_fs();
// False False
//  f32 const (* )[4] False
// 	 f32 const False
// 		 f32 False
// 	 * False
// 		  False
//  csXyz* False
// 	 csXyz False
extern "C" void mDoMtx_MtxToRot__FPA4_CfP5csXyz();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
extern "C" void transS__14mDoMtx_stack_cFRC4cXyz();
// False False
//  f32 False
//  f32 False
//  f32 False
extern "C" void transM__14mDoMtx_stack_cFfff();
// False False
//  f32 False
//  f32 False
//  f32 False
extern "C" void scaleM__14mDoMtx_stack_cFfff();
// False False
//  csXyz const& False
// 	 csXyz const False
// 		 csXyz False
extern "C" void ZXYrotM__14mDoMtx_stack_cFRC5csXyz();
// False False
extern "C" void play__14mDoExt_baseAnmFv();
// False False
//  J3DMaterialTable* False
// 	 J3DMaterialTable False
//  J3DAnmTevRegKey* False
// 	 J3DAnmTevRegKey False
//  int False
//  int False
//  f32 False
//  s16 False
//  s16 False
extern "C" void init__13mDoExt_brkAnmFP16J3DMaterialTableP15J3DAnmTevRegKeyiifss();
// False False
//  J3DMaterialTable* False
// 	 J3DMaterialTable False
//  f32 False
extern "C" void entry__13mDoExt_brkAnmFP16J3DMaterialTablef();
// False False
//  J3DModel* False
// 	 J3DModel False
extern "C" void mDoExt_modelUpdateDL__FP8J3DModel();
// False False
//  J3DModelData* False
// 	 J3DModelData False
//  mDoExt_McaMorfCallBack1_c* False
// 	 mDoExt_McaMorfCallBack1_c False
//  mDoExt_McaMorfCallBack2_c* False
// 	 mDoExt_McaMorfCallBack2_c False
//  J3DAnmTransform* False
// 	 J3DAnmTransform False
//  int False
//  f32 False
//  int False
//  int False
//  Z2Creature* False
// 	 Z2Creature False
//  u32 False
//  u32 False
extern "C" void __ct__16mDoExt_McaMorfSOFP12J3DModelDataP25mDoExt_McaMorfCallBack1_cP25mDoExt_McaMorfCallBack2_cP15J3DAnmTransformifiiP10Z2CreatureUlUl();
// False False
//  J3DAnmTransform* False
// 	 J3DAnmTransform False
//  int False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
extern "C" void setAnm__16mDoExt_McaMorfSOFP15J3DAnmTransformiffff();
// False False
//  u32 False
//  s8 False
extern "C" void play__16mDoExt_McaMorfSOFUlSc();
// False False
extern "C" void entryDL__16mDoExt_McaMorfSOFv();
// False False
extern "C" void modelCalc__16mDoExt_McaMorfSOFv();
// False False
//  J3DModelData* False
// 	 J3DModelData False
//  u32 False
//  u32 False
extern "C" void mDoExt_J3DModel__create__FP12J3DModelDataUlUl();
// False False
extern "C" void __ct__10fopAc_ac_cFv();
// False False
//  void* (*)(void*, void*) False
// 	 * False
// 		  False
// 	 void* False
// 		 void False
// 	 void* False
// 		 void False
// 	 void* False
// 		 void False
//  void* False
// 	 void False
extern "C" void fopAcIt_Judge__FPFPvPv_PvPv();
// False False
//  unsigned int False
//  fopAc_ac_c** False
// 	 fopAc_ac_c* False
// 		 fopAc_ac_c False
extern "C" void fopAcM_SearchByID__FUiPP10fopAc_ac_c();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
extern "C" void fopAcM_delete__FP10fopAc_ac_c();
// False False
//  s16 False
//  u32 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  int False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  s8 False
extern "C" void fopAcM_create__FsUlPC4cXyziPC5csXyzPC4cXyzSc();
// False False
//  s16 False
//  unsigned int False
//  u32 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  int False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  s8 False
//  int (*)(void*) False
// 	 * False
// 		  False
// 	 int False
// 	 void* False
// 		 void False
extern "C" void fopAcM_createChild__FsUiUlPC4cXyziPC5csXyzPC4cXyzScPFPv_i();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  int (*)(fopAc_ac_c*) False
// 	 * False
// 		  False
// 	 int False
// 	 fopAc_ac_c* False
// 		 fopAc_ac_c False
//  u32 False
extern "C" void fopAcM_entrySolidHeap__FP10fopAc_ac_cPFP10fopAc_ac_c_iUl();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  f32 False
//  f32 False
//  f32 False
extern "C" void fopAcM_SetMin__FP10fopAc_ac_cfff();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  f32 False
//  f32 False
//  f32 False
extern "C" void fopAcM_SetMax__FP10fopAc_ac_cfff();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
extern "C" void fopAcM_posMove__FP10fopAc_ac_cPC4cXyz();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
extern "C" void fopAcM_posMoveF__FP10fopAc_ac_cPC4cXyz();
// False False
//  fopAc_ac_c const* False
// 	 fopAc_ac_c const False
// 		 fopAc_ac_c False
//  fopAc_ac_c const* False
// 	 fopAc_ac_c const False
// 		 fopAc_ac_c False
extern "C" void fopAcM_searchActorAngleY__FPC10fopAc_ac_cPC10fopAc_ac_c();
// False False
//  fopAc_ac_c const* False
// 	 fopAc_ac_c const False
// 		 fopAc_ac_c False
//  fopAc_ac_c const* False
// 	 fopAc_ac_c const False
// 		 fopAc_ac_c False
extern "C" void fopAcM_searchActorDistanceXZ__FPC10fopAc_ac_cPC10fopAc_ac_c();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  u16 False
//  u16 False
//  u16 False
extern "C" void fopAcM_orderPotentialEvent__FP10fopAc_ac_cUsUsUs();
// False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  int False
//  int False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
//  f32 False
//  int False
extern "C" void fopAcM_createItemForBoss__FPC4cXyziiPC5csXyzPC4cXyzffi();
// False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  int False
//  u8 False
//  u8 False
//  u8 False
extern "C" void fopAcM_createWarpHole__FPC4cXyzPC5csXyziUcUcUc();
// False False
//  void* False
// 	 void False
//  void* False
// 	 void False
extern "C" void fpcSch_JudgeByID__FPvPv();
// False False
//  int False
//  f32 False
//  u32 False
//  s8 False
//  s16 False
//  int False
extern "C" void dStage_changeScene__FifUlScsi();
// False False
//  request_of_phase_process_class* False
// 	 request_of_phase_process_class False
//  char const* False
// 	 char const False
// 		 char False
extern "C" void dComIfG_resLoad__FP30request_of_phase_process_classPCc();
// False False
//  request_of_phase_process_class* False
// 	 request_of_phase_process_class False
//  char const* False
// 	 char const False
// 		 char False
extern "C" void dComIfG_resDelete__FP30request_of_phase_process_classPCc();
// False False
//  int False
extern "C" void dComIfGp_getReverb__Fi();
// False False
//  int False
extern "C" void dComIfGs_onStageBossEnemy__Fi();
// False False
//  int False
//  int False
extern "C" void dComIfGs_onZoneSwitch__Fii();
// False False
//  int False
//  int False
extern "C" void dComIfGs_isZoneSwitch__Fii();
// False False
//  u32 False
//  s8 False
//  J3DModel* False
// 	 J3DModel False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  cBgS_PolyInfo& False
// 	 cBgS_PolyInfo False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
//  s16 False
//  f32 False
//  _GXTexObj* False
// 	 _GXTexObj False
extern "C" void dComIfGd_setShadow__FUlScP8J3DModelP4cXyzffffR13cBgS_PolyInfoP12dKy_tevstr_csfP9_GXTexObj();
// False False
//  int False
extern "C" void isDungeonItem__12dSv_memBit_cCFi();
// False False
//  u16 False
extern "C" void onEventBit__11dSv_event_cFUs();
// False False
//  int False
extern "C" void onSwitch__12dSv_danBit_cFi();
// False False
//  int False
extern "C" void offSwitch__12dSv_danBit_cFi();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  s16 False
//  s8 False
extern "C" void setRoom__13dSv_restart_cFRC4cXyzsSc();
// False False
//  int False
//  int False
extern "C" void onSwitch__10dSv_info_cFii();
// False False
//  int False
//  int False
extern "C" void offSwitch__10dSv_info_cFii();
// False False
//  char const* False
// 	 char const False
// 		 char False
//  s32 False
//  dRes_info_c* False
// 	 dRes_info_c False
//  int False
extern "C" void getRes__14dRes_control_cFPCclP11dRes_info_ci();
// False False
extern "C" void reset__14dEvt_control_cFv();
// False False
//  void* False
// 	 void False
//  int (*)(void*, int) False
// 	 * False
// 		  False
// 	 int False
// 	 void* False
// 		 void False
// 	 int False
//  int False
extern "C" void setSkipProc__14dEvt_control_cFPvPFPvi_ii();
// False False
//  u32 False
extern "C" void getEmitter__Q213dPa_control_c7level_cFUl();
// False False
//  u8 False
//  u16 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u8 False
//  dPa_levelEcallBack* False
// 	 dPa_levelEcallBack False
//  s8 False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
extern "C" void set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf();
// False False
//  u32 False
//  u8 False
//  u16 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u8 False
//  dPa_levelEcallBack* False
// 	 dPa_levelEcallBack False
//  s8 False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
extern "C" void set__13dPa_control_cFUlUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf();
// False False
//  u32 False
//  u16 False
//  cBgS_PolyInfo& False
// 	 cBgS_PolyInfo False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  int False
//  dPa_levelEcallBack* False
// 	 dPa_levelEcallBack False
//  s8 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
extern "C" void setPoly__13dPa_control_cFUlUsR13cBgS_PolyInfoPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyziP18dPa_levelEcallBackScPC4cXyz();
// False False
//  f32 False
extern "C" void dKyw_custom_windpower__Ff();
// False False
//  s16 False
//  s16 False
extern "C" void dKyw_evt_wind_set__Fss();
// False False
//  int False
//  int False
//  cXyz False
extern "C" void StartShock__12dVibration_cFii4cXyz();
// False False
//  int False
//  int False
//  cXyz False
extern "C" void StartQuake__12dVibration_cFii4cXyz();
// False False
//  int False
extern "C" void StopQuake__12dVibration_cFi();
// False False
//  s32 False
extern "C" void GetLockonList__12dAttention_cFl();
// False False
extern "C" void LockonTruth__12dAttention_cFv();
// False False
extern "C" void getActor__10dAttList_cFv();
// False False
//  cBgS_GndChk* False
// 	 cBgS_GndChk False
extern "C" void GroundCross__4cBgSFP11cBgS_GndChk();
// False False
extern "C" void __ct__12dBgS_AcchCirFv();
// False False
//  f32 False
//  f32 False
extern "C" void SetWall__12dBgS_AcchCirFff();
// False False
extern "C" void __dt__9dBgS_AcchFv();
// False False
extern "C" void __ct__9dBgS_AcchFv();
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  int False
//  dBgS_AcchCir* False
// 	 dBgS_AcchCir False
//  cXyz* False
// 	 cXyz False
//  csXyz* False
// 	 csXyz False
//  csXyz* False
// 	 csXyz False
extern "C" void Set__9dBgS_AcchFP4cXyzP4cXyzP10fopAc_ac_ciP12dBgS_AcchCirP4cXyzP5csXyzP5csXyz();
// False False
//  dBgS& False
// 	 dBgS False
extern "C" void CrrPos__9dBgS_AcchFR4dBgS();
// False False
//  f32 False
extern "C" void SetGroundUpY__9dBgS_AcchFf();
// False False
extern "C" void __ct__11dBgS_GndChkFv();
// False False
extern "C" void __dt__11dBgS_GndChkFv();
// False False
extern "C" void SetObj__16dBgS_PolyPassChkFv();
// False False
extern "C" void __ct__10dCcD_GSttsFv();
// False False
extern "C" void Move__10dCcD_GSttsFv();
// False False
//  int False
//  int False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
extern "C" void Init__9dCcD_SttsFiiP10fopAc_ac_c();
// False False
extern "C" void __ct__12dCcD_GObjInfFv();
// False False
extern "C" void __dt__12dCcD_GObjInfFv();
// False False
extern "C" void ChkTgHit__12dCcD_GObjInfFv();
// False False
extern "C" void GetTgHitObj__12dCcD_GObjInfFv();
// False False
//  dCcD_SrcCyl const& False
// 	 dCcD_SrcCyl const False
// 		 dCcD_SrcCyl False
extern "C" void Set__8dCcD_CylFRC11dCcD_SrcCyl();
// False False
//  dCcD_SrcSph const& False
// 	 dCcD_SrcSph const False
// 		 dCcD_SrcSph False
extern "C" void Set__8dCcD_SphFRC11dCcD_SrcSph();
// False False
//  int False
//  int False
//  cXyz& False
// 	 cXyz False
//  csXyz& False
// 	 csXyz False
extern "C" void daNpcF_getPlayerInfoFromPlayerList__FiiR4cXyzR5csXyz();
// False False
extern "C" void checkMasterSwordEquip__9daPy_py_cFv();
// False False
extern "C" void Start__9dCamera_cFv();
// False False
extern "C" void Stop__9dCamera_cFv();
// False False
//  s32 False
extern "C" void SetTrimSize__9dCamera_cFl();
// False False
//  s32 False
extern "C" void SetTrimTypeForce__9dCamera_cFl();
// False False
//  cXyz False
//  cXyz False
extern "C" void Set__9dCamera_cF4cXyz4cXyz();
// False False
extern "C" void dCam_getBody__Fv();
// False False
//  int False
//  cXyz* False
// 	 cXyz False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
extern "C" void settingTevStruct__18dScnKy_env_light_cFiP4cXyzP12dKy_tevstr_c();
// False False
//  J3DModelData* False
// 	 J3DModelData False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
extern "C" void setLightTevColorType_MAJI__18dScnKy_env_light_cFP12J3DModelDataP12dKy_tevstr_c();
// False False
extern "C" void dMw_onPauseWindow__Fv();
// False False
extern "C" void dMw_offPauseWindow__Fv();
// False False
extern "C" void __ct__10dMsgFlow_cFv();
// False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
extern "C" void Set__4cCcSFP8cCcD_Obj();
// False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
extern "C" void __pl__4cXyzCFRC3Vec();
// False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
extern "C" void __mi__4cXyzCFRC3Vec();
// False False
extern "C" void atan2sX_Z__4cXyzCFv();
// False False
extern "C" void atan2sY_XZ__4cXyzCFv();
// False False
extern "C" void cM_rnd__Fv();
// False False
//  f32 False
extern "C" void cM_rndF__Ff();
// False False
//  f32 False
extern "C" void cM_rndFX__Ff();
// False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
extern "C" void SetPos__11cBgS_GndChkFPC4cXyz();
// False False
extern "C" void __dt__13cBgS_PolyInfoFv();
// False False
extern "C" void __dt__8cM3dGCirFv();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
extern "C" void SetC__8cM3dGCylFRC4cXyz();
// False False
//  f32 False
extern "C" void SetH__8cM3dGCylFf();
// False False
//  f32 False
extern "C" void SetR__8cM3dGCylFf();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
extern "C" void SetC__8cM3dGSphFRC4cXyz();
// False False
//  f32 False
extern "C" void SetR__8cM3dGSphFf();
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
extern "C" void cLib_addCalc__FPfffff();
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
//  f32 False
extern "C" void cLib_addCalc2__FPffff();
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
extern "C" void cLib_addCalc0__FPfff();
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
//  f32 False
//  f32 False
extern "C" void cLib_addCalcPos__FP4cXyzRC4cXyzfff();
// False False
//  s16* False
// 	 s16 False
//  s16 False
//  s16 False
//  s16 False
extern "C" void cLib_addCalcAngleS2__FPssss();
// False False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
extern "C" void cLib_targetAngleY__FPC3VecPC3Vec();
// False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
extern "C" void cLib_targetAngleX__FPC4cXyzPC4cXyz();
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
extern "C" void MtxPosition__FP4cXyzP4cXyz();
// False True
//  f32 const (* )[4] False
// 	 f32 const False
// 		 f32 False
// 	 * False
// 		  False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  JGeometry::TVec3<f32>* False
// 	 JGeometry::TVec3<f32> True
// 		 f32 False
//  JGeometry::TVec3<f32>* False
// 	 JGeometry::TVec3<f32> True
// 		 f32 False
extern "C" void func_80280808();
// False False
//  JAISoundID False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  u32 False
//  s8 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  u8 False
extern "C" void seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc();
// False False
//  u32 False
//  u32 False
//  s32 False
extern "C" void bgmStart__8Z2SeqMgrFUlUll();
// False False
//  u32 False
//  s32 False
extern "C" void bgmStop__8Z2SeqMgrFUll();
// False False
//  u32 False
extern "C" void subBgmStart__8Z2SeqMgrFUl();
// False False
extern "C" void subBgmStop__8Z2SeqMgrFv();
// False False
//  u32 False
extern "C" void bgmStreamPrepare__8Z2SeqMgrFUl();
// False False
extern "C" void bgmStreamPlay__8Z2SeqMgrFv();
// False False
//  s32 False
extern "C" void changeBgmStatus__8Z2SeqMgrFl();
// False False
extern "C" void __ct__15Z2CreatureEnemyFv();
// False False
//  Vec* False
// 	 Vec False
//  Vec* False
// 	 Vec False
//  u8 False
//  u8 False
extern "C" void init__15Z2CreatureEnemyFP3VecP3VecUcUc();
// False False
//  Vec* False
// 	 Vec False
//  Vec* False
// 	 Vec False
//  Vec* False
// 	 Vec False
//  u8 False
//  u8 False
//  u8 False
extern "C" void init__15Z2CreatureEnemyFP3VecP3VecP3VecUcUcUc();
// False False
//  void* False
// 	 void False
//  u32 False
extern "C" void* __nw__FUl();
// False False
//  void False
//  void* False
// 	 void False
extern "C" void __dl__FPv();
// False False
//  s16 False
extern "C" void init__12J3DFrameCtrlFs();
// False False
//  f32 False
extern "C" void checkPass__12J3DFrameCtrlFf();
// False False
extern "C" void PSMTXCopy();
// False False
extern "C" void PSMTXInverse();
// False False
extern "C" void PSMTXMultVec();
// False False
extern "C" void PSVECAdd();
// False False
extern "C" void PSVECSquareMag();
// False False
extern "C" void PSVECSquareDistance();
// False False
extern "C" void __construct_array();
// False False
extern "C" void _savegpr_21();
// False False
extern "C" void _savegpr_22();
// False False
extern "C" void _savegpr_24();
// False False
extern "C" void _savegpr_25();
// False False
extern "C" void _savegpr_26();
// False False
extern "C" void _savegpr_27();
// False False
extern "C" void _savegpr_28();
// False False
extern "C" void _savegpr_29();
// False False
extern "C" void _restgpr_21();
// False False
extern "C" void _restgpr_22();
// False False
extern "C" void _restgpr_24();
// False False
extern "C" void _restgpr_25();
// False False
extern "C" void _restgpr_26();
// False False
extern "C" void _restgpr_27();
// False False
extern "C" void _restgpr_28();
// False False
extern "C" void _restgpr_29();
// False False
extern "C" void abs();
extern "C" extern void* g_fopAc_Method[8];
extern "C" extern void* g_fpcLf_Method[5 + 1 /* padding */];
extern "C" extern void* __vt__8dCcD_Sph[36];
extern "C" extern void* __vt__8dCcD_Cyl[36];
extern "C" extern void* __vt__9dCcD_Stts[11];
extern "C" extern void* __vt__12cCcD_SphAttr[25];
extern "C" extern void* __vt__12cCcD_CylAttr[25];
extern "C" extern void* __vt__14cCcD_ShapeAttr[22];
extern "C" extern void* __vt__9cCcD_Stts[8];
extern "C" extern u8 now__14mDoMtx_stack_c[48];
extern "C" extern u8 g_dComIfG_gameInfo[122384];
extern "C" extern u8 mSimpleTexObj__21dDlst_shadowControl_c[32];
extern "C" extern u8 g_env_light[4880];
extern "C" extern u8 j3dSys[284];
extern "C" extern u8 mCurrentMtx__6J3DSys[48];
extern "C" extern u8 sincosTable___5JMath[65536];
extern "C" extern void* calc_mtx[1 + 1 /* padding */];
extern "C" extern u32 __float_nan;
extern "C" extern u8 struct_80450C98[4];
extern "C" extern u8 mAudioMgrPtr__10Z2AudioMgr[4 + 4 /* padding */];
// False False
extern "C" void __register_global_object();

// 
// Declarations:
// 

/* ############################################################################################## */
/* 805C6C74-805C6C78 0004+00 s=33 e=0 z=0  None .rodata    @3800                                                        */
SECTION_RODATA static u32 const lit_3800 = 0x3F4CCCCD;

/* 805C7248-805C7254 000C+00 s=1 e=0 z=0  None .data      cNullVec__6Z2Calc                                            */
SECTION_DATA static u8 cNullVec__6Z2Calc[12] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 805C7254-805C7268 0004+10 s=0 e=0 z=0  None .data      @1787                                                        */
SECTION_DATA u32 lit_1787[1 + 4 /* padding */] = {
	0x02000201,
	/* padding */
	0x40080000, 0x00000000, 0x3FE00000, 0x00000000,
};

/* 805C7268-805C72AC 0044+00 s=0 e=0 z=0  None .data      cc_dr_week_src__22@unnamed@d_a_b_dr_cpp@                     */
SECTION_DATA u8 data_805C7268[68] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x20, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
};

/* 805C72AC-805C72EC 0040+00 s=0 e=0 z=0  None .data      cc_dr_tail_src__22@unnamed@d_a_b_dr_cpp@                     */
SECTION_DATA u8 data_805C72AC[64] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x20, 0x00, 0x00,
};

/* 805C72EC-805C732C 0040+00 s=0 e=0 z=0  None .data      cc_dr_breath_at_src__22@unnamed@d_a_b_dr_cpp@                */
SECTION_DATA u8 data_805C72EC[64] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x0D, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x20, 0x00, 0x00,
};

/* 805C732C-805C736C 0040+00 s=0 e=0 z=0  None .data      cc_dr_wind_at_src__22@unnamed@d_a_b_dr_cpp@                  */
SECTION_DATA u8 data_805C732C[64] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x20, 0x00, 0x00,
};

/* 805C736C-805C73AC 0040+00 s=0 e=0 z=0  None .data      cc_dr_foot_at_src__22@unnamed@d_a_b_dr_cpp@                  */
SECTION_DATA u8 data_805C736C[64] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x20, 0x00, 0x00,
};

/* 805C73AC-805C73F0 0044+00 s=0 e=0 z=0  None .data      cc_pillar_src__22@unnamed@d_a_b_dr_cpp@                      */
SECTION_DATA u8 data_805C73AC[68] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x0D, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x07, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x20, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
};

/* 805C73F0-805C7434 0044+00 s=0 e=0 z=0  None .data      cc_down_src__22@unnamed@d_a_b_dr_cpp@                        */
SECTION_DATA u8 data_805C73F0[68] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xD8, 0xFB, 0xFD, 0xFF, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x15, 0x0D, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x14, 0x07, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x48, 0x00, 0x00,
	0x43, 0x96, 0x00, 0x00,
};

/* 805C7434-805C7474 0040+00 s=0 e=0 z=0  None .data      cc_downSph_src__22@unnamed@d_a_b_dr_cpp@                     */
SECTION_DATA u8 data_805C7434[64] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xD8, 0xFB, 0xFD, 0xFF, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x15, 0x0D, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x14, 0x07, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x20, 0x00, 0x00,
};

/* 805C7474-805C7478 0004+00 s=1 e=0 z=0  None .data      mBreakDt$3901                                                */
SECTION_DATA static u8 mBreakDt[4] = {
	0x00, 0x03, 0x04, 0x02,
};

/* 805C7478-805C7554 00DC+00 s=1 e=0 z=0  None .data      @4342                                                        */
SECTION_DATA static void* lit_4342[55] = {
	(void*)(((char*)setSe__8daB_DR_cFv)+0x4E8),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x548),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x678),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x88C),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x528),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x88C),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x88C),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x29C),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x6F0),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x88C),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x3C0),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x404),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x3C0),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x88C),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x88C),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x88C),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x448),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x88C),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x88C),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x88C),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x88C),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x4C),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x6C),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x8C),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x1F4),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x1BC),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x710),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x730),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x528),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x4A8),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x88C),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x768),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x768),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x478),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x478),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x528),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x88C),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x788),
	(void*)(((char*)setSe__8daB_DR_cFv)+0xCC),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x88C),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x88C),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x88C),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x528),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x88C),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x7A8),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x144),
	(void*)(((char*)setSe__8daB_DR_cFv)+0xAC),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x7C8),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x800),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x838),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x788),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x528),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x528),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x478),
	(void*)(((char*)setSe__8daB_DR_cFv)+0x870),
};

/* 805C7554-805C755C 0008+00 s=1 e=0 z=0  None .data      w_eff_id$4346                                                */
SECTION_DATA static u8 w_eff_id[8] = {
	0x85, 0x4C, 0x85, 0x4D, 0x85, 0x4E, 0x85, 0x4F,
};

/* 805C755C-805C75E4 0088+00 s=1 e=0 z=0  None .data      @4528                                                        */
SECTION_DATA static void* lit_4528[34] = {
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x244),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x168),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x1F8),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0xFC),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x4C),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0xE4),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x98),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x298),
	(void*)(((char*)mHabatakiAnmSet__8daB_DR_cFi)+0x2B0),
};

/* 805C75E4-805C7648 0064+00 s=1 e=0 z=0  None .data      @4618                                                        */
SECTION_DATA static void* lit_4618[25] = {
	(void*)(((char*)mGlider_AniSet__8daB_DR_cFb)+0x2B8),
	(void*)(((char*)mGlider_AniSet__8daB_DR_cFb)+0x174),
	(void*)(((char*)mGlider_AniSet__8daB_DR_cFb)+0x1DC),
	(void*)(((char*)mGlider_AniSet__8daB_DR_cFb)+0x248),
	(void*)(((char*)mGlider_AniSet__8daB_DR_cFb)+0x320),
	(void*)(((char*)mGlider_AniSet__8daB_DR_cFb)+0x2B8),
	(void*)(((char*)mGlider_AniSet__8daB_DR_cFb)+0x320),
	(void*)(((char*)mGlider_AniSet__8daB_DR_cFb)+0xEC),
	(void*)(((char*)mGlider_AniSet__8daB_DR_cFb)+0x320),
	(void*)(((char*)mGlider_AniSet__8daB_DR_cFb)+0x320),
	(void*)(((char*)mGlider_AniSet__8daB_DR_cFb)+0x320),
	(void*)(((char*)mGlider_AniSet__8daB_DR_cFb)+0x320),
	(void*)(((char*)mGlider_AniSet__8daB_DR_cFb)+0x320),
	(void*)(((char*)mGlider_AniSet__8daB_DR_cFb)+0x320),
	(void*)(((char*)mGlider_AniSet__8daB_DR_cFb)+0x320),
	(void*)(((char*)mGlider_AniSet__8daB_DR_cFb)+0x320),
	(void*)(((char*)mGlider_AniSet__8daB_DR_cFb)+0x320),
	(void*)(((char*)mGlider_AniSet__8daB_DR_cFb)+0x320),
	(void*)(((char*)mGlider_AniSet__8daB_DR_cFb)+0x320),
	(void*)(((char*)mGlider_AniSet__8daB_DR_cFb)+0x320),
	(void*)(((char*)mGlider_AniSet__8daB_DR_cFb)+0x320),
	(void*)(((char*)mGlider_AniSet__8daB_DR_cFb)+0x320),
	(void*)(((char*)mGlider_AniSet__8daB_DR_cFb)+0x320),
	(void*)(((char*)mGlider_AniSet__8daB_DR_cFb)+0x84),
	(void*)(((char*)mGlider_AniSet__8daB_DR_cFb)+0xEC),
};

/* 805C7648-805C76A0 0058+00 s=1 e=0 z=0  None .data      @4662                                                        */
SECTION_DATA static void* lit_4662[22] = {
	(void*)(((char*)mGliderAtAniSet__8daB_DR_cFv)+0x9C),
	(void*)(((char*)mGliderAtAniSet__8daB_DR_cFv)+0x3C),
	(void*)(((char*)mGliderAtAniSet__8daB_DR_cFv)+0x84),
	(void*)(((char*)mGliderAtAniSet__8daB_DR_cFv)+0x14C),
	(void*)(((char*)mGliderAtAniSet__8daB_DR_cFv)+0x3C),
	(void*)(((char*)mGliderAtAniSet__8daB_DR_cFv)+0x14C),
	(void*)(((char*)mGliderAtAniSet__8daB_DR_cFv)+0x14C),
	(void*)(((char*)mGliderAtAniSet__8daB_DR_cFv)+0x14C),
	(void*)(((char*)mGliderAtAniSet__8daB_DR_cFv)+0x14C),
	(void*)(((char*)mGliderAtAniSet__8daB_DR_cFv)+0x14C),
	(void*)(((char*)mGliderAtAniSet__8daB_DR_cFv)+0x14C),
	(void*)(((char*)mGliderAtAniSet__8daB_DR_cFv)+0x14C),
	(void*)(((char*)mGliderAtAniSet__8daB_DR_cFv)+0x14C),
	(void*)(((char*)mGliderAtAniSet__8daB_DR_cFv)+0x14C),
	(void*)(((char*)mGliderAtAniSet__8daB_DR_cFv)+0x14C),
	(void*)(((char*)mGliderAtAniSet__8daB_DR_cFv)+0x14C),
	(void*)(((char*)mGliderAtAniSet__8daB_DR_cFv)+0x14C),
	(void*)(((char*)mGliderAtAniSet__8daB_DR_cFv)+0x14C),
	(void*)(((char*)mGliderAtAniSet__8daB_DR_cFv)+0x14C),
	(void*)(((char*)mGliderAtAniSet__8daB_DR_cFv)+0x14C),
	(void*)(((char*)mGliderAtAniSet__8daB_DR_cFv)+0x14C),
	(void*)(((char*)mGliderAtAniSet__8daB_DR_cFv)+0x100),
};

/* 805C76A0-805C76A8 0008+00 s=1 e=0 z=0  None .data      effId$5784                                                   */
SECTION_DATA static u8 effId[8] = {
	0x89, 0x9B, 0x89, 0x9C, 0x89, 0x9D, 0x89, 0x9E,
};

/* 805C76A8-805C7704 005C+00 s=1 e=0 z=0  None .data      @6776                                                        */
SECTION_DATA static void* lit_6776[23] = {
	(void*)(((char*)executeGliderAttack__8daB_DR_cFv)+0x5C),
	(void*)(((char*)executeGliderAttack__8daB_DR_cFv)+0x124),
	(void*)(((char*)executeGliderAttack__8daB_DR_cFv)+0x18C),
	(void*)(((char*)executeGliderAttack__8daB_DR_cFv)+0x18C),
	(void*)(((char*)executeGliderAttack__8daB_DR_cFv)+0xD90),
	(void*)(((char*)executeGliderAttack__8daB_DR_cFv)+0xD90),
	(void*)(((char*)executeGliderAttack__8daB_DR_cFv)+0xD90),
	(void*)(((char*)executeGliderAttack__8daB_DR_cFv)+0xD90),
	(void*)(((char*)executeGliderAttack__8daB_DR_cFv)+0xD90),
	(void*)(((char*)executeGliderAttack__8daB_DR_cFv)+0xD90),
	(void*)(((char*)executeGliderAttack__8daB_DR_cFv)+0x8B4),
	(void*)(((char*)executeGliderAttack__8daB_DR_cFv)+0x7EC),
	(void*)(((char*)executeGliderAttack__8daB_DR_cFv)+0xD90),
	(void*)(((char*)executeGliderAttack__8daB_DR_cFv)+0xD90),
	(void*)(((char*)executeGliderAttack__8daB_DR_cFv)+0xD90),
	(void*)(((char*)executeGliderAttack__8daB_DR_cFv)+0xD90),
	(void*)(((char*)executeGliderAttack__8daB_DR_cFv)+0xD90),
	(void*)(((char*)executeGliderAttack__8daB_DR_cFv)+0xD90),
	(void*)(((char*)executeGliderAttack__8daB_DR_cFv)+0xD90),
	(void*)(((char*)executeGliderAttack__8daB_DR_cFv)+0xD90),
	(void*)(((char*)executeGliderAttack__8daB_DR_cFv)+0xADC),
	(void*)(((char*)executeGliderAttack__8daB_DR_cFv)+0xB94),
	(void*)(((char*)executeGliderAttack__8daB_DR_cFv)+0xBF4),
};

/* 805C7704-805C773C 0038+00 s=1 e=0 z=0  None .data      @7387                                                        */
SECTION_DATA static void* lit_7387[14] = {
	(void*)(((char*)executeDamageDemo__8daB_DR_cFv)+0x64),
	(void*)(((char*)executeDamageDemo__8daB_DR_cFv)+0xB0),
	(void*)(((char*)executeDamageDemo__8daB_DR_cFv)+0x1D4),
	(void*)(((char*)executeDamageDemo__8daB_DR_cFv)+0x5F0),
	(void*)(((char*)executeDamageDemo__8daB_DR_cFv)+0x5F0),
	(void*)(((char*)executeDamageDemo__8daB_DR_cFv)+0x5F0),
	(void*)(((char*)executeDamageDemo__8daB_DR_cFv)+0x5F0),
	(void*)(((char*)executeDamageDemo__8daB_DR_cFv)+0x5F0),
	(void*)(((char*)executeDamageDemo__8daB_DR_cFv)+0x5F0),
	(void*)(((char*)executeDamageDemo__8daB_DR_cFv)+0x5F0),
	(void*)(((char*)executeDamageDemo__8daB_DR_cFv)+0x354),
	(void*)(((char*)executeDamageDemo__8daB_DR_cFv)+0x3C4),
	(void*)(((char*)executeDamageDemo__8daB_DR_cFv)+0x4D8),
	(void*)(((char*)executeDamageDemo__8daB_DR_cFv)+0x59C),
};

/* 805C773C-805C776C 0030+00 s=1 e=0 z=0  None .data      @7559                                                        */
SECTION_DATA static void* lit_7559[12] = {
	(void*)(((char*)executeParts__8daB_DR_cFv)+0x50),
	(void*)(((char*)executeParts__8daB_DR_cFv)+0xD8),
	(void*)(((char*)executeParts__8daB_DR_cFv)+0x128),
	(void*)(((char*)executeParts__8daB_DR_cFv)+0x194),
	(void*)(((char*)executeParts__8daB_DR_cFv)+0x2C0),
	(void*)(((char*)executeParts__8daB_DR_cFv)+0x2C0),
	(void*)(((char*)executeParts__8daB_DR_cFv)+0x2C0),
	(void*)(((char*)executeParts__8daB_DR_cFv)+0x2C0),
	(void*)(((char*)executeParts__8daB_DR_cFv)+0x2C0),
	(void*)(((char*)executeParts__8daB_DR_cFv)+0x2C0),
	(void*)(((char*)executeParts__8daB_DR_cFv)+0x1B8),
	(void*)(((char*)executeParts__8daB_DR_cFv)+0x2A8),
};

/* 805C776C-805C77A4 0038+00 s=1 e=0 z=0  None .data      @7648                                                        */
SECTION_DATA static void* lit_7648[14] = {
	(void*)(((char*)action__8daB_DR_cFv)+0x5C),
	(void*)(((char*)action__8daB_DR_cFv)+0x68),
	(void*)(((char*)action__8daB_DR_cFv)+0x74),
	(void*)(((char*)action__8daB_DR_cFv)+0x88),
	(void*)(((char*)action__8daB_DR_cFv)+0x9C),
	(void*)(((char*)action__8daB_DR_cFv)+0xB0),
	(void*)(((char*)action__8daB_DR_cFv)+0xB0),
	(void*)(((char*)action__8daB_DR_cFv)+0xBC),
	(void*)(((char*)action__8daB_DR_cFv)+0xD0),
	(void*)(((char*)action__8daB_DR_cFv)+0xE4),
	(void*)(((char*)action__8daB_DR_cFv)+0x130),
	(void*)(((char*)action__8daB_DR_cFv)+0xF8),
	(void*)(((char*)action__8daB_DR_cFv)+0x10C),
	(void*)(((char*)action__8daB_DR_cFv)+0x120),
};

/* 805C77A4-805C77AC 0008+00 s=1 e=0 z=0  None .data      effLId$7688                                                  */
SECTION_DATA static u8 effLId[8] = {
	0x89, 0xE4, 0x89, 0xE5, 0x89, 0xE6, 0x89, 0xE7,
};

/* 805C77AC-805C77B4 0008+00 s=1 e=0 z=0  None .data      effRId$7689                                                  */
SECTION_DATA static u8 effRId[8] = {
	0x89, 0xE8, 0x89, 0xE9, 0x89, 0xEA, 0x89, 0xEB,
};

/* 805C77B4-805C77CC 0018+00 s=1 e=0 z=0  None .data      mPartDt$8292                                                 */
SECTION_DATA static u8 mPartDt[24] = {
	0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00, 0x4C,
	0x00, 0x00, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x4E,
};

/* 805C77CC-805C77E4 0018+00 s=0 e=0 z=0  None .data      mParts_EstimateSizeDt$8381                                   */
SECTION_DATA u8 data_805C77CC[24] = {
	0x00, 0x00, 0x19, 0x80, 0x00, 0x00, 0x19, 0x90, 0x00, 0x00, 0x0D, 0x50, 0x00, 0x00, 0x0D, 0x40,
	0x00, 0x00, 0x0D, 0x40, 0x00, 0x00, 0x0D, 0x40,
};

/* 805C77E4-805C7804 0020+00 s=1 e=0 z=0  None .data      l_daB_DR_Method                                              */
SECTION_DATA static void* l_daB_DR_Method[8] = {
	(void*)daB_DR_Create__FP8daB_DR_c,
	(void*)daB_DR_Delete__FP8daB_DR_c,
	(void*)daB_DR_Execute__FP8daB_DR_c,
	(void*)daB_DR_IsDelete__FP8daB_DR_c,
	(void*)daB_DR_Draw__FP8daB_DR_c,
	(void*)NULL,
	(void*)NULL,
	(void*)NULL,
};

/* 805C7804-805C7834 0030+00 s=0 e=0 z=1  None .data      g_profile_B_DR                                               */
SECTION_DATA void* g_profile_B_DR[12] = {
	(void*)0xFFFFFFFD,
	(void*)0x0004FFFD,
	(void*)0x00F70000,
	(void*)&g_fpcLf_Method,
	(void*)0x00002860,
	(void*)NULL,
	(void*)NULL,
	(void*)&g_fopAc_Method,
	(void*)0x00DD0000,
	(void*)&l_daB_DR_Method,
	(void*)0x04040000,
	(void*)0x020E0000,
};

/* 805C7834-805C7840 000C+00 s=1 e=0 z=0  None .data      __vt__12dBgS_AcchCir                                         */
SECTION_DATA void* __vt__12dBgS_AcchCir[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__12dBgS_AcchCirFv,
};

/* 805C7840-805C784C 000C+00 s=2 e=0 z=0  None .data      __vt__10cCcD_GStts                                           */
SECTION_DATA void* __vt__10cCcD_GStts[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__10cCcD_GSttsFv,
};

/* 805C784C-805C7858 000C+00 s=1 e=0 z=0  None .data      __vt__10dCcD_GStts                                           */
SECTION_DATA void* __vt__10dCcD_GStts[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__10dCcD_GSttsFv,
};

/* 805C7858-805C7864 000C+00 s=4 e=0 z=0  None .data      __vt__8cM3dGSph                                              */
SECTION_DATA void* __vt__8cM3dGSph[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__8cM3dGSphFv,
};

/* 805C7864-805C7870 000C+00 s=4 e=0 z=0  None .data      __vt__8cM3dGCyl                                              */
SECTION_DATA void* __vt__8cM3dGCyl[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__8cM3dGCylFv,
};

/* 805C7870-805C787C 000C+00 s=6 e=0 z=0  None .data      __vt__8cM3dGAab                                              */
SECTION_DATA void* __vt__8cM3dGAab[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__8cM3dGAabFv,
};

/* 805C787C-805C78A0 0024+00 s=2 e=0 z=0  None .data      __vt__12dBgS_ObjAcch                                         */
SECTION_DATA void* __vt__12dBgS_ObjAcch[9] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__12dBgS_ObjAcchFv,
	(void*)NULL,
	(void*)NULL,
	(void*)func_805C6C58,
	(void*)NULL,
	(void*)NULL,
	(void*)func_805C6C50,
};

/* 805C78A0-805C78AC 000C+00 s=2 e=0 z=0  None .data      __vt__12J3DFrameCtrl                                         */
SECTION_DATA void* __vt__12J3DFrameCtrl[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__12J3DFrameCtrlFv,
};

/* 805C78AC-805C78B8 000C+00 s=2 e=0 z=0  None .data      __vt__12daB_DR_HIO_c                                         */
SECTION_DATA void* __vt__12daB_DR_HIO_c[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__12daB_DR_HIO_cFv,
};

/* 805BAE6C-805BAF80 0114+00 s=1 e=0 z=0  None .text      __ct__12daB_DR_HIO_cFv                                       */
//	805BAE6C: 805C6C74 (lit_3800)
//	805BAE70: 805C6C74 (lit_3800)
//	805BAE74: 805C78AC (__vt__12daB_DR_HIO_c)
//	805BAE78: 805C78AC (__vt__12daB_DR_HIO_c)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm daB_DR_HIO_c::daB_DR_HIO_c() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/__ct__12daB_DR_HIO_cFv.s"
}
#pragma pop


/* 805BAF80-805BB0E4 0164+00 s=1 e=0 z=0  None .text      ctrlJoint__8daB_DR_cFP8J3DJointP8J3DModel                    */
//	805BAF90: 803621D8 (_savegpr_28)
//	805BAFB0: 803DD470 (now__14mDoMtx_stack_c)
//	805BAFB4: 803DD470 (now__14mDoMtx_stack_c)
//	805BAFB8: 803464B0 (PSMTXCopy)
//	805BAFDC: 803DD470 (now__14mDoMtx_stack_c)
//	805BAFE0: 803DD470 (now__14mDoMtx_stack_c)
//	805BAFE8: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	805BAFEC: 803DD470 (now__14mDoMtx_stack_c)
//	805BAFF0: 803DD470 (now__14mDoMtx_stack_c)
//	805BAFF8: 8000C4CC (mDoMtx_ZrotM__FPA4_fs)
//	805BB000: 803DD470 (now__14mDoMtx_stack_c)
//	805BB004: 803DD470 (now__14mDoMtx_stack_c)
//	805BB014: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	805BB018: 803DD470 (now__14mDoMtx_stack_c)
//	805BB01C: 803DD470 (now__14mDoMtx_stack_c)
//	805BB02C: 8000C4CC (mDoMtx_ZrotM__FPA4_fs)
//	805BB034: 803DD470 (now__14mDoMtx_stack_c)
//	805BB038: 803DD470 (now__14mDoMtx_stack_c)
//	805BB048: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	805BB04C: 803DD470 (now__14mDoMtx_stack_c)
//	805BB050: 803DD470 (now__14mDoMtx_stack_c)
//	805BB060: 8000C4CC (mDoMtx_ZrotM__FPA4_fs)
//	805BB06C: 803DD470 (now__14mDoMtx_stack_c)
//	805BB070: 803DD470 (now__14mDoMtx_stack_c)
//	805BB078: 8000C39C (mDoMtx_XrotM__FPA4_fs)
//	805BB07C: 803DD470 (now__14mDoMtx_stack_c)
//	805BB080: 803DD470 (now__14mDoMtx_stack_c)
//	805BB088: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	805BB08C: 803DD470 (now__14mDoMtx_stack_c)
//	805BB090: 803DD470 (now__14mDoMtx_stack_c)
//	805BB098: 8000C4CC (mDoMtx_ZrotM__FPA4_fs)
//	805BB09C: 803DD470 (now__14mDoMtx_stack_c)
//	805BB0A0: 803DD470 (now__14mDoMtx_stack_c)
//	805BB0B0: 803464B0 (PSMTXCopy)
//	805BB0B4: 803DD470 (now__14mDoMtx_stack_c)
//	805BB0B8: 803DD470 (now__14mDoMtx_stack_c)
//	805BB0BC: 80434BE4 (mCurrentMtx__6J3DSys)
//	805BB0C0: 80434BE4 (mCurrentMtx__6J3DSys)
//	805BB0C4: 803464B0 (PSMTXCopy)
//	805BB0D0: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  J3DJoint* False
// 	 J3DJoint False
//  J3DModel* False
// 	 J3DModel False
asm void daB_DR_c::ctrlJoint(J3DJoint* param_0, J3DModel* param_1) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/ctrlJoint__8daB_DR_cFP8J3DJointP8J3DModel.s"
}
#pragma pop


/* 805BB0E4-805BB120 003C+00 s=1 e=0 z=0  None .text      __dt__4cXyzFv                                                */
//	805BB104: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cXyz::~cXyz() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/__dt__4cXyzFv.s"
}
#pragma pop


/* 805BB120-805BB16C 004C+00 s=1 e=0 z=0  None .text      JointCallBack__8daB_DR_cFP8J3DJointi                         */
//	805BB138: 80434AC8 (j3dSys)
//	805BB13C: 80434AC8 (j3dSys)
//	805BB154: 805BAF80 (ctrlJoint__8daB_DR_cFP8J3DJointP8J3DModel)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  J3DJoint* False
// 	 J3DJoint False
//  int False
asm void daB_DR_c::JointCallBack(J3DJoint* param_0, int param_1) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/JointCallBack__8daB_DR_cFP8J3DJointi.s"
}
#pragma pop


/* 805BB16C-805BB3E8 027C+00 s=1 e=0 z=0  None .text      draw__8daB_DR_cFv                                            */
//	805BB17C: 803621DC (_savegpr_29)
//	805BB184: 805C6C74 (lit_3800)
//	805BB188: 805C6C74 (lit_3800)
//	805BB1C0: 8042CA54 (g_env_light)
//	805BB1C4: 8042CA54 (g_env_light)
//	805BB1D4: 801A37C4 (settingTevStruct__18dScnKy_env_light_cFiP4cXyzP12dKy_tevstr_c)
//	805BB1D8: 8042CA54 (g_env_light)
//	805BB1DC: 8042CA54 (g_env_light)
//	805BB1EC: 801A4DA0 (setLightTevColorType_MAJI__18dScnKy_env_light_cFP12J3DModelDataP12dKy_tevstr_c)
//	805BB260: 8000DCC4 (mDoExt_modelUpdateDL__FP8J3DModel)
//	805BB274: 8042CA54 (g_env_light)
//	805BB278: 8042CA54 (g_env_light)
//	805BB288: 801A37C4 (settingTevStruct__18dScnKy_env_light_cFiP4cXyzP12dKy_tevstr_c)
//	805BB28C: 8042CA54 (g_env_light)
//	805BB290: 8042CA54 (g_env_light)
//	805BB29C: 801A4DA0 (setLightTevColorType_MAJI__18dScnKy_env_light_cFP12J3DModelDataP12dKy_tevstr_c)
//	805BB2B0: 805C7474 (mBreakDt)
//	805BB2B4: 805C7474 (mBreakDt)
//	805BB364: 8000D7A8 (entry__13mDoExt_brkAnmFP16J3DMaterialTablef)
//	805BB36C: 800111C0 (entryDL__16mDoExt_McaMorfSOFv)
//	805BB3BC: 804248D0 (mSimpleTexObj__21dDlst_shadowControl_c)
//	805BB3C0: 804248D0 (mSimpleTexObj__21dDlst_shadowControl_c)
//	805BB3C4: 8002E910 (dComIfGd_setShadow__FUlScP8J3DModelP4cXyzffffR13cBgS_PolyInfoP12dKy_tevstr_csfP9_GXTexObj)
//	805BB3D4: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::draw() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/draw__8daB_DR_cFv.s"
}
#pragma pop


/* 805BB3E8-805BB408 0020+00 s=1 e=0 z=0  None .text      daB_DR_Draw__FP8daB_DR_c                                     */
//	805BB3F4: 805BB16C (draw__8daB_DR_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daB_DR_c* False
// 	 daB_DR_c False
asm static void daB_DR_Draw(daB_DR_c* param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/daB_DR_Draw__FP8daB_DR_c.s"
}
#pragma pop


/* ############################################################################################## */
/* 805C6C78-805C6C7C 0004+00 s=0 e=0 z=0  None .rodata    @3801                                                        */
SECTION_RODATA u32 const lit_3801 = 0x40000000;

/* 805C6C7C-805C6C80 0004+00 s=0 e=0 z=0  None .rodata    @3802                                                        */
SECTION_RODATA u32 const lit_3802 = 0x42480000;

/* 805C6C80-805C6C84 0004+00 s=0 e=0 z=0  None .rodata    @3803                                                        */
SECTION_RODATA u32 const lit_3803 = 0x44FA0000;

/* 805C6C84-805C6C88 0004+00 s=0 e=0 z=0  None .rodata    @3804                                                        */
SECTION_RODATA u32 const lit_3804 = 0x41700000;

/* 805C6C88-805C6C8C 0004+00 s=0 e=0 z=0  None .rodata    @3805                                                        */
SECTION_RODATA u32 const lit_3805 = 0x41C80000;

/* 805C6C8C-805C6C90 0004+00 s=0 e=0 z=0  None .rodata    @3806                                                        */
SECTION_RODATA u32 const lit_3806 = 0x447A0000;

/* 805C6C90-805C6C94 0004+00 s=0 e=0 z=0  None .rodata    @3807                                                        */
SECTION_RODATA u32 const lit_3807 = 0x41A00000;

/* 805C6C94-805C6C98 0004+00 s=0 e=0 z=0  None .rodata    @3808                                                        */
SECTION_RODATA u32 const lit_3808 = 0x40A00000;

/* 805C6C98-805C6C9C 0004+00 s=0 e=0 z=0  None .rodata    @3809                                                        */
SECTION_RODATA u32 const lit_3809 = 0x41200000;

/* 805C6C9C-805C6CA0 0004+00 s=0 e=0 z=0  None .rodata    @3810                                                        */
SECTION_RODATA u32 const lit_3810 = 0x44E10000;

/* 805C6CA0-805C6CA4 0004+00 s=0 e=0 z=0  None .rodata    @4010                                                        */
SECTION_RODATA u32 const lit_4010 = 0x45BB8000;

/* 805C6CA4-805C6CA8 0004+00 s=7 e=0 z=0  None .rodata    @4011                                                        */
SECTION_RODATA static u8 const lit_4011[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 805C6CA8-805C6CAC 0004+00 s=2 e=0 z=0  None .rodata    @4012                                                        */
SECTION_RODATA static u32 const lit_4012 = 0x3F800000;

/* 805C6CAC-805C6CB0 0004+00 s=2 e=0 z=0  None .rodata    @4022                                                        */
SECTION_RODATA static u32 const lit_4022 = 0xBF800000;

/* 805C6CB0-805C6CB4 0004+00 s=1 e=0 z=0  None .rodata    @4040                                                        */
SECTION_RODATA static u32 const lit_4040 = 0xC47A0000;

/* 805C6CB4-805C6CB8 0004+00 s=0 e=0 z=0  None .rodata    @4066                                                        */
SECTION_RODATA u32 const lit_4066 = 0xC3FA0000;

/* 805C6CB8-805C6CBC 0004+00 s=0 e=0 z=0  None .rodata    @4067                                                        */
SECTION_RODATA u32 const lit_4067 = 0x43FA0000;

/* 805C6CBC-805C6CC0 0004+00 s=0 e=0 z=0  None .rodata    @4068                                                        */
SECTION_RODATA u32 const lit_4068 = 0x42340000;

/* 805C6CC0-805C6CC4 0004+00 s=0 e=0 z=0  None .rodata    @4310                                                        */
SECTION_RODATA u32 const lit_4310 = 0x41600000;

/* 805C6CC4-805C6CC8 0004+00 s=0 e=0 z=0  None .rodata    @4311                                                        */
SECTION_RODATA u32 const lit_4311 = 0x40400000;

/* 805C6CC8-805C6CCC 0004+00 s=0 e=0 z=0  None .rodata    @4312                                                        */
SECTION_RODATA u32 const lit_4312 = 0x41900000;

/* 805C6CCC-805C6CD0 0004+00 s=0 e=0 z=0  None .rodata    @4313                                                        */
SECTION_RODATA u32 const lit_4313 = 0x41F00000;

/* 805C6CD0-805C6CD4 0004+00 s=0 e=0 z=0  None .rodata    @4314                                                        */
SECTION_RODATA u32 const lit_4314 = 0x41100000;

/* 805C6CD4-805C6CD8 0004+00 s=0 e=0 z=0  None .rodata    @4315                                                        */
SECTION_RODATA u32 const lit_4315 = 0x42980000;

/* 805C6CD8-805C6CDC 0004+00 s=0 e=0 z=0  None .rodata    @4316                                                        */
SECTION_RODATA u32 const lit_4316 = 0x42280000;

/* 805C6CDC-805C6CE0 0004+00 s=0 e=0 z=0  None .rodata    @4317                                                        */
SECTION_RODATA u32 const lit_4317 = 0x41400000;

/* 805C6CE0-805C6CE4 0004+00 s=0 e=0 z=0  None .rodata    @4318                                                        */
SECTION_RODATA u32 const lit_4318 = 0x425C0000;

/* 805C6CE4-805C6CE8 0004+00 s=0 e=0 z=0  None .rodata    @4319                                                        */
SECTION_RODATA u32 const lit_4319 = 0x42CE0000;

/* 805C6CE8-805C6CEC 0004+00 s=0 e=0 z=0  None .rodata    @4320                                                        */
SECTION_RODATA u32 const lit_4320 = 0x430F0000;

/* 805C6CEC-805C6CF0 0004+00 s=0 e=0 z=0  None .rodata    @4321                                                        */
SECTION_RODATA u32 const lit_4321 = 0x40E00000;

/* 805C6CF0-805C6CF4 0004+00 s=0 e=0 z=0  None .rodata    @4322                                                        */
SECTION_RODATA u32 const lit_4322 = 0x42200000;

/* 805C6CF4-805C6CF8 0004+00 s=0 e=0 z=0  None .rodata    @4323                                                        */
SECTION_RODATA u32 const lit_4323 = 0x42960000;

/* 805C6CF8-805C6CFC 0004+00 s=0 e=0 z=0  None .rodata    @4324                                                        */
SECTION_RODATA u32 const lit_4324 = 0x43310000;

/* 805C6CFC-805C6D00 0004+00 s=0 e=0 z=0  None .rodata    @4325                                                        */
SECTION_RODATA u32 const lit_4325 = 0x43520000;

/* 805C6D00-805C6D04 0004+00 s=0 e=0 z=0  None .rodata    @4326                                                        */
SECTION_RODATA u32 const lit_4326 = 0x43730000;

/* 805C6D04-805C6D08 0004+00 s=0 e=0 z=0  None .rodata    @4327                                                        */
SECTION_RODATA u32 const lit_4327 = 0x43870000;

/* 805C6D08-805C6D0C 0004+00 s=0 e=0 z=0  None .rodata    @4328                                                        */
SECTION_RODATA u32 const lit_4328 = 0x439A8000;

/* 805C6D0C-805C6D10 0004+00 s=0 e=0 z=0  None .rodata    @4329                                                        */
SECTION_RODATA u32 const lit_4329 = 0x42540000;

/* 805C6D10-805C6D14 0004+00 s=0 e=0 z=0  None .rodata    @4330                                                        */
SECTION_RODATA u32 const lit_4330 = 0x42BE0000;

/* 805C6D14-805C6D18 0004+00 s=0 e=0 z=0  None .rodata    @4331                                                        */
SECTION_RODATA u32 const lit_4331 = 0x42E60000;

/* 805C6D18-805C6D1C 0004+00 s=0 e=0 z=0  None .rodata    @4332                                                        */
SECTION_RODATA u32 const lit_4332 = 0x42900000;

/* 805C6D1C-805C6D20 0004+00 s=0 e=0 z=0  None .rodata    @4333                                                        */
SECTION_RODATA u32 const lit_4333 = 0x42B00000;

/* 805C6D20-805C6D24 0004+00 s=0 e=0 z=0  None .rodata    @4334                                                        */
SECTION_RODATA u32 const lit_4334 = 0x42D60000;

/* 805C6D24-805C6D28 0004+00 s=0 e=0 z=0  None .rodata    @4335                                                        */
SECTION_RODATA u32 const lit_4335 = 0x41880000;

/* 805C6D28-805C6D2C 0004+00 s=0 e=0 z=0  None .rodata    @4336                                                        */
SECTION_RODATA u32 const lit_4336 = 0x40C00000;

/* 805C6D2C-805C6D30 0004+00 s=0 e=0 z=0  None .rodata    @4337                                                        */
SECTION_RODATA u32 const lit_4337 = 0x42100000;

/* 805C6D30-805C6D34 0004+00 s=0 e=0 z=0  None .rodata    @4338                                                        */
SECTION_RODATA u32 const lit_4338 = 0x41000000;

/* 805C6D34-805C6D38 0004+00 s=0 e=0 z=0  None .rodata    @4339                                                        */
SECTION_RODATA u32 const lit_4339 = 0x41A80000;

/* 805C6D38-805C6D3C 0004+00 s=0 e=0 z=0  None .rodata    @4340                                                        */
SECTION_RODATA u32 const lit_4340 = 0x41D00000;

/* 805C6D3C-805C6D40 0004+00 s=0 e=0 z=0  None .rodata    @4341                                                        */
SECTION_RODATA u32 const lit_4341 = 0x41F80000;

/* 805C6D40-805C6FCC 0288+04 s=1 e=0 z=0  None .rodata    BREAK_PARTS_DT$4370                                          */
SECTION_RODATA static u8 const BREAK_PARTS_DT[648 + 4 /* padding */] = {
	0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
	0x00, 0x00, 0x00, 0x01, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00,
	0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x01, 0x3F, 0x80, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13,
	0x00, 0x00, 0x00, 0x01, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x3F, 0x80, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B,
	0x00, 0x00, 0x00, 0x01, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x00,
	0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x01, 0x3F, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2D,
	0x00, 0x00, 0x00, 0x01, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x00,
	0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x01, 0x3F, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12,
	0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x01,
	0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x01, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01,
	0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x01, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B,
	0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x01,
	0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x01, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C,
	0x00, 0x00, 0x00, 0x05, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x02,
	0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x01, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
	0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x01,
	0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01,
	0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x01, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A,
	0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x01,
	0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x01, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B,
	0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x01,
	0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x01, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2D,
	0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x01,
	0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x01, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F,
	0x00, 0x00, 0x00, 0x03, 0x3F, 0x80, 0x00, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00,
};

/* 805C6FCC-805C6FD4 0008+00 s=0 e=0 z=0  None .rodata    @4530                                                        */
SECTION_RODATA u8 const lit_4530[8] = {
	0x43, 0x30, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
};

/* 805C6FD4-805C6FD8 0004+00 s=0 e=0 z=0  None .rodata    @4617                                                        */
SECTION_RODATA u32 const lit_4617 = 0x42080000;

/* 805C6FD8-805C6FDC 0004+00 s=0 e=0 z=0  None .rodata    @4794                                                        */
SECTION_RODATA u32 const lit_4794 = 0x457A0000;

/* 805C6FDC-805C6FE0 0004+00 s=0 e=0 z=0  None .rodata    @4795                                                        */
SECTION_RODATA u32 const lit_4795 = 0xCE6E6B28;

/* 805C6FE0-805C6FE4 0004+00 s=0 e=0 z=0  None .rodata    @4796                                                        */
SECTION_RODATA u32 const lit_4796 = 0x43960000;

/* 805C6FE4-805C6FE8 0004+00 s=0 e=0 z=0  None .rodata    @4797                                                        */
SECTION_RODATA u32 const lit_4797 = 0x40800000;

/* 805C6FE8-805C6FEC 0004+00 s=1 e=0 z=0  None .rodata    @4798                                                        */
SECTION_RODATA static u32 const lit_4798 = 0x42C80000;

/* 805C6FEC-805C6FF0 0004+00 s=0 e=0 z=0  None .rodata    @4847                                                        */
SECTION_RODATA u32 const lit_4847 = 0x3F333333;

/* 805C6FF0-805C6FF4 0004+00 s=0 e=0 z=0  None .rodata    @4848                                                        */
SECTION_RODATA u32 const lit_4848 = 0x44BB8000;

/* 805C6FF4-805C6FF8 0004+00 s=0 e=0 z=0  None .rodata    @4946                                                        */
SECTION_RODATA u32 const lit_4946 = 0x42A00000;

/* 805C6FF8-805C6FFC 0004+00 s=0 e=0 z=0  None .rodata    @5001                                                        */
SECTION_RODATA u32 const lit_5001 = 0x43C80000;

/* 805C6FFC-805C7000 0004+00 s=0 e=0 z=0  None .rodata    @5002                                                        */
SECTION_RODATA u32 const lit_5002 = 0x3ECCCCCD;

/* 805C7000-805C7004 0004+00 s=0 e=0 z=0  None .rodata    @5003                                                        */
SECTION_RODATA u32 const lit_5003 = 0x3E99999A;

/* 805C7004-805C700C 0004+04 s=0 e=0 z=0  None .rodata    @5004                                                        */
SECTION_RODATA u32 const lit_5004[1 + 1 /* padding */] = {
	0x3DCCCCCD,
	/* padding */
	0x00000000,
};

/* 805C700C-805C7014 0008+00 s=0 e=0 z=0  None .rodata    @5005                                                        */
SECTION_RODATA u8 const lit_5005[8] = {
	0x3F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 805C7014-805C701C 0008+00 s=0 e=0 z=0  None .rodata    @5006                                                        */
SECTION_RODATA u8 const lit_5006[8] = {
	0x40, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 805C701C-805C7024 0008+00 s=0 e=0 z=0  None .rodata    @5007                                                        */
SECTION_RODATA u8 const lit_5007[8] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 805C7024-805C7028 0004+00 s=0 e=0 z=0  None .rodata    @5008                                                        */
SECTION_RODATA u32 const lit_5008 = 0x45800000;

/* 805C7028-805C702C 0004+00 s=0 e=0 z=0  None .rodata    @5009                                                        */
SECTION_RODATA u32 const lit_5009 = 0x45000000;

/* 805C702C-805C7030 0004+00 s=0 e=0 z=0  None .rodata    @5482                                                        */
SECTION_RODATA u32 const lit_5482 = 0x41E00000;

/* 805C7030-805C7034 0004+00 s=0 e=0 z=0  None .rodata    @5483                                                        */
SECTION_RODATA u32 const lit_5483 = 0x43160000;

/* 805C7034-805C7038 0004+00 s=0 e=0 z=0  None .rodata    @5484                                                        */
SECTION_RODATA u32 const lit_5484 = 0x41D80000;

/* 805C7038-805C703C 0004+00 s=0 e=0 z=0  None .rodata    @5485                                                        */
SECTION_RODATA u32 const lit_5485 = 0x44960000;

/* 805C703C-805C7040 0004+00 s=0 e=0 z=0  None .rodata    @5486                                                        */
SECTION_RODATA u32 const lit_5486 = 0xC4BB8000;

/* 805C7040-805C7044 0004+00 s=0 e=0 z=0  None .rodata    @5487                                                        */
SECTION_RODATA u32 const lit_5487 = 0x43480000;

/* 805C7044-805C7048 0004+00 s=0 e=0 z=0  None .rodata    @5775                                                        */
SECTION_RODATA u32 const lit_5775 = 0x44598000;

/* 805C7048-805C704C 0004+00 s=0 e=0 z=0  None .rodata    @5776                                                        */
SECTION_RODATA u32 const lit_5776 = 0xC1500000;

/* 805C704C-805C7050 0004+00 s=0 e=0 z=0  None .rodata    @5866                                                        */
SECTION_RODATA u32 const lit_5866 = 0x45098000;

/* 805C7050-805C7054 0004+00 s=0 e=0 z=0  None .rodata    @6185                                                        */
SECTION_RODATA u32 const lit_6185 = 0x3F000000;

/* 805C7054-805C7058 0004+00 s=0 e=0 z=0  None .rodata    @6349                                                        */
SECTION_RODATA u32 const lit_6349 = 0x453B8000;

/* 805C7058-805C705C 0004+00 s=0 e=0 z=0  None .rodata    @6350                                                        */
SECTION_RODATA u32 const lit_6350 = 0xC53B8000;

/* 805C705C-805C7060 0004+00 s=0 e=0 z=0  None .rodata    @6351                                                        */
SECTION_RODATA u32 const lit_6351 = 0x3FA00000;

/* 805C7060-805C7064 0004+00 s=0 e=0 z=0  None .rodata    @6412                                                        */
SECTION_RODATA u32 const lit_6412 = 0x44A28000;

/* 805C7064-805C7068 0004+00 s=0 e=0 z=0  None .rodata    @6767                                                        */
SECTION_RODATA u32 const lit_6767 = 0x465AC000;

/* 805C7068-805C706C 0004+00 s=0 e=0 z=0  None .rodata    @6768                                                        */
SECTION_RODATA u32 const lit_6768 = 0x460CA000;

/* 805C706C-805C7070 0004+00 s=0 e=0 z=0  None .rodata    @6769                                                        */
SECTION_RODATA u32 const lit_6769 = 0x43AF0000;

/* 805C7070-805C7074 0004+00 s=0 e=0 z=0  None .rodata    @6770                                                        */
SECTION_RODATA u32 const lit_6770 = 0x45FA0000;

/* 805C7074-805C7078 0004+00 s=0 e=0 z=0  None .rodata    @6771                                                        */
SECTION_RODATA u32 const lit_6771 = 0x459C4000;

/* 805C7078-805C707C 0004+00 s=0 e=0 z=0  None .rodata    @6772                                                        */
SECTION_RODATA u32 const lit_6772 = 0xC57A0000;

/* 805C707C-805C7080 0004+00 s=0 e=0 z=0  None .rodata    @6773                                                        */
SECTION_RODATA u32 const lit_6773 = 0x3CCCCCCD;

/* 805C7080-805C7084 0004+00 s=0 e=0 z=0  None .rodata    @6774                                                        */
SECTION_RODATA u32 const lit_6774 = 0x42B40000;

/* 805C7084-805C7088 0004+00 s=0 e=0 z=0  None .rodata    @6775                                                        */
SECTION_RODATA u32 const lit_6775 = 0x42F00000;

/* 805C7088-805C708C 0004+00 s=0 e=0 z=0  None .rodata    @6927                                                        */
SECTION_RODATA u32 const lit_6927 = 0x4541C000;

/* 805C708C-805C7090 0004+00 s=0 e=0 z=0  None .rodata    @6928                                                        */
SECTION_RODATA u32 const lit_6928 = 0x45ABE000;

/* 805C7090-805C7094 0004+00 s=0 e=0 z=0  None .rodata    @6929                                                        */
SECTION_RODATA u32 const lit_6929 = 0xC541C000;

/* 805C7094-805C7098 0004+00 s=0 e=0 z=0  None .rodata    @6930                                                        */
SECTION_RODATA u32 const lit_6930 = 0x41B00000;

/* 805C7098-805C709C 0004+00 s=0 e=0 z=0  None .rodata    @7083                                                        */
SECTION_RODATA u32 const lit_7083 = 0x458CA000;

/* 805C709C-805C70A0 0004+00 s=0 e=0 z=0  None .rodata    @7084                                                        */
SECTION_RODATA u32 const lit_7084 = 0x45C03000;

/* 805C70A0-805C70A4 0004+00 s=0 e=0 z=0  None .rodata    @7085                                                        */
SECTION_RODATA u32 const lit_7085 = 0xC3480000;

/* 805C70A4-805C70A8 0004+00 s=0 e=0 z=0  None .rodata    @7382                                                        */
SECTION_RODATA u32 const lit_7382 = 0xC4AF0000;

/* 805C70A8-805C70AC 0004+00 s=0 e=0 z=0  None .rodata    @7383                                                        */
SECTION_RODATA u32 const lit_7383 = 0x44898000;

/* 805C70AC-805C70B0 0004+00 s=0 e=0 z=0  None .rodata    @7384                                                        */
SECTION_RODATA u32 const lit_7384 = 0xC4548000;

/* 805C70B0-805C70B4 0004+00 s=0 e=0 z=0  None .rodata    @7385                                                        */
SECTION_RODATA u32 const lit_7385 = 0x442F0000;

/* 805C70B4-805C70B8 0004+00 s=0 e=0 z=0  None .rodata    @7386                                                        */
SECTION_RODATA u32 const lit_7386 = 0xC4960000;

/* 805C70B8-805C70BC 0004+00 s=0 e=0 z=0  None .rodata    @7511                                                        */
SECTION_RODATA u32 const lit_7511 = 0x3B03126F;

/* 805C70BC-805C70C0 0004+00 s=0 e=0 z=0  None .rodata    @7555                                                        */
SECTION_RODATA u32 const lit_7555 = 0x47800000;

/* 805C70C0-805C70C4 0004+00 s=0 e=0 z=0  None .rodata    @7556                                                        */
SECTION_RODATA u32 const lit_7556 = 0xC0400000;

/* 805C70C4-805C70C8 0004+00 s=0 e=0 z=0  None .rodata    @7557                                                        */
SECTION_RODATA u32 const lit_7557 = 0x3E4CCCCD;

/* 805C70C8-805C70CC 0004+00 s=0 e=0 z=0  None .rodata    @7558                                                        */
SECTION_RODATA u32 const lit_7558 = 0x46800000;

/* 805C70CC-805C70D0 0004+00 s=0 e=0 z=0  None .rodata    @7824                                                        */
SECTION_RODATA u32 const lit_7824 = 0x45A41000;

/* 805C70D0-805C70D4 0004+00 s=0 e=0 z=0  None .rodata    @7825                                                        */
SECTION_RODATA u32 const lit_7825 = 0x420C0000;

/* 805C70D4-805C70D8 0004+00 s=0 e=0 z=0  None .rodata    @7826                                                        */
SECTION_RODATA u32 const lit_7826 = 0x43B90000;

/* 805C70D8-805C70DC 0004+00 s=0 e=0 z=0  None .rodata    @8050                                                        */
SECTION_RODATA u32 const lit_8050 = 0x437A0000;

/* 805C70DC-805C70E0 0004+00 s=0 e=0 z=0  None .rodata    @8051                                                        */
SECTION_RODATA u32 const lit_8051 = 0x44160000;

/* 805C70E0-805C70E4 0004+00 s=0 e=0 z=0  None .rodata    @8052                                                        */
SECTION_RODATA u32 const lit_8052 = 0x3F19999A;

/* 805C70E4-805C70E8 0004+00 s=0 e=0 z=0  None .rodata    @8053                                                        */
SECTION_RODATA u32 const lit_8053 = 0x3D4CCCCD;

/* 805C70E8-805C70EC 0004+00 s=0 e=0 z=0  None .rodata    @8054                                                        */
SECTION_RODATA u32 const lit_8054 = 0x3B449BA6;

/* 805C70EC-805C70F0 0004+00 s=0 e=0 z=0  None .rodata    @8055                                                        */
SECTION_RODATA u32 const lit_8055 = 0x3727C5AC;

/* 805C70F0-805C70F4 0004+00 s=0 e=0 z=0  None .rodata    @8056                                                        */
SECTION_RODATA u32 const lit_8056 = 0x3F666666;

/* 805C70F4-805C70F8 0004+00 s=0 e=0 z=0  None .rodata    @8057                                                        */
SECTION_RODATA u32 const lit_8057 = 0x3A83126F;

/* 805C70F8-805C7170 0078+00 s=1 e=0 z=0  None .rodata    DOWN_CYL_DT$8061                                             */
SECTION_RODATA static u8 const DOWN_CYL_DT[120] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC2, 0xC8, 0x00, 0x00, 0x43, 0x0C, 0x00, 0x00,
	0x43, 0x48, 0x00, 0x00, 0x43, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xC2, 0x48, 0x00, 0x00,
	0x42, 0xC8, 0x00, 0x00, 0x43, 0x7A, 0x00, 0x00, 0x43, 0x48, 0x00, 0x00, 0x43, 0x96, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x07, 0xC2, 0x48, 0x00, 0x00, 0x42, 0xC8, 0x00, 0x00, 0x43, 0x2A, 0x00, 0x00,
	0x43, 0x48, 0x00, 0x00, 0x43, 0xB9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xC3, 0x16, 0x00, 0x00, 0x43, 0x48, 0x00, 0x00, 0x43, 0x96, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x48, 0x00, 0x00,
	0x43, 0x48, 0x00, 0x00, 0x43, 0xAF, 0x00, 0x00,
};

/* 805C7170-805C7224 00B4+00 s=1 e=0 z=0  None .rodata    DOWN_SPH_DT$8062                                             */
SECTION_RODATA static u8 const DOWN_SPH_DT[180] = {
	0x00, 0x00, 0x00, 0x13, 0x42, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x43, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x43, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2D,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x02, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x43, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x43, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D,
	0x43, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC2, 0x48, 0x00, 0x00, 0x43, 0x02, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x25, 0x43, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC2, 0x48, 0x00, 0x00,
	0x43, 0x02, 0x00, 0x00,
};

/* 805C7224-805C7228 0004+00 s=0 e=0 z=0  None .rodata    @8254                                                        */
SECTION_RODATA u32 const lit_8254 = 0x42DE0000;

/* 805C7228-805C722C 0004+00 s=0 e=0 z=0  None .rodata    @8659                                                        */
SECTION_RODATA u32 const lit_8659 = 0xC3A28000;

/* 805C722C-805C7230 0004+00 s=0 e=0 z=0  None .rodata    @8660                                                        */
SECTION_RODATA u32 const lit_8660 = 0x43570000;

/* 805C7230-805C7234 0004+00 s=0 e=0 z=0  None .rodata    @8661                                                        */
SECTION_RODATA u32 const lit_8661 = 0x43600000;

/* 805C7234-805C7238 0004+00 s=0 e=0 z=0  None .rodata    @8662                                                        */
SECTION_RODATA u32 const lit_8662 = 0x443E8000;

/* 805C7238-805C723C 0004+00 s=0 e=0 z=0  None .rodata    @8663                                                        */
SECTION_RODATA u32 const lit_8663 = 0xC69C4000;

/* 805C723C-805C7240 0004+00 s=0 e=0 z=0  None .rodata    @8664                                                        */
SECTION_RODATA u32 const lit_8664 = 0x469C4000;

/* 805C7240-805C7245 0005+00 s=4 e=0 z=0  None .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char const* const stringBase_805C7240 = "B_DR";
#pragma pop

/* 805BB408-805BB4B4 00AC+00 s=11 e=0 z=0  None .text      setBck__8daB_DR_cFiUcff                                      */
//	805BB428: 803621DC (_savegpr_29)
//	805BB440: 805C7240 (stringBase0)
//	805BB444: 805C7240 (stringBase0)
//	805BB448: 804061C0 (g_dComIfG_gameInfo)
//	805BB44C: 804061C0 (g_dComIfG_gameInfo)
//	805BB45C: 8003C2EC (getRes__14dRes_control_cFPCclP11dRes_info_ci)
//	805BB474: 805C6CA4 (lit_4011)
//	805BB478: 805C6CA4 (lit_4011)
//	805BB47C: 805C6CAC (lit_4022)
//	805BB480: 805C6CAC (lit_4022)
//	805BB484: 80010E70 (setAnm__16mDoExt_McaMorfSOFP15J3DAnmTransformiffff)
//	805BB4A0: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
//  u8 False
//  f32 False
//  f32 False
asm void daB_DR_c::setBck(int param_0, u8 param_1, f32 param_2, f32 param_3) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/setBck__8daB_DR_cFiUcff.s"
}
#pragma pop


/* 805BB4B4-805BB4CC 0018+00 s=13 e=0 z=0  None .text      setActionMode__8daB_DR_cFii                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
//  int False
asm void daB_DR_c::setActionMode(int param_0, int param_1) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/setActionMode__8daB_DR_cFii.s"
}
#pragma pop


/* 805BB4CC-805BB540 0074+00 s=1 e=0 z=0  None .text      mGlider_WindPosSet__8daB_DR_cFv                              */
//	805BB4E0: 80450768 (calc_mtx)
//	805BB4E4: 80450768 (calc_mtx)
//	805BB4F0: 8000C3DC (mDoMtx_YrotS__FPA4_fs)
//	805BB4F4: 805C6CA4 (lit_4011)
//	805BB4F8: 805C6CA4 (lit_4011)
//	805BB504: 805C6CB0 (lit_4040)
//	805BB508: 805C6CB0 (lit_4040)
//	805BB518: 80270EEC (MtxPosition__FP4cXyzP4cXyz)
//	805BB528: 80347090 (PSVECAdd)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::mGlider_WindPosSet() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/mGlider_WindPosSet__8daB_DR_cFv.s"
}
#pragma pop


/* 805BB540-805BB64C 010C+00 s=2 e=0 z=0  None .text      mBoot_c_tranceSet__8daB_DR_cFb                               */
//	805BB558: 805C6C74 (lit_3800)
//	805BB55C: 805C6C74 (lit_3800)
//	805BB590: 80450768 (calc_mtx)
//	805BB594: 80450768 (calc_mtx)
//	805BB5A0: 8000C3DC (mDoMtx_YrotS__FPA4_fs)
//	805BB5C4: 80270EEC (MtxPosition__FP4cXyzP4cXyz)
//	805BB630: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  bool False
asm void daB_DR_c::mBoot_c_tranceSet(bool param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/mBoot_c_tranceSet__8daB_DR_cFb.s"
}
#pragma pop


/* 805BB64C-805BB6E8 009C+00 s=9 e=0 z=0  None .text      mStatusONOFF__8daB_DR_cFi                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
asm void daB_DR_c::mStatusONOFF(int param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/mStatusONOFF__8daB_DR_cFi.s"
}
#pragma pop


/* 805BB6E8-805BBFC0 08D8+00 s=2 e=0 z=0  None .text      setSe__8daB_DR_cFv                                           */
//	805BB6F8: 803621DC (_savegpr_29)
//	805BB700: 805C6C74 (lit_3800)
//	805BB704: 805C6C74 (lit_3800)
//	805BB71C: 805C7478 (lit_4342)
//	805BB720: 805C7478 (lit_4342)
//	805BB740: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BB760: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BB780: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BB7A0: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BB7C0: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BB800: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BB818: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BB838: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BB878: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BB890: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BB8B0: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BB8C8: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BB8E8: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BB928: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BB940: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BB958: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BB970: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BB990: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BB9D4: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BB9EC: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBA04: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBA1C: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBA34: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBA4C: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBA64: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBA7C: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBA94: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBAB4: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBAF8: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBB9C: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBBDC: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBC1C: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBC3C: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBC7C: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBC94: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBCAC: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBCEC: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBD04: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBD1C: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBD34: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBD4C: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBD6C: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBDAC: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBDC4: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBDE4: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBE04: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBE24: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBE3C: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBE5C: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBE7C: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBE9C: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBEBC: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBED4: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBEF4: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBF0C: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBF2C: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBF44: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBF64: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BBFAC: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::setSe() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/setSe__8daB_DR_cFv.s"
}
#pragma pop


/* 805BBFC0-805BC0B8 00F8+00 s=1 e=0 z=0  None .text      setDeathLightEffect__8daB_DR_cFv                             */
//	805BBFD0: 803621D0 (_savegpr_26)
//	805BBFE0: 804061C0 (g_dComIfG_gameInfo)
//	805BBFE4: 804061C0 (g_dComIfG_gameInfo)
//	805BBFE8: 805C7554 (w_eff_id)
//	805BBFEC: 805C7554 (w_eff_id)
//	805BBFF0: 805C6CA8 (lit_4012)
//	805BBFF4: 805C6CA8 (lit_4012)
//	805BC038: 8004CA90 (set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	805BC054: 8002D06C (dComIfGp_getReverb__Fi)
//	805BC068: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805BC06C: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805BC080: 805C6CA8 (lit_4012)
//	805BC084: 805C6CA8 (lit_4012)
//	805BC08C: 805C6CAC (lit_4022)
//	805BC090: 805C6CAC (lit_4022)
//	805BC09C: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
//	805BC0A4: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::setDeathLightEffect() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/setDeathLightEffect__8daB_DR_cFv.s"
}
#pragma pop


/* 805BC0B8-805BC248 0190+00 s=3 e=0 z=0  None .text      chkPartCreate__8daB_DR_cFb                                   */
//	805BC0C8: 803621C0 (_savegpr_22)
//	805BC154: 803DD470 (now__14mDoMtx_stack_c)
//	805BC158: 803DD470 (now__14mDoMtx_stack_c)
//	805BC15C: 805C6D40 (BREAK_PARTS_DT)
//	805BC160: 805C6D40 (BREAK_PARTS_DT)
//	805BC194: 803464B0 (PSMTXCopy)
//	805BC1B8: 8000CC00 (mDoMtx_MtxToRot__FPA4_CfP5csXyz)
//	805BC204: 80019D98 (fopAcM_create__FsUlPC4cXyziPC5csXyzPC4cXyzSc)
//	805BC234: 8036220C (_restgpr_22)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  bool False
asm void daB_DR_c::chkPartCreate(bool param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/chkPartCreate__8daB_DR_cFb.s"
}
#pragma pop


/* ############################################################################################## */
/* 805C78C0-805C78C4 0001+03 s=1 e=0 z=0  None .bss       @1109                                                        */
static u8 lit_1109[1 + 3 /* padding */];

/* 805C78C4-805C78C8 0001+03 s=0 e=0 z=0  None .bss       @1107                                                        */
u8 lit_1107[1 + 3 /* padding */];

/* 805C78C8-805C78CC 0001+03 s=0 e=0 z=0  None .bss       @1105                                                        */
u8 lit_1105[1 + 3 /* padding */];

/* 805C78CC-805C78D0 0001+03 s=0 e=0 z=0  None .bss       @1104                                                        */
u8 lit_1104[1 + 3 /* padding */];

/* 805C78D0-805C78D4 0001+03 s=0 e=0 z=0  None .bss       @1099                                                        */
u8 lit_1099[1 + 3 /* padding */];

/* 805C78D4-805C78D8 0001+03 s=0 e=0 z=0  None .bss       @1097                                                        */
u8 lit_1097[1 + 3 /* padding */];

/* 805C78D8-805C78DC 0001+03 s=0 e=0 z=0  None .bss       @1095                                                        */
u8 lit_1095[1 + 3 /* padding */];

/* 805C78DC-805C78E0 0001+03 s=0 e=0 z=0  None .bss       @1094                                                        */
u8 lit_1094[1 + 3 /* padding */];

/* 805C78E0-805C78E4 0001+03 s=0 e=0 z=0  None .bss       @1057                                                        */
u8 lit_1057[1 + 3 /* padding */];

/* 805C78E4-805C78E8 0001+03 s=0 e=0 z=0  None .bss       @1055                                                        */
u8 lit_1055[1 + 3 /* padding */];

/* 805C78E8-805C78EC 0001+03 s=0 e=0 z=0  None .bss       @1053                                                        */
u8 lit_1053[1 + 3 /* padding */];

/* 805C78EC-805C78F0 0001+03 s=0 e=0 z=0  None .bss       @1052                                                        */
u8 lit_1052[1 + 3 /* padding */];

/* 805C78F0-805C78F4 0001+03 s=0 e=0 z=0  None .bss       @1014                                                        */
u8 lit_1014[1 + 3 /* padding */];

/* 805C78F4-805C78F8 0001+03 s=0 e=0 z=0  None .bss       @1012                                                        */
u8 lit_1012[1 + 3 /* padding */];

/* 805C78F8-805C78FC 0001+03 s=0 e=0 z=0  None .bss       @1010                                                        */
u8 lit_1010[1 + 3 /* padding */];

/* 805C78FC-805C7900 0004+00 s=2 e=0 z=0  None .bss       None                                                         */
static u8 struct_805C78FC[4];

/* 805C7900-805C790C 000C+00 s=1 e=0 z=0  None .bss       @3795                                                        */
static u8 lit_3795[12];

/* 805C790C-805C7974 0068+00 s=18 e=0 z=0  None .bss       l_HIO                                                        */
static u8 l_HIO[104];

/* 805BC248-805BC57C 0334+00 s=7 e=0 z=0  None .text      mHabatakiAnmSet__8daB_DR_cFi                                 */
//	805BC258: 803621DC (_savegpr_29)
//	805BC264: 805C6C74 (lit_3800)
//	805BC268: 805C6C74 (lit_3800)
//	805BC27C: 805C755C (lit_4528)
//	805BC280: 805C755C (lit_4528)
//	805BC2D8: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BC324: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BC33C: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BC39C: 805C790C (l_HIO)
//	805BC3A0: 805C790C (l_HIO)
//	805BC3A8: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BC41C: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BC438: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BC484: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BC4D8: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BC4F4: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BC560: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BC568: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
asm void daB_DR_c::mHabatakiAnmSet(int param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/mHabatakiAnmSet__8daB_DR_cFi.s"
}
#pragma pop


/* 805BC57C-805BC8B4 0338+00 s=3 e=0 z=0  None .text      mGlider_AniSet__8daB_DR_cFb                                  */
//	805BC58C: 803621DC (_savegpr_29)
//	805BC598: 805C6C74 (lit_3800)
//	805BC59C: 805C6C74 (lit_3800)
//	805BC5CC: 805C6BDC (func_805C6BDC)
//	805BC5E8: 805C75E4 (lit_4618)
//	805BC5EC: 805C75E4 (lit_4618)
//	805BC660: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BC6D0: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BC6E8: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BC750: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BC79C: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BC7A4: 80267954 (cM_rndF__Ff)
//	805BC82C: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BC878: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BC880: 80267954 (cM_rndF__Ff)
//	805BC8A0: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  bool False
asm void daB_DR_c::mGlider_AniSet(bool param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/mGlider_AniSet__8daB_DR_cFb.s"
}
#pragma pop


/* 805BC8B4-805BCA10 015C+00 s=2 e=0 z=0  None .text      mGliderAtAniSet__8daB_DR_cFv                                 */
//	805BC8C0: 805C6C74 (lit_3800)
//	805BC8C4: 805C6C74 (lit_3800)
//	805BC8D8: 805C7648 (lit_4662)
//	805BC8DC: 805C7648 (lit_4662)
//	805BC930: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BC948: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BC9AC: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BC9FC: 805BB408 (setBck__8daB_DR_cFiUcff)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::mGliderAtAniSet() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/mGliderAtAniSet__8daB_DR_cFv.s"
}
#pragma pop


/* 805BCA10-805BCAD4 00C4+00 s=1 e=0 z=0  None .text      tail_hit_check__8daB_DR_cFv                                  */
//	805BCA30: 804061C0 (g_dComIfG_gameInfo)
//	805BCA34: 804061C0 (g_dComIfG_gameInfo)
//	805BCA58: 805C6BF8 (func_805C6BF8)
//	805BCA80: 80084460 (ChkTgHit__12dCcD_GObjInfFv)
//	805BCA8C: 805C6CA4 (lit_4011)
//	805BCA90: 805C6CA4 (lit_4011)
//	805BCAA4: 8002D94C (dComIfGs_onZoneSwitch__Fii)
//	805BCAB4: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805BCABC: 80083830 (Move__10dCcD_GSttsFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::tail_hit_check() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/tail_hit_check__8daB_DR_cFv.s"
}
#pragma pop


/* 805BCAD4-805BCBD0 00FC+00 s=1 e=0 z=0  None .text      week_hit_check__8daB_DR_cFv                                  */
//	805BCAF4: 804061C0 (g_dComIfG_gameInfo)
//	805BCAF8: 804061C0 (g_dComIfG_gameInfo)
//	805BCB28: 805C6BF8 (func_805C6BF8)
//	805BCB50: 80084460 (ChkTgHit__12dCcD_GObjInfFv)
//	805BCB60: 800844F8 (GetTgHitObj__12dCcD_GObjInfFv)
//	805BCB70: 805C6CA4 (lit_4011)
//	805BCB74: 805C6CA4 (lit_4011)
//	805BCB7C: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805BCB80: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805BCB90: 802AFF8C (changeBgmStatus__8Z2SeqMgrFl)
//	805BCBB0: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805BCBB8: 80083830 (Move__10dCcD_GSttsFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::week_hit_check() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/week_hit_check__8daB_DR_cFv.s"
}
#pragma pop


/* 805BCBD0-805BCBF4 0024+00 s=1 e=0 z=0  None .text      mTimerClr__8daB_DR_cFv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::mTimerClr() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/mTimerClr__8daB_DR_cFv.s"
}
#pragma pop


/* 805BCBF4-805BCC18 0024+00 s=1 e=0 z=0  None .text      mCountClr__8daB_DR_cFv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::mCountClr() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/mCountClr__8daB_DR_cFv.s"
}
#pragma pop


/* 805BCC18-805BCC4C 0034+00 s=12 e=0 z=0  None .text      mAllClr__8daB_DR_cFv                                         */
//	805BCC2C: 805BCBD0 (mTimerClr__8daB_DR_cFv)
//	805BCC34: 805BCBF4 (mCountClr__8daB_DR_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::mAllClr() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/mAllClr__8daB_DR_cFv.s"
}
#pragma pop


/* 805BCC4C-805BCD7C 0130+00 s=1 e=0 z=0  None .text      mHeadAngleSet__8daB_DR_cFv                                   */
//	805BCC5C: 803621DC (_savegpr_29)
//	805BCC64: 804061C0 (g_dComIfG_gameInfo)
//	805BCC68: 804061C0 (g_dComIfG_gameInfo)
//	805BCC84: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	805BCCA0: 80270C74 (cLib_targetAngleX__FPC4cXyzPC4cXyz)
//	805BCD20: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805BCD34: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805BCD4C: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805BCD60: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805BCD68: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::mHeadAngleSet() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/mHeadAngleSet__8daB_DR_cFv.s"
}
#pragma pop


/* 805BCD7C-805BCEA4 0128+00 s=2 e=0 z=0  None .text      flapMove__8daB_DR_cFb                                        */
//	805BCD94: 803621DC (_savegpr_29)
//	805BCDA0: 805C6C74 (lit_3800)
//	805BCDA4: 805C6C74 (lit_3800)
//	805BCDA8: 804061C0 (g_dComIfG_gameInfo)
//	805BCDAC: 804061C0 (g_dComIfG_gameInfo)
//	805BCE3C: 8026FA3C (cLib_addCalc2__FPffff)
//	805BCE58: 8026FA3C (cLib_addCalc2__FPffff)
//	805BCE90: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  bool False
asm void daB_DR_c::flapMove(bool param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/flapMove__8daB_DR_cFb.s"
}
#pragma pop


/* 805BCEA4-805BD05C 01B8+00 s=3 e=0 z=0  None .text      revolutionMove__8daB_DR_cFv                                  */
//	805BCEBC: 805C6C74 (lit_3800)
//	805BCEC0: 805C6C74 (lit_3800)
//	805BCEF8: 8026FA3C (cLib_addCalc2__FPffff)
//	805BCF08: 80266B34 (__mi__4cXyzCFRC3Vec)
//	805BCF38: 80267128 (atan2sX_Z__4cXyzCFv)
//	805BCF5C: 8026FA80 (cLib_addCalc0__FPfff)
//	805BCF60: 80450768 (calc_mtx)
//	805BCF64: 80450768 (calc_mtx)
//	805BCF70: 8000C3DC (mDoMtx_YrotS__FPA4_fs)
//	805BCF90: 80270EEC (MtxPosition__FP4cXyzP4cXyz)
//	805BCFA0: 80347090 (PSVECAdd)
//	805BCFB8: 80266B34 (__mi__4cXyzCFRC3Vec)
//	805BCFE0: 80267128 (atan2sX_Z__4cXyzCFv)
//	805BCFF4: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805BD008: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805BD018: 80267128 (atan2sX_Z__4cXyzCFv)
//	805BD02C: 803650D0 (abs)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::revolutionMove() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/revolutionMove__8daB_DR_cFv.s"
}
#pragma pop


/* 805BD05C-805BD15C 0100+00 s=11 e=0 z=0  None .text      mPlayerHighCheck__8daB_DR_cFv                                */
//	805BD06C: 803621DC (_savegpr_29)
//	805BD074: 805C6C74 (lit_3800)
//	805BD078: 805C6C74 (lit_3800)
//	805BD07C: 804061C0 (g_dComIfG_gameInfo)
//	805BD080: 804061C0 (g_dComIfG_gameInfo)
//	805BD08C: 8007757C (__ct__11dBgS_GndChkFv)
//	805BD0BC: 80267D28 (SetPos__11cBgS_GndChkFPC4cXyz)
//	805BD0C0: 804061C0 (g_dComIfG_gameInfo)
//	805BD0C4: 804061C0 (g_dComIfG_gameInfo)
//	805BD0D0: 800744A0 (GroundCross__4cBgSFP11cBgS_GndChk)
//	805BD100: 805C790C (l_HIO)
//	805BD104: 805C790C (l_HIO)
//	805BD128: 800775F0 (__dt__11dBgS_GndChkFv)
//	805BD13C: 800775F0 (__dt__11dBgS_GndChkFv)
//	805BD148: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::mPlayerHighCheck() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/mPlayerHighCheck__8daB_DR_cFv.s"
}
#pragma pop


/* 805BD15C-805BD3E4 0288+00 s=3 e=0 z=0  None .text      mBgFallGroundCheck__8daB_DR_cFv                              */
//	805BD16C: 803621DC (_savegpr_29)
//	805BD174: 805C6C74 (lit_3800)
//	805BD178: 805C6C74 (lit_3800)
//	805BD180: 8007757C (__ct__11dBgS_GndChkFv)
//	805BD1B0: 80267D28 (SetPos__11cBgS_GndChkFPC4cXyz)
//	805BD1B4: 804061C0 (g_dComIfG_gameInfo)
//	805BD1B8: 804061C0 (g_dComIfG_gameInfo)
//	805BD1C8: 800744A0 (GroundCross__4cBgSFP11cBgS_GndChk)
//	805BD228: 800775F0 (__dt__11dBgS_GndChkFv)
//	805BD290: 803DD470 (now__14mDoMtx_stack_c)
//	805BD294: 803DD470 (now__14mDoMtx_stack_c)
//	805BD298: 803464B0 (PSMTXCopy)
//	805BD29C: 803DD470 (now__14mDoMtx_stack_c)
//	805BD2A0: 803DD470 (now__14mDoMtx_stack_c)
//	805BD2C4: 805C790C (l_HIO)
//	805BD2C8: 805C790C (l_HIO)
//	805BD2F4: 804061C0 (g_dComIfG_gameInfo)
//	805BD2F8: 804061C0 (g_dComIfG_gameInfo)
//	805BD320: 8004D6A4 (setPoly__13dPa_control_cFUlUsR13cBgS_PolyInfoPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyziP18dPa_levelEcallBackScPC4cXyz)
//	805BD38C: 8006FA24 (StartShock__12dVibration_cFii4cXyz)
//	805BD398: 805BB64C (mStatusONOFF__8daB_DR_cFi)
//	805BD3A8: 804061C0 (g_dComIfG_gameInfo)
//	805BD3AC: 804061C0 (g_dComIfG_gameInfo)
//	805BD3B8: 800352B0 (offSwitch__10dSv_info_cFii)
//	805BD3C4: 800775F0 (__dt__11dBgS_GndChkFv)
//	805BD3D0: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::mBgFallGroundCheck() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/mBgFallGroundCheck__8daB_DR_cFv.s"
}
#pragma pop


/* 805BD3E4-805BD5FC 0218+00 s=3 e=0 z=0  None .text      normalHoverMove__8daB_DR_cFv                                 */
//	805BD3FC: 805C6C74 (lit_3800)
//	805BD400: 805C6C74 (lit_3800)
//	805BD404: 80439A20 (sincosTable___5JMath)
//	805BD408: 80439A20 (sincosTable___5JMath)
//	805BD450: 80347090 (PSVECAdd)
//	805BD470: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	805BD484: 8026FA3C (cLib_addCalc2__FPffff)
//	805BD494: 80266B34 (__mi__4cXyzCFRC3Vec)
//	805BD4BC: 80347138 (PSVECSquareMag)
//	805BD52C: 80450AE0 (__float_nan)
//	805BD530: 80450AE0 (__float_nan)
//	805BD59C: 80450AE0 (__float_nan)
//	805BD5A0: 80450AE0 (__float_nan)
//	805BD5BC: 8026798C (cM_rndFX__Ff)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::normalHoverMove() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/normalHoverMove__8daB_DR_cFv.s"
}
#pragma pop


/* 805BD5FC-805BD98C 0390+00 s=1 e=0 z=0  None .text      executeWait__8daB_DR_cFv                                     */
//	805BD60C: 803621D8 (_savegpr_28)
//	805BD614: 805C6C74 (lit_3800)
//	805BD618: 805C6C74 (lit_3800)
//	805BD620: 805BCD7C (flapMove__8daB_DR_cFb)
//	805BD630: 805BC248 (mHabatakiAnmSet__8daB_DR_cFi)
//	805BD660: 805BCC18 (mAllClr__8daB_DR_cFv)
//	805BD664: 805C790C (l_HIO)
//	805BD668: 805C790C (l_HIO)
//	805BD6BC: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	805BD6CC: 80266B34 (__mi__4cXyzCFRC3Vec)
//	805BD6EC: 804061C0 (g_dComIfG_gameInfo)
//	805BD6F0: 804061C0 (g_dComIfG_gameInfo)
//	805BD6F8: 8001A710 (fopAcM_searchActorAngleY__FPC10fopAc_ac_cPC10fopAc_ac_c)
//	805BD70C: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805BD720: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805BD734: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805BD754: 80347138 (PSVECSquareMag)
//	805BD7C4: 80450AE0 (__float_nan)
//	805BD7C8: 80450AE0 (__float_nan)
//	805BD834: 80450AE0 (__float_nan)
//	805BD838: 80450AE0 (__float_nan)
//	805BD85C: 805BB64C (mStatusONOFF__8daB_DR_cFi)
//	805BD880: 805BD3E4 (normalHoverMove__8daB_DR_cFv)
//	805BD890: 804061C0 (g_dComIfG_gameInfo)
//	805BD894: 804061C0 (g_dComIfG_gameInfo)
//	805BD8A0: 805C790C (l_HIO)
//	805BD8A4: 805C790C (l_HIO)
//	805BD8BC: 805BB64C (mStatusONOFF__8daB_DR_cFi)
//	805BD8CC: 805BB64C (mStatusONOFF__8daB_DR_cFi)
//	805BD8DC: 8026FA80 (cLib_addCalc0__FPfff)
//	805BD8EC: 8026FA80 (cLib_addCalc0__FPfff)
//	805BD900: 805C6BDC (func_805C6BDC)
//	805BD90C: 804061C0 (g_dComIfG_gameInfo)
//	805BD910: 804061C0 (g_dComIfG_gameInfo)
//	805BD924: 805BD05C (mPlayerHighCheck__8daB_DR_cFv)
//	805BD93C: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805BD95C: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805BD970: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805BD978: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::executeWait() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/executeWait__8daB_DR_cFv.s"
}
#pragma pop


/* 805BD98C-805BDBC4 0238+00 s=1 e=0 z=0  None .text      executeFlyWait__8daB_DR_cFv                                  */
//	805BD99C: 803621D8 (_savegpr_28)
//	805BD9A4: 805C6C74 (lit_3800)
//	805BD9A8: 805C6C74 (lit_3800)
//	805BD9AC: 804061C0 (g_dComIfG_gameInfo)
//	805BD9B0: 804061C0 (g_dComIfG_gameInfo)
//	805BD9C4: 8026FA80 (cLib_addCalc0__FPfff)
//	805BD9D0: 805BC248 (mHabatakiAnmSet__8daB_DR_cFi)
//	805BDA10: 805BB64C (mStatusONOFF__8daB_DR_cFi)
//	805BDA18: 805BCC18 (mAllClr__8daB_DR_cFv)
//	805BDA28: 805BCEA4 (revolutionMove__8daB_DR_cFv)
//	805BDA3C: 805C790C (l_HIO)
//	805BDA40: 805C790C (l_HIO)
//	805BDA68: 805BCEA4 (revolutionMove__8daB_DR_cFv)
//	805BDA7C: 805C790C (l_HIO)
//	805BDA80: 805C790C (l_HIO)
//	805BDAAC: 805BD3E4 (normalHoverMove__8daB_DR_cFv)
//	805BDAB8: 8001A710 (fopAcM_searchActorAngleY__FPC10fopAc_ac_cPC10fopAc_ac_c)
//	805BDACC: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805BDB04: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	805BDB1C: 805BD05C (mPlayerHighCheck__8daB_DR_cFv)
//	805BDB34: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805BDB40: 805C6BDC (func_805C6BDC)
//	805BDB58: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805BDB7C: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805BDB94: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805BDBA8: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805BDBB0: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::executeFlyWait() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/executeFlyWait__8daB_DR_cFv.s"
}
#pragma pop


/* 805BDBC4-805BE9B4 0DF0+00 s=1 e=0 z=0  None .text      executeTailHit__8daB_DR_cFv                                  */
//	805BDBD4: 803621D4 (_savegpr_27)
//	805BDBDC: 805C6C74 (lit_3800)
//	805BDBE0: 805C6C74 (lit_3800)
//	805BDBE4: 804061C0 (g_dComIfG_gameInfo)
//	805BDBE8: 804061C0 (g_dComIfG_gameInfo)
//	805BDC04: 805BD05C (mPlayerHighCheck__8daB_DR_cFv)
//	805BDC18: 801FA08C (dMw_onPauseWindow__Fv)
//	805BDC3C: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805BDC50: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805BDC74: 805C790C (l_HIO)
//	805BDC78: 805C790C (l_HIO)
//	805BDC98: 8026FA3C (cLib_addCalc2__FPffff)
//	805BDD50: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BDD58: 805BCC18 (mAllClr__8daB_DR_cFv)
//	805BDD5C: 801FA0AC (dMw_offPauseWindow__Fv)
//	805BDD68: 804061C0 (g_dComIfG_gameInfo)
//	805BDD6C: 804061C0 (g_dComIfG_gameInfo)
//	805BDD80: 805C790C (l_HIO)
//	805BDD84: 805C790C (l_HIO)
//	805BDDA4: 805C6BDC (func_805C6BDC)
//	805BDDB0: 804061C0 (g_dComIfG_gameInfo)
//	805BDDB4: 804061C0 (g_dComIfG_gameInfo)
//	805BDE08: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805BDE1C: 804061C0 (g_dComIfG_gameInfo)
//	805BDE20: 804061C0 (g_dComIfG_gameInfo)
//	805BDE2C: 80035200 (onSwitch__10dSv_info_cFii)
//	805BDE50: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BDE80: 804061C0 (g_dComIfG_gameInfo)
//	805BDE84: 804061C0 (g_dComIfG_gameInfo)
//	805BDE90: 800352B0 (offSwitch__10dSv_info_cFii)
//	805BDEA8: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BDEF4: 804061C0 (g_dComIfG_gameInfo)
//	805BDEF8: 804061C0 (g_dComIfG_gameInfo)
//	805BDF28: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805BDF44: 80035200 (onSwitch__10dSv_info_cFii)
//	805BDF70: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BDF88: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BDFA8: 804061C0 (g_dComIfG_gameInfo)
//	805BDFAC: 804061C0 (g_dComIfG_gameInfo)
//	805BDFC0: 8006FA24 (StartShock__12dVibration_cFii4cXyz)
//	805BDFC4: 804061C0 (g_dComIfG_gameInfo)
//	805BDFC8: 804061C0 (g_dComIfG_gameInfo)
//	805BE014: 801FA08C (dMw_onPauseWindow__Fv)
//	805BE038: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805BE04C: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805BE068: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805BE078: 805BB64C (mStatusONOFF__8daB_DR_cFi)
//	805BE088: 8002D94C (dComIfGs_onZoneSwitch__Fii)
//	805BE098: 80181640 (dCam_getBody__Fv)
//	805BE0A0: 80163028 (SetTrimTypeForce__9dCamera_cFl)
//	805BE0E8: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BE0F0: 805BD15C (mBgFallGroundCheck__8daB_DR_cFv)
//	805BE10C: 80181640 (dCam_getBody__Fv)
//	805BE114: 80163028 (SetTrimTypeForce__9dCamera_cFl)
//	805BE11C: 805C790C (l_HIO)
//	805BE120: 805C790C (l_HIO)
//	805BE158: 8026FA3C (cLib_addCalc2__FPffff)
//	805BE16C: 8026FA3C (cLib_addCalc2__FPffff)
//	805BE180: 8026FA3C (cLib_addCalc2__FPffff)
//	805BE198: 80077114 (SetGroundUpY__9dBgS_AcchFf)
//	805BE1A0: 804061C0 (g_dComIfG_gameInfo)
//	805BE1A4: 804061C0 (g_dComIfG_gameInfo)
//	805BE1AC: 80076AAC (CrrPos__9dBgS_AcchFR4dBgS)
//	805BE20C: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805BE210: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805BE224: 802AF408 (bgmStop__8Z2SeqMgrFUll)
//	805BE24C: 804061C0 (g_dComIfG_gameInfo)
//	805BE250: 804061C0 (g_dComIfG_gameInfo)
//	805BE25C: 800352B0 (offSwitch__10dSv_info_cFii)
//	805BE268: 805BB64C (mStatusONOFF__8daB_DR_cFi)
//	805BE28C: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805BE2BC: 805C2BE8 (startDemoCheck__8daB_DR_cFv)
//	805BE2F8: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BE344: 8026FA3C (cLib_addCalc2__FPffff)
//	805BE38C: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BE3E8: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BE3F8: 805BD15C (mBgFallGroundCheck__8daB_DR_cFv)
//	805BE404: 801FA08C (dMw_onPauseWindow__Fv)
//	805BE44C: 8026FA3C (cLib_addCalc2__FPffff)
//	805BE4A0: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BE4B0: 805C6BDC (func_805C6BDC)
//	805BE4D4: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	805BE52C: 80019EF0 (fopAcM_createChild__FsUiUlPC4cXyziPC5csXyzPC4cXyzScPFPv_i)
//	805BE534: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805BE538: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805BE54C: 802AF49C (subBgmStart__8Z2SeqMgrFUl)
//	805BE55C: 8002D94C (dComIfGs_onZoneSwitch__Fii)
//	805BE58C: 805C6BDC (func_805C6BDC)
//	805BE598: 801FA08C (dMw_onPauseWindow__Fv)
//	805BE5C0: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BE610: 805BB540 (mBoot_c_tranceSet__8daB_DR_cFb)
//	805BE628: 805BCD7C (flapMove__8daB_DR_cFb)
//	805BE634: 805BCEA4 (revolutionMove__8daB_DR_cFv)
//	805BE648: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805BE688: 801FA08C (dMw_onPauseWindow__Fv)
//	805BE6A0: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BE6A8: 805BD05C (mPlayerHighCheck__8daB_DR_cFv)
//	805BE6C0: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805BE6D4: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805BE6E8: 805C6BDC (func_805C6BDC)
//	805BE794: 80450768 (calc_mtx)
//	805BE798: 80450768 (calc_mtx)
//	805BE7AC: 8000C3DC (mDoMtx_YrotS__FPA4_fs)
//	805BE7D0: 80270EEC (MtxPosition__FP4cXyzP4cXyz)
//	805BE7E0: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	805BE7F0: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	805BE858: 80180AA8 (Set__9dCamera_cF4cXyz4cXyz)
//	805BE880: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BE8C8: 805BB540 (mBoot_c_tranceSet__8daB_DR_cFb)
//	805BE8F0: 805BC0B8 (chkPartCreate__8daB_DR_cFb)
//	805BE910: 8001A710 (fopAcM_searchActorAngleY__FPC10fopAc_ac_cPC10fopAc_ac_c)
//	805BE924: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805BE940: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	805BE948: 8000CF44 (ZXYrotM__14mDoMtx_stack_cFRC5csXyz)
//	805BE94C: 803DD470 (now__14mDoMtx_stack_c)
//	805BE950: 803DD470 (now__14mDoMtx_stack_c)
//	805BE958: 803465B0 (PSMTXInverse)
//	805BE95C: 803DD470 (now__14mDoMtx_stack_c)
//	805BE960: 803DD470 (now__14mDoMtx_stack_c)
//	805BE96C: 80346D6C (PSMTXMultVec)
//	805BE9A0: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::executeTailHit() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/executeTailHit__8daB_DR_cFv.s"
}
#pragma pop


/* 805BE9B4-805BF4C8 0B14+00 s=1 e=0 z=0  None .text      executeWeekHit__8daB_DR_cFv                                  */
//	805BE9C4: 803621D4 (_savegpr_27)
//	805BE9CC: 805C6C74 (lit_3800)
//	805BE9D0: 805C6C74 (lit_3800)
//	805BE9D4: 804061C0 (g_dComIfG_gameInfo)
//	805BE9D8: 804061C0 (g_dComIfG_gameInfo)
//	805BEA3C: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BEA4C: 804061C0 (g_dComIfG_gameInfo)
//	805BEA50: 804061C0 (g_dComIfG_gameInfo)
//	805BEA5C: 80035200 (onSwitch__10dSv_info_cFii)
//	805BEA64: 805BCC18 (mAllClr__8daB_DR_cFv)
//	805BEA6C: 80267954 (cM_rndF__Ff)
//	805BEA88: 805C790C (l_HIO)
//	805BEA8C: 805C790C (l_HIO)
//	805BEAB4: 805C6BDC (func_805C6BDC)
//	805BEAD4: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BEAD8: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805BEADC: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805BEAEC: 802AFF8C (changeBgmStatus__8Z2SeqMgrFl)
//	805BEB40: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BEB58: 804061C0 (g_dComIfG_gameInfo)
//	805BEB5C: 804061C0 (g_dComIfG_gameInfo)
//	805BEB70: 8006FA24 (StartShock__12dVibration_cFii4cXyz)
//	805BEBE4: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BEBF8: 805C6BF8 (func_805C6BF8)
//	805BEC58: 804061C0 (g_dComIfG_gameInfo)
//	805BEC5C: 804061C0 (g_dComIfG_gameInfo)
//	805BEC70: 8006FA24 (StartShock__12dVibration_cFii4cXyz)
//	805BEC74: 804061C0 (g_dComIfG_gameInfo)
//	805BEC78: 804061C0 (g_dComIfG_gameInfo)
//	805BECB0: 8015F398 (checkMasterSwordEquip__9daPy_py_cFv)
//	805BECEC: 805C790C (l_HIO)
//	805BECF0: 805C790C (l_HIO)
//	805BED10: 803DD470 (now__14mDoMtx_stack_c)
//	805BED14: 803DD470 (now__14mDoMtx_stack_c)
//	805BED18: 803464B0 (PSMTXCopy)
//	805BED1C: 803DD470 (now__14mDoMtx_stack_c)
//	805BED20: 803DD470 (now__14mDoMtx_stack_c)
//	805BED3C: 804061C0 (g_dComIfG_gameInfo)
//	805BED40: 804061C0 (g_dComIfG_gameInfo)
//	805BED88: 8004CA90 (set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	805BEDD0: 8004CA90 (set__13dPa_control_cFUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	805BEE2C: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BEE44: 804061C0 (g_dComIfG_gameInfo)
//	805BEE48: 804061C0 (g_dComIfG_gameInfo)
//	805BEE54: 800352B0 (offSwitch__10dSv_info_cFii)
//	805BEE64: 804061C0 (g_dComIfG_gameInfo)
//	805BEE68: 804061C0 (g_dComIfG_gameInfo)
//	805BEE74: 80035200 (onSwitch__10dSv_info_cFii)
//	805BEE78: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805BEE7C: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805BEE90: 802AF408 (bgmStop__8Z2SeqMgrFUll)
//	805BEE94: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805BEE98: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805BEEAC: 802AFB94 (bgmStreamPrepare__8Z2SeqMgrFUl)
//	805BEEB0: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805BEEB4: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805BEEC0: 802AFE18 (bgmStreamPlay__8Z2SeqMgrFv)
//	805BEF24: 80019EF0 (fopAcM_createChild__FsUiUlPC4cXyziPC5csXyzPC4cXyzScPFPv_i)
//	805BEF74: 804061C0 (g_dComIfG_gameInfo)
//	805BEF78: 804061C0 (g_dComIfG_gameInfo)
//	805BEF84: 800352B0 (offSwitch__10dSv_info_cFii)
//	805BEF94: 804061C0 (g_dComIfG_gameInfo)
//	805BEF98: 804061C0 (g_dComIfG_gameInfo)
//	805BEFA4: 80035200 (onSwitch__10dSv_info_cFii)
//	805BEFDC: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BEFE8: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805BEFEC: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805BEFFC: 802AFF8C (changeBgmStatus__8Z2SeqMgrFl)
//	805BF00C: 8002D94C (dComIfGs_onZoneSwitch__Fii)
//	805BF040: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BF05C: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BF0E8: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BF138: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BF140: 805BD15C (mBgFallGroundCheck__8daB_DR_cFv)
//	805BF158: 804061C0 (g_dComIfG_gameInfo)
//	805BF15C: 804061C0 (g_dComIfG_gameInfo)
//	805BF168: 800352B0 (offSwitch__10dSv_info_cFii)
//	805BF18C: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BF1F0: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BF214: 805C6BDC (func_805C6BDC)
//	805BF234: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BF274: 805BCEA4 (revolutionMove__8daB_DR_cFv)
//	805BF2D0: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BF2D8: 805BD05C (mPlayerHighCheck__8daB_DR_cFv)
//	805BF2F0: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805BF304: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805BF318: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805BF34C: 804061C0 (g_dComIfG_gameInfo)
//	805BF350: 804061C0 (g_dComIfG_gameInfo)
//	805BF364: 8006FA24 (StartShock__12dVibration_cFii4cXyz)
//	805BF374: 804061C0 (g_dComIfG_gameInfo)
//	805BF378: 804061C0 (g_dComIfG_gameInfo)
//	805BF384: 800352B0 (offSwitch__10dSv_info_cFii)
//	805BF394: 804061C0 (g_dComIfG_gameInfo)
//	805BF398: 804061C0 (g_dComIfG_gameInfo)
//	805BF3A4: 800352B0 (offSwitch__10dSv_info_cFii)
//	805BF3EC: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BF3FC: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805BF408: 805C6BDC (func_805C6BDC)
//	805BF414: 804061C0 (g_dComIfG_gameInfo)
//	805BF418: 804061C0 (g_dComIfG_gameInfo)
//	805BF424: 8003498C (onEventBit__11dSv_event_cFUs)
//	805BF42C: 8002D7D0 (dComIfGs_onStageBossEnemy__Fi)
//	805BF430: 804061C0 (g_dComIfG_gameInfo)
//	805BF434: 804061C0 (g_dComIfG_gameInfo)
//	805BF444: 80035200 (onSwitch__10dSv_info_cFii)
//	805BF44C: 80019C7C (fopAcM_delete__FP10fopAc_ac_c)
//	805BF454: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	805BF45C: 8000CF44 (ZXYrotM__14mDoMtx_stack_cFRC5csXyz)
//	805BF460: 803DD470 (now__14mDoMtx_stack_c)
//	805BF464: 803DD470 (now__14mDoMtx_stack_c)
//	805BF46C: 803465B0 (PSMTXInverse)
//	805BF470: 803DD470 (now__14mDoMtx_stack_c)
//	805BF474: 803DD470 (now__14mDoMtx_stack_c)
//	805BF480: 80346D6C (PSMTXMultVec)
//	805BF4B4: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::executeWeekHit() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/executeWeekHit__8daB_DR_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 805C7974-805C7978 0004+00 s=2 e=0 z=0  None .bss       None                                                         */
static u8 data_805C7974[4];

/* 805BF4C8-805BF768 02A0+00 s=2 e=0 z=0  None .text      mBreathSet__8daB_DR_cFv                                      */
//	805BF4D8: 803621C8 (_savegpr_24)
//	805BF4E0: 805C6C74 (lit_3800)
//	805BF4E4: 805C6C74 (lit_3800)
//	805BF4F8: 8026FA3C (cLib_addCalc2__FPffff)
//	805BF50C: 805C7974 (data_805C7974)
//	805BF510: 805C7974 (data_805C7974)
//	805BF530: 804061C0 (g_dComIfG_gameInfo)
//	805BF534: 804061C0 (g_dComIfG_gameInfo)
//	805BF538: 805C76A0 (effId)
//	805BF53C: 805C76A0 (effId)
//	805BF58C: 8004D4CC (set__13dPa_control_cFUlUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	805BF5A0: 8004B918 (getEmitter__Q213dPa_control_c7level_cFUl)
//	805BF5CC: 80280808 (func_80280808)
//	805BF5E8: 8001A710 (fopAcM_searchActorAngleY__FPC10fopAc_ac_cPC10fopAc_ac_c)
//	805BF5F0: 80450768 (calc_mtx)
//	805BF5F4: 80450768 (calc_mtx)
//	805BF5FC: 8000C3DC (mDoMtx_YrotS__FPA4_fs)
//	805BF61C: 80270EEC (MtxPosition__FP4cXyzP4cXyz)
//	805BF62C: 80347090 (PSVECAdd)
//	805BF6B4: 805C6BDC (func_805C6BDC)
//	805BF6D8: 80266B34 (__mi__4cXyzCFRC3Vec)
//	805BF6F8: 80267128 (atan2sX_Z__4cXyzCFv)
//	805BF74C: 80019EF0 (fopAcM_createChild__FsUiUlPC4cXyziPC5csXyzPC4cXyzScPFPv_i)
//	805BF754: 80362214 (_restgpr_24)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::mBreathSet() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/mBreathSet__8daB_DR_cFv.s"
}
#pragma pop


/* 805BF768-805BFA6C 0304+00 s=1 e=0 z=0  None .text      mBreathHighSet__8daB_DR_cFb                                  */
//	805BF778: 803621D4 (_savegpr_27)
//	805BF784: 805C6C74 (lit_3800)
//	805BF788: 805C6C74 (lit_3800)
//	805BF78C: 804061C0 (g_dComIfG_gameInfo)
//	805BF790: 804061C0 (g_dComIfG_gameInfo)
//	805BF7A4: 805BC248 (mHabatakiAnmSet__8daB_DR_cFi)
//	805BF7C4: 8001A710 (fopAcM_searchActorAngleY__FPC10fopAc_ac_cPC10fopAc_ac_c)
//	805BF7CC: 80450768 (calc_mtx)
//	805BF7D0: 80450768 (calc_mtx)
//	805BF7D8: 8000C3DC (mDoMtx_YrotS__FPA4_fs)
//	805BF7F8: 80270EEC (MtxPosition__FP4cXyzP4cXyz)
//	805BF87C: 8001A710 (fopAcM_searchActorAngleY__FPC10fopAc_ac_cPC10fopAc_ac_c)
//	805BF890: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805BF8A4: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805BF8B8: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805BF8C8: 805C790C (l_HIO)
//	805BF8CC: 805C790C (l_HIO)
//	805BF8D8: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	805BF8E8: 80266B34 (__mi__4cXyzCFRC3Vec)
//	805BF908: 80347138 (PSVECSquareMag)
//	805BF978: 80450AE0 (__float_nan)
//	805BF97C: 80450AE0 (__float_nan)
//	805BF9E8: 80450AE0 (__float_nan)
//	805BF9EC: 80450AE0 (__float_nan)
//	805BFA2C: 8001A710 (fopAcM_searchActorAngleY__FPC10fopAc_ac_cPC10fopAc_ac_c)
//	805BFA3C: 803650D0 (abs)
//	805BFA58: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  bool False
asm void daB_DR_c::mBreathHighSet(bool param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/mBreathHighSet__8daB_DR_cFb.s"
}
#pragma pop


/* 805BFA6C-805BFD88 031C+00 s=1 e=0 z=0  None .text      mFeintBreath__8daB_DR_cFv                                    */
//	805BFA7C: 803621DC (_savegpr_29)
//	805BFA84: 805C6C74 (lit_3800)
//	805BFA88: 805C6C74 (lit_3800)
//	805BFAC8: 805C790C (l_HIO)
//	805BFACC: 805C790C (l_HIO)
//	805BFAE8: 805C6BDC (func_805C6BDC)
//	805BFB08: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BFB0C: 805C790C (l_HIO)
//	805BFB10: 805C790C (l_HIO)
//	805BFB30: 805BF4C8 (mBreathSet__8daB_DR_cFv)
//	805BFB38: 804061C0 (g_dComIfG_gameInfo)
//	805BFB3C: 804061C0 (g_dComIfG_gameInfo)
//	805BFB44: 8001A710 (fopAcM_searchActorAngleY__FPC10fopAc_ac_cPC10fopAc_ac_c)
//	805BFB50: 805C790C (l_HIO)
//	805BFB54: 805C790C (l_HIO)
//	805BFB60: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805BFB84: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805BFBE4: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BFBEC: 805C6BDC (func_805C6BDC)
//	805BFC14: 805C790C (l_HIO)
//	805BFC18: 805C790C (l_HIO)
//	805BFC34: 805C790C (l_HIO)
//	805BFC38: 805C790C (l_HIO)
//	805BFC5C: 803650D0 (abs)
//	805BFC74: 805C790C (l_HIO)
//	805BFC78: 805C790C (l_HIO)
//	805BFC80: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805BFC94: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805BFCE0: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BFD38: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BFD3C: 805C790C (l_HIO)
//	805BFD40: 805C790C (l_HIO)
//	805BFD74: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::mFeintBreath() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/mFeintBreath__8daB_DR_cFv.s"
}
#pragma pop


/* 805BFD88-805C062C 08A4+00 s=1 e=0 z=0  None .text      executeBreathAttack__8daB_DR_cFv                             */
//	805BFD98: 803621CC (_savegpr_25)
//	805BFDA0: 805C6C74 (lit_3800)
//	805BFDA4: 805C6C74 (lit_3800)
//	805BFDA8: 804061C0 (g_dComIfG_gameInfo)
//	805BFDAC: 804061C0 (g_dComIfG_gameInfo)
//	805BFDC8: 805BD05C (mPlayerHighCheck__8daB_DR_cFv)
//	805BFDF0: 805BB64C (mStatusONOFF__8daB_DR_cFi)
//	805BFDF8: 805BCC18 (mAllClr__8daB_DR_cFv)
//	805BFE18: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BFE2C: 8026FA80 (cLib_addCalc0__FPfff)
//	805BFE3C: 8026FA80 (cLib_addCalc0__FPfff)
//	805BFEB4: 805BCC18 (mAllClr__8daB_DR_cFv)
//	805BFEC8: 804061C0 (g_dComIfG_gameInfo)
//	805BFECC: 804061C0 (g_dComIfG_gameInfo)
//	805BFEDC: 805C790C (l_HIO)
//	805BFEE0: 805C790C (l_HIO)
//	805BFF00: 805BF768 (mBreathHighSet__8daB_DR_cFb)
//	805BFF08: 805C6BDC (func_805C6BDC)
//	805BFF34: 805BB64C (mStatusONOFF__8daB_DR_cFi)
//	805BFF50: 805BF768 (mBreathHighSet__8daB_DR_cFb)
//	805BFF78: 805BB64C (mStatusONOFF__8daB_DR_cFi)
//	805BFFB4: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805BFFD0: 805BF768 (mBreathHighSet__8daB_DR_cFb)
//	805C0020: 804061C0 (g_dComIfG_gameInfo)
//	805C0024: 804061C0 (g_dComIfG_gameInfo)
//	805C0034: 805C790C (l_HIO)
//	805C0038: 805C790C (l_HIO)
//	805C0048: 805C790C (l_HIO)
//	805C004C: 805C790C (l_HIO)
//	805C0090: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805C00AC: 805C790C (l_HIO)
//	805C00B0: 805C790C (l_HIO)
//	805C00D0: 805BF768 (mBreathHighSet__8daB_DR_cFb)
//	805C00E8: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	805C0124: 805C790C (l_HIO)
//	805C0128: 805C790C (l_HIO)
//	805C0138: 805C790C (l_HIO)
//	805C013C: 805C790C (l_HIO)
//	805C016C: 805BFA6C (mFeintBreath__8daB_DR_cFv)
//	805C0180: 8001A710 (fopAcM_searchActorAngleY__FPC10fopAc_ac_cPC10fopAc_ac_c)
//	805C0190: 805C790C (l_HIO)
//	805C0194: 805C790C (l_HIO)
//	805C019C: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805C01C0: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805C01F4: 805BF4C8 (mBreathSet__8daB_DR_cFv)
//	805C01FC: 805C6BDC (func_805C6BDC)
//	805C0238: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805C0250: 805BF768 (mBreathHighSet__8daB_DR_cFb)
//	805C0294: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805C02D8: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805C02DC: 805C790C (l_HIO)
//	805C02E0: 805C790C (l_HIO)
//	805C0300: 805BB64C (mStatusONOFF__8daB_DR_cFi)
//	805C0324: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805C037C: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805C03A0: 805BD05C (mPlayerHighCheck__8daB_DR_cFv)
//	805C03D8: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805C03EC: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805C0408: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805C0424: 805BB64C (mStatusONOFF__8daB_DR_cFi)
//	805C0434: 805C790C (l_HIO)
//	805C0438: 805C790C (l_HIO)
//	805C0448: 805C790C (l_HIO)
//	805C044C: 805C790C (l_HIO)
//	805C046C: 805BF768 (mBreathHighSet__8daB_DR_cFb)
//	805C0480: 805C6BDC (func_805C6BDC)
//	805C04AC: 8001A710 (fopAcM_searchActorAngleY__FPC10fopAc_ac_cPC10fopAc_ac_c)
//	805C04BC: 803650D0 (abs)
//	805C04FC: 804061C0 (g_dComIfG_gameInfo)
//	805C0500: 804061C0 (g_dComIfG_gameInfo)
//	805C0510: 80070844 (GetLockonList__12dAttention_cFl)
//	805C0520: 800737E4 (LockonTruth__12dAttention_cFv)
//	805C0534: 80070844 (GetLockonList__12dAttention_cFl)
//	805C0538: 80073864 (getActor__10dAttList_cFv)
//	805C057C: 805BB64C (mStatusONOFF__8daB_DR_cFi)
//	805C0594: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805C05B0: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805C05C0: 805C790C (l_HIO)
//	805C05C4: 805C790C (l_HIO)
//	805C05CC: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805C05E0: 805BD05C (mPlayerHighCheck__8daB_DR_cFv)
//	805C0618: 80362218 (_restgpr_25)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::executeBreathAttack() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/executeBreathAttack__8daB_DR_cFv.s"
}
#pragma pop


/* 805C062C-805C0CAC 0680+00 s=1 e=0 z=0  None .text      executeWindAttack__8daB_DR_cFv                               */
//	805C063C: 803621D8 (_savegpr_28)
//	805C0644: 805C6C74 (lit_3800)
//	805C0648: 805C6C74 (lit_3800)
//	805C064C: 804061C0 (g_dComIfG_gameInfo)
//	805C0650: 804061C0 (g_dComIfG_gameInfo)
//	805C0668: 805BC248 (mHabatakiAnmSet__8daB_DR_cFi)
//	805C0678: 8026FA80 (cLib_addCalc0__FPfff)
//	805C0688: 8026FA80 (cLib_addCalc0__FPfff)
//	805C06C0: 805BCC18 (mAllClr__8daB_DR_cFv)
//	805C0748: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	805C0758: 80266B34 (__mi__4cXyzCFRC3Vec)
//	805C0780: 80347138 (PSVECSquareMag)
//	805C07F0: 80450AE0 (__float_nan)
//	805C07F4: 80450AE0 (__float_nan)
//	805C0860: 80450AE0 (__float_nan)
//	805C0864: 80450AE0 (__float_nan)
//	805C0884: 805BD3E4 (normalHoverMove__8daB_DR_cFv)
//	805C0898: 805BD05C (mPlayerHighCheck__8daB_DR_cFv)
//	805C08C0: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805C08C8: 804061C0 (g_dComIfG_gameInfo)
//	805C08CC: 804061C0 (g_dComIfG_gameInfo)
//	805C08FC: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805C0910: 80266B34 (__mi__4cXyzCFRC3Vec)
//	805C0944: 80347138 (PSVECSquareMag)
//	805C09B4: 80450AE0 (__float_nan)
//	805C09B8: 80450AE0 (__float_nan)
//	805C0A24: 80450AE0 (__float_nan)
//	805C0A28: 80450AE0 (__float_nan)
//	805C0A30: 805C790C (l_HIO)
//	805C0A34: 805C790C (l_HIO)
//	805C0ACC: 805C6BDC (func_805C6BDC)
//	805C0AE8: 805C6BDC (func_805C6BDC)
//	805C0B14: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805C0B20: 80347138 (PSVECSquareMag)
//	805C0B90: 80450AE0 (__float_nan)
//	805C0B94: 80450AE0 (__float_nan)
//	805C0C00: 80450AE0 (__float_nan)
//	805C0C04: 80450AE0 (__float_nan)
//	805C0C1C: 805BB64C (mStatusONOFF__8daB_DR_cFi)
//	805C0C2C: 805BB64C (mStatusONOFF__8daB_DR_cFi)
//	805C0C38: 8001A710 (fopAcM_searchActorAngleY__FPC10fopAc_ac_cPC10fopAc_ac_c)
//	805C0C4C: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805C0C60: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805C0C74: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805C0C90: 8026FA3C (cLib_addCalc2__FPffff)
//	805C0C98: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::executeWindAttack() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/executeWindAttack__8daB_DR_cFv.s"
}
#pragma pop


/* 805C0CAC-805C0EF8 024C+00 s=1 e=0 z=0  None .text      mGliderMoveSub__8daB_DR_cFf                                  */
//	805C0CC4: 803621DC (_savegpr_29)
//	805C0CD0: 805C6C74 (lit_3800)
//	805C0CD4: 805C6C74 (lit_3800)
//	805C0CD8: 804061C0 (g_dComIfG_gameInfo)
//	805C0CDC: 804061C0 (g_dComIfG_gameInfo)
//	805C0CE4: 80439A20 (sincosTable___5JMath)
//	805C0CE8: 80439A20 (sincosTable___5JMath)
//	805C0D28: 80347090 (PSVECAdd)
//	805C0D4C: 805BD05C (mPlayerHighCheck__8daB_DR_cFv)
//	805C0D80: 8026FA3C (cLib_addCalc2__FPffff)
//	805C0D90: 80266B34 (__mi__4cXyzCFRC3Vec)
//	805C0DB0: 80347138 (PSVECSquareMag)
//	805C0E20: 80450AE0 (__float_nan)
//	805C0E24: 80450AE0 (__float_nan)
//	805C0E90: 80450AE0 (__float_nan)
//	805C0E94: 80450AE0 (__float_nan)
//	805C0EE4: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 False
asm void daB_DR_c::mGliderMoveSub(f32 param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/mGliderMoveSub__8daB_DR_cFf.s"
}
#pragma pop


/* 805C0EF8-805C1E0C 0F14+00 s=2 e=0 z=0  None .text      executeGliderAttack__8daB_DR_cFv                             */
//	805C0F10: 803621DC (_savegpr_29)
//	805C0F18: 805C6C74 (lit_3800)
//	805C0F1C: 805C6C74 (lit_3800)
//	805C0F20: 804061C0 (g_dComIfG_gameInfo)
//	805C0F24: 804061C0 (g_dComIfG_gameInfo)
//	805C0F3C: 805C76A8 (lit_6776)
//	805C0F40: 805C76A8 (lit_6776)
//	805C0F58: 805BB64C (mStatusONOFF__8daB_DR_cFi)
//	805C0F70: 805BCC18 (mAllClr__8daB_DR_cFv)
//	805C0F74: 8026786C (cM_rnd__Fv)
//	805C0FB0: 80439A20 (sincosTable___5JMath)
//	805C0FB4: 80439A20 (sincosTable___5JMath)
//	805C0FFC: 80347090 (PSVECAdd)
//	805C1028: 80266B34 (__mi__4cXyzCFRC3Vec)
//	805C1050: 80267128 (atan2sX_Z__4cXyzCFv)
//	805C1064: 803650D0 (abs)
//	805C10A4: 805BC248 (mHabatakiAnmSet__8daB_DR_cFi)
//	805C10F0: 805BC57C (mGlider_AniSet__8daB_DR_cFb)
//	805C1100: 80266B34 (__mi__4cXyzCFRC3Vec)
//	805C1120: 80347138 (PSVECSquareMag)
//	805C1190: 80450AE0 (__float_nan)
//	805C1194: 80450AE0 (__float_nan)
//	805C1200: 80450AE0 (__float_nan)
//	805C1204: 80450AE0 (__float_nan)
//	805C1258: 80439A20 (sincosTable___5JMath)
//	805C125C: 80439A20 (sincosTable___5JMath)
//	805C129C: 80347090 (PSVECAdd)
//	805C12E0: 805BD05C (mPlayerHighCheck__8daB_DR_cFv)
//	805C12EC: 804061C0 (g_dComIfG_gameInfo)
//	805C12F0: 804061C0 (g_dComIfG_gameInfo)
//	805C1314: 80266B34 (__mi__4cXyzCFRC3Vec)
//	805C1348: 805BD05C (mPlayerHighCheck__8daB_DR_cFv)
//	805C1358: 805C790C (l_HIO)
//	805C135C: 805C790C (l_HIO)
//	805C138C: 80266B34 (__mi__4cXyzCFRC3Vec)
//	805C13B4: 80347138 (PSVECSquareMag)
//	805C1424: 80450AE0 (__float_nan)
//	805C1428: 80450AE0 (__float_nan)
//	805C1494: 80450AE0 (__float_nan)
//	805C1498: 80450AE0 (__float_nan)
//	805C1500: 80266B34 (__mi__4cXyzCFRC3Vec)
//	805C1528: 80347138 (PSVECSquareMag)
//	805C1598: 80450AE0 (__float_nan)
//	805C159C: 80450AE0 (__float_nan)
//	805C1608: 80450AE0 (__float_nan)
//	805C160C: 80450AE0 (__float_nan)
//	805C166C: 80439A20 (sincosTable___5JMath)
//	805C1670: 80439A20 (sincosTable___5JMath)
//	805C16B0: 80347090 (PSVECAdd)
//	805C16FC: 80266B34 (__mi__4cXyzCFRC3Vec)
//	805C1740: 805BC57C (mGlider_AniSet__8daB_DR_cFb)
//	805C1764: 805BD05C (mPlayerHighCheck__8daB_DR_cFv)
//	805C177C: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805C1798: 805BC57C (mGlider_AniSet__8daB_DR_cFb)
//	805C17A8: 805BC57C (mGlider_AniSet__8daB_DR_cFb)
//	805C17E8: 805BC57C (mGlider_AniSet__8daB_DR_cFb)
//	805C1818: 805BC8B4 (mGliderAtAniSet__8daB_DR_cFv)
//	805C187C: 805BC8B4 (mGliderAtAniSet__8daB_DR_cFv)
//	805C1890: 8026FA3C (cLib_addCalc2__FPffff)
//	805C189C: 805C0CAC (mGliderMoveSub__8daB_DR_cFf)
//	805C18C8: 805BD05C (mPlayerHighCheck__8daB_DR_cFv)
//	805C18E0: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805C1900: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805C191C: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805C1954: 80439A20 (sincosTable___5JMath)
//	805C1958: 80439A20 (sincosTable___5JMath)
//	805C1998: 80347090 (PSVECAdd)
//	805C19D4: 805BB4CC (mGlider_WindPosSet__8daB_DR_cFv)
//	805C1A18: 805BC57C (mGlider_AniSet__8daB_DR_cFb)
//	805C1A2C: 8026FA3C (cLib_addCalc2__FPffff)
//	805C1A38: 805C0CAC (mGliderMoveSub__8daB_DR_cFf)
//	805C1A4C: 805BB64C (mStatusONOFF__8daB_DR_cFi)
//	805C1A90: 805C0CAC (mGliderMoveSub__8daB_DR_cFf)
//	805C1A9C: 805BC57C (mGlider_AniSet__8daB_DR_cFb)
//	805C1AA4: 805C6BDC (func_805C6BDC)
//	805C1AB4: 805BB4CC (mGlider_WindPosSet__8daB_DR_cFv)
//	805C1AF4: 805C0CAC (mGliderMoveSub__8daB_DR_cFf)
//	805C1B14: 80266B34 (__mi__4cXyzCFRC3Vec)
//	805C1B3C: 80347138 (PSVECSquareMag)
//	805C1BAC: 80450AE0 (__float_nan)
//	805C1BB0: 80450AE0 (__float_nan)
//	805C1C1C: 80450AE0 (__float_nan)
//	805C1C20: 80450AE0 (__float_nan)
//	805C1C84: 805BC57C (mGlider_AniSet__8daB_DR_cFb)
//	805C1C94: 80266B34 (__mi__4cXyzCFRC3Vec)
//	805C1CB4: 80267128 (atan2sX_Z__4cXyzCFv)
//	805C1CC8: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805C1CDC: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805C1CF0: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805C1CF8: 80267150 (atan2sY_XZ__4cXyzCFv)
//	805C1D0C: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805C1D20: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805C1D50: 8026FA3C (cLib_addCalc2__FPffff)
//	805C1D68: 80450768 (calc_mtx)
//	805C1D6C: 80450768 (calc_mtx)
//	805C1D78: 8000C3DC (mDoMtx_YrotS__FPA4_fs)
//	805C1D7C: 80450768 (calc_mtx)
//	805C1D80: 80450768 (calc_mtx)
//	805C1D8C: 8000C39C (mDoMtx_XrotM__FPA4_fs)
//	805C1DAC: 80270EEC (MtxPosition__FP4cXyzP4cXyz)
//	805C1DC0: 8026FA3C (cLib_addCalc2__FPffff)
//	805C1DD4: 8026FA80 (cLib_addCalc0__FPfff)
//	805C1DE8: 8026FA3C (cLib_addCalc2__FPffff)
//	805C1DF8: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::executeGliderAttack() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/executeGliderAttack__8daB_DR_cFv.s"
}
#pragma pop


/* 805C1E0C-805C24BC 06B0+00 s=1 e=0 z=0  None .text      executePillarSearch__8daB_DR_cFv                             */
//	805C1E1C: 803621DC (_savegpr_29)
//	805C1E24: 805C78C0 (lit_1109)
//	805C1E28: 805C78C0 (lit_1109)
//	805C1E2C: 805C6C74 (lit_3800)
//	805C1E30: 805C6C74 (lit_3800)
//	805C1E68: 805BB0E4 (__dt__4cXyzFv)
//	805C1E6C: 805BB0E4 (__dt__4cXyzFv)
//	805C1E74: 805BADF8 (__register_global_object)
//	805C1EA4: 805BB0E4 (__dt__4cXyzFv)
//	805C1EA8: 805BB0E4 (__dt__4cXyzFv)
//	805C1EB0: 805BADF8 (__register_global_object)
//	805C1EE0: 805BB0E4 (__dt__4cXyzFv)
//	805C1EE4: 805BB0E4 (__dt__4cXyzFv)
//	805C1EEC: 805BADF8 (__register_global_object)
//	805C1F1C: 805BB0E4 (__dt__4cXyzFv)
//	805C1F20: 805BB0E4 (__dt__4cXyzFv)
//	805C1F28: 805BADF8 (__register_global_object)
//	805C1F8C: 80267954 (cM_rndF__Ff)
//	805C1FD4: 805BC57C (mGlider_AniSet__8daB_DR_cFb)
//	805C203C: 80266B34 (__mi__4cXyzCFRC3Vec)
//	805C2064: 80347138 (PSVECSquareMag)
//	805C20D4: 80450AE0 (__float_nan)
//	805C20D8: 80450AE0 (__float_nan)
//	805C2144: 80450AE0 (__float_nan)
//	805C2148: 80450AE0 (__float_nan)
//	805C2174: 8026FA3C (cLib_addCalc2__FPffff)
//	805C2188: 8026FA3C (cLib_addCalc2__FPffff)
//	805C21C4: 805BC248 (mHabatakiAnmSet__8daB_DR_cFi)
//	805C21F0: 8026FA3C (cLib_addCalc2__FPffff)
//	805C2204: 8026FA3C (cLib_addCalc2__FPffff)
//	805C2214: 80266B34 (__mi__4cXyzCFRC3Vec)
//	805C2290: 80347138 (PSVECSquareMag)
//	805C2300: 80450AE0 (__float_nan)
//	805C2304: 80450AE0 (__float_nan)
//	805C2370: 80450AE0 (__float_nan)
//	805C2374: 80450AE0 (__float_nan)
//	805C23C8: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805C23E4: 80266B34 (__mi__4cXyzCFRC3Vec)
//	805C2404: 80267128 (atan2sX_Z__4cXyzCFv)
//	805C2418: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805C242C: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805C2440: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805C2448: 80267150 (atan2sY_XZ__4cXyzCFv)
//	805C245C: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805C2470: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805C2478: 805BD05C (mPlayerHighCheck__8daB_DR_cFv)
//	805C24A0: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805C24A8: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::executePillarSearch() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/executePillarSearch__8daB_DR_cFv.s"
}
#pragma pop


/* 805C24BC-805C2BE8 072C+00 s=1 e=0 z=0  None .text      executePillarWait__8daB_DR_cFv                               */
//	805C24CC: 803621D8 (_savegpr_28)
//	805C24D4: 805C6C74 (lit_3800)
//	805C24D8: 805C6C74 (lit_3800)
//	805C24DC: 804061C0 (g_dComIfG_gameInfo)
//	805C24E0: 804061C0 (g_dComIfG_gameInfo)
//	805C24E8: 80439A20 (sincosTable___5JMath)
//	805C24EC: 80439A20 (sincosTable___5JMath)
//	805C2554: 805BB64C (mStatusONOFF__8daB_DR_cFi)
//	805C2558: 804061C0 (g_dComIfG_gameInfo)
//	805C255C: 804061C0 (g_dComIfG_gameInfo)
//	805C2568: 80034B98 (onSwitch__12dSv_danBit_cFi)
//	805C2578: 805BCC18 (mAllClr__8daB_DR_cFv)
//	805C2584: 805C790C (l_HIO)
//	805C2588: 805C790C (l_HIO)
//	805C25C0: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805C263C: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805C269C: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805C26A4: 805C6BDC (func_805C6BDC)
//	805C26D0: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805C2734: 8034739C (PSVECSquareDistance)
//	805C27A4: 80450AE0 (__float_nan)
//	805C27A8: 80450AE0 (__float_nan)
//	805C2814: 80450AE0 (__float_nan)
//	805C2818: 80450AE0 (__float_nan)
//	805C2830: 805BB64C (mStatusONOFF__8daB_DR_cFi)
//	805C2870: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805C2888: 805BD05C (mPlayerHighCheck__8daB_DR_cFv)
//	805C2894: 805C790C (l_HIO)
//	805C2898: 805C790C (l_HIO)
//	805C28AC: 8001A964 (fopAcM_searchActorDistanceXZ__FPC10fopAc_ac_cPC10fopAc_ac_c)
//	805C28E0: 805C6BDC (func_805C6BDC)
//	805C2908: 8001A964 (fopAcM_searchActorDistanceXZ__FPC10fopAc_ac_cPC10fopAc_ac_c)
//	805C291C: 80084460 (ChkTgHit__12dCcD_GObjInfFv)
//	805C2930: 805BB64C (mStatusONOFF__8daB_DR_cFi)
//	805C2990: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805C29D8: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	805C2A2C: 804061C0 (g_dComIfG_gameInfo)
//	805C2A30: 804061C0 (g_dComIfG_gameInfo)
//	805C2A3C: 80034BC0 (offSwitch__12dSv_danBit_cFi)
//	805C2A54: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805C2A78: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	805C2A90: 805C790C (l_HIO)
//	805C2A94: 805C790C (l_HIO)
//	805C2ABC: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805C2ADC: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805C2AF0: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805C2B20: 8026F1DC (SetC__8cM3dGCylFRC4cXyz)
//	805C2B2C: 8026F1F8 (SetH__8cM3dGCylFf)
//	805C2B38: 8026F200 (SetR__8cM3dGCylFf)
//	805C2B54: 804061C0 (g_dComIfG_gameInfo)
//	805C2B58: 804061C0 (g_dComIfG_gameInfo)
//	805C2B64: 80264BA8 (Set__4cCcSFP8cCcD_Obj)
//	805C2B74: 8026FA80 (cLib_addCalc0__FPfff)
//	805C2B84: 80266B34 (__mi__4cXyzCFRC3Vec)
//	805C2BA4: 80267128 (atan2sX_Z__4cXyzCFv)
//	805C2BB8: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805C2BCC: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805C2BD4: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::executePillarWait() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/executePillarWait__8daB_DR_cFv.s"
}
#pragma pop


/* 805C2BE8-805C2CD0 00E8+00 s=4 e=0 z=0  None .text      startDemoCheck__8daB_DR_cFv                                  */
//	805C2BF8: 803621DC (_savegpr_29)
//	805C2C00: 804061C0 (g_dComIfG_gameInfo)
//	805C2C04: 804061C0 (g_dComIfG_gameInfo)
//	805C2C3C: 8001B908 (fopAcM_orderPotentialEvent__FP10fopAc_ac_cUsUsUs)
//	805C2C88: 801614D0 (Stop__9dCamera_cFv)
//	805C2C94: 8016300C (SetTrimSize__9dCamera_cFl)
//	805C2C98: 804061C0 (g_dComIfG_gameInfo)
//	805C2C9C: 804061C0 (g_dComIfG_gameInfo)
//	805C2CBC: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::startDemoCheck() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/startDemoCheck__8daB_DR_cFv.s"
}
#pragma pop


/* 805C2CD0-805C3558 0888+00 s=2 e=0 z=0  None .text      executeDamageDemo__8daB_DR_cFv                               */
//	805C2CE0: 803621D4 (_savegpr_27)
//	805C2CE8: 805C6C74 (lit_3800)
//	805C2CEC: 805C6C74 (lit_3800)
//	805C2CF0: 804061C0 (g_dComIfG_gameInfo)
//	805C2CF4: 804061C0 (g_dComIfG_gameInfo)
//	805C2D1C: 805C7704 (lit_7387)
//	805C2D20: 805C7704 (lit_7387)
//	805C2D34: 805C2BE8 (startDemoCheck__8daB_DR_cFv)
//	805C2D44: 805BCC18 (mAllClr__8daB_DR_cFv)
//	805C2D6C: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805C2D80: 80450768 (calc_mtx)
//	805C2D84: 80450768 (calc_mtx)
//	805C2D9C: 8000C3DC (mDoMtx_YrotS__FPA4_fs)
//	805C2DC0: 80270EEC (MtxPosition__FP4cXyzP4cXyz)
//	805C2DD0: 80347090 (PSVECAdd)
//	805C2E00: 80450768 (calc_mtx)
//	805C2E04: 80450768 (calc_mtx)
//	805C2E1C: 8000C3DC (mDoMtx_YrotS__FPA4_fs)
//	805C2E3C: 80270EEC (MtxPosition__FP4cXyzP4cXyz)
//	805C2E4C: 80347090 (PSVECAdd)
//	805C2EA4: 80450768 (calc_mtx)
//	805C2EA8: 80450768 (calc_mtx)
//	805C2EC0: 8000C3DC (mDoMtx_YrotS__FPA4_fs)
//	805C2EE4: 80270EEC (MtxPosition__FP4cXyzP4cXyz)
//	805C2EF4: 80347090 (PSVECAdd)
//	805C2F10: 80450768 (calc_mtx)
//	805C2F14: 80450768 (calc_mtx)
//	805C2F2C: 8000C3DC (mDoMtx_YrotS__FPA4_fs)
//	805C2F4C: 80270EEC (MtxPosition__FP4cXyzP4cXyz)
//	805C2F5C: 80347090 (PSVECAdd)
//	805C2FAC: 801614AC (Start__9dCamera_cFv)
//	805C2FB8: 8016300C (SetTrimSize__9dCamera_cFl)
//	805C2FBC: 804061C0 (g_dComIfG_gameInfo)
//	805C2FC0: 804061C0 (g_dComIfG_gameInfo)
//	805C2FC8: 80042468 (reset__14dEvt_control_cFv)
//	805C2FD8: 804061C0 (g_dComIfG_gameInfo)
//	805C2FDC: 804061C0 (g_dComIfG_gameInfo)
//	805C2FE8: 80035200 (onSwitch__10dSv_info_cFii)
//	805C2FF8: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805C301C: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805C3024: 805C2BE8 (startDemoCheck__8daB_DR_cFv)
//	805C3080: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805C30CC: 8026FA3C (cLib_addCalc2__FPffff)
//	805C3114: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805C3170: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805C3180: 805BD15C (mBgFallGroundCheck__8daB_DR_cFv)
//	805C3198: 8002D94C (dComIfGs_onZoneSwitch__Fii)
//	805C31E0: 8026FA3C (cLib_addCalc2__FPffff)
//	805C323C: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805C324C: 805C6BDC (func_805C6BDC)
//	805C3270: 805C6BDC (func_805C6BDC)
//	805C3280: 801614AC (Start__9dCamera_cFv)
//	805C328C: 8016300C (SetTrimSize__9dCamera_cFl)
//	805C3290: 804061C0 (g_dComIfG_gameInfo)
//	805C3294: 804061C0 (g_dComIfG_gameInfo)
//	805C329C: 80042468 (reset__14dEvt_control_cFv)
//	805C32BC: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805C3358: 80450768 (calc_mtx)
//	805C335C: 80450768 (calc_mtx)
//	805C3370: 8000C3DC (mDoMtx_YrotS__FPA4_fs)
//	805C3394: 80270EEC (MtxPosition__FP4cXyzP4cXyz)
//	805C33A4: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	805C33B4: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	805C3430: 80180AA8 (Set__9dCamera_cF4cXyz4cXyz)
//	805C344C: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C34B4: 805BB540 (mBoot_c_tranceSet__8daB_DR_cFb)
//	805C34DC: 805BC0B8 (chkPartCreate__8daB_DR_cFb)
//	805C34E4: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	805C34EC: 8000CF44 (ZXYrotM__14mDoMtx_stack_cFRC5csXyz)
//	805C34F0: 803DD470 (now__14mDoMtx_stack_c)
//	805C34F4: 803DD470 (now__14mDoMtx_stack_c)
//	805C34FC: 803465B0 (PSMTXInverse)
//	805C3500: 803DD470 (now__14mDoMtx_stack_c)
//	805C3504: 803DD470 (now__14mDoMtx_stack_c)
//	805C3510: 80346D6C (PSMTXMultVec)
//	805C3544: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::executeDamageDemo() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/executeDamageDemo__8daB_DR_cFv.s"
}
#pragma pop


/* 805C3558-805C36A4 014C+00 s=1 e=0 z=0  None .text      executeMiddleDemo__8daB_DR_cFv                               */
//	805C3568: 803621DC (_savegpr_29)
//	805C3570: 804061C0 (g_dComIfG_gameInfo)
//	805C3574: 804061C0 (g_dComIfG_gameInfo)
//	805C35AC: 805C2BE8 (startDemoCheck__8daB_DR_cFv)
//	805C35BC: 805BCC18 (mAllClr__8daB_DR_cFv)
//	805C35D4: 8001A710 (fopAcM_searchActorAngleY__FPC10fopAc_ac_cPC10fopAc_ac_c)
//	805C35DC: 80450768 (calc_mtx)
//	805C35E0: 80450768 (calc_mtx)
//	805C35F4: 8000C3DC (mDoMtx_YrotS__FPA4_fs)
//	805C35F8: 805C6CA4 (lit_4011)
//	805C35FC: 805C6CA4 (lit_4011)
//	805C3614: 80270EEC (MtxPosition__FP4cXyzP4cXyz)
//	805C3624: 80347090 (PSVECAdd)
//	805C3688: 80180AA8 (Set__9dCamera_cF4cXyz4cXyz)
//	805C3690: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::executeMiddleDemo() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/executeMiddleDemo__8daB_DR_cFv.s"
}
#pragma pop


/* 805C36A4-805C382C 0188+00 s=1 e=0 z=0  None .text      executeDead__8daB_DR_cFv                                     */
//	805C36BC: 804061C0 (g_dComIfG_gameInfo)
//	805C36C0: 804061C0 (g_dComIfG_gameInfo)
//	805C36F4: 805C2BE8 (startDemoCheck__8daB_DR_cFv)
//	805C3704: 805BCC18 (mAllClr__8daB_DR_cFv)
//	805C3708: 80450768 (calc_mtx)
//	805C370C: 80450768 (calc_mtx)
//	805C3718: 8000C3DC (mDoMtx_YrotS__FPA4_fs)
//	805C371C: 805C6CA4 (lit_4011)
//	805C3720: 805C6CA4 (lit_4011)
//	805C3738: 80270EEC (MtxPosition__FP4cXyzP4cXyz)
//	805C3748: 80347090 (PSVECAdd)
//	805C3764: 80450768 (calc_mtx)
//	805C3768: 80450768 (calc_mtx)
//	805C3774: 8000C3DC (mDoMtx_YrotS__FPA4_fs)
//	805C3778: 805C6CA4 (lit_4011)
//	805C377C: 805C6CA4 (lit_4011)
//	805C3788: 805C6FE8 (lit_4798)
//	805C378C: 805C6FE8 (lit_4798)
//	805C379C: 80270EEC (MtxPosition__FP4cXyzP4cXyz)
//	805C37AC: 80347090 (PSVECAdd)
//	805C3810: 80180AA8 (Set__9dCamera_cF4cXyz4cXyz)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::executeDead() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/executeDead__8daB_DR_cFv.s"
}
#pragma pop


/* 805C382C-805C39D8 01AC+00 s=1 e=0 z=0  None .text      executeBullet__8daB_DR_cFv                                   */
//	805C3844: 805C6C74 (lit_3800)
//	805C3848: 805C6C74 (lit_3800)
//	805C3874: 805BCC18 (mAllClr__8daB_DR_cFv)
//	805C3878: 805C7974 (data_805C7974)
//	805C387C: 805C7974 (data_805C7974)
//	805C3898: 805C6BDC (func_805C6BDC)
//	805C38A8: 80019C7C (fopAcM_delete__FP10fopAc_ac_c)
//	805C38C4: 80023590 (fpcSch_JudgeByID__FPvPv)
//	805C38C8: 80023590 (fpcSch_JudgeByID__FPvPv)
//	805C38D0: 800197F8 (fopAcIt_Judge__FPFPvPv_PvPv)
//	805C3928: 80450768 (calc_mtx)
//	805C392C: 80450768 (calc_mtx)
//	805C3938: 8000C3DC (mDoMtx_YrotS__FPA4_fs)
//	805C393C: 80450768 (calc_mtx)
//	805C3940: 80450768 (calc_mtx)
//	805C394C: 8000C39C (mDoMtx_XrotM__FPA4_fs)
//	805C396C: 80270EEC (MtxPosition__FP4cXyzP4cXyz)
//	805C399C: 8026F648 (SetC__8cM3dGSphFRC4cXyz)
//	805C39A8: 8026F708 (SetR__8cM3dGSphFf)
//	805C39AC: 804061C0 (g_dComIfG_gameInfo)
//	805C39B0: 804061C0 (g_dComIfG_gameInfo)
//	805C39BC: 80264BA8 (Set__4cCcSFP8cCcD_Obj)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::executeBullet() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/executeBullet__8daB_DR_cFv.s"
}
#pragma pop


/* 805C39D8-805C3CB0 02D8+00 s=2 e=0 z=0  None .text      executeParts__8daB_DR_cFv                                    */
//	805C39E8: 803621DC (_savegpr_29)
//	805C39F0: 805C6C74 (lit_3800)
//	805C39F4: 805C6C74 (lit_3800)
//	805C39F8: 804061C0 (g_dComIfG_gameInfo)
//	805C39FC: 804061C0 (g_dComIfG_gameInfo)
//	805C3A10: 805C773C (lit_7559)
//	805C3A14: 805C773C (lit_7559)
//	805C3A2C: 80267954 (cM_rndF__Ff)
//	805C3A40: 8026798C (cM_rndFX__Ff)
//	805C3A68: 8026798C (cM_rndFX__Ff)
//	805C3A7C: 80267954 (cM_rndF__Ff)
//	805C3AD0: 805C6BDC (func_805C6BDC)
//	805C3AE0: 80019C7C (fopAcM_delete__FP10fopAc_ac_c)
//	805C3B1C: 8026FA80 (cLib_addCalc0__FPfff)
//	805C3B3C: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805C3B70: 805C6BDC (func_805C6BDC)
//	805C3B80: 805BBFC0 (setDeathLightEffect__8daB_DR_cFv)
//	805C3B88: 80019C7C (fopAcM_delete__FP10fopAc_ac_c)
//	805C3B94: 80267954 (cM_rndF__Ff)
//	805C3BB0: 8026798C (cM_rndFX__Ff)
//	805C3BD8: 80266B34 (__mi__4cXyzCFRC3Vec)
//	805C3BF8: 80267128 (atan2sX_Z__4cXyzCFv)
//	805C3C04: 8026798C (cM_rndFX__Ff)
//	805C3C20: 80450768 (calc_mtx)
//	805C3C24: 80450768 (calc_mtx)
//	805C3C30: 8000C3DC (mDoMtx_YrotS__FPA4_fs)
//	805C3C34: 80450768 (calc_mtx)
//	805C3C38: 80450768 (calc_mtx)
//	805C3C44: 8000C39C (mDoMtx_XrotM__FPA4_fs)
//	805C3C64: 80270EEC (MtxPosition__FP4cXyzP4cXyz)
//	805C3C84: 805C6BDC (func_805C6BDC)
//	805C3C94: 80019C7C (fopAcM_delete__FP10fopAc_ac_c)
//	805C3C9C: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::executeParts() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/executeParts__8daB_DR_cFv.s"
}
#pragma pop


/* 805C3CB0-805C40E0 0430+00 s=2 e=0 z=0  None .text      action__8daB_DR_cFv                                          */
//	805C3CC0: 803621DC (_savegpr_29)
//	805C3CC8: 805C6C74 (lit_3800)
//	805C3CCC: 805C6C74 (lit_3800)
//	805C3CD0: 805BCA10 (tail_hit_check__8daB_DR_cFv)
//	805C3CD8: 805BCAD4 (week_hit_check__8daB_DR_cFv)
//	805C3CF4: 805C776C (lit_7648)
//	805C3CF8: 805C776C (lit_7648)
//	805C3D10: 805BD5FC (executeWait__8daB_DR_cFv)
//	805C3D1C: 805BD98C (executeFlyWait__8daB_DR_cFv)
//	805C3D30: 805BDBC4 (executeTailHit__8daB_DR_cFv)
//	805C3D44: 805BE9B4 (executeWeekHit__8daB_DR_cFv)
//	805C3D58: 805C062C (executeWindAttack__8daB_DR_cFv)
//	805C3D64: 805BFD88 (executeBreathAttack__8daB_DR_cFv)
//	805C3D78: 805C0EF8 (executeGliderAttack__8daB_DR_cFv)
//	805C3D8C: 805C1E0C (executePillarSearch__8daB_DR_cFv)
//	805C3DA0: 805C24BC (executePillarWait__8daB_DR_cFv)
//	805C3DB4: 805C2CD0 (executeDamageDemo__8daB_DR_cFv)
//	805C3DC8: 805C3558 (executeMiddleDemo__8daB_DR_cFv)
//	805C3DDC: 805C36A4 (executeDead__8daB_DR_cFv)
//	805C3E28: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C3E48: 804061C0 (g_dComIfG_gameInfo)
//	805C3E4C: 804061C0 (g_dComIfG_gameInfo)
//	805C3E60: 8006FA24 (StartShock__12dVibration_cFii4cXyz)
//	805C3E70: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C3E98: 804061C0 (g_dComIfG_gameInfo)
//	805C3E9C: 804061C0 (g_dComIfG_gameInfo)
//	805C3EB0: 8006FB10 (StartQuake__12dVibration_cFii4cXyz)
//	805C3ECC: 804061C0 (g_dComIfG_gameInfo)
//	805C3ED0: 804061C0 (g_dComIfG_gameInfo)
//	805C3EDC: 8006FD94 (StopQuake__12dVibration_cFi)
//	805C3EE4: 805BB6E8 (setSe__8daB_DR_cFv)
//	805C3EE8: 804061C0 (g_dComIfG_gameInfo)
//	805C3EEC: 804061C0 (g_dComIfG_gameInfo)
//	805C3F68: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805C3F7C: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805C3FCC: 803650D0 (abs)
//	805C4024: 80270608 (cLib_addCalcAngleS2__FPssss)
//	805C4030: 8001A6CC (fopAcM_posMoveF__FP10fopAc_ac_cPC4cXyz)
//	805C404C: 805BCC4C (mHeadAngleSet__8daB_DR_cFv)
//	805C4064: 80077114 (SetGroundUpY__9dBgS_AcchFf)
//	805C406C: 804061C0 (g_dComIfG_gameInfo)
//	805C4070: 804061C0 (g_dComIfG_gameInfo)
//	805C4078: 80076AAC (CrrPos__9dBgS_AcchFR4dBgS)
//	805C4084: 8002D06C (dComIfGp_getReverb__Fi)
//	805C4094: 800110B0 (play__16mDoExt_McaMorfSOFUlSc)
//	805C40A0: 8002D06C (dComIfGp_getReverb__Fi)
//	805C40C4: 8000D428 (play__14mDoExt_baseAnmFv)
//	805C40CC: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::action() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/action__8daB_DR_cFv.s"
}
#pragma pop


/* 805C40E0-805C4130 0050+00 s=1 e=0 z=0  None .text      action_fire__8daB_DR_cFv                                     */
//	805C40F4: 805C382C (executeBullet__8daB_DR_cFv)
//	805C4118: 8001A660 (fopAcM_posMove__FP10fopAc_ac_cPC4cXyz)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::action_fire() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/action_fire__8daB_DR_cFv.s"
}
#pragma pop


/* 805C4130-805C41A4 0074+00 s=1 e=0 z=0  None .text      action_parts__8daB_DR_cFv                                    */
//	805C4144: 805C39D8 (executeParts__8daB_DR_cFv)
//	805C4150: 8001A6CC (fopAcM_posMoveF__FP10fopAc_ac_cPC4cXyz)
//	805C4158: 804061C0 (g_dComIfG_gameInfo)
//	805C415C: 804061C0 (g_dComIfG_gameInfo)
//	805C4164: 80076AAC (CrrPos__9dBgS_AcchFR4dBgS)
//	805C4170: 8002D06C (dComIfGp_getReverb__Fi)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::action_parts() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/action_parts__8daB_DR_cFv.s"
}
#pragma pop


/* 805C41A4-805C4684 04E0+00 s=2 e=0 z=0  None .text      mtx_set__8daB_DR_cFv                                         */
//	805C41B4: 803621BC (_savegpr_21)
//	805C41BC: 805C6C74 (lit_3800)
//	805C41C0: 805C6C74 (lit_3800)
//	805C41C8: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	805C41D8: 8000CD9C (transM__14mDoMtx_stack_cFfff)
//	805C41E0: 8000CF44 (ZXYrotM__14mDoMtx_stack_cFRC5csXyz)
//	805C41E4: 805C790C (l_HIO)
//	805C41E8: 805C790C (l_HIO)
//	805C41F8: 8000CE38 (scaleM__14mDoMtx_stack_cFfff)
//	805C4204: 803DD470 (now__14mDoMtx_stack_c)
//	805C4208: 803DD470 (now__14mDoMtx_stack_c)
//	805C4210: 803464B0 (PSMTXCopy)
//	805C4218: 800111EC (modelCalc__16mDoExt_McaMorfSOFv)
//	805C422C: 8007757C (__ct__11dBgS_GndChkFv)
//	805C4244: 803DD470 (now__14mDoMtx_stack_c)
//	805C4248: 803DD470 (now__14mDoMtx_stack_c)
//	805C424C: 803464B0 (PSMTXCopy)
//	805C4250: 803DD470 (now__14mDoMtx_stack_c)
//	805C4254: 803DD470 (now__14mDoMtx_stack_c)
//	805C4278: 80267D28 (SetPos__11cBgS_GndChkFPC4cXyz)
//	805C427C: 804061C0 (g_dComIfG_gameInfo)
//	805C4280: 804061C0 (g_dComIfG_gameInfo)
//	805C428C: 800744A0 (GroundCross__4cBgSFP11cBgS_GndChk)
//	805C4300: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	805C431C: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	805C433C: 800775F0 (__dt__11dBgS_GndChkFv)
//	805C4368: 80266B34 (__mi__4cXyzCFRC3Vec)
//	805C4388: 80347138 (PSVECSquareMag)
//	805C43F8: 80450AE0 (__float_nan)
//	805C43FC: 80450AE0 (__float_nan)
//	805C4468: 80450AE0 (__float_nan)
//	805C446C: 80450AE0 (__float_nan)
//	805C44D8: 804061C0 (g_dComIfG_gameInfo)
//	805C44DC: 804061C0 (g_dComIfG_gameInfo)
//	805C44E0: 805C77A4 (effLId)
//	805C44E4: 805C77A4 (effLId)
//	805C44F0: 805C77AC (effRId)
//	805C44F4: 805C77AC (effRId)
//	805C4544: 8004D4CC (set__13dPa_control_cFUlUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	805C4558: 8004B918 (getEmitter__Q213dPa_control_c7level_cFUl)
//	805C4584: 80280808 (func_80280808)
//	805C4604: 8004D4CC (set__13dPa_control_cFUlUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	805C4618: 8004B918 (getEmitter__Q213dPa_control_c7level_cFUl)
//	805C4644: 80280808 (func_80280808)
//	805C4670: 80362208 (_restgpr_21)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::mtx_set() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/mtx_set__8daB_DR_cFv.s"
}
#pragma pop


/* 805C4684-805C46E0 005C+00 s=1 e=0 z=0  None .text      parts_mtx_set__8daB_DR_cFv                                   */
//	805C469C: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	805C46A4: 8000CF44 (ZXYrotM__14mDoMtx_stack_cFRC5csXyz)
//	805C46B4: 8000CE38 (scaleM__14mDoMtx_stack_cFfff)
//	805C46B8: 803DD470 (now__14mDoMtx_stack_c)
//	805C46BC: 803DD470 (now__14mDoMtx_stack_c)
//	805C46C8: 803464B0 (PSMTXCopy)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::parts_mtx_set() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/parts_mtx_set__8daB_DR_cFv.s"
}
#pragma pop


/* 805C46E0-805C4E14 0734+00 s=1 e=0 z=0  None .text      cc_set__8daB_DR_cFv                                          */
//	805C46F8: 803621CC (_savegpr_25)
//	805C4700: 805C6C74 (lit_3800)
//	805C4704: 805C6C74 (lit_3800)
//	805C4730: 803DD470 (now__14mDoMtx_stack_c)
//	805C4734: 803DD470 (now__14mDoMtx_stack_c)
//	805C4738: 803464B0 (PSMTXCopy)
//	805C473C: 803DD470 (now__14mDoMtx_stack_c)
//	805C4740: 803DD470 (now__14mDoMtx_stack_c)
//	805C4778: 803DD470 (now__14mDoMtx_stack_c)
//	805C477C: 803DD470 (now__14mDoMtx_stack_c)
//	805C4780: 803464B0 (PSMTXCopy)
//	805C4784: 803DD470 (now__14mDoMtx_stack_c)
//	805C4788: 803DD470 (now__14mDoMtx_stack_c)
//	805C47C0: 803DD470 (now__14mDoMtx_stack_c)
//	805C47C4: 803DD470 (now__14mDoMtx_stack_c)
//	805C47C8: 803464B0 (PSMTXCopy)
//	805C47CC: 803DD470 (now__14mDoMtx_stack_c)
//	805C47D0: 803DD470 (now__14mDoMtx_stack_c)
//	805C4820: 803DD470 (now__14mDoMtx_stack_c)
//	805C4824: 803DD470 (now__14mDoMtx_stack_c)
//	805C4828: 803464B0 (PSMTXCopy)
//	805C4840: 803DD470 (now__14mDoMtx_stack_c)
//	805C4844: 803DD470 (now__14mDoMtx_stack_c)
//	805C4850: 80346D6C (PSMTXMultVec)
//	805C485C: 8026F648 (SetC__8cM3dGSphFRC4cXyz)
//	805C4868: 8026F708 (SetR__8cM3dGSphFf)
//	805C486C: 804061C0 (g_dComIfG_gameInfo)
//	805C4870: 804061C0 (g_dComIfG_gameInfo)
//	805C4880: 80264BA8 (Set__4cCcSFP8cCcD_Obj)
//	805C4890: 803DD470 (now__14mDoMtx_stack_c)
//	805C4894: 803DD470 (now__14mDoMtx_stack_c)
//	805C4898: 803464B0 (PSMTXCopy)
//	805C489C: 803DD470 (now__14mDoMtx_stack_c)
//	805C48A0: 803DD470 (now__14mDoMtx_stack_c)
//	805C48E4: 803464B0 (PSMTXCopy)
//	805C4900: 803DD470 (now__14mDoMtx_stack_c)
//	805C4904: 803DD470 (now__14mDoMtx_stack_c)
//	805C4910: 80346D6C (PSMTXMultVec)
//	805C4914: 80439A20 (sincosTable___5JMath)
//	805C4918: 80439A20 (sincosTable___5JMath)
//	805C4930: 805C790C (l_HIO)
//	805C4934: 805C790C (l_HIO)
//	805C496C: 803DD470 (now__14mDoMtx_stack_c)
//	805C4970: 803DD470 (now__14mDoMtx_stack_c)
//	805C4974: 803464B0 (PSMTXCopy)
//	805C4998: 8026F648 (SetC__8cM3dGSphFRC4cXyz)
//	805C49A4: 8026F708 (SetR__8cM3dGSphFf)
//	805C49C8: 80264BA8 (Set__4cCcSFP8cCcD_Obj)
//	805C4A2C: 80439A20 (sincosTable___5JMath)
//	805C4A30: 80439A20 (sincosTable___5JMath)
//	805C4A38: 805C790C (l_HIO)
//	805C4A3C: 805C790C (l_HIO)
//	805C4AD8: 8026F648 (SetC__8cM3dGSphFRC4cXyz)
//	805C4AE4: 8026F708 (SetR__8cM3dGSphFf)
//	805C4B08: 80264BA8 (Set__4cCcSFP8cCcD_Obj)
//	805C4B1C: 805BD05C (mPlayerHighCheck__8daB_DR_cFv)
//	805C4B50: 8026F648 (SetC__8cM3dGSphFRC4cXyz)
//	805C4B5C: 8026F708 (SetR__8cM3dGSphFf)
//	805C4B78: 80439A20 (sincosTable___5JMath)
//	805C4B7C: 80439A20 (sincosTable___5JMath)
//	805C4B84: 805C790C (l_HIO)
//	805C4B88: 805C790C (l_HIO)
//	805C4BF8: 80264BA8 (Set__4cCcSFP8cCcD_Obj)
//	805C4C18: 8026F97C (cLib_addCalc__FPfffff)
//	805C4C34: 8026F97C (cLib_addCalc__FPfffff)
//	805C4C40: 8005B61C (dKyw_evt_wind_set__Fss)
//	805C4C48: 8005B60C (dKyw_custom_windpower__Ff)
//	805C4C64: 80439A20 (sincosTable___5JMath)
//	805C4C68: 80439A20 (sincosTable___5JMath)
//	805C4C98: 803DD470 (now__14mDoMtx_stack_c)
//	805C4C9C: 803DD470 (now__14mDoMtx_stack_c)
//	805C4CA0: 803464B0 (PSMTXCopy)
//	805C4CB8: 803DD470 (now__14mDoMtx_stack_c)
//	805C4CBC: 803DD470 (now__14mDoMtx_stack_c)
//	805C4CC8: 80346D6C (PSMTXMultVec)
//	805C4CD4: 8026F648 (SetC__8cM3dGSphFRC4cXyz)
//	805C4CE0: 8026F708 (SetR__8cM3dGSphFf)
//	805C4D04: 80264BA8 (Set__4cCcSFP8cCcD_Obj)
//	805C4D14: 803DD470 (now__14mDoMtx_stack_c)
//	805C4D18: 803DD470 (now__14mDoMtx_stack_c)
//	805C4D1C: 803464B0 (PSMTXCopy)
//	805C4D34: 803DD470 (now__14mDoMtx_stack_c)
//	805C4D38: 803DD470 (now__14mDoMtx_stack_c)
//	805C4D44: 80346D6C (PSMTXMultVec)
//	805C4D50: 8026F648 (SetC__8cM3dGSphFRC4cXyz)
//	805C4D5C: 8026F708 (SetR__8cM3dGSphFf)
//	805C4D80: 80264BA8 (Set__4cCcSFP8cCcD_Obj)
//	805C4D90: 803DD470 (now__14mDoMtx_stack_c)
//	805C4D94: 803DD470 (now__14mDoMtx_stack_c)
//	805C4D98: 803464B0 (PSMTXCopy)
//	805C4DB0: 803DD470 (now__14mDoMtx_stack_c)
//	805C4DB4: 803DD470 (now__14mDoMtx_stack_c)
//	805C4DC0: 80346D6C (PSMTXMultVec)
//	805C4DCC: 8026F1DC (SetC__8cM3dGCylFRC4cXyz)
//	805C4DD8: 8026F1F8 (SetH__8cM3dGCylFf)
//	805C4DE4: 8026F200 (SetR__8cM3dGCylFf)
//	805C4DF0: 80264BA8 (Set__4cCcSFP8cCcD_Obj)
//	805C4E00: 80362218 (_restgpr_25)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::cc_set() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/cc_set__8daB_DR_cFv.s"
}
#pragma pop


/* 805C4E14-805C4FB4 01A0+00 s=1 e=0 z=0  None .text      down_cc_set__8daB_DR_cFv                                     */
//	805C4E24: 803621C0 (_savegpr_22)
//	805C4E38: 804061C0 (g_dComIfG_gameInfo)
//	805C4E3C: 804061C0 (g_dComIfG_gameInfo)
//	805C4E44: 805C70F8 (DOWN_CYL_DT)
//	805C4E48: 805C70F8 (DOWN_CYL_DT)
//	805C4E4C: 803DD470 (now__14mDoMtx_stack_c)
//	805C4E50: 803DD470 (now__14mDoMtx_stack_c)
//	805C4E78: 803464B0 (PSMTXCopy)
//	805C4EA0: 80346D6C (PSMTXMultVec)
//	805C4EB4: 8026F1DC (SetC__8cM3dGCylFRC4cXyz)
//	805C4EC0: 8026F1F8 (SetH__8cM3dGCylFf)
//	805C4ECC: 8026F200 (SetR__8cM3dGCylFf)
//	805C4ED8: 80264BA8 (Set__4cCcSFP8cCcD_Obj)
//	805C4EFC: 805C7170 (DOWN_SPH_DT)
//	805C4F00: 805C7170 (DOWN_SPH_DT)
//	805C4F04: 803DD470 (now__14mDoMtx_stack_c)
//	805C4F08: 803DD470 (now__14mDoMtx_stack_c)
//	805C4F30: 803464B0 (PSMTXCopy)
//	805C4F58: 80346D6C (PSMTXMultVec)
//	805C4F6C: 8026F648 (SetC__8cM3dGSphFRC4cXyz)
//	805C4F78: 8026F708 (SetR__8cM3dGSphFf)
//	805C4F84: 80264BA8 (Set__4cCcSFP8cCcD_Obj)
//	805C4FA0: 8036220C (_restgpr_22)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::down_cc_set() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/down_cc_set__8daB_DR_cFv.s"
}
#pragma pop


/* 805C4FB4-805C50BC 0108+00 s=1 e=0 z=0  None .text      demo_skip__8daB_DR_cFi                                       */
//	805C4FCC: 80450C98 (struct_80450C98)
//	805C4FD0: 80450C98 (struct_80450C98)
//	805C4FE4: 800199BC (fopAcM_SearchByID__FUiPP10fopAc_ac_c)
//	805C4FFC: 804061C0 (g_dComIfG_gameInfo)
//	805C5000: 804061C0 (g_dComIfG_gameInfo)
//	805C501C: 805C6CA4 (lit_4011)
//	805C5020: 805C6CA4 (lit_4011)
//	805C5038: 80027170 (dStage_changeScene__FifUlScsi)
//	805C503C: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805C5040: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805C504C: 802AF884 (subBgmStop__8Z2SeqMgrFv)
//	805C5054: 8042CA54 (g_env_light)
//	805C5058: 8042CA54 (g_env_light)
//	805C5060: 80450C98 (struct_80450C98)
//	805C5064: 80450C98 (struct_80450C98)
//	805C5074: 8002D94C (dComIfGs_onZoneSwitch__Fii)
//	805C5084: 8002D94C (dComIfGs_onZoneSwitch__Fii)
//	805C508C: 801614AC (Start__9dCamera_cFv)
//	805C5098: 8016300C (SetTrimSize__9dCamera_cFl)
//	805C50A0: 80019C7C (fopAcM_delete__FP10fopAc_ac_c)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
asm void daB_DR_c::demo_skip(int param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/demo_skip__8daB_DR_cFi.s"
}
#pragma pop


/* 805C50BC-805C50F0 0034+00 s=1 e=0 z=0  None .text      DemoSkipCallBack__8daB_DR_cFPvi                              */
//	805C50D0: 805C4FB4 (demo_skip__8daB_DR_cFi)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  void* False
// 	 void False
//  int False
asm void daB_DR_c::DemoSkipCallBack(void* param_0, int param_1) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/DemoSkipCallBack__8daB_DR_cFPvi.s"
}
#pragma pop


/* 805C50F0-805C5588 0498+00 s=1 e=0 z=0  None .text      execute__8daB_DR_cFv                                         */
//	805C5108: 805C6C74 (lit_3800)
//	805C510C: 805C6C74 (lit_3800)
//	805C5150: 80155774 (daNpcF_getPlayerInfoFromPlayerList__FiiR4cXyzR5csXyz)
//	805C515C: 804061C0 (g_dComIfG_gameInfo)
//	805C5160: 804061C0 (g_dComIfG_gameInfo)
//	805C5170: 80034F80 (setRoom__13dSv_restart_cFRC4cXyzsSc)
//	805C518C: 80155774 (daNpcF_getPlayerInfoFromPlayerList__FiiR4cXyzR5csXyz)
//	805C5198: 804061C0 (g_dComIfG_gameInfo)
//	805C519C: 804061C0 (g_dComIfG_gameInfo)
//	805C51AC: 80034F80 (setRoom__13dSv_restart_cFRC4cXyzsSc)
//	805C51E0: 805C6BDC (func_805C6BDC)
//	805C51F4: 800199BC (fopAcM_SearchByID__FUiPP10fopAc_ac_c)
//	805C5224: 8002DA30 (dComIfGs_isZoneSwitch__Fii)
//	805C5230: 804061C0 (g_dComIfG_gameInfo)
//	805C5234: 804061C0 (g_dComIfG_gameInfo)
//	805C5240: 805C50BC (DemoSkipCallBack__8daB_DR_cFPvi)
//	805C5244: 805C50BC (DemoSkipCallBack__8daB_DR_cFPvi)
//	805C524C: 80042914 (setSkipProc__14dEvt_control_cFPvPFPvi_ii)
//	805C5260: 8002DA30 (dComIfGs_isZoneSwitch__Fii)
//	805C5270: 805C6BDC (func_805C6BDC)
//	805C5288: 8002D94C (dComIfGs_onZoneSwitch__Fii)
//	805C5298: 8002D94C (dComIfGs_onZoneSwitch__Fii)
//	805C529C: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805C52A0: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805C52BC: 802AF010 (bgmStart__8Z2SeqMgrFUlUll)
//	805C52EC: 805C6BDC (func_805C6BDC)
//	805C5314: 800199BC (fopAcM_SearchByID__FUiPP10fopAc_ac_c)
//	805C5320: 804061C0 (g_dComIfG_gameInfo)
//	805C5324: 804061C0 (g_dComIfG_gameInfo)
//	805C5378: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805C53A8: 8002D94C (dComIfGs_onZoneSwitch__Fii)
//	805C5440: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805C548C: 8002D06C (dComIfGp_getReverb__Fi)
//	805C549C: 800110B0 (play__16mDoExt_McaMorfSOFUlSc)
//	805C54A4: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	805C54AC: 8000CF44 (ZXYrotM__14mDoMtx_stack_cFRC5csXyz)
//	805C54B0: 805C790C (l_HIO)
//	805C54B4: 805C790C (l_HIO)
//	805C54C4: 8000CE38 (scaleM__14mDoMtx_stack_cFfff)
//	805C54D0: 803DD470 (now__14mDoMtx_stack_c)
//	805C54D4: 803DD470 (now__14mDoMtx_stack_c)
//	805C54DC: 803464B0 (PSMTXCopy)
//	805C54E4: 800111EC (modelCalc__16mDoExt_McaMorfSOFv)
//	805C54F0: 805BC0B8 (chkPartCreate__8daB_DR_cFb)
//	805C5524: 805C40E0 (action_fire__8daB_DR_cFv)
//	805C5530: 805C4130 (action_parts__8daB_DR_cFv)
//	805C5538: 805C4684 (parts_mtx_set__8daB_DR_cFv)
//	805C5544: 805C3CB0 (action__8daB_DR_cFv)
//	805C554C: 805C41A4 (mtx_set__8daB_DR_cFv)
//	805C5554: 805C46E0 (cc_set__8daB_DR_cFv)
//	805C5568: 805C4E14 (down_cc_set__8daB_DR_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::execute() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/execute__8daB_DR_cFv.s"
}
#pragma pop


/* 805C5588-805C55A8 0020+00 s=2 e=0 z=0  None .text      daB_DR_Execute__FP8daB_DR_c                                  */
//	805C5594: 805C50F0 (execute__8daB_DR_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daB_DR_c* False
// 	 daB_DR_c False
asm static void daB_DR_Execute(daB_DR_c* param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/daB_DR_Execute__FP8daB_DR_c.s"
}
#pragma pop


/* 805C55A8-805C55B0 0008+00 s=1 e=0 z=0  None .text      daB_DR_IsDelete__FP8daB_DR_c                                 */
// True False
//  bool False
//  daB_DR_c* False
// 	 daB_DR_c False
static bool daB_DR_IsDelete(daB_DR_c* param_0) {
	return true;
}


/* 805C55B0-805C5684 00D4+00 s=1 e=0 z=0  None .text      _delete__8daB_DR_cFv                                         */
//	805C55C8: 805C7240 (stringBase0)
//	805C55CC: 805C7240 (stringBase0)
//	805C55D0: 8002D008 (dComIfG_resDelete__FP30request_of_phase_process_classPCc)
//	805C5630: 805C78FD (struct_805C78FC)
//	805C5634: 805C78FD (struct_805C78FC)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::_delete() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/_delete__8daB_DR_cFv.s"
}
#pragma pop


/* 805C5684-805C56A4 0020+00 s=1 e=0 z=0  None .text      daB_DR_Delete__FP8daB_DR_c                                   */
//	805C5690: 805C55B0 (_delete__8daB_DR_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daB_DR_c* False
// 	 daB_DR_c False
asm static void daB_DR_Delete(daB_DR_c* param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/daB_DR_Delete__FP8daB_DR_c.s"
}
#pragma pop


/* 805C56A4-805C590C 0268+00 s=1 e=0 z=0  None .text      CreateHeap__8daB_DR_cFv                                      */
//	805C56B4: 803621D8 (_savegpr_28)
//	805C56D0: 805C7240 (stringBase0)
//	805C56D4: 805C7240 (stringBase0)
//	805C56E0: 805C77B4 (mPartDt)
//	805C56E4: 805C77B4 (mPartDt)
//	805C56EC: 804061C0 (g_dComIfG_gameInfo)
//	805C56F0: 804061C0 (g_dComIfG_gameInfo)
//	805C5700: 8003C2EC (getRes__14dRes_control_cFPCclP11dRes_info_ci)
//	805C5710: 80014C54 (mDoExt_J3DModel__create__FP12J3DModelDataUlUl)
//	805C5734: 805C7240 (stringBase0)
//	805C5738: 805C7240 (stringBase0)
//	805C5740: 804061C0 (g_dComIfG_gameInfo)
//	805C5744: 804061C0 (g_dComIfG_gameInfo)
//	805C5758: 8003C2EC (getRes__14dRes_control_cFPCclP11dRes_info_ci)
//	805C5764: 802CEC4C (__nw__FUl)
//	805C5770: 805C7240 (stringBase0)
//	805C5774: 805C7240 (stringBase0)
//	805C5784: 8003C2EC (getRes__14dRes_control_cFPCclP11dRes_info_ci)
//	805C57BC: 805C6CA8 (lit_4012)
//	805C57C0: 805C6CA8 (lit_4012)
//	805C57CC: 800107D0 (__ct__16mDoExt_McaMorfSOFP12J3DModelDataP25mDoExt_McaMorfCallBack1_cP25mDoExt_McaMorfCallBack2_cP15J3DAnmTransformifiiP10Z2CreatureUlUl)
//	805C57FC: 802CEC4C (__nw__FUl)
//	805C5808: 805C78A0 (__vt__12J3DFrameCtrl)
//	805C580C: 805C78A0 (__vt__12J3DFrameCtrl)
//	805C5818: 803283FC (init__12J3DFrameCtrlFs)
//	805C583C: 805C7240 (stringBase0)
//	805C5840: 805C7240 (stringBase0)
//	805C5850: 8003C2EC (getRes__14dRes_control_cFPCclP11dRes_info_ci)
//	805C5874: 805C6CA8 (lit_4012)
//	805C5878: 805C6CA8 (lit_4012)
//	805C5884: 8000D70C (init__13mDoExt_brkAnmFP16J3DMaterialTableP15J3DAnmTevRegKeyiifss)
//	805C58B0: 805BB120 (JointCallBack__8daB_DR_cFP8J3DJointi)
//	805C58B4: 805BB120 (JointCallBack__8daB_DR_cFP8J3DJointi)
//	805C58F8: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::CreateHeap() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/CreateHeap__8daB_DR_cFv.s"
}
#pragma pop


/* 805C590C-805C5954 0048+00 s=1 e=0 z=0  None .text      __dt__12J3DFrameCtrlFv                                       */
//	805C5924: 805C78A0 (__vt__12J3DFrameCtrl)
//	805C5928: 805C78A0 (__vt__12J3DFrameCtrl)
//	805C5938: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm J3DFrameCtrl::~J3DFrameCtrl() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/__dt__12J3DFrameCtrlFv.s"
}
#pragma pop


/* 805C5954-805C5974 0020+00 s=1 e=0 z=0  None .text      useHeapInit__FP10fopAc_ac_c                                  */
//	805C5960: 805C56A4 (CreateHeap__8daB_DR_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
asm static void useHeapInit(fopAc_ac_c* param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/useHeapInit__FP10fopAc_ac_c.s"
}
#pragma pop


/* 805C5974-805C62B0 093C+00 s=1 e=0 z=0  None .text      create__8daB_DR_cFv                                          */
//	805C5984: 803621C8 (_savegpr_24)
//	805C598C: 805C7248 (cNullVec__6Z2Calc)
//	805C5990: 805C7248 (cNullVec__6Z2Calc)
//	805C5994: 805C6C74 (lit_3800)
//	805C5998: 805C6C74 (lit_3800)
//	805C59B0: 805C62B0 (__ct__8daB_DR_cFv)
//	805C59C4: 805C7240 (stringBase0)
//	805C59C8: 805C7240 (stringBase0)
//	805C59CC: 8002CEBC (dComIfG_resLoad__FP30request_of_phase_process_classPCc)
//	805C5AC0: 80083860 (Init__9dCcD_SttsFiiP10fopAc_ac_c)
//	805C5ACC: 80084A34 (Set__8dCcD_SphFRC11dCcD_SrcSph)
//	805C5AE4: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805C5AF4: 805C5954 (useHeapInit__FP10fopAc_ac_c)
//	805C5AF8: 805C5954 (useHeapInit__FP10fopAc_ac_c)
//	805C5B0C: 8001A4B0 (fopAcM_entrySolidHeap__FP10fopAc_ac_cPFP10fopAc_ac_c_iUl)
//	805C5B48: 80076248 (Set__9dBgS_AcchFP4cXyzP4cXyzP10fopAc_ac_ciP12dBgS_AcchCirP4cXyzP5csXyzP5csXyz)
//	805C5B58: 80075F58 (SetWall__12dBgS_AcchCirFff)
//	805C5B60: 804061C0 (g_dComIfG_gameInfo)
//	805C5B64: 804061C0 (g_dComIfG_gameInfo)
//	805C5B6C: 80076AAC (CrrPos__9dBgS_AcchFR4dBgS)
//	805C5B8C: 802C1094 (init__15Z2CreatureEnemyFP3VecP3VecUcUc)
//	805C5BA0: 80083860 (Init__9dCcD_SttsFiiP10fopAc_ac_c)
//	805C5BC8: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805C5BDC: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805C5BE4: 804061C0 (g_dComIfG_gameInfo)
//	805C5BE8: 804061C0 (g_dComIfG_gameInfo)
//	805C5BF8: 80034934 (isDungeonItem__12dSv_memBit_cCFi)
//	805C5C38: 8001C95C (fopAcM_createWarpHole__FPC4cXyzPC5csXyziUcUcUc)
//	805C5C44: 80034934 (isDungeonItem__12dSv_memBit_cCFi)
//	805C5CA8: 8001C0D4 (fopAcM_createItemForBoss__FPC4cXyziiPC5csXyzPC4cXyzffi)
//	805C5CB0: 8042CA54 (g_env_light)
//	805C5CB4: 8042CA54 (g_env_light)
//	805C5CC8: 805C5954 (useHeapInit__FP10fopAc_ac_c)
//	805C5CCC: 805C5954 (useHeapInit__FP10fopAc_ac_c)
//	805C5CD4: 8001A4B0 (fopAcM_entrySolidHeap__FP10fopAc_ac_cPFP10fopAc_ac_c_iUl)
//	805C5CF4: 804061C0 (g_dComIfG_gameInfo)
//	805C5CF8: 804061C0 (g_dComIfG_gameInfo)
//	805C5D04: 800352B0 (offSwitch__10dSv_info_cFii)
//	805C5D14: 804061C0 (g_dComIfG_gameInfo)
//	805C5D18: 804061C0 (g_dComIfG_gameInfo)
//	805C5D24: 800352B0 (offSwitch__10dSv_info_cFii)
//	805C5D34: 804061C0 (g_dComIfG_gameInfo)
//	805C5D38: 804061C0 (g_dComIfG_gameInfo)
//	805C5D44: 800352B0 (offSwitch__10dSv_info_cFii)
//	805C5D48: 804061C0 (g_dComIfG_gameInfo)
//	805C5D4C: 804061C0 (g_dComIfG_gameInfo)
//	805C5D58: 80034BC0 (offSwitch__12dSv_danBit_cFi)
//	805C5D74: 805C78FD (struct_805C78FC)
//	805C5D78: 805C78FD (struct_805C78FC)
//	805C5D94: 805C790C (l_HIO)
//	805C5D98: 805C790C (l_HIO)
//	805C5DE4: 8001A528 (fopAcM_SetMin__FP10fopAc_ac_cfff)
//	805C5DF8: 8001A538 (fopAcM_SetMax__FP10fopAc_ac_cfff)
//	805C5E24: 80076248 (Set__9dBgS_AcchFP4cXyzP4cXyzP10fopAc_ac_ciP12dBgS_AcchCirP4cXyzP5csXyzP5csXyz)
//	805C5E34: 80075F58 (SetWall__12dBgS_AcchCirFff)
//	805C5E3C: 804061C0 (g_dComIfG_gameInfo)
//	805C5E40: 804061C0 (g_dComIfG_gameInfo)
//	805C5E48: 80076AAC (CrrPos__9dBgS_AcchFR4dBgS)
//	805C5E5C: 80083860 (Init__9dCcD_SttsFiiP10fopAc_ac_c)
//	805C5E68: 800848B4 (Set__8dCcD_CylFRC11dCcD_SrcCyl)
//	805C5E7C: 800848B4 (Set__8dCcD_CylFRC11dCcD_SrcCyl)
//	805C5E9C: 80084A34 (Set__8dCcD_SphFRC11dCcD_SrcSph)
//	805C5EB0: 80084A34 (Set__8dCcD_SphFRC11dCcD_SrcSph)
//	805C5EC4: 80084A34 (Set__8dCcD_SphFRC11dCcD_SrcSph)
//	805C5ED8: 80084A34 (Set__8dCcD_SphFRC11dCcD_SrcSph)
//	805C5EF8: 800848B4 (Set__8dCcD_CylFRC11dCcD_SrcCyl)
//	805C5F28: 80084A34 (Set__8dCcD_SphFRC11dCcD_SrcSph)
//	805C5F58: 80084A34 (Set__8dCcD_SphFRC11dCcD_SrcSph)
//	805C5FBC: 802C10B4 (init__15Z2CreatureEnemyFP3VecP3VecP3VecUcUcUc)
//	805C5FD4: 802C1094 (init__15Z2CreatureEnemyFP3VecP3VecUcUc)
//	805C6004: 8026798C (cM_rndFX__Ff)
//	805C604C: 805BB408 (setBck__8daB_DR_cFiUcff)
//	805C605C: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805C6098: 8002DA30 (dComIfGs_isZoneSwitch__Fii)
//	805C60C0: 8002DA30 (dComIfGs_isZoneSwitch__Fii)
//	805C60D4: 804061C0 (g_dComIfG_gameInfo)
//	805C60D8: 804061C0 (g_dComIfG_gameInfo)
//	805C60E8: 80035200 (onSwitch__10dSv_info_cFii)
//	805C6118: 805BB4B4 (setActionMode__8daB_DR_cFii)
//	805C6120: 8042CA54 (g_env_light)
//	805C6124: 8042CA54 (g_env_light)
//	805C613C: 805C41A4 (mtx_set__8daB_DR_cFv)
//	805C6140: 80450C98 (struct_80450C98)
//	805C6144: 80450C98 (struct_80450C98)
//	805C615C: 8002DA30 (dComIfGs_isZoneSwitch__Fii)
//	805C61BC: 80019EF0 (fopAcM_createChild__FsUiUlPC4cXyziPC5csXyzPC4cXyzScPFPv_i)
//	805C61CC: 805BB64C (mStatusONOFF__8daB_DR_cFi)
//	805C61D4: 8042CA54 (g_env_light)
//	805C61D8: 8042CA54 (g_env_light)
//	805C61E0: 80450C98 (struct_80450C98)
//	805C61E4: 80450C98 (struct_80450C98)
//	805C61FC: 8002DA30 (dComIfGs_isZoneSwitch__Fii)
//	805C6208: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805C620C: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805C6228: 802AF010 (bgmStart__8Z2SeqMgrFUlUll)
//	805C6238: 80450C98 (struct_80450C98)
//	805C623C: 80450C98 (struct_80450C98)
//	805C624C: 8002D94C (dComIfGs_onZoneSwitch__Fii)
//	805C625C: 8002D94C (dComIfGs_onZoneSwitch__Fii)
//	805C626C: 8002DA30 (dComIfGs_isZoneSwitch__Fii)
//	805C6290: 805C5588 (daB_DR_Execute__FP8daB_DR_c)
//	805C629C: 80362214 (_restgpr_24)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DR_c::create() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/create__8daB_DR_cFv.s"
}
#pragma pop


/* 805C62B0-805C6678 03C8+00 s=1 e=0 z=0  None .text      __ct__8daB_DR_cFv                                            */
//	805C62C0: 803621C8 (_savegpr_24)
//	805C62C8: 80018B64 (__ct__10fopAc_ac_cFv)
//	805C62D0: 802C0F64 (__ct__15Z2CreatureEnemyFv)
//	805C62D8: 802C0F64 (__ct__15Z2CreatureEnemyFv)
//	805C62E0: 80075EAC (__ct__12dBgS_AcchCirFv)
//	805C62EC: 800760A0 (__ct__9dBgS_AcchFv)
//	805C62F0: 805C787C (__vt__12dBgS_ObjAcch)
//	805C62F4: 805C787C (__vt__12dBgS_ObjAcch)
//	805C6310: 80078E68 (SetObj__16dBgS_PolyPassChkFv)
//	805C6314: 803C3728 (__vt__9cCcD_Stts)
//	805C6318: 803C3728 (__vt__9cCcD_Stts)
//	805C6324: 80083760 (__ct__10dCcD_GSttsFv)
//	805C6328: 803AC2E4 (__vt__9dCcD_Stts)
//	805C632C: 803AC2E4 (__vt__9dCcD_Stts)
//	805C6344: 80083A28 (__ct__12dCcD_GObjInfFv)
//	805C6348: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	805C634C: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	805C6354: 805C7870 (__vt__8cM3dGAab)
//	805C6358: 805C7870 (__vt__8cM3dGAab)
//	805C6360: 805C7864 (__vt__8cM3dGCyl)
//	805C6364: 805C7864 (__vt__8cM3dGCyl)
//	805C636C: 803C35A4 (__vt__12cCcD_CylAttr)
//	805C6370: 803C35A4 (__vt__12cCcD_CylAttr)
//	805C6380: 803AC050 (__vt__8dCcD_Cyl)
//	805C6384: 803AC050 (__vt__8dCcD_Cyl)
//	805C63A0: 805C6810 (__ct__8dCcD_SphFv)
//	805C63A4: 805C6810 (__ct__8dCcD_SphFv)
//	805C63A8: 805C6744 (__dt__8dCcD_SphFv)
//	805C63AC: 805C6744 (__dt__8dCcD_SphFv)
//	805C63B8: 80361D60 (__construct_array)
//	805C63C4: 80083A28 (__ct__12dCcD_GObjInfFv)
//	805C63C8: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	805C63CC: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	805C63D4: 805C7870 (__vt__8cM3dGAab)
//	805C63D8: 805C7870 (__vt__8cM3dGAab)
//	805C63E0: 805C7858 (__vt__8cM3dGSph)
//	805C63E4: 805C7858 (__vt__8cM3dGSph)
//	805C63EC: 803C3540 (__vt__12cCcD_SphAttr)
//	805C63F0: 803C3540 (__vt__12cCcD_SphAttr)
//	805C6400: 803ABFC0 (__vt__8dCcD_Sph)
//	805C6404: 803ABFC0 (__vt__8dCcD_Sph)
//	805C6424: 80083A28 (__ct__12dCcD_GObjInfFv)
//	805C6428: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	805C642C: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	805C6434: 805C7870 (__vt__8cM3dGAab)
//	805C6438: 805C7870 (__vt__8cM3dGAab)
//	805C6440: 805C7858 (__vt__8cM3dGSph)
//	805C6444: 805C7858 (__vt__8cM3dGSph)
//	805C644C: 803C3540 (__vt__12cCcD_SphAttr)
//	805C6450: 803C3540 (__vt__12cCcD_SphAttr)
//	805C645C: 803ABFC0 (__vt__8dCcD_Sph)
//	805C6460: 803ABFC0 (__vt__8dCcD_Sph)
//	805C6478: 80083A28 (__ct__12dCcD_GObjInfFv)
//	805C647C: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	805C6480: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	805C6488: 805C7870 (__vt__8cM3dGAab)
//	805C648C: 805C7870 (__vt__8cM3dGAab)
//	805C6494: 805C7858 (__vt__8cM3dGSph)
//	805C6498: 805C7858 (__vt__8cM3dGSph)
//	805C64A0: 803C3540 (__vt__12cCcD_SphAttr)
//	805C64A4: 803C3540 (__vt__12cCcD_SphAttr)
//	805C64B0: 803ABFC0 (__vt__8dCcD_Sph)
//	805C64B4: 803ABFC0 (__vt__8dCcD_Sph)
//	805C64CC: 80083A28 (__ct__12dCcD_GObjInfFv)
//	805C64D0: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	805C64D4: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	805C64DC: 805C7870 (__vt__8cM3dGAab)
//	805C64E0: 805C7870 (__vt__8cM3dGAab)
//	805C64E8: 805C7858 (__vt__8cM3dGSph)
//	805C64EC: 805C7858 (__vt__8cM3dGSph)
//	805C64F4: 803C3540 (__vt__12cCcD_SphAttr)
//	805C64F8: 803C3540 (__vt__12cCcD_SphAttr)
//	805C6504: 803ABFC0 (__vt__8dCcD_Sph)
//	805C6508: 803ABFC0 (__vt__8dCcD_Sph)
//	805C6520: 80083A28 (__ct__12dCcD_GObjInfFv)
//	805C6524: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	805C6528: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	805C6530: 805C7870 (__vt__8cM3dGAab)
//	805C6534: 805C7870 (__vt__8cM3dGAab)
//	805C653C: 805C7858 (__vt__8cM3dGSph)
//	805C6540: 805C7858 (__vt__8cM3dGSph)
//	805C6548: 803C3540 (__vt__12cCcD_SphAttr)
//	805C654C: 803C3540 (__vt__12cCcD_SphAttr)
//	805C6558: 803ABFC0 (__vt__8dCcD_Sph)
//	805C655C: 803ABFC0 (__vt__8dCcD_Sph)
//	805C6574: 80083A28 (__ct__12dCcD_GObjInfFv)
//	805C6578: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	805C657C: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	805C6584: 805C7870 (__vt__8cM3dGAab)
//	805C6588: 805C7870 (__vt__8cM3dGAab)
//	805C6590: 805C7858 (__vt__8cM3dGSph)
//	805C6594: 805C7858 (__vt__8cM3dGSph)
//	805C659C: 803C3540 (__vt__12cCcD_SphAttr)
//	805C65A0: 803C3540 (__vt__12cCcD_SphAttr)
//	805C65AC: 803ABFC0 (__vt__8dCcD_Sph)
//	805C65B0: 803ABFC0 (__vt__8dCcD_Sph)
//	805C65C8: 80083A28 (__ct__12dCcD_GObjInfFv)
//	805C65CC: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	805C65D0: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	805C65D8: 805C7870 (__vt__8cM3dGAab)
//	805C65DC: 805C7870 (__vt__8cM3dGAab)
//	805C65E4: 805C7864 (__vt__8cM3dGCyl)
//	805C65E8: 805C7864 (__vt__8cM3dGCyl)
//	805C65F0: 803C35A4 (__vt__12cCcD_CylAttr)
//	805C65F4: 803C35A4 (__vt__12cCcD_CylAttr)
//	805C6600: 803AC050 (__vt__8dCcD_Cyl)
//	805C6604: 803AC050 (__vt__8dCcD_Cyl)
//	805C6618: 805C6810 (__ct__8dCcD_SphFv)
//	805C661C: 805C6810 (__ct__8dCcD_SphFv)
//	805C6620: 805C6744 (__dt__8dCcD_SphFv)
//	805C6624: 805C6744 (__dt__8dCcD_SphFv)
//	805C6630: 80361D60 (__construct_array)
//	805C6638: 805C6678 (__ct__8dCcD_CylFv)
//	805C663C: 805C6678 (__ct__8dCcD_CylFv)
//	805C6640: 805C6894 (__dt__8dCcD_CylFv)
//	805C6644: 805C6894 (__dt__8dCcD_CylFv)
//	805C6650: 80361D60 (__construct_array)
//	805C6658: 80249F00 (__ct__10dMsgFlow_cFv)
//	805C6664: 80362214 (_restgpr_24)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm daB_DR_c::daB_DR_c() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/__ct__8daB_DR_cFv.s"
}
#pragma pop


/* 805C6678-805C66FC 0084+00 s=1 e=0 z=0  None .text      __ct__8dCcD_CylFv                                            */
//	805C668C: 80083A28 (__ct__12dCcD_GObjInfFv)
//	805C6690: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	805C6694: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	805C669C: 805C7870 (__vt__8cM3dGAab)
//	805C66A0: 805C7870 (__vt__8cM3dGAab)
//	805C66A8: 805C7864 (__vt__8cM3dGCyl)
//	805C66AC: 805C7864 (__vt__8cM3dGCyl)
//	805C66B4: 803C35A4 (__vt__12cCcD_CylAttr)
//	805C66B8: 803C35A4 (__vt__12cCcD_CylAttr)
//	805C66C8: 803AC050 (__vt__8dCcD_Cyl)
//	805C66CC: 803AC050 (__vt__8dCcD_Cyl)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dCcD_Cyl::dCcD_Cyl() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/__ct__8dCcD_CylFv.s"
}
#pragma pop


/* 805C66FC-805C6744 0048+00 s=1 e=0 z=0  None .text      __dt__8cM3dGSphFv                                            */
//	805C6714: 805C7858 (__vt__8cM3dGSph)
//	805C6718: 805C7858 (__vt__8cM3dGSph)
//	805C6728: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cM3dGSph::~cM3dGSph() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/__dt__8cM3dGSphFv.s"
}
#pragma pop


/* 805C6744-805C6810 00CC+00 s=1 e=0 z=0  None .text      __dt__8dCcD_SphFv                                            */
//	805C6764: 803ABFC0 (__vt__8dCcD_Sph)
//	805C6768: 803ABFC0 (__vt__8dCcD_Sph)
//	805C6788: 803C3540 (__vt__12cCcD_SphAttr)
//	805C678C: 803C3540 (__vt__12cCcD_SphAttr)
//	805C67A4: 805C7858 (__vt__8cM3dGSph)
//	805C67A8: 805C7858 (__vt__8cM3dGSph)
//	805C67B8: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	805C67BC: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	805C67CC: 805C7870 (__vt__8cM3dGAab)
//	805C67D0: 805C7870 (__vt__8cM3dGAab)
//	805C67E0: 800840E4 (__dt__12dCcD_GObjInfFv)
//	805C67F0: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dCcD_Sph::~dCcD_Sph() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/__dt__8dCcD_SphFv.s"
}
#pragma pop


/* 805C6810-805C6894 0084+00 s=1 e=0 z=0  None .text      __ct__8dCcD_SphFv                                            */
//	805C6824: 80083A28 (__ct__12dCcD_GObjInfFv)
//	805C6828: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	805C682C: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	805C6834: 805C7870 (__vt__8cM3dGAab)
//	805C6838: 805C7870 (__vt__8cM3dGAab)
//	805C6840: 805C7858 (__vt__8cM3dGSph)
//	805C6844: 805C7858 (__vt__8cM3dGSph)
//	805C684C: 803C3540 (__vt__12cCcD_SphAttr)
//	805C6850: 803C3540 (__vt__12cCcD_SphAttr)
//	805C6860: 803ABFC0 (__vt__8dCcD_Sph)
//	805C6864: 803ABFC0 (__vt__8dCcD_Sph)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dCcD_Sph::dCcD_Sph() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/__ct__8dCcD_SphFv.s"
}
#pragma pop


/* 805C6894-805C6960 00CC+00 s=1 e=0 z=0  None .text      __dt__8dCcD_CylFv                                            */
//	805C68B4: 803AC050 (__vt__8dCcD_Cyl)
//	805C68B8: 803AC050 (__vt__8dCcD_Cyl)
//	805C68D8: 803C35A4 (__vt__12cCcD_CylAttr)
//	805C68DC: 803C35A4 (__vt__12cCcD_CylAttr)
//	805C68F4: 805C7864 (__vt__8cM3dGCyl)
//	805C68F8: 805C7864 (__vt__8cM3dGCyl)
//	805C6908: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	805C690C: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	805C691C: 805C7870 (__vt__8cM3dGAab)
//	805C6920: 805C7870 (__vt__8cM3dGAab)
//	805C6930: 800840E4 (__dt__12dCcD_GObjInfFv)
//	805C6940: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dCcD_Cyl::~dCcD_Cyl() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/__dt__8dCcD_CylFv.s"
}
#pragma pop


/* 805C6960-805C69A8 0048+00 s=1 e=0 z=0  None .text      __dt__8cM3dGCylFv                                            */
//	805C6978: 805C7864 (__vt__8cM3dGCyl)
//	805C697C: 805C7864 (__vt__8cM3dGCyl)
//	805C698C: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cM3dGCyl::~cM3dGCyl() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/__dt__8cM3dGCylFv.s"
}
#pragma pop


/* 805C69A8-805C69F0 0048+00 s=1 e=0 z=0  None .text      __dt__8cM3dGAabFv                                            */
//	805C69C0: 805C7870 (__vt__8cM3dGAab)
//	805C69C4: 805C7870 (__vt__8cM3dGAab)
//	805C69D4: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cM3dGAab::~cM3dGAab() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/__dt__8cM3dGAabFv.s"
}
#pragma pop


/* 805C69F0-805C6A4C 005C+00 s=1 e=0 z=0  None .text      __dt__10dCcD_GSttsFv                                         */
//	805C6A08: 805C784C (__vt__10dCcD_GStts)
//	805C6A0C: 805C784C (__vt__10dCcD_GStts)
//	805C6A18: 805C7840 (__vt__10cCcD_GStts)
//	805C6A1C: 805C7840 (__vt__10cCcD_GStts)
//	805C6A30: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dCcD_GStts::~dCcD_GStts() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/__dt__10dCcD_GSttsFv.s"
}
#pragma pop


/* 805C6A4C-805C6ABC 0070+00 s=3 e=0 z=0  None .text      __dt__12dBgS_ObjAcchFv                                       */
//	805C6A6C: 805C787C (__vt__12dBgS_ObjAcch)
//	805C6A70: 805C787C (__vt__12dBgS_ObjAcch)
//	805C6A8C: 80075F94 (__dt__9dBgS_AcchFv)
//	805C6A9C: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dBgS_ObjAcch::~dBgS_ObjAcch() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/__dt__12dBgS_ObjAcchFv.s"
}
#pragma pop


/* 805C6ABC-805C6B2C 0070+00 s=1 e=0 z=0  None .text      __dt__12dBgS_AcchCirFv                                       */
//	805C6ADC: 805C7834 (__vt__12dBgS_AcchCir)
//	805C6AE0: 805C7834 (__vt__12dBgS_AcchCir)
//	805C6AF0: 8026EF18 (__dt__8cM3dGCirFv)
//	805C6AFC: 802680B0 (__dt__13cBgS_PolyInfoFv)
//	805C6B0C: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dBgS_AcchCir::~dBgS_AcchCir() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/__dt__12dBgS_AcchCirFv.s"
}
#pragma pop


/* 805C6B2C-805C6B4C 0020+00 s=1 e=0 z=0  None .text      daB_DR_Create__FP8daB_DR_c                                   */
//	805C6B38: 805C5974 (create__8daB_DR_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daB_DR_c* False
// 	 daB_DR_c False
asm static void daB_DR_Create(daB_DR_c* param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/daB_DR_Create__FP8daB_DR_c.s"
}
#pragma pop


/* 805C6B4C-805C6B94 0048+00 s=1 e=0 z=0  None .text      __dt__10cCcD_GSttsFv                                         */
//	805C6B64: 805C7840 (__vt__10cCcD_GStts)
//	805C6B68: 805C7840 (__vt__10cCcD_GStts)
//	805C6B78: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cCcD_GStts::~cCcD_GStts() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/__dt__10cCcD_GSttsFv.s"
}
#pragma pop


/* 805C6B94-805C6BDC 0048+00 s=2 e=0 z=0  None .text      __dt__12daB_DR_HIO_cFv                                       */
//	805C6BAC: 805C78AC (__vt__12daB_DR_HIO_c)
//	805C6BB0: 805C78AC (__vt__12daB_DR_HIO_c)
//	805C6BC0: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm daB_DR_HIO_c::~daB_DR_HIO_c() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/__dt__12daB_DR_HIO_cFv.s"
}
#pragma pop


/* 805C6BDC-805C6BF8 001C+00 s=15 e=0 z=0  None .text      cLib_calcTimer<i>__FPi                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False True
//  int* False
// 	 int False
asm void cLib_calcTimer__template0(int* param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/func_805C6BDC.s"
}
#pragma pop


/* 805C6BF8-805C6C14 001C+00 s=3 e=0 z=0  None .text      cLib_calcTimer<Uc>__FPUc                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False True
//  u8* False
// 	 u8 False
asm void cLib_calcTimer__template1(u8* param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/func_805C6BF8.s"
}
#pragma pop


/* 805C6C14-805C6C50 003C+00 s=0 e=1 z=0  None .text      __sinit_d_a_b_dr_cpp                                         */
//	805C6C20: 805C790C (l_HIO)
//	805C6C24: 805C790C (l_HIO)
//	805C6C28: 805BAE6C (__ct__12daB_DR_HIO_cFv)
//	805C6C2C: 805C6B94 (__dt__12daB_DR_HIO_cFv)
//	805C6C30: 805C6B94 (__dt__12daB_DR_HIO_cFv)
//	805C6C34: 805C7900 (lit_3795)
//	805C6C38: 805C7900 (lit_3795)
//	805C6C3C: 805BADF8 (__register_global_object)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void __sinit_d_a_b_dr_cpp() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/__sinit_d_a_b_dr_cpp.s"
}
#pragma pop

#pragma push
#pragma force_active on
#pragma section ".ctors$15"
__declspec(section ".ctors$15") void* const _ctors_805C6C14 = (void*)__sinit_d_a_b_dr_cpp;
#pragma pop


/* 805C6C50-805C6C58 0008+00 s=1 e=0 z=0  None .text      @36@__dt__12dBgS_ObjAcchFv                                   */
//	805C6C54: 805C6A4C (__dt__12dBgS_ObjAcchFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_805C6C50() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/func_805C6C50.s"
}
#pragma pop


/* 805C6C58-805C6C60 0008+00 s=1 e=0 z=0  None .text      @20@__dt__12dBgS_ObjAcchFv                                   */
//	805C6C5C: 805C6A4C (__dt__12dBgS_ObjAcchFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_805C6C58() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dr/d_a_b_dr/func_805C6C58.s"
}
#pragma pop


/* ############################################################################################## */
/* 805C7978-805C7988 000C+04 s=0 e=0 z=0  None .bss       @6782                                                        */
u8 lit_6782[12 + 4 /* padding */];

/* 805C7988-805C7994 000C+00 s=0 e=0 z=0  None .bss       @6785                                                        */
u8 lit_6785[12];

/* 805C7994-805C79A0 000C+00 s=0 e=0 z=0  None .bss       @6786                                                        */
u8 lit_6786[12];

/* 805C79A0-805C79AC 000C+00 s=0 e=0 z=0  None .bss       @6787                                                        */
u8 lit_6787[12];

/* 805C79AC-805C79DC 0030+00 s=0 e=0 z=0  None .bss       mPillarTop_dt$6781                                           */
u8 data_805C79AC[48];

/* 805C79DC-805C79E0 0004+00 s=0 e=0 z=0  None .bss       sInstance__40JASGlobalInstance<19JASDefaultBankTable>        */
u8 data_805C79DC[4];

/* 805C79E0-805C79E4 0004+00 s=0 e=0 z=0  None .bss       sInstance__35JASGlobalInstance<14JASAudioThread>             */
u8 data_805C79E0[4];

/* 805C79E4-805C79E8 0004+00 s=0 e=0 z=0  None .bss       sInstance__27JASGlobalInstance<7Z2SeMgr>                     */
u8 data_805C79E4[4];

/* 805C79E8-805C79EC 0004+00 s=0 e=0 z=0  None .bss       sInstance__28JASGlobalInstance<8Z2SeqMgr>                    */
u8 data_805C79E8[4];

/* 805C79EC-805C79F0 0004+00 s=0 e=0 z=0  None .bss       sInstance__31JASGlobalInstance<10Z2SceneMgr>                 */
u8 data_805C79EC[4];

/* 805C79F0-805C79F4 0004+00 s=0 e=0 z=0  None .bss       sInstance__32JASGlobalInstance<11Z2StatusMgr>                */
u8 data_805C79F0[4];

/* 805C79F4-805C79F8 0004+00 s=0 e=0 z=0  None .bss       sInstance__31JASGlobalInstance<10Z2DebugSys>                 */
u8 data_805C79F4[4];

/* 805C79F8-805C79FC 0004+00 s=0 e=0 z=0  None .bss       sInstance__36JASGlobalInstance<15JAISoundStarter>            */
u8 data_805C79F8[4];

/* 805C79FC-805C7A00 0004+00 s=0 e=0 z=0  None .bss       sInstance__35JASGlobalInstance<14Z2SoundStarter>             */
u8 data_805C79FC[4];

/* 805C7A00-805C7A04 0004+00 s=0 e=0 z=0  None .bss       sInstance__33JASGlobalInstance<12Z2SpeechMgr2>               */
u8 data_805C7A00[4];

/* 805C7A04-805C7A08 0004+00 s=0 e=0 z=0  None .bss       sInstance__28JASGlobalInstance<8JAISeMgr>                    */
u8 data_805C7A04[4];

/* 805C7A08-805C7A0C 0004+00 s=0 e=0 z=0  None .bss       sInstance__29JASGlobalInstance<9JAISeqMgr>                   */
u8 data_805C7A08[4];

/* 805C7A0C-805C7A10 0004+00 s=0 e=0 z=0  None .bss       sInstance__33JASGlobalInstance<12JAIStreamMgr>               */
u8 data_805C7A0C[4];

/* 805C7A10-805C7A14 0004+00 s=0 e=0 z=0  None .bss       sInstance__31JASGlobalInstance<10Z2SoundMgr>                 */
u8 data_805C7A10[4];

/* 805C7A14-805C7A18 0004+00 s=0 e=0 z=0  None .bss       sInstance__33JASGlobalInstance<12JAISoundInfo>               */
u8 data_805C7A14[4];

/* 805C7A18-805C7A1C 0004+00 s=0 e=0 z=0  None .bss       sInstance__34JASGlobalInstance<13JAUSoundTable>              */
u8 data_805C7A18[4];

/* 805C7A1C-805C7A20 0004+00 s=0 e=0 z=0  None .bss       sInstance__38JASGlobalInstance<17JAUSoundNameTable>          */
u8 data_805C7A1C[4];

/* 805C7A20-805C7A24 0004+00 s=0 e=0 z=0  None .bss       sInstance__33JASGlobalInstance<12JAUSoundInfo>               */
u8 data_805C7A20[4];

/* 805C7A24-805C7A28 0004+00 s=0 e=0 z=0  None .bss       sInstance__32JASGlobalInstance<11Z2SoundInfo>                */
u8 data_805C7A24[4];

/* 805C7A28-805C7A2C 0004+00 s=0 e=0 z=0  None .bss       sInstance__34JASGlobalInstance<13Z2SoundObjMgr>              */
u8 data_805C7A28[4];

/* 805C7A2C-805C7A30 0004+00 s=0 e=0 z=0  None .bss       sInstance__31JASGlobalInstance<10Z2Audience>                 */
u8 data_805C7A2C[4];

/* 805C7A30-805C7A34 0004+00 s=0 e=0 z=0  None .bss       sInstance__32JASGlobalInstance<11Z2FxLineMgr>                */
u8 data_805C7A30[4];

/* 805C7A34-805C7A38 0004+00 s=0 e=0 z=0  None .bss       sInstance__31JASGlobalInstance<10Z2EnvSeMgr>                 */
u8 data_805C7A34[4];

/* 805C7A38-805C7A3C 0004+00 s=0 e=0 z=0  None .bss       sInstance__32JASGlobalInstance<11Z2SpeechMgr>                */
u8 data_805C7A38[4];

/* 805C7A3C-805C7A40 0004+00 s=0 e=0 z=0  None .bss       sInstance__34JASGlobalInstance<13Z2WolfHowlMgr>              */
u8 data_805C7A3C[4];

