// 
// Generated By: dol2asm
// Translation Unit: d_a_b_dre
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "rel/d/a/b/d_a_b_dre/d_a_b_dre.h"

// 
// Types:
// 

struct request_of_phase_process_class {
};

struct cXyz {
	/* 805C7FCC */ // True False
~cXyz();
};

struct obj_ystone_class {
	/* 805CAD2C */ // True False
//  cXyz False
void setCurrentPos(cXyz);
};

struct csXyz {
};

struct mDoMtx_stack_c {
	/* 8000CD64 */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
void transS(cXyz const&);
	/* 8000CE38 */ // False False
//  f32 False
//  f32 False
//  f32 False
void scaleM(f32, f32, f32);
	/* 8000CF44 */ // False False
//  csXyz const& False
// 	 csXyz const False
// 		 csXyz False
void ZXYrotM(csXyz const&);
};

struct mDoGph_gInf_c {
	/* 80008078 */ // False False
void onBlure();
};

struct J3DAnmTevRegKey {
};

struct J3DMaterialTable {
	/* 8032F880 */ // False False
//  J3DAnmTevRegKey* False
// 	 J3DAnmTevRegKey False
void removeTevRegAnimator(J3DAnmTevRegKey*);
};

struct mDoExt_brkAnm {
	/* 8000D70C */ // False False
//  J3DMaterialTable* False
// 	 J3DMaterialTable False
//  J3DAnmTevRegKey* False
// 	 J3DAnmTevRegKey False
//  int False
//  int False
//  f32 False
//  s16 False
//  s16 False
void init(J3DMaterialTable*, J3DAnmTevRegKey*, int, int, f32, s16, s16);
	/* 8000D7A8 */ // False False
//  J3DMaterialTable* False
// 	 J3DMaterialTable False
//  f32 False
void entry(J3DMaterialTable*, f32);
};

struct mDoExt_baseAnm {
	/* 8000D428 */ // False False
void play();
};

struct mDoExt_McaMorfCallBack2_c {
};

struct Z2Creature {
};

struct J3DAnmTransform {
};

struct mDoExt_McaMorfCallBack1_c {
};

struct J3DModelData {
};

struct mDoExt_McaMorfSO {
	/* 800107D0 */ // False False
//  J3DModelData* False
// 	 J3DModelData False
//  mDoExt_McaMorfCallBack1_c* False
// 	 mDoExt_McaMorfCallBack1_c False
//  mDoExt_McaMorfCallBack2_c* False
// 	 mDoExt_McaMorfCallBack2_c False
//  J3DAnmTransform* False
// 	 J3DAnmTransform False
//  int False
//  f32 False
//  int False
//  int False
//  Z2Creature* False
// 	 Z2Creature False
//  u32 False
//  u32 False
mDoExt_McaMorfSO(J3DModelData*, mDoExt_McaMorfCallBack1_c*, mDoExt_McaMorfCallBack2_c*, J3DAnmTransform*, int, f32, int, int, Z2Creature*, u32, u32);
	/* 80010E70 */ // False False
//  J3DAnmTransform* False
// 	 J3DAnmTransform False
//  int False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
void setAnm(J3DAnmTransform*, int, f32, f32, f32, f32);
	/* 800110B0 */ // False False
//  u32 False
//  s8 False
void play(u32, s8);
	/* 800111C0 */ // False False
void entryDL();
	/* 800111EC */ // False False
void modelCalc();
	/* 80011310 */ // False False
void stopZelAnime();
};

struct fopAc_ac_c {
	/* 80018B64 */ // False False
fopAc_ac_c();
};

struct daB_DRE_c {
	/* 805C7DD4 */ // True False
//  mDoExt_McaMorfSO* False
// 	 mDoExt_McaMorfSO False
//  int False
//  int False
//  f32 False
//  f32 False
void SetAnm(mDoExt_McaMorfSO*, int, int, f32, f32);
	/* 805C7EAC */ // True False
void CameraSet();
	/* 805C8008 */ // True False
void SetStopingCam();
	/* 805C808C */ // True False
//  cXyz False
//  f32 False
//  f32 False
//  s16 False
void SetStopCam(cXyz, f32, f32, s16);
	/* 805C8208 */ // True False
//  cXyz False
//  f32 False
//  f32 False
void SetCMoveCam(cXyz, f32, f32);
	/* 805C81B8 */ // True False
//  cXyz False
//  f32 False
void SetCMoveCam(cXyz, f32);
	/* 805C8348 */ // True False
//  cXyz False
//  f32 False
//  f32 False
//  s16 False
//  f32 False
//  f32 False
void SetEyeMoveCam(cXyz, f32, f32, s16, f32, f32);
	/* 805C824C */ // True False
//  cXyz False
//  f32 False
//  f32 False
//  s16 False
//  f32 False
void SetEyeMoveCam(cXyz, f32, f32, s16, f32);
	/* 805C8458 */ // True False
//  f32 False
//  f32 False
void SetMoveCam(f32, f32);
	/* 805C8544 */ // True False
void SetReleaseCam();
	/* 805C85E8 */ // True False
void CamAction2();
	/* 805C8BF8 */ // True False
void DrAction2();
	/* 805C8EDC */ // True False
void CamAction();
	/* 805C9318 */ // True False
void Action();
	/* 805C9378 */ // True False
void DrAction();
	/* 805C9B40 */ // True False
void SoundChk();
	/* 805CA158 */ // True False
void Execute();
	/* 805CA49C */ // True False
void SpeedSet();
	/* 805CA4FC */ // True False
void BreathSet();
	/* 805CA670 */ // True False
void Delete();
	/* 805CA6C0 */ // True False
void setBaseMtx();
	/* 805CA944 */ // True False
void create();
};

struct dVibration_c {
	/* 8006FB10 */ // False False
//  int False
//  int False
//  cXyz False
void StartQuake(int, int, cXyz);
	/* 8006FD94 */ // False False
//  int False
void StopQuake(int);
};

struct dSv_info_c {
	/* 80035200 */ // False False
//  int False
//  int False
void onSwitch(int, int);
	/* 800352B0 */ // False False
//  int False
//  int False
void offSwitch(int, int);
};

struct dKy_tevstr_c {
};

struct dScnKy_env_light_c {
	/* 801A37C4 */ // False False
//  int False
//  cXyz* False
// 	 cXyz False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
void settingTevStruct(int, cXyz*, dKy_tevstr_c*);
	/* 801A4DA0 */ // False False
//  J3DModelData* False
// 	 J3DModelData False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
void setLightTevColorType_MAJI(J3DModelData*, dKy_tevstr_c*);
};

struct dRes_info_c {
};

struct dRes_control_c {
	/* 8003C2EC */ // False False
//  char const* False
// 	 char const False
// 		 char False
//  s32 False
//  dRes_info_c* False
// 	 dRes_info_c False
//  int False
void getRes(char const*, s32, dRes_info_c*, int);
};

struct dPa_levelEcallBack {
};

struct _GXColor {
};

struct dPa_control_c {
	struct level_c {
		/* 8004B918 */ // False False
//  u32 False
void getEmitter(u32);
	};

	/* 8004D4CC */ // False False
//  u32 False
//  u8 False
//  u16 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u8 False
//  dPa_levelEcallBack* False
// 	 dPa_levelEcallBack False
//  s8 False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
void set(u32, u8, u16, cXyz const*, dKy_tevstr_c const*, csXyz const*, cXyz const*, u8, dPa_levelEcallBack*, s8, _GXColor const*, _GXColor const*, cXyz const*, f32);
};

struct dEvt_control_c {
	/* 80042468 */ // False False
void reset();
	/* 8004368C */ // False False
//  void* False
// 	 void False
void setPtT(void*);
};

struct dCamera_c {
	/* 801614AC */ // False False
void Start();
	/* 801614D0 */ // False False
void Stop();
	/* 8016300C */ // False False
//  s32 False
void SetTrimSize(s32);
	/* 80180AE0 */ // False False
//  cXyz False
//  cXyz False
//  f32 False
//  s16 False
void Set(cXyz, cXyz, f32, s16);
	/* 80180C18 */ // False False
//  cXyz False
//  cXyz False
void Reset(cXyz, cXyz);
	/* 80181E64 */ // False False
void Eye();
	/* 80181E98 */ // False False
void Center();
};

struct dBgS_PolyPassChk {
	/* 80078E68 */ // False False
void SetObj();
};

struct dBgS_ObjAcch {
	/* 805CAC3C */ // True False
~dBgS_ObjAcch();
};

struct dBgS_AcchCir {
	/* 80075EAC */ // False False
dBgS_AcchCir();
	/* 80075F58 */ // False False
//  f32 False
//  f32 False
void SetWall(f32, f32);
};

struct dBgS {
};

struct dBgS_Acch {
	/* 80075F94 */ // False False
~dBgS_Acch();
	/* 800760A0 */ // False False
dBgS_Acch();
	/* 80076248 */ // False False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  int False
//  dBgS_AcchCir* False
// 	 dBgS_AcchCir False
//  cXyz* False
// 	 cXyz False
//  csXyz* False
// 	 csXyz False
//  csXyz* False
// 	 csXyz False
void Set(cXyz*, cXyz*, fopAc_ac_c*, int, dBgS_AcchCir*, cXyz*, csXyz*, csXyz*);
	/* 80076AAC */ // False False
//  dBgS& False
// 	 dBgS False
void CrrPos(dBgS&);
};

struct cBgS_PolyInfo {
};

struct _GXTexObj {
};

struct Vec {
};

struct JAISoundID {
};

struct Z2SeMgr {
	/* 802AB984 */ // False False
//  JAISoundID False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  u32 False
//  s8 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  u8 False
void seStart(JAISoundID, Vec const*, u32, s8, f32, f32, f32, f32, u8);
};

struct Z2CreatureEnemy {
	/* 802C0F64 */ // False False
Z2CreatureEnemy();
	/* 802C1094 */ // False False
//  Vec* False
// 	 Vec False
//  Vec* False
// 	 Vec False
//  u8 False
//  u8 False
void init(Vec*, Vec*, u8, u8);
	/* 802C1B90 */ // False False
//  char const* False
// 	 char const False
// 		 char False
void setEnemyName(char const*);
};

struct JGeometry {
	template <typename A1>
	struct TVec3 { };
	/* TVec3<f32> */
	struct TVec3__template0 {
	};

};

struct J3DModel {
};

struct J3DFrameCtrl {
	/* 803283FC */ // False False
//  s16 False
void init(s16);
	/* 8032842C */ // False False
//  f32 False
void checkPass(f32);
	/* 805C7D6C */ // True False
~J3DFrameCtrl();
};

// 
// Forward References:
// 

// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
static void useHeapInit(fopAc_ac_c*);
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
static void daB_DRE_Create(fopAc_ac_c*);
// True False
//  daB_DRE_c* False
// 	 daB_DRE_c False
static void daB_DRE_Delete(daB_DRE_c*);
// True False
//  daB_DRE_c* False
// 	 daB_DRE_c False
static void daB_DRE_Draw(daB_DRE_c*);
// True False
//  daB_DRE_c* False
// 	 daB_DRE_c False
static void daB_DRE_Execute(daB_DRE_c*);
// True False
//  bool False
//  daB_DRE_c* False
// 	 daB_DRE_c False
static bool daB_DRE_IsDelete(daB_DRE_c*);

// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
extern "C" static void useHeapInit__FP10fopAc_ac_c();
// True False
extern "C" void __dt__12J3DFrameCtrlFv();
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
extern "C" static void daB_DRE_Create__FP10fopAc_ac_c();
// True False
//  mDoExt_McaMorfSO* False
// 	 mDoExt_McaMorfSO False
//  int False
//  int False
//  f32 False
//  f32 False
extern "C" void SetAnm__9daB_DRE_cFP16mDoExt_McaMorfSOiiff();
// True False
//  daB_DRE_c* False
// 	 daB_DRE_c False
extern "C" static void daB_DRE_Delete__FP9daB_DRE_c();
// True False
extern "C" void CameraSet__9daB_DRE_cFv();
// True False
extern "C" void __dt__4cXyzFv();
// True False
extern "C" void SetStopingCam__9daB_DRE_cFv();
// True False
//  cXyz False
//  f32 False
//  f32 False
//  s16 False
extern "C" void SetStopCam__9daB_DRE_cF4cXyzffs();
// True False
//  cXyz False
//  f32 False
extern "C" void SetCMoveCam__9daB_DRE_cF4cXyzf();
// True False
//  cXyz False
//  f32 False
//  f32 False
extern "C" void SetCMoveCam__9daB_DRE_cF4cXyzff();
// True False
//  cXyz False
//  f32 False
//  f32 False
//  s16 False
//  f32 False
extern "C" void SetEyeMoveCam__9daB_DRE_cF4cXyzffsf();
// True False
//  cXyz False
//  f32 False
//  f32 False
//  s16 False
//  f32 False
//  f32 False
extern "C" void SetEyeMoveCam__9daB_DRE_cF4cXyzffsff();
// True False
//  f32 False
//  f32 False
extern "C" void SetMoveCam__9daB_DRE_cFff();
// True False
extern "C" void SetReleaseCam__9daB_DRE_cFv();
// True False
extern "C" void CamAction2__9daB_DRE_cFv();
// True False
extern "C" void DrAction2__9daB_DRE_cFv();
// True False
extern "C" void CamAction__9daB_DRE_cFv();
// True False
extern "C" void Action__9daB_DRE_cFv();
// True False
extern "C" void DrAction__9daB_DRE_cFv();
// True False
extern "C" void SoundChk__9daB_DRE_cFv();
// True False
extern "C" void Execute__9daB_DRE_cFv();
// True False
extern "C" void SpeedSet__9daB_DRE_cFv();
// True False
extern "C" void BreathSet__9daB_DRE_cFv();
// True False
extern "C" void Delete__9daB_DRE_cFv();
// True False
extern "C" void setBaseMtx__9daB_DRE_cFv();
// True False
//  daB_DRE_c* False
// 	 daB_DRE_c False
extern "C" static void daB_DRE_Draw__FP9daB_DRE_c();
// True False
//  daB_DRE_c* False
// 	 daB_DRE_c False
extern "C" static void daB_DRE_Execute__FP9daB_DRE_c();
// True False
extern "C" void create__9daB_DRE_cFv();
// True False
extern "C" void __dt__12dBgS_ObjAcchFv();
// True False
//  bool False
//  daB_DRE_c* False
// 	 daB_DRE_c False
extern "C" static bool daB_DRE_IsDelete__FP9daB_DRE_c();
// False False
extern "C" void __sinit_d_a_b_dre_cpp();
// True False
extern "C" static void func_805CAD1C();
// True False
extern "C" static void func_805CAD24();
// True False
//  cXyz False
extern "C" void setCurrentPos__16obj_ystone_classF4cXyz();
extern "C" extern u32 const lit_4209;
extern "C" extern u32 const lit_4210;
extern "C" extern u32 const lit_4211;
extern "C" extern u32 const lit_4212;
extern "C" extern u32 const lit_4213;
extern "C" extern u32 const lit_4214;
extern "C" extern u32 const lit_4215;
extern "C" extern u32 const lit_4216;
extern "C" extern u32 const lit_4217;
extern "C" extern u32 const lit_4218;
extern "C" extern u32 const lit_4219;
extern "C" extern u32 const lit_4220;
extern "C" extern u32 const lit_4221;
extern "C" extern u32 const lit_4222;
extern "C" extern u32 const lit_4223;
extern "C" extern u32 const lit_4224;
extern "C" extern u32 const lit_4225;
extern "C" extern u32 const lit_4226;
extern "C" extern u32 const lit_4228;
extern "C" extern u32 const lit_4229;
extern "C" extern u8 const lit_4231[8];
extern "C" extern u32 const lit_4309;
extern "C" extern u32 const lit_4310;
extern "C" extern u32 const lit_4311;
extern "C" extern u32 const lit_4312;
extern "C" extern u32 const lit_4313;
extern "C" extern u32 const lit_4408;
extern "C" extern u32 const lit_4409;
extern "C" extern u32 const lit_4410;
extern "C" extern u32 const lit_4412;
extern "C" extern u32 const lit_4413;
extern "C" extern u32 const lit_4414;
extern "C" extern u32 const lit_4415;
extern "C" extern u32 const lit_4606;
extern "C" extern u32 const lit_4607;
extern "C" extern u32 const lit_4608;
extern "C" extern u32 const lit_4609;
extern "C" extern u32 const lit_4610;
extern "C" extern u32 const lit_4611;
extern "C" extern u32 const lit_4612;
extern "C" extern u32 const lit_4613;
extern "C" extern u32 const lit_4614;
extern "C" extern u32 const lit_4615;
extern "C" extern u32 const lit_4616;
extern "C" extern u32 const lit_4617;
extern "C" extern u32 const lit_4618;
extern "C" extern u32 const lit_4619;
extern "C" extern u32 const lit_4620;
extern "C" extern u32 const lit_4758;
extern "C" extern u32 const lit_4759;
extern "C" extern u32 const lit_4760;
extern "C" extern u32 const lit_4761;
extern "C" extern u32 const lit_4762;
extern "C" extern u32 const lit_4763;
extern "C" extern u32 const lit_4764;
extern "C" extern u32 const lit_4765;
extern "C" extern u32 const lit_4766;
extern "C" extern u32 const lit_4767;
extern "C" extern u32 const lit_4768;
extern "C" extern u32 const lit_4769;
extern "C" extern u32 const lit_4770;
extern "C" extern u32 const lit_4771;
extern "C" extern u32 const lit_4772;
extern "C" extern u32 const lit_4773;
extern "C" extern u32 const lit_4774;
extern "C" extern u32 const lit_4775;
extern "C" extern u32 const lit_4776;
extern "C" extern u32 const lit_4777;
extern "C" extern u32 const lit_4778;
extern "C" extern u32 const lit_4779;
extern "C" extern u32 const lit_4780;
extern "C" extern u32 const lit_4781;
extern "C" extern u8 const lit_4874[8];
extern "C" extern u8 const lit_4875[8];
extern "C" extern u8 const lit_4876[8];
extern "C" extern u32 const lit_4942;
extern "C" extern u32 const lit_4943;
extern "C" extern u32 const lit_5084;
extern "C" extern u32 const lit_5227;
extern "C" extern u32 const lit_5228;
extern "C" extern u32 const lit_5229;
extern "C" extern u32 const lit_5230;
extern "C" extern char const* const stringBase0;
extern "C" extern void* g_profile_B_DRE[12];
extern "C" extern void* __vt__12dBgS_ObjAcch[9];
extern "C" extern void* __vt__12J3DFrameCtrl[3];
extern "C" extern u8 lit_1107[1 + 3 /* padding */];
extern "C" extern u8 lit_1105[1 + 3 /* padding */];
extern "C" extern u8 lit_1104[1 + 3 /* padding */];
extern "C" extern u8 lit_1099[1 + 3 /* padding */];
extern "C" extern u8 lit_1097[1 + 3 /* padding */];
extern "C" extern u8 lit_1095[1 + 3 /* padding */];
extern "C" extern u8 lit_1094[1 + 3 /* padding */];
extern "C" extern u8 lit_1057[1 + 3 /* padding */];
extern "C" extern u8 lit_1055[1 + 3 /* padding */];
extern "C" extern u8 lit_1053[1 + 3 /* padding */];
extern "C" extern u8 lit_1052[1 + 3 /* padding */];
extern "C" extern u8 lit_1014[1 + 3 /* padding */];
extern "C" extern u8 lit_1012[1 + 3 /* padding */];
extern "C" extern u8 lit_1010[1 + 3 /* padding */];
extern "C" extern u8 lit_1009[1 + 3 /* padding */];
extern "C" extern u8 data_805CB080[4];
extern "C" extern u8 data_805CB088[2 + 2 /* padding */];
extern "C" extern u8 lit_3768[12];
extern "C" extern u8 lit_3769[12];
extern "C" extern u8 data_805CB0B0[12];
extern "C" extern u8 lit_3770[12];
extern "C" extern u8 data_805CB0C8[12];
extern "C" extern u8 data_805CB0D8[4];
extern "C" extern u8 data_805CB0DC[4];
extern "C" extern u8 data_805CB0E0[4];
extern "C" extern u8 data_805CB0E4[4];
extern "C" extern u8 data_805CB0E8[4];
extern "C" extern u8 data_805CB0EC[4];
extern "C" extern u8 data_805CB0F0[4];
extern "C" extern u8 data_805CB0F4[4];
extern "C" extern u8 data_805CB0F8[4];
extern "C" extern u8 data_805CB0FC[4];
extern "C" extern u8 data_805CB100[4];
extern "C" extern u8 data_805CB104[4];
extern "C" extern u8 data_805CB108[4];
extern "C" extern u8 data_805CB10C[4];
extern "C" extern u8 data_805CB110[4];
extern "C" extern u8 data_805CB114[4];
extern "C" extern u8 data_805CB118[4];
extern "C" extern u8 data_805CB11C[4];
extern "C" extern u8 data_805CB120[4];
extern "C" extern u8 data_805CB124[4];
extern "C" extern u8 data_805CB128[4];
extern "C" extern u8 data_805CB12C[4];
extern "C" extern u8 data_805CB130[4];
extern "C" extern u8 data_805CB134[4];
extern "C" extern u8 data_805CB138[4];

// 
// External References:
// 

// False False
//  s16 False
//  fopAc_ac_c** False
// 	 fopAc_ac_c* False
// 		 fopAc_ac_c False
void fopAcM_SearchByName(s16, fopAc_ac_c**);
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
void fopAcM_delete(fopAc_ac_c*);
// False False
//  s16 False
//  u32 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  int False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  s8 False
void fopAcM_create(s16, u32, cXyz const*, int, csXyz const*, cXyz const*, s8);
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  int (*)(fopAc_ac_c*) False
// 	 * False
// 		  False
// 	 int False
// 	 fopAc_ac_c* False
// 		 fopAc_ac_c False
//  u32 False
void fopAcM_entrySolidHeap(fopAc_ac_c*, int (*)(fopAc_ac_c*), u32);
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  f32 False
//  f32 False
//  f32 False
void fopAcM_SetMin(fopAc_ac_c*, f32, f32, f32);
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  f32 False
//  f32 False
//  f32 False
void fopAcM_SetMax(fopAc_ac_c*, f32, f32, f32);
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  u16 False
//  u16 False
//  u16 False
void fopAcM_orderPotentialEvent(fopAc_ac_c*, u16, u16, u16);
// False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  int False
//  int False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
//  f32 False
//  int False
void fopAcM_createItemForBoss(cXyz const*, int, int, csXyz const*, cXyz const*, f32, f32, int);
// False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  int False
//  u8 False
//  u8 False
//  u8 False
void fopAcM_createWarpHole(cXyz const*, csXyz const*, int, u8, u8, u8);
// False False
//  fopAc_ac_c const* False
// 	 fopAc_ac_c const False
// 		 fopAc_ac_c False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u8 False
//  u8 False
//  u8 False
void fopAcM_createDisappear(fopAc_ac_c const*, cXyz const*, u8, u8, u8);
// False False
//  request_of_phase_process_class* False
// 	 request_of_phase_process_class False
//  char const* False
// 	 char const False
// 		 char False
void dComIfG_resLoad(request_of_phase_process_class*, char const*);
// False False
//  request_of_phase_process_class* False
// 	 request_of_phase_process_class False
//  char const* False
// 	 char const False
// 		 char False
void dComIfG_resDelete(request_of_phase_process_class*, char const*);
// False False
//  int False
void dComIfGp_getReverb(int);
// False False
//  u32 False
//  s8 False
//  J3DModel* False
// 	 J3DModel False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  cBgS_PolyInfo& False
// 	 cBgS_PolyInfo False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
//  s16 False
//  f32 False
//  _GXTexObj* False
// 	 _GXTexObj False
void dComIfGd_setShadow(u32, s8, J3DModel*, cXyz*, f32, f32, f32, f32, cBgS_PolyInfo&, dKy_tevstr_c*, s16, f32, _GXTexObj*);
// False False
void dCam_getBody();
// False False
//  f32 False
void cM_rndF(f32);
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
//  f32 False
void cLib_addCalc2(f32*, f32, f32, f32);
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
//  f32 False
//  f32 False
void cLib_addCalcPos(cXyz*, cXyz const&, f32, f32, f32);
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
//  f32 False
void cLib_addCalcPos2(cXyz*, cXyz const&, f32, f32);
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
void cLib_chasePos(cXyz*, cXyz const&, f32);
// False False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
void cLib_targetAngleY(Vec const*, Vec const*);
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  s16 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
void cLib_offsetPos(cXyz*, cXyz const*, s16, cXyz const*);
// False True
//  f32 const (* )[4] False
// 	 f32 const False
// 		 f32 False
// 	 * False
// 		  False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  JGeometry::TVec3<f32>* False
// 	 JGeometry::TVec3<f32> True
// 		 f32 False
//  JGeometry::TVec3<f32>* False
// 	 JGeometry::TVec3<f32> True
// 		 f32 False
void JPASetRMtxSTVecfromMtx(f32 const (* )[4], f32 (* )[4], JGeometry::TVec3__template0*, JGeometry::TVec3__template0*);
// False False
//  void* False
// 	 void False
//  u32 False
void* operator new(u32);
// False False
//  void False
//  void* False
// 	 void False
void operator delete(void*);

// False False
extern "C" void onBlure__13mDoGph_gInf_cFv();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
extern "C" void transS__14mDoMtx_stack_cFRC4cXyz();
// False False
//  f32 False
//  f32 False
//  f32 False
extern "C" void scaleM__14mDoMtx_stack_cFfff();
// False False
//  csXyz const& False
// 	 csXyz const False
// 		 csXyz False
extern "C" void ZXYrotM__14mDoMtx_stack_cFRC5csXyz();
// False False
extern "C" void play__14mDoExt_baseAnmFv();
// False False
//  J3DMaterialTable* False
// 	 J3DMaterialTable False
//  J3DAnmTevRegKey* False
// 	 J3DAnmTevRegKey False
//  int False
//  int False
//  f32 False
//  s16 False
//  s16 False
extern "C" void init__13mDoExt_brkAnmFP16J3DMaterialTableP15J3DAnmTevRegKeyiifss();
// False False
//  J3DMaterialTable* False
// 	 J3DMaterialTable False
//  f32 False
extern "C" void entry__13mDoExt_brkAnmFP16J3DMaterialTablef();
// False False
//  J3DModelData* False
// 	 J3DModelData False
//  mDoExt_McaMorfCallBack1_c* False
// 	 mDoExt_McaMorfCallBack1_c False
//  mDoExt_McaMorfCallBack2_c* False
// 	 mDoExt_McaMorfCallBack2_c False
//  J3DAnmTransform* False
// 	 J3DAnmTransform False
//  int False
//  f32 False
//  int False
//  int False
//  Z2Creature* False
// 	 Z2Creature False
//  u32 False
//  u32 False
extern "C" void __ct__16mDoExt_McaMorfSOFP12J3DModelDataP25mDoExt_McaMorfCallBack1_cP25mDoExt_McaMorfCallBack2_cP15J3DAnmTransformifiiP10Z2CreatureUlUl();
// False False
//  J3DAnmTransform* False
// 	 J3DAnmTransform False
//  int False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
extern "C" void setAnm__16mDoExt_McaMorfSOFP15J3DAnmTransformiffff();
// False False
//  u32 False
//  s8 False
extern "C" void play__16mDoExt_McaMorfSOFUlSc();
// False False
extern "C" void entryDL__16mDoExt_McaMorfSOFv();
// False False
extern "C" void modelCalc__16mDoExt_McaMorfSOFv();
// False False
extern "C" void stopZelAnime__16mDoExt_McaMorfSOFv();
// False False
extern "C" void __ct__10fopAc_ac_cFv();
// False False
//  s16 False
//  fopAc_ac_c** False
// 	 fopAc_ac_c* False
// 		 fopAc_ac_c False
extern "C" void fopAcM_SearchByName__FsPP10fopAc_ac_c();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
extern "C" void fopAcM_delete__FP10fopAc_ac_c();
// False False
//  s16 False
//  u32 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  int False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  s8 False
extern "C" void fopAcM_create__FsUlPC4cXyziPC5csXyzPC4cXyzSc();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  int (*)(fopAc_ac_c*) False
// 	 * False
// 		  False
// 	 int False
// 	 fopAc_ac_c* False
// 		 fopAc_ac_c False
//  u32 False
extern "C" void fopAcM_entrySolidHeap__FP10fopAc_ac_cPFP10fopAc_ac_c_iUl();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  f32 False
//  f32 False
//  f32 False
extern "C" void fopAcM_SetMin__FP10fopAc_ac_cfff();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  f32 False
//  f32 False
//  f32 False
extern "C" void fopAcM_SetMax__FP10fopAc_ac_cfff();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  u16 False
//  u16 False
//  u16 False
extern "C" void fopAcM_orderPotentialEvent__FP10fopAc_ac_cUsUsUs();
// False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  int False
//  int False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
//  f32 False
//  int False
extern "C" void fopAcM_createItemForBoss__FPC4cXyziiPC5csXyzPC4cXyzffi();
// False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  int False
//  u8 False
//  u8 False
//  u8 False
extern "C" void fopAcM_createWarpHole__FPC4cXyzPC5csXyziUcUcUc();
// False False
//  fopAc_ac_c const* False
// 	 fopAc_ac_c const False
// 		 fopAc_ac_c False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u8 False
//  u8 False
//  u8 False
extern "C" void fopAcM_createDisappear__FPC10fopAc_ac_cPC4cXyzUcUcUc();
// False False
//  request_of_phase_process_class* False
// 	 request_of_phase_process_class False
//  char const* False
// 	 char const False
// 		 char False
extern "C" void dComIfG_resLoad__FP30request_of_phase_process_classPCc();
// False False
//  request_of_phase_process_class* False
// 	 request_of_phase_process_class False
//  char const* False
// 	 char const False
// 		 char False
extern "C" void dComIfG_resDelete__FP30request_of_phase_process_classPCc();
// False False
//  int False
extern "C" void dComIfGp_getReverb__Fi();
// False False
//  u32 False
//  s8 False
//  J3DModel* False
// 	 J3DModel False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  cBgS_PolyInfo& False
// 	 cBgS_PolyInfo False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
//  s16 False
//  f32 False
//  _GXTexObj* False
// 	 _GXTexObj False
extern "C" void dComIfGd_setShadow__FUlScP8J3DModelP4cXyzffffR13cBgS_PolyInfoP12dKy_tevstr_csfP9_GXTexObj();
// False False
//  int False
//  int False
extern "C" void onSwitch__10dSv_info_cFii();
// False False
//  int False
//  int False
extern "C" void offSwitch__10dSv_info_cFii();
// False False
//  char const* False
// 	 char const False
// 		 char False
//  s32 False
//  dRes_info_c* False
// 	 dRes_info_c False
//  int False
extern "C" void getRes__14dRes_control_cFPCclP11dRes_info_ci();
// False False
extern "C" void reset__14dEvt_control_cFv();
// False False
//  void* False
// 	 void False
extern "C" void setPtT__14dEvt_control_cFPv();
// False False
//  u32 False
extern "C" void getEmitter__Q213dPa_control_c7level_cFUl();
// False False
//  u32 False
//  u8 False
//  u16 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  dKy_tevstr_c const* False
// 	 dKy_tevstr_c const False
// 		 dKy_tevstr_c False
//  csXyz const* False
// 	 csXyz const False
// 		 csXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  u8 False
//  dPa_levelEcallBack* False
// 	 dPa_levelEcallBack False
//  s8 False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  _GXColor const* False
// 	 _GXColor const False
// 		 _GXColor False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
extern "C" void set__13dPa_control_cFUlUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf();
// False False
//  int False
//  int False
//  cXyz False
extern "C" void StartQuake__12dVibration_cFii4cXyz();
// False False
//  int False
extern "C" void StopQuake__12dVibration_cFi();
// False False
extern "C" void __ct__12dBgS_AcchCirFv();
// False False
//  f32 False
//  f32 False
extern "C" void SetWall__12dBgS_AcchCirFff();
// False False
extern "C" void __dt__9dBgS_AcchFv();
// False False
extern "C" void __ct__9dBgS_AcchFv();
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  int False
//  dBgS_AcchCir* False
// 	 dBgS_AcchCir False
//  cXyz* False
// 	 cXyz False
//  csXyz* False
// 	 csXyz False
//  csXyz* False
// 	 csXyz False
extern "C" void Set__9dBgS_AcchFP4cXyzP4cXyzP10fopAc_ac_ciP12dBgS_AcchCirP4cXyzP5csXyzP5csXyz();
// False False
//  dBgS& False
// 	 dBgS False
extern "C" void CrrPos__9dBgS_AcchFR4dBgS();
// False False
extern "C" void SetObj__16dBgS_PolyPassChkFv();
// False False
extern "C" void Start__9dCamera_cFv();
// False False
extern "C" void Stop__9dCamera_cFv();
// False False
//  s32 False
extern "C" void SetTrimSize__9dCamera_cFl();
// False False
//  cXyz False
//  cXyz False
//  f32 False
//  s16 False
extern "C" void Set__9dCamera_cF4cXyz4cXyzfs();
// False False
//  cXyz False
//  cXyz False
extern "C" void Reset__9dCamera_cF4cXyz4cXyz();
// False False
extern "C" void dCam_getBody__Fv();
// False False
extern "C" void Eye__9dCamera_cFv();
// False False
extern "C" void Center__9dCamera_cFv();
// False False
//  int False
//  cXyz* False
// 	 cXyz False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
extern "C" void settingTevStruct__18dScnKy_env_light_cFiP4cXyzP12dKy_tevstr_c();
// False False
//  J3DModelData* False
// 	 J3DModelData False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
extern "C" void setLightTevColorType_MAJI__18dScnKy_env_light_cFP12J3DModelDataP12dKy_tevstr_c();
// False False
//  f32 False
extern "C" void cM_rndF__Ff();
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
//  f32 False
extern "C" void cLib_addCalc2__FPffff();
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
//  f32 False
//  f32 False
extern "C" void cLib_addCalcPos__FP4cXyzRC4cXyzfff();
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
//  f32 False
extern "C" void cLib_addCalcPos2__FP4cXyzRC4cXyzff();
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
extern "C" void cLib_chasePos__FP4cXyzRC4cXyzf();
// False False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
extern "C" void cLib_targetAngleY__FPC3VecPC3Vec();
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  s16 False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
extern "C" void cLib_offsetPos__FP4cXyzPC4cXyzsPC4cXyz();
// False True
//  f32 const (* )[4] False
// 	 f32 const False
// 		 f32 False
// 	 * False
// 		  False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  JGeometry::TVec3<f32>* False
// 	 JGeometry::TVec3<f32> True
// 		 f32 False
//  JGeometry::TVec3<f32>* False
// 	 JGeometry::TVec3<f32> True
// 		 f32 False
extern "C" void func_80280808();
// False False
//  JAISoundID False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  u32 False
//  s8 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  u8 False
extern "C" void seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc();
// False False
extern "C" void __ct__15Z2CreatureEnemyFv();
// False False
//  Vec* False
// 	 Vec False
//  Vec* False
// 	 Vec False
//  u8 False
//  u8 False
extern "C" void init__15Z2CreatureEnemyFP3VecP3VecUcUc();
// False False
//  char const* False
// 	 char const False
// 		 char False
extern "C" void setEnemyName__15Z2CreatureEnemyFPCc();
// False False
//  void* False
// 	 void False
//  u32 False
extern "C" void* __nw__FUl();
// False False
//  void False
//  void* False
// 	 void False
extern "C" void __dl__FPv();
// False False
//  s16 False
extern "C" void init__12J3DFrameCtrlFs();
// False False
//  f32 False
extern "C" void checkPass__12J3DFrameCtrlFf();
// False False
//  J3DAnmTevRegKey* False
// 	 J3DAnmTevRegKey False
extern "C" void removeTevRegAnimator__16J3DMaterialTableFP15J3DAnmTevRegKey();
// False False
extern "C" void PSMTXCopy();
// False False
extern "C" void PSMTXMultVec();
// False False
extern "C" void PSVECSquareDistance();
// False False
extern "C" void _savegpr_22();
// False False
extern "C" void _savegpr_27();
// False False
extern "C" void _savegpr_28();
// False False
extern "C" void _savegpr_29();
// False False
extern "C" void _restgpr_22();
// False False
extern "C" void _restgpr_27();
// False False
extern "C" void _restgpr_28();
// False False
extern "C" void _restgpr_29();
extern "C" extern void* g_fopAc_Method[8];
extern "C" extern void* g_fpcLf_Method[5 + 1 /* padding */];
extern "C" extern u8 now__14mDoMtx_stack_c[48];
extern "C" extern u8 g_dComIfG_gameInfo[122384];
extern "C" extern u8 mSimpleTexObj__21dDlst_shadowControl_c[32];
extern "C" extern u8 g_env_light[4880];
extern "C" extern u32 __float_nan;
extern "C" extern u8 struct_80450BE4[4];
extern "C" extern u8 mAudioMgrPtr__10Z2AudioMgr[4 + 4 /* padding */];
// False False
extern "C" void __register_global_object();

// 
// Declarations:
// 

/* ############################################################################################## */
/* 805CAD5C-805CAD60 0004+00 s=10 e=0 z=0  None .rodata    @3844                                                        */
SECTION_RODATA static u32 const lit_3844 = 0x3F800000;

/* 805CAD60-805CAD64 0004+00 s=5 e=0 z=0  None .rodata    @3862                                                        */
SECTION_RODATA static u8 const lit_3862[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 805CAD64-805CAD68 0004+00 s=1 e=0 z=0  None .rodata    @3863                                                        */
SECTION_RODATA static u32 const lit_3863 = 0xBF800000;

/* 805CAD68-805CAD6C 0004+00 s=0 e=0 z=0  None .rodata    @4209                                                        */
SECTION_RODATA u32 const lit_4209 = 0xC4E10000;

/* 805CAD6C-805CAD70 0004+00 s=0 e=0 z=0  None .rodata    @4210                                                        */
SECTION_RODATA u32 const lit_4210 = 0x447A0000;

/* 805CAD70-805CAD74 0004+00 s=0 e=0 z=0  None .rodata    @4211                                                        */
SECTION_RODATA u32 const lit_4211 = 0x44160000;

/* 805CAD74-805CAD78 0004+00 s=0 e=0 z=0  None .rodata    @4212                                                        */
SECTION_RODATA u32 const lit_4212 = 0x43480000;

/* 805CAD78-805CAD7C 0004+00 s=0 e=0 z=0  None .rodata    @4213                                                        */
SECTION_RODATA u32 const lit_4213 = 0x41100000;

/* 805CAD7C-805CAD80 0004+00 s=0 e=0 z=0  None .rodata    @4214                                                        */
SECTION_RODATA u32 const lit_4214 = 0x43960000;

/* 805CAD80-805CAD84 0004+00 s=0 e=0 z=0  None .rodata    @4215                                                        */
SECTION_RODATA u32 const lit_4215 = 0x3DCCCCCD;

/* 805CAD84-805CAD88 0004+00 s=0 e=0 z=0  None .rodata    @4216                                                        */
SECTION_RODATA u32 const lit_4216 = 0x41F00000;

/* 805CAD88-805CAD8C 0004+00 s=0 e=0 z=0  None .rodata    @4217                                                        */
SECTION_RODATA u32 const lit_4217 = 0x42F00000;

/* 805CAD8C-805CAD90 0004+00 s=0 e=0 z=0  None .rodata    @4218                                                        */
SECTION_RODATA u32 const lit_4218 = 0xC42F0000;

/* 805CAD90-805CAD94 0004+00 s=0 e=0 z=0  None .rodata    @4219                                                        */
SECTION_RODATA u32 const lit_4219 = 0xC2200000;

/* 805CAD94-805CAD98 0004+00 s=0 e=0 z=0  None .rodata    @4220                                                        */
SECTION_RODATA u32 const lit_4220 = 0x44480000;

/* 805CAD98-805CAD9C 0004+00 s=0 e=0 z=0  None .rodata    @4221                                                        */
SECTION_RODATA u32 const lit_4221 = 0x40A00000;

/* 805CAD9C-805CADA0 0004+00 s=0 e=0 z=0  None .rodata    @4222                                                        */
SECTION_RODATA u32 const lit_4222 = 0x42A00000;

/* 805CADA0-805CADA4 0004+00 s=0 e=0 z=0  None .rodata    @4223                                                        */
SECTION_RODATA u32 const lit_4223 = 0x437A0000;

/* 805CADA4-805CADA8 0004+00 s=0 e=0 z=0  None .rodata    @4224                                                        */
SECTION_RODATA u32 const lit_4224 = 0x42C80000;

/* 805CADA8-805CADAC 0004+00 s=0 e=0 z=0  None .rodata    @4225                                                        */
SECTION_RODATA u32 const lit_4225 = 0x43020000;

/* 805CADAC-805CADB0 0004+00 s=0 e=0 z=0  None .rodata    @4226                                                        */
SECTION_RODATA u32 const lit_4226 = 0x44CE4000;

/* 805CADB0-805CADB4 0004+00 s=1 e=0 z=0  None .rodata    @4227                                                        */
SECTION_RODATA static u32 const lit_4227 = 0x3E4CCCCD;

/* 805CADB4-805CADB8 0004+00 s=0 e=0 z=0  None .rodata    @4228                                                        */
SECTION_RODATA u32 const lit_4228 = 0x40000000;

/* 805CADB8-805CADBC 0004+00 s=0 e=0 z=0  None .rodata    @4229                                                        */
SECTION_RODATA u32 const lit_4229 = 0x451C4000;

/* 805CADBC-805CADC4 0008+00 s=0 e=0 z=0  None .rodata    @4231                                                        */
SECTION_RODATA u8 const lit_4231[8] = {
	0x43, 0x30, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
};

/* 805CADC4-805CADC8 0004+00 s=0 e=0 z=0  None .rodata    @4309                                                        */
SECTION_RODATA u32 const lit_4309 = 0x43160000;

/* 805CADC8-805CADCC 0004+00 s=0 e=0 z=0  None .rodata    @4310                                                        */
SECTION_RODATA u32 const lit_4310 = 0x42DC0000;

/* 805CADCC-805CADD0 0004+00 s=0 e=0 z=0  None .rodata    @4311                                                        */
SECTION_RODATA u32 const lit_4311 = 0x43870000;

/* 805CADD0-805CADD4 0004+00 s=0 e=0 z=0  None .rodata    @4312                                                        */
SECTION_RODATA u32 const lit_4312 = 0x459C4000;

/* 805CADD4-805CADD8 0004+00 s=0 e=0 z=0  None .rodata    @4313                                                        */
SECTION_RODATA u32 const lit_4313 = 0x44BB8000;

/* 805CADD8-805CADDC 0004+00 s=0 e=0 z=0  None .rodata    @4408                                                        */
SECTION_RODATA u32 const lit_4408 = 0x43FA0000;

/* 805CADDC-805CADE0 0004+00 s=0 e=0 z=0  None .rodata    @4409                                                        */
SECTION_RODATA u32 const lit_4409 = 0x42480000;

/* 805CADE0-805CADE4 0004+00 s=0 e=0 z=0  None .rodata    @4410                                                        */
SECTION_RODATA u32 const lit_4410 = 0xC3FA0000;

/* 805CADE4-805CADE8 0004+00 s=1 e=0 z=0  None .rodata    @4411                                                        */
SECTION_RODATA static u32 const lit_4411 = 0x41200000;

/* 805CADE8-805CADEC 0004+00 s=0 e=0 z=0  None .rodata    @4412                                                        */
SECTION_RODATA u32 const lit_4412 = 0x41A00000;

/* 805CADEC-805CADF0 0004+00 s=0 e=0 z=0  None .rodata    @4413                                                        */
SECTION_RODATA u32 const lit_4413 = 0x3ECCCCCD;

/* 805CADF0-805CADF4 0004+00 s=0 e=0 z=0  None .rodata    @4414                                                        */
SECTION_RODATA u32 const lit_4414 = 0x3D4CCCCD;

/* 805CADF4-805CADF8 0004+00 s=0 e=0 z=0  None .rodata    @4415                                                        */
SECTION_RODATA u32 const lit_4415 = 0x438C0000;

/* 805CADF8-805CADFC 0004+00 s=0 e=0 z=0  None .rodata    @4606                                                        */
SECTION_RODATA u32 const lit_4606 = 0xC4480000;

/* 805CADFC-805CAE00 0004+00 s=0 e=0 z=0  None .rodata    @4607                                                        */
SECTION_RODATA u32 const lit_4607 = 0x45802000;

/* 805CAE00-805CAE04 0004+00 s=0 e=0 z=0  None .rodata    @4608                                                        */
SECTION_RODATA u32 const lit_4608 = 0x42200000;

/* 805CAE04-805CAE08 0004+00 s=0 e=0 z=0  None .rodata    @4609                                                        */
SECTION_RODATA u32 const lit_4609 = 0x3F99999A;

/* 805CAE08-805CAE0C 0004+00 s=0 e=0 z=0  None .rodata    @4610                                                        */
SECTION_RODATA u32 const lit_4610 = 0x463B8000;

/* 805CAE0C-805CAE10 0004+00 s=0 e=0 z=0  None .rodata    @4611                                                        */
SECTION_RODATA u32 const lit_4611 = 0x45DAC000;

/* 805CAE10-805CAE14 0004+00 s=0 e=0 z=0  None .rodata    @4612                                                        */
SECTION_RODATA u32 const lit_4612 = 0x45CB2000;

/* 805CAE14-805CAE18 0004+00 s=0 e=0 z=0  None .rodata    @4613                                                        */
SECTION_RODATA u32 const lit_4613 = 0xC5DAC000;

/* 805CAE18-805CAE1C 0004+00 s=0 e=0 z=0  None .rodata    @4614                                                        */
SECTION_RODATA u32 const lit_4614 = 0x453B8000;

/* 805CAE1C-805CAE20 0004+00 s=0 e=0 z=0  None .rodata    @4615                                                        */
SECTION_RODATA u32 const lit_4615 = 0x40C00000;

/* 805CAE20-805CAE24 0004+00 s=0 e=0 z=0  None .rodata    @4616                                                        */
SECTION_RODATA u32 const lit_4616 = 0x43C80000;

/* 805CAE24-805CAE28 0004+00 s=0 e=0 z=0  None .rodata    @4617                                                        */
SECTION_RODATA u32 const lit_4617 = 0xC3A28000;

/* 805CAE28-805CAE2C 0004+00 s=0 e=0 z=0  None .rodata    @4618                                                        */
SECTION_RODATA u32 const lit_4618 = 0x43570000;

/* 805CAE2C-805CAE30 0004+00 s=0 e=0 z=0  None .rodata    @4619                                                        */
SECTION_RODATA u32 const lit_4619 = 0x43AF0000;

/* 805CAE30-805CAE34 0004+00 s=0 e=0 z=0  None .rodata    @4620                                                        */
SECTION_RODATA u32 const lit_4620 = 0x428C0000;

/* 805CAE34-805CAE38 0004+00 s=0 e=0 z=0  None .rodata    @4758                                                        */
SECTION_RODATA u32 const lit_4758 = 0x422C0000;

/* 805CAE38-805CAE3C 0004+00 s=0 e=0 z=0  None .rodata    @4759                                                        */
SECTION_RODATA u32 const lit_4759 = 0x42B60000;

/* 805CAE3C-805CAE40 0004+00 s=0 e=0 z=0  None .rodata    @4760                                                        */
SECTION_RODATA u32 const lit_4760 = 0x42E20000;

/* 805CAE40-805CAE44 0004+00 s=0 e=0 z=0  None .rodata    @4761                                                        */
SECTION_RODATA u32 const lit_4761 = 0x43050000;

/* 805CAE44-805CAE48 0004+00 s=0 e=0 z=0  None .rodata    @4762                                                        */
SECTION_RODATA u32 const lit_4762 = 0x43200000;

/* 805CAE48-805CAE4C 0004+00 s=0 e=0 z=0  None .rodata    @4763                                                        */
SECTION_RODATA u32 const lit_4763 = 0x433A0000;

/* 805CAE4C-805CAE50 0004+00 s=0 e=0 z=0  None .rodata    @4764                                                        */
SECTION_RODATA u32 const lit_4764 = 0x43550000;

/* 805CAE50-805CAE54 0004+00 s=0 e=0 z=0  None .rodata    @4765                                                        */
SECTION_RODATA u32 const lit_4765 = 0x436E0000;

/* 805CAE54-805CAE58 0004+00 s=0 e=0 z=0  None .rodata    @4766                                                        */
SECTION_RODATA u32 const lit_4766 = 0x43828000;

/* 805CAE58-805CAE5C 0004+00 s=0 e=0 z=0  None .rodata    @4767                                                        */
SECTION_RODATA u32 const lit_4767 = 0x40E00000;

/* 805CAE5C-805CAE60 0004+00 s=0 e=0 z=0  None .rodata    @4768                                                        */
SECTION_RODATA u32 const lit_4768 = 0x42960000;

/* 805CAE60-805CAE64 0004+00 s=0 e=0 z=0  None .rodata    @4769                                                        */
SECTION_RODATA u32 const lit_4769 = 0x430F0000;

/* 805CAE64-805CAE68 0004+00 s=0 e=0 z=0  None .rodata    @4770                                                        */
SECTION_RODATA u32 const lit_4770 = 0x43310000;

/* 805CAE68-805CAE6C 0004+00 s=0 e=0 z=0  None .rodata    @4771                                                        */
SECTION_RODATA u32 const lit_4771 = 0x43520000;

/* 805CAE6C-805CAE70 0004+00 s=0 e=0 z=0  None .rodata    @4772                                                        */
SECTION_RODATA u32 const lit_4772 = 0x43730000;

/* 805CAE70-805CAE74 0004+00 s=0 e=0 z=0  None .rodata    @4773                                                        */
SECTION_RODATA u32 const lit_4773 = 0x439A8000;

/* 805CAE74-805CAE78 0004+00 s=0 e=0 z=0  None .rodata    @4774                                                        */
SECTION_RODATA u32 const lit_4774 = 0x43860000;

/* 805CAE78-805CAE7C 0004+00 s=0 e=0 z=0  None .rodata    @4775                                                        */
SECTION_RODATA u32 const lit_4775 = 0x420C0000;

/* 805CAE7C-805CAE80 0004+00 s=0 e=0 z=0  None .rodata    @4776                                                        */
SECTION_RODATA u32 const lit_4776 = 0x42820000;

/* 805CAE80-805CAE84 0004+00 s=0 e=0 z=0  None .rodata    @4777                                                        */
SECTION_RODATA u32 const lit_4777 = 0x42BE0000;

/* 805CAE84-805CAE88 0004+00 s=0 e=0 z=0  None .rodata    @4778                                                        */
SECTION_RODATA u32 const lit_4778 = 0x42FA0000;

/* 805CAE88-805CAE8C 0004+00 s=0 e=0 z=0  None .rodata    @4779                                                        */
SECTION_RODATA u32 const lit_4779 = 0x42CC0000;

/* 805CAE8C-805CAE90 0004+00 s=0 e=0 z=0  None .rodata    @4780                                                        */
SECTION_RODATA u32 const lit_4780 = 0x431D0000;

/* 805CAE90-805CAE94 0004+00 s=0 e=0 z=0  None .rodata    @4781                                                        */
SECTION_RODATA u32 const lit_4781 = 0x43340000;

/* 805CAE94-805CAE9C 0008+00 s=0 e=0 z=0  None .rodata    @4874                                                        */
SECTION_RODATA u8 const lit_4874[8] = {
	0x3F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 805CAE9C-805CAEA4 0008+00 s=0 e=0 z=0  None .rodata    @4875                                                        */
SECTION_RODATA u8 const lit_4875[8] = {
	0x40, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 805CAEA4-805CAEAC 0008+00 s=0 e=0 z=0  None .rodata    @4876                                                        */
SECTION_RODATA u8 const lit_4876[8] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 805CAEAC-805CAEB0 0004+00 s=0 e=0 z=0  None .rodata    @4942                                                        */
SECTION_RODATA u32 const lit_4942 = 0x3F333333;

/* 805CAEB0-805CAEB4 0004+00 s=0 e=0 z=0  None .rodata    @4943                                                        */
SECTION_RODATA u32 const lit_4943 = 0x40800000;

/* 805CAEB4-805CAEB8 0004+00 s=1 e=0 z=0  None .rodata    @5006                                                        */
SECTION_RODATA static u32 const lit_5006 = 0x3F4CCCCD;

/* 805CAEB8-805CAEBC 0004+00 s=0 e=0 z=0  None .rodata    @5084                                                        */
SECTION_RODATA u32 const lit_5084 = 0x45BB8000;

/* 805CAEBC-805CAEC0 0004+00 s=0 e=0 z=0  None .rodata    @5227                                                        */
SECTION_RODATA u32 const lit_5227 = 0xC71C4000;

/* 805CAEC0-805CAEC4 0004+00 s=0 e=0 z=0  None .rodata    @5228                                                        */
SECTION_RODATA u32 const lit_5228 = 0x471C4000;

/* 805CAEC4-805CAEC8 0004+00 s=0 e=0 z=0  None .rodata    @5229                                                        */
SECTION_RODATA u32 const lit_5229 = 0x46160000;

/* 805CAEC8-805CAECC 0004+00 s=0 e=0 z=0  None .rodata    @5230                                                        */
SECTION_RODATA u32 const lit_5230 = 0x44E10000;

/* 805CAECC-805CAED1 0005+00 s=4 e=0 z=0  None .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char const* const stringBase_805CAECC = "B_DR";
#pragma pop

/* 805CAED4-805CAEFC 0028+00 s=1 e=0 z=0  None .data      @4416                                                        */
SECTION_DATA static void* lit_4416[10] = {
	(void*)(((char*)CamAction__9daB_DRE_cFv)+0x74),
	(void*)(((char*)CamAction__9daB_DRE_cFv)+0x194),
	(void*)(((char*)CamAction__9daB_DRE_cFv)+0x200),
	(void*)(((char*)CamAction__9daB_DRE_cFv)+0x2AC),
	(void*)(((char*)CamAction__9daB_DRE_cFv)+0x30C),
	(void*)(((char*)CamAction__9daB_DRE_cFv)+0x38C),
	(void*)(((char*)CamAction__9daB_DRE_cFv)+0x3B4),
	(void*)(((char*)CamAction__9daB_DRE_cFv)+0x3BC),
	(void*)(((char*)CamAction__9daB_DRE_cFv)+0x3CC),
	(void*)(((char*)CamAction__9daB_DRE_cFv)+0x414),
};

/* 805CAEFC-805CAF24 0028+00 s=1 e=0 z=0  None .data      @4621                                                        */
SECTION_DATA static void* lit_4621[10] = {
	(void*)(((char*)DrAction__9daB_DRE_cFv)+0x50),
	(void*)(((char*)DrAction__9daB_DRE_cFv)+0x58),
	(void*)(((char*)DrAction__9daB_DRE_cFv)+0xCC),
	(void*)(((char*)DrAction__9daB_DRE_cFv)+0x19C),
	(void*)(((char*)DrAction__9daB_DRE_cFv)+0x2D0),
	(void*)(((char*)DrAction__9daB_DRE_cFv)+0x3C0),
	(void*)(((char*)DrAction__9daB_DRE_cFv)+0x4A8),
	(void*)(((char*)DrAction__9daB_DRE_cFv)+0x560),
	(void*)(((char*)DrAction__9daB_DRE_cFv)+0x58C),
	(void*)(((char*)DrAction__9daB_DRE_cFv)+0x688),
};

/* 805CAF24-805CAFAC 0088+00 s=1 e=0 z=0  None .data      @4782                                                        */
SECTION_DATA static void* lit_4782[34] = {
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x23C),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x48C),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x78),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x48),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x1F4),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x600),
	(void*)(((char*)SoundChk__9daB_DRE_cFv)+0x534),
};

/* 805CAFAC-805CAFB4 0008+00 s=1 e=0 z=0  None .data      effId$4884                                                   */
SECTION_DATA static u8 effId[8] = {
	0x89, 0x9B, 0x89, 0x9C, 0x89, 0x9D, 0x89, 0x9E,
};

/* 805CAFB4-805CAFD4 0020+00 s=1 e=0 z=0  None .data      l_daB_DRE_Method                                             */
SECTION_DATA static void* l_daB_DRE_Method[8] = {
	(void*)daB_DRE_Create__FP10fopAc_ac_c,
	(void*)daB_DRE_Delete__FP9daB_DRE_c,
	(void*)daB_DRE_Execute__FP9daB_DRE_c,
	(void*)daB_DRE_IsDelete__FP9daB_DRE_c,
	(void*)daB_DRE_Draw__FP9daB_DRE_c,
	(void*)NULL,
	(void*)NULL,
	(void*)NULL,
};

/* 805CAFD4-805CB004 0030+00 s=0 e=0 z=1  None .data      g_profile_B_DRE                                              */
SECTION_DATA void* g_profile_B_DRE[12] = {
	(void*)0xFFFFFFFD,
	(void*)0x0007FFFD,
	(void*)0x02150000,
	(void*)&g_fpcLf_Method,
	(void*)0x00000930,
	(void*)NULL,
	(void*)NULL,
	(void*)&g_fopAc_Method,
	(void*)0x00E70000,
	(void*)&l_daB_DRE_Method,
	(void*)0x00044100,
	(void*)0x020E0000,
};

/* 805CB004-805CB028 0024+00 s=2 e=0 z=0  None .data      __vt__12dBgS_ObjAcch                                         */
SECTION_DATA void* __vt__12dBgS_ObjAcch[9] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__12dBgS_ObjAcchFv,
	(void*)NULL,
	(void*)NULL,
	(void*)func_805CAD24,
	(void*)NULL,
	(void*)NULL,
	(void*)func_805CAD1C,
};

/* 805CB028-805CB034 000C+00 s=2 e=0 z=0  None .data      __vt__12J3DFrameCtrl                                         */
SECTION_DATA void* __vt__12J3DFrameCtrl[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__12J3DFrameCtrlFv,
};

/* 805C7B2C-805C7D6C 0240+00 s=1 e=0 z=0  None .text      useHeapInit__FP10fopAc_ac_c                                  */
//	805C7B3C: 803621D8 (_savegpr_28)
//	805C7B44: 805CAECC (stringBase0)
//	805C7B48: 805CAECC (stringBase0)
//	805C7B50: 804061C0 (g_dComIfG_gameInfo)
//	805C7B54: 804061C0 (g_dComIfG_gameInfo)
//	805C7B68: 8003C2EC (getRes__14dRes_control_cFPCclP11dRes_info_ci)
//	805C7B80: 802CEC4C (__nw__FUl)
//	805C7B8C: 805CAECC (stringBase0)
//	805C7B90: 805CAECC (stringBase0)
//	805C7BA0: 8003C2EC (getRes__14dRes_control_cFPCclP11dRes_info_ci)
//	805C7BD8: 805CAD5C (lit_3844)
//	805C7BDC: 805CAD5C (lit_3844)
//	805C7BE8: 800107D0 (__ct__16mDoExt_McaMorfSOFP12J3DModelDataP25mDoExt_McaMorfCallBack1_cP25mDoExt_McaMorfCallBack2_cP15J3DAnmTransformifiiP10Z2CreatureUlUl)
//	805C7BFC: 802CEC4C (__nw__FUl)
//	805C7C08: 805CAECC (stringBase0)
//	805C7C0C: 805CAECC (stringBase0)
//	805C7C1C: 8003C2EC (getRes__14dRes_control_cFPCclP11dRes_info_ci)
//	805C7C54: 805CAD5C (lit_3844)
//	805C7C58: 805CAD5C (lit_3844)
//	805C7C64: 800107D0 (__ct__16mDoExt_McaMorfSOFP12J3DModelDataP25mDoExt_McaMorfCallBack1_cP25mDoExt_McaMorfCallBack2_cP15J3DAnmTransformifiiP10Z2CreatureUlUl)
//	805C7C94: 802CEC4C (__nw__FUl)
//	805C7CA0: 805CB028 (__vt__12J3DFrameCtrl)
//	805C7CA4: 805CB028 (__vt__12J3DFrameCtrl)
//	805C7CB0: 803283FC (init__12J3DFrameCtrlFs)
//	805C7CD4: 805CAECC (stringBase0)
//	805C7CD8: 805CAECC (stringBase0)
//	805C7CE8: 8003C2EC (getRes__14dRes_control_cFPCclP11dRes_info_ci)
//	805C7D0C: 805CAD5C (lit_3844)
//	805C7D10: 805CAD5C (lit_3844)
//	805C7D1C: 8000D70C (init__13mDoExt_brkAnmFP16J3DMaterialTableP15J3DAnmTevRegKeyiifss)
//	805C7D58: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
asm static void useHeapInit(fopAc_ac_c* param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/useHeapInit__FP10fopAc_ac_c.s"
}
#pragma pop


/* 805C7D6C-805C7DB4 0048+00 s=1 e=0 z=0  None .text      __dt__12J3DFrameCtrlFv                                       */
//	805C7D84: 805CB028 (__vt__12J3DFrameCtrl)
//	805C7D88: 805CB028 (__vt__12J3DFrameCtrl)
//	805C7D98: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm J3DFrameCtrl::~J3DFrameCtrl() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/__dt__12J3DFrameCtrlFv.s"
}
#pragma pop


/* 805C7DB4-805C7DD4 0020+00 s=1 e=0 z=0  None .text      daB_DRE_Create__FP10fopAc_ac_c                               */
//	805C7DC0: 805CA944 (create__9daB_DRE_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
asm static void daB_DRE_Create(fopAc_ac_c* param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/daB_DRE_Create__FP10fopAc_ac_c.s"
}
#pragma pop


/* 805C7DD4-805C7E88 00B4+00 s=4 e=0 z=0  None .text      SetAnm__9daB_DRE_cFP16mDoExt_McaMorfSOiiff                   */
//	805C7DF4: 803621D8 (_savegpr_28)
//	805C7E10: 805CAECC (stringBase0)
//	805C7E14: 805CAECC (stringBase0)
//	805C7E1C: 804061C0 (g_dComIfG_gameInfo)
//	805C7E20: 804061C0 (g_dComIfG_gameInfo)
//	805C7E30: 8003C2EC (getRes__14dRes_control_cFPCclP11dRes_info_ci)
//	805C7E48: 805CAD60 (lit_3862)
//	805C7E4C: 805CAD60 (lit_3862)
//	805C7E50: 805CAD64 (lit_3863)
//	805C7E54: 805CAD64 (lit_3863)
//	805C7E58: 80010E70 (setAnm__16mDoExt_McaMorfSOFP15J3DAnmTransformiffff)
//	805C7E74: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  mDoExt_McaMorfSO* False
// 	 mDoExt_McaMorfSO False
//  int False
//  int False
//  f32 False
//  f32 False
asm void daB_DRE_c::SetAnm(mDoExt_McaMorfSO* param_0, int param_1, int param_2, f32 param_3, f32 param_4) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/SetAnm__9daB_DRE_cFP16mDoExt_McaMorfSOiiff.s"
}
#pragma pop


/* 805C7E88-805C7EAC 0024+00 s=1 e=0 z=0  None .text      daB_DRE_Delete__FP9daB_DRE_c                                 */
//	805C7E94: 805CA670 (Delete__9daB_DRE_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daB_DRE_c* False
// 	 daB_DRE_c False
asm static void daB_DRE_Delete(daB_DRE_c* param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/daB_DRE_Delete__FP9daB_DRE_c.s"
}
#pragma pop


/* 805C7EAC-805C7FCC 0120+00 s=1 e=0 z=0  None .text      CameraSet__9daB_DRE_cFv                                      */
//	805C7EBC: 803621DC (_savegpr_29)
//	805C7EC4: 804061C0 (g_dComIfG_gameInfo)
//	805C7EC8: 804061C0 (g_dComIfG_gameInfo)
//	805C7EE0: 80181640 (dCam_getBody__Fv)
//	805C7F08: 8001B908 (fopAcM_orderPotentialEvent__FP10fopAc_ac_cUsUsUs)
//	805C7F18: 801614D0 (Stop__9dCamera_cFv)
//	805C7F34: 80181E98 (Center__9dCamera_cFv)
//	805C7F70: 80181E64 (Eye__9dCamera_cFv)
//	805C7FAC: 8016300C (SetTrimSize__9dCamera_cFl)
//	805C7FB8: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DRE_c::CameraSet() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/CameraSet__9daB_DRE_cFv.s"
}
#pragma pop


/* 805C7FCC-805C8008 003C+00 s=1 e=0 z=0  None .text      __dt__4cXyzFv                                                */
//	805C7FEC: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cXyz::~cXyz() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/__dt__4cXyzFv.s"
}
#pragma pop


/* 805C8008-805C808C 0084+00 s=2 e=0 z=0  None .text      SetStopingCam__9daB_DRE_cFv                                  */
//	805C8018: 804061C0 (g_dComIfG_gameInfo)
//	805C801C: 804061C0 (g_dComIfG_gameInfo)
//	805C8078: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DRE_c::SetStopingCam() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/SetStopingCam__9daB_DRE_cFv.s"
}
#pragma pop


/* 805C808C-805C81B8 012C+00 s=3 e=0 z=0  None .text      SetStopCam__9daB_DRE_cF4cXyzffs                              */
//	805C80B0: 804061C0 (g_dComIfG_gameInfo)
//	805C80B4: 804061C0 (g_dComIfG_gameInfo)
//	805C80CC: 805CAD60 (lit_3862)
//	805C80D0: 805CAD60 (lit_3862)
//	805C8118: 80270DC0 (cLib_offsetPos__FP4cXyzPC4cXyzsPC4cXyz)
//	805C8190: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cXyz False
//  f32 False
//  f32 False
//  s16 False
asm void daB_DRE_c::SetStopCam(cXyz param_0, f32 param_1, f32 param_2, s16 param_3) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/SetStopCam__9daB_DRE_cF4cXyzffs.s"
}
#pragma pop


/* 805C81B8-805C8208 0050+00 s=1 e=0 z=0  None .text      SetCMoveCam__9daB_DRE_cF4cXyzf                               */
//	805C81E8: 802707AC (cLib_chasePos__FP4cXyzRC4cXyzf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cXyz False
//  f32 False
asm void daB_DRE_c::SetCMoveCam(cXyz param_0, f32 param_1) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/SetCMoveCam__9daB_DRE_cF4cXyzf.s"
}
#pragma pop


/* 805C8208-805C824C 0044+00 s=2 e=0 z=0  None .text      SetCMoveCam__9daB_DRE_cF4cXyzff                              */
//	805C8238: 80270178 (cLib_addCalcPos2__FP4cXyzRC4cXyzff)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cXyz False
//  f32 False
//  f32 False
asm void daB_DRE_c::SetCMoveCam(cXyz param_0, f32 param_1, f32 param_2) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/SetCMoveCam__9daB_DRE_cF4cXyzff.s"
}
#pragma pop


/* 805C824C-805C8348 00FC+00 s=2 e=0 z=0  None .text      SetEyeMoveCam__9daB_DRE_cF4cXyzffsf                          */
//	805C8270: 804061C0 (g_dComIfG_gameInfo)
//	805C8274: 804061C0 (g_dComIfG_gameInfo)
//	805C828C: 805CAD60 (lit_3862)
//	805C8290: 805CAD60 (lit_3862)
//	805C82B4: 80270DC0 (cLib_offsetPos__FP4cXyzPC4cXyzsPC4cXyz)
//	805C82DC: 802707AC (cLib_chasePos__FP4cXyzRC4cXyzf)
//	805C8324: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cXyz False
//  f32 False
//  f32 False
//  s16 False
//  f32 False
asm void daB_DRE_c::SetEyeMoveCam(cXyz param_0, f32 param_1, f32 param_2, s16 param_3, f32 param_4) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/SetEyeMoveCam__9daB_DRE_cF4cXyzffsf.s"
}
#pragma pop


/* 805C8348-805C8458 0110+00 s=1 e=0 z=0  None .text      SetEyeMoveCam__9daB_DRE_cF4cXyzffsff                         */
//	805C8378: 804061C0 (g_dComIfG_gameInfo)
//	805C837C: 804061C0 (g_dComIfG_gameInfo)
//	805C8394: 805CAD60 (lit_3862)
//	805C8398: 805CAD60 (lit_3862)
//	805C83B0: 80270DC0 (cLib_offsetPos__FP4cXyzPC4cXyzsPC4cXyz)
//	805C83DC: 805CAD60 (lit_3862)
//	805C83E0: 805CAD60 (lit_3862)
//	805C83E4: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	805C842C: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cXyz False
//  f32 False
//  f32 False
//  s16 False
//  f32 False
//  f32 False
asm void daB_DRE_c::SetEyeMoveCam(cXyz param_0, f32 param_1, f32 param_2, s16 param_3, f32 param_4, f32 param_5) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/SetEyeMoveCam__9daB_DRE_cF4cXyzffsff.s"
}
#pragma pop


/* 805C8458-805C8544 00EC+00 s=1 e=0 z=0  None .text      SetMoveCam__9daB_DRE_cFff                                    */
//	805C8488: 804061C0 (g_dComIfG_gameInfo)
//	805C848C: 804061C0 (g_dComIfG_gameInfo)
//	805C84AC: 805CAD60 (lit_3862)
//	805C84B0: 805CAD60 (lit_3862)
//	805C84B4: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	805C84C8: 805CAD60 (lit_3862)
//	805C84CC: 805CAD60 (lit_3862)
//	805C84D0: 8026FAB8 (cLib_addCalcPos__FP4cXyzRC4cXyzfff)
//	805C8518: 80180AE0 (Set__9dCamera_cF4cXyz4cXyzfs)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 False
//  f32 False
asm void daB_DRE_c::SetMoveCam(f32 param_0, f32 param_1) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/SetMoveCam__9daB_DRE_cFff.s"
}
#pragma pop


/* 805C8544-805C85E8 00A4+00 s=1 e=0 z=0  None .text      SetReleaseCam__9daB_DRE_cFv                                  */
//	805C8554: 804061C0 (g_dComIfG_gameInfo)
//	805C8558: 804061C0 (g_dComIfG_gameInfo)
//	805C85AC: 80180C18 (Reset__9dCamera_cF4cXyz4cXyz)
//	805C85B4: 801614AC (Start__9dCamera_cFv)
//	805C85C0: 8016300C (SetTrimSize__9dCamera_cFl)
//	805C85C4: 804061C0 (g_dComIfG_gameInfo)
//	805C85C8: 804061C0 (g_dComIfG_gameInfo)
//	805C85D0: 80042468 (reset__14dEvt_control_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DRE_c::SetReleaseCam() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/SetReleaseCam__9daB_DRE_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 805CB040-805CB044 0001+03 s=3 e=0 z=0  None .bss       @1109                                                        */
static u8 lit_1109[1 + 3 /* padding */];

/* 805C85E8-805C8BF8 0610+00 s=1 e=0 z=0  None .text      CamAction2__9daB_DRE_cFv                                     */
//	805C85F8: 803621D4 (_savegpr_27)
//	805C8600: 805CB040 (lit_1109)
//	805C8604: 805CB040 (lit_1109)
//	805C8608: 805CAD5C (lit_3844)
//	805C860C: 805CAD5C (lit_3844)
//	805C8628: 804061C0 (g_dComIfG_gameInfo)
//	805C862C: 804061C0 (g_dComIfG_gameInfo)
//	805C8634: 80181640 (dCam_getBody__Fv)
//	805C8748: 805C808C (SetStopCam__9daB_DRE_cF4cXyzffs)
//	805C8780: 805C81B8 (SetCMoveCam__9daB_DRE_cF4cXyzf)
//	805C87B8: 805C8348 (SetEyeMoveCam__9daB_DRE_cF4cXyzffsff)
//	805C8840: 805C808C (SetStopCam__9daB_DRE_cF4cXyzffs)
//	805C884C: 804061C0 (g_dComIfG_gameInfo)
//	805C8850: 804061C0 (g_dComIfG_gameInfo)
//	805C885C: 8004368C (setPtT__14dEvt_control_cFPv)
//	805C88EC: 805C7DD4 (SetAnm__9daB_DRE_cFP16mDoExt_McaMorfSOiiff)
//	805C88F4: 8042CA54 (g_env_light)
//	805C88F8: 8042CA54 (g_env_light)
//	805C894C: 805C824C (SetEyeMoveCam__9daB_DRE_cF4cXyzffsf)
//	805C89B4: 805C8208 (SetCMoveCam__9daB_DRE_cF4cXyzff)
//	805C8A4C: 805C8208 (SetCMoveCam__9daB_DRE_cF4cXyzff)
//	805C8AA8: 805C8348 (SetEyeMoveCam__9daB_DRE_cF4cXyzffsff)
//	805C8AF0: 805C8348 (SetEyeMoveCam__9daB_DRE_cF4cXyzffsff)
//	805C8B28: 805C824C (SetEyeMoveCam__9daB_DRE_cF4cXyzffsf)
//	805C8BA8: 805C824C (SetEyeMoveCam__9daB_DRE_cF4cXyzffsf)
//	805C8BD4: 805C8208 (SetCMoveCam__9daB_DRE_cF4cXyzff)
//	805C8BDC: 805C8008 (SetStopingCam__9daB_DRE_cFv)
//	805C8BE4: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DRE_c::CamAction2() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/CamAction2__9daB_DRE_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 805CB044-805CB048 0001+03 s=0 e=0 z=0  None .bss       @1107                                                        */
u8 lit_1107[1 + 3 /* padding */];

/* 805CB048-805CB04C 0001+03 s=0 e=0 z=0  None .bss       @1105                                                        */
u8 lit_1105[1 + 3 /* padding */];

/* 805CB04C-805CB050 0001+03 s=0 e=0 z=0  None .bss       @1104                                                        */
u8 lit_1104[1 + 3 /* padding */];

/* 805CB050-805CB054 0001+03 s=0 e=0 z=0  None .bss       @1099                                                        */
u8 lit_1099[1 + 3 /* padding */];

/* 805CB054-805CB058 0001+03 s=0 e=0 z=0  None .bss       @1097                                                        */
u8 lit_1097[1 + 3 /* padding */];

/* 805CB058-805CB05C 0001+03 s=0 e=0 z=0  None .bss       @1095                                                        */
u8 lit_1095[1 + 3 /* padding */];

/* 805CB05C-805CB060 0001+03 s=0 e=0 z=0  None .bss       @1094                                                        */
u8 lit_1094[1 + 3 /* padding */];

/* 805CB060-805CB064 0001+03 s=0 e=0 z=0  None .bss       @1057                                                        */
u8 lit_1057[1 + 3 /* padding */];

/* 805CB064-805CB068 0001+03 s=0 e=0 z=0  None .bss       @1055                                                        */
u8 lit_1055[1 + 3 /* padding */];

/* 805CB068-805CB06C 0001+03 s=0 e=0 z=0  None .bss       @1053                                                        */
u8 lit_1053[1 + 3 /* padding */];

/* 805CB06C-805CB070 0001+03 s=0 e=0 z=0  None .bss       @1052                                                        */
u8 lit_1052[1 + 3 /* padding */];

/* 805CB070-805CB074 0001+03 s=0 e=0 z=0  None .bss       @1014                                                        */
u8 lit_1014[1 + 3 /* padding */];

/* 805CB074-805CB078 0001+03 s=0 e=0 z=0  None .bss       @1012                                                        */
u8 lit_1012[1 + 3 /* padding */];

/* 805CB078-805CB07C 0001+03 s=0 e=0 z=0  None .bss       @1010                                                        */
u8 lit_1010[1 + 3 /* padding */];

/* 805CB07C-805CB080 0001+03 s=0 e=0 z=0  None .bss       @1009                                                        */
u8 lit_1009[1 + 3 /* padding */];

/* 805CB080-805CB084 0004+00 s=0 e=0 z=0  None .bss       s_dis__23@unnamed@d_a_b_dre_cpp@                             */
u8 data_805CB080[4];

/* 805CB084-805CB088 0004+00 s=1 e=0 z=0  None .bss       s_LinkPos__23@unnamed@d_a_b_dre_cpp@                         */
static u8 data_805CB084[4];

/* 805C8BF8-805C8EDC 02E4+00 s=1 e=0 z=0  None .text      DrAction2__9daB_DRE_cFv                                      */
//	805C8C10: 805CAD5C (lit_3844)
//	805C8C14: 805CAD5C (lit_3844)
//	805C8C54: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C8CC4: 805C7DD4 (SetAnm__9daB_DRE_cFP16mDoExt_McaMorfSOiiff)
//	805C8CD8: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C8D10: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C8D58: 8026FA3C (cLib_addCalc2__FPffff)
//	805C8D70: 8026FA3C (cLib_addCalc2__FPffff)
//	805C8DB8: 805C7DD4 (SetAnm__9daB_DRE_cFP16mDoExt_McaMorfSOiiff)
//	805C8DDC: 804061C0 (g_dComIfG_gameInfo)
//	805C8DE0: 804061C0 (g_dComIfG_gameInfo)
//	805C8DEC: 8006FD94 (StopQuake__12dVibration_cFi)
//	805C8E40: 80270DC0 (cLib_offsetPos__FP4cXyzPC4cXyzsPC4cXyz)
//	805C8E5C: 805CB084 (data_805CB084)
//	805C8E60: 805CB084 (data_805CB084)
//	805C8E90: 804061C0 (g_dComIfG_gameInfo)
//	805C8E94: 804061C0 (g_dComIfG_gameInfo)
//	805C8EA4: 80035200 (onSwitch__10dSv_info_cFii)
//	805C8EC0: 80019C7C (fopAcM_delete__FP10fopAc_ac_c)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DRE_c::DrAction2() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/DrAction2__9daB_DRE_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 805CB088-805CB08C 0002+02 s=0 e=0 z=0  None .bss       s_TargetAngle__23@unnamed@d_a_b_dre_cpp@                     */
u8 data_805CB088[2 + 2 /* padding */];

/* 805CB08C-805CB098 000C+00 s=0 e=0 z=0  None .bss       @3768                                                        */
u8 lit_3768[12];

/* 805CB098-805CB0A4 000C+00 s=3 e=0 z=0  None .bss       s_HeadPos__23@unnamed@d_a_b_dre_cpp@                         */
static u8 data_805CB098[12];

/* 805C8EDC-805C9318 043C+00 s=2 e=0 z=0  None .text      CamAction__9daB_DRE_cFv                                      */
//	805C8EEC: 803621DC (_savegpr_29)
//	805C8EF4: 805CAD5C (lit_3844)
//	805C8EF8: 805CAD5C (lit_3844)
//	805C8F20: 804061C0 (g_dComIfG_gameInfo)
//	805C8F24: 804061C0 (g_dComIfG_gameInfo)
//	805C8F38: 805CAED4 (lit_4416)
//	805C8F3C: 805CAED4 (lit_4416)
//	805C8F50: 805C7EAC (CameraSet__9daB_DRE_cFv)
//	805C8F5C: 804061C0 (g_dComIfG_gameInfo)
//	805C8F60: 804061C0 (g_dComIfG_gameInfo)
//	805C8F70: 800352B0 (offSwitch__10dSv_info_cFii)
//	805C8F74: 804061C0 (g_dComIfG_gameInfo)
//	805C8F78: 804061C0 (g_dComIfG_gameInfo)
//	805C8F88: 800352B0 (offSwitch__10dSv_info_cFii)
//	805C8FA0: 804061C0 (g_dComIfG_gameInfo)
//	805C8FA4: 804061C0 (g_dComIfG_gameInfo)
//	805C8FB8: 8006FB10 (StartQuake__12dVibration_cFii4cXyz)
//	805C9000: 805C808C (SetStopCam__9daB_DRE_cF4cXyzffs)
//	805C90A0: 805C8208 (SetCMoveCam__9daB_DRE_cF4cXyzff)
//	805C90D4: 805C824C (SetEyeMoveCam__9daB_DRE_cF4cXyzffsf)
//	805C90E8: 805CB098 (data_805CB098)
//	805C90EC: 805CB098 (data_805CB098)
//	805C910C: 805C8208 (SetCMoveCam__9daB_DRE_cF4cXyzff)
//	805C9140: 805C824C (SetEyeMoveCam__9daB_DRE_cF4cXyzffsf)
//	805C91AC: 805C8208 (SetCMoveCam__9daB_DRE_cF4cXyzff)
//	805C91E0: 805C824C (SetEyeMoveCam__9daB_DRE_cF4cXyzffsf)
//	805C9218: 805C8208 (SetCMoveCam__9daB_DRE_cF4cXyzff)
//	805C924C: 805C7DD4 (SetAnm__9daB_DRE_cFP16mDoExt_McaMorfSOiiff)
//	805C9260: 805C8008 (SetStopingCam__9daB_DRE_cFv)
//	805C9280: 805C8208 (SetCMoveCam__9daB_DRE_cF4cXyzff)
//	805C9288: 805C8008 (SetStopingCam__9daB_DRE_cFv)
//	805C9290: 805C8008 (SetStopingCam__9daB_DRE_cFv)
//	805C92A0: 805C8458 (SetMoveCam__9daB_DRE_cFff)
//	805C92B8: 805C8544 (SetReleaseCam__9daB_DRE_cFv)
//	805C92E8: 805C8458 (SetMoveCam__9daB_DRE_cFff)
//	805C92FC: 80019C7C (fopAcM_delete__FP10fopAc_ac_c)
//	805C9304: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DRE_c::CamAction() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/CamAction__9daB_DRE_cFv.s"
}
#pragma pop


/* 805C9318-805C9378 0060+00 s=1 e=0 z=0  None .text      Action__9daB_DRE_cFv                                         */
//	805C9348: 805C8EDC (CamAction__9daB_DRE_cFv)
//	805C9350: 805C9378 (DrAction__9daB_DRE_cFv)
//	805C9358: 805C85E8 (CamAction2__9daB_DRE_cFv)
//	805C9360: 805C8BF8 (DrAction2__9daB_DRE_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DRE_c::Action() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/Action__9daB_DRE_cFv.s"
}
#pragma pop


/* 805C9378-805C9B40 07C8+00 s=2 e=0 z=0  None .text      DrAction__9daB_DRE_cFv                                       */
//	805C9388: 803621DC (_savegpr_29)
//	805C9390: 805CAD5C (lit_3844)
//	805C9394: 805CAD5C (lit_3844)
//	805C9398: 804061C0 (g_dComIfG_gameInfo)
//	805C939C: 804061C0 (g_dComIfG_gameInfo)
//	805C93B0: 805CAEFC (lit_4621)
//	805C93B4: 805CAEFC (lit_4621)
//	805C93C8: 805CA4FC (BreathSet__9daB_DRE_cFv)
//	805C93E8: 805CB098 (data_805CB098)
//	805C93EC: 805CB098 (data_805CB098)
//	805C941C: 805C808C (SetStopCam__9daB_DRE_cF4cXyzffs)
//	805C943C: 805CA4FC (BreathSet__9daB_DRE_cFv)
//	805C9450: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C945C: 804061C0 (g_dComIfG_gameInfo)
//	805C9460: 804061C0 (g_dComIfG_gameInfo)
//	805C946C: 8006FD94 (StopQuake__12dVibration_cFi)
//	805C94B4: 805C7DD4 (SetAnm__9daB_DRE_cFP16mDoExt_McaMorfSOiiff)
//	805C950C: 805CA4FC (BreathSet__9daB_DRE_cFv)
//	805C952C: 80267954 (cM_rndF__Ff)
//	805C9560: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C95CC: 805C808C (SetStopCam__9daB_DRE_cF4cXyzffs)
//	805C95E8: 805CA4FC (BreathSet__9daB_DRE_cFv)
//	805C95FC: 80267954 (cM_rndF__Ff)
//	805C9628: 80267954 (cM_rndF__Ff)
//	805C96B0: 805C7DD4 (SetAnm__9daB_DRE_cFP16mDoExt_McaMorfSOiiff)
//	805C9720: 805C808C (SetStopCam__9daB_DRE_cF4cXyzffs)
//	805C9780: 8001CAD8 (fopAcM_createDisappear__FPC10fopAc_ac_cPC4cXyzUcUcUc)
//	805C9790: 8042CA54 (g_env_light)
//	805C9794: 8042CA54 (g_env_light)
//	805C9810: 8001C0D4 (fopAcM_createItemForBoss__FPC4cXyziiPC5csXyzPC4cXyzffi)
//	805C9828: 80019A2C (fopAcM_SearchByName__FsPP10fopAc_ac_c)
//	805C9838: 804061C0 (g_dComIfG_gameInfo)
//	805C983C: 804061C0 (g_dComIfG_gameInfo)
//	805C9844: 8004368C (setPtT__14dEvt_control_cFPv)
//	805C98B0: 805C808C (SetStopCam__9daB_DRE_cF4cXyzffs)
//	805C9950: 80270DC0 (cLib_offsetPos__FP4cXyzPC4cXyzsPC4cXyz)
//	805C9974: 80019D98 (fopAcM_create__FsUlPC4cXyziPC5csXyzPC4cXyzSc)
//	805C99BC: 8001C95C (fopAcM_createWarpHole__FPC4cXyzPC5csXyziUcUcUc)
//	805C99F8: 8026FA3C (cLib_addCalc2__FPffff)
//	805C9A18: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805C9A1C: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	805C9A48: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
//	805C9A54: 80019A2C (fopAcM_SearchByName__FsPP10fopAc_ac_c)
//	805C9A78: 804061C0 (g_dComIfG_gameInfo)
//	805C9A7C: 804061C0 (g_dComIfG_gameInfo)
//	805C9A88: 8004368C (setPtT__14dEvt_control_cFPv)
//	805C9AF8: 805CAD2C (setCurrentPos__16obj_ystone_classF4cXyz)
//	805C9B24: 8026FA3C (cLib_addCalc2__FPffff)
//	805C9B2C: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DRE_c::DrAction() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/DrAction__9daB_DRE_cFv.s"
}
#pragma pop


/* 805C9B40-805CA158 0618+00 s=2 e=0 z=0  None .text      SoundChk__9daB_DRE_cFv                                       */
//	805C9B58: 805CAD5C (lit_3844)
//	805C9B5C: 805CAD5C (lit_3844)
//	805C9B70: 805CAF24 (lit_4782)
//	805C9B74: 805CAF24 (lit_4782)
//	805C9BC4: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9C08: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9C20: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9C38: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9C50: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9C68: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9C80: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9C98: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9CB0: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9CC8: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9CE0: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9CF8: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9D40: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9D88: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9DA0: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9DB8: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9DD0: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9DE8: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9E00: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9E18: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9E30: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9E48: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9E8C: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9ED0: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9F10: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9F30: 804061C0 (g_dComIfG_gameInfo)
//	805C9F34: 804061C0 (g_dComIfG_gameInfo)
//	805C9F48: 8006FB10 (StartQuake__12dVibration_cFii4cXyz)
//	805C9F5C: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9F68: 804061C0 (g_dComIfG_gameInfo)
//	805C9F6C: 804061C0 (g_dComIfG_gameInfo)
//	805C9F78: 8006FD94 (StopQuake__12dVibration_cFi)
//	805C9F8C: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9FAC: 804061C0 (g_dComIfG_gameInfo)
//	805C9FB0: 804061C0 (g_dComIfG_gameInfo)
//	805C9FC4: 8006FB10 (StartQuake__12dVibration_cFii4cXyz)
//	805C9FD8: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805C9FF0: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805CA008: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805CA020: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805CA038: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805CA080: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805CA098: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805CA0B0: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805CA0C8: 8032842C (checkPass__12J3DFrameCtrlFf)
//	805CA10C: 8032842C (checkPass__12J3DFrameCtrlFf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DRE_c::SoundChk() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/SoundChk__9daB_DRE_cFv.s"
}
#pragma pop


/* 805CA158-805CA49C 0344+00 s=1 e=0 z=0  None .text      Execute__9daB_DRE_cFv                                        */
//	805CA168: 803621DC (_savegpr_29)
//	805CA170: 805CB040 (lit_1109)
//	805CA174: 805CB040 (lit_1109)
//	805CA178: 805CAD5C (lit_3844)
//	805CA17C: 805CAD5C (lit_3844)
//	805CA180: 804061C0 (g_dComIfG_gameInfo)
//	805CA184: 804061C0 (g_dComIfG_gameInfo)
//	805CA198: 80270C04 (cLib_targetAngleY__FPC3VecPC3Vec)
//	805CA1A8: 8034739C (PSVECSquareDistance)
//	805CA218: 80450AE0 (__float_nan)
//	805CA21C: 80450AE0 (__float_nan)
//	805CA288: 80450AE0 (__float_nan)
//	805CA28C: 80450AE0 (__float_nan)
//	805CA2B8: 803DD470 (now__14mDoMtx_stack_c)
//	805CA2BC: 803DD470 (now__14mDoMtx_stack_c)
//	805CA2C0: 803464B0 (PSMTXCopy)
//	805CA2C4: 803DD470 (now__14mDoMtx_stack_c)
//	805CA2C8: 803DD470 (now__14mDoMtx_stack_c)
//	805CA2D4: 80346D6C (PSMTXMultVec)
//	805CA318: 803DD470 (now__14mDoMtx_stack_c)
//	805CA31C: 803DD470 (now__14mDoMtx_stack_c)
//	805CA320: 803464B0 (PSMTXCopy)
//	805CA324: 803DD470 (now__14mDoMtx_stack_c)
//	805CA328: 803DD470 (now__14mDoMtx_stack_c)
//	805CA334: 80346D6C (PSMTXMultVec)
//	805CA378: 803DD470 (now__14mDoMtx_stack_c)
//	805CA37C: 803DD470 (now__14mDoMtx_stack_c)
//	805CA380: 803464B0 (PSMTXCopy)
//	805CA384: 803DD470 (now__14mDoMtx_stack_c)
//	805CA388: 803DD470 (now__14mDoMtx_stack_c)
//	805CA394: 80346D6C (PSMTXMultVec)
//	805CA3F0: 805C9318 (Action__9daB_DRE_cFv)
//	805CA3F8: 805C9B40 (SoundChk__9daB_DRE_cFv)
//	805CA400: 805CA49C (SpeedSet__9daB_DRE_cFv)
//	805CA444: 8000D428 (play__14mDoExt_baseAnmFv)
//	805CA450: 8002D06C (dComIfGp_getReverb__Fi)
//	805CA460: 800110B0 (play__16mDoExt_McaMorfSOFUlSc)
//	805CA468: 804061C0 (g_dComIfG_gameInfo)
//	805CA46C: 804061C0 (g_dComIfG_gameInfo)
//	805CA474: 80076AAC (CrrPos__9dBgS_AcchFR4dBgS)
//	805CA47C: 805CA6C0 (setBaseMtx__9daB_DRE_cFv)
//	805CA488: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DRE_c::Execute() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/Execute__9daB_DRE_cFv.s"
}
#pragma pop


/* 805CA49C-805CA4FC 0060+00 s=1 e=0 z=0  None .text      SpeedSet__9daB_DRE_cFv                                       */
//	805CA4B8: 805CADB0 (lit_4227)
//	805CA4BC: 805CADB0 (lit_4227)
//	805CA4C0: 805CADE4 (lit_4411)
//	805CA4C4: 805CADE4 (lit_4411)
//	805CA4C8: 8026FA3C (cLib_addCalc2__FPffff)
//	805CA4D4: 805CADB0 (lit_4227)
//	805CA4D8: 805CADB0 (lit_4227)
//	805CA4DC: 805CADE4 (lit_4411)
//	805CA4E0: 805CADE4 (lit_4411)
//	805CA4E4: 8026FA3C (cLib_addCalc2__FPffff)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DRE_c::SpeedSet() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/SpeedSet__9daB_DRE_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 805CB0A4-805CB0B0 000C+00 s=0 e=0 z=0  None .bss       @3769                                                        */
u8 lit_3769[12];

/* 805CB0B0-805CB0BC 000C+00 s=0 e=0 z=0  None .bss       s_BodyPos__23@unnamed@d_a_b_dre_cpp@                         */
u8 data_805CB0B0[12];

/* 805CB0BC-805CB0C8 000C+00 s=0 e=0 z=0  None .bss       @3770                                                        */
u8 lit_3770[12];

/* 805CB0C8-805CB0D4 000C+00 s=0 e=0 z=0  None .bss       s_TalePos__23@unnamed@d_a_b_dre_cpp@                         */
u8 data_805CB0C8[12];

/* 805CB0D4-805CB0D8 0004+00 s=1 e=0 z=0  None .bss       None                                                         */
static u8 data_805CB0D4[4];

/* 805CA4FC-805CA670 0174+00 s=1 e=0 z=0  None .text      BreathSet__9daB_DRE_cFv                                      */
//	805CA50C: 803621C0 (_savegpr_22)
//	805CA514: 805CAD5C (lit_3844)
//	805CA518: 805CAD5C (lit_3844)
//	805CA52C: 8026FA3C (cLib_addCalc2__FPffff)
//	805CA540: 805CB0D4 (data_805CB0D4)
//	805CA544: 805CB0D4 (data_805CB0D4)
//	805CA564: 804061C0 (g_dComIfG_gameInfo)
//	805CA568: 804061C0 (g_dComIfG_gameInfo)
//	805CA56C: 805CAFAC (effId)
//	805CA570: 805CAFAC (effId)
//	805CA574: 805CB098 (data_805CB098)
//	805CA578: 805CB098 (data_805CB098)
//	805CA5D0: 8004D4CC (set__13dPa_control_cFUlUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf)
//	805CA5E4: 8004B918 (getEmitter__Q213dPa_control_c7level_cFUl)
//	805CA610: 80280808 (func_80280808)
//	805CA65C: 8036220C (_restgpr_22)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DRE_c::BreathSet() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/BreathSet__9daB_DRE_cFv.s"
}
#pragma pop


/* 805CA670-805CA6C0 0050+00 s=1 e=0 z=0  None .text      Delete__9daB_DRE_cFv                                         */
//	805CA688: 805CAECC (stringBase0)
//	805CA68C: 805CAECC (stringBase0)
//	805CA690: 8002D008 (dComIfG_resDelete__FP30request_of_phase_process_classPCc)
//	805CA6A4: 80011310 (stopZelAnime__16mDoExt_McaMorfSOFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DRE_c::Delete() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/Delete__9daB_DRE_cFv.s"
}
#pragma pop


/* 805CA6C0-805CA780 00C0+00 s=2 e=0 z=0  None .text      setBaseMtx__9daB_DRE_cFv                                     */
//	805CA6D8: 8000CD64 (transS__14mDoMtx_stack_cFRC4cXyz)
//	805CA6E0: 8000CF44 (ZXYrotM__14mDoMtx_stack_cFRC5csXyz)
//	805CA6E4: 805CAEB4 (lit_5006)
//	805CA6E8: 805CAEB4 (lit_5006)
//	805CA6F4: 8000CE38 (scaleM__14mDoMtx_stack_cFfff)
//	805CA700: 803DD470 (now__14mDoMtx_stack_c)
//	805CA704: 803DD470 (now__14mDoMtx_stack_c)
//	805CA70C: 803464B0 (PSMTXCopy)
//	805CA768: 800111EC (modelCalc__16mDoExt_McaMorfSOFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DRE_c::setBaseMtx() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/setBaseMtx__9daB_DRE_cFv.s"
}
#pragma pop


/* 805CA780-805CA924 01A4+00 s=1 e=0 z=0  None .text      daB_DRE_Draw__FP9daB_DRE_c                                   */
//	805CA790: 803621DC (_savegpr_29)
//	805CA798: 805CAD5C (lit_3844)
//	805CA79C: 805CAD5C (lit_3844)
//	805CA7B4: 8042CA54 (g_env_light)
//	805CA7B8: 8042CA54 (g_env_light)
//	805CA7C8: 801A37C4 (settingTevStruct__18dScnKy_env_light_cFiP4cXyzP12dKy_tevstr_c)
//	805CA7CC: 8042CA54 (g_env_light)
//	805CA7D0: 8042CA54 (g_env_light)
//	805CA7DC: 801A4DA0 (setLightTevColorType_MAJI__18dScnKy_env_light_cFP12J3DModelDataP12dKy_tevstr_c)
//	805CA7FC: 8000D7A8 (entry__13mDoExt_brkAnmFP16J3DMaterialTablef)
//	805CA83C: 800111C0 (entryDL__16mDoExt_McaMorfSOFv)
//	805CA85C: 8032F880 (removeTevRegAnimator__16J3DMaterialTableFP15J3DAnmTevRegKey)
//	805CA8C0: 804248D0 (mSimpleTexObj__21dDlst_shadowControl_c)
//	805CA8C4: 804248D0 (mSimpleTexObj__21dDlst_shadowControl_c)
//	805CA8C8: 8002E910 (dComIfGd_setShadow__FUlScP8J3DModelP4cXyzffffR13cBgS_PolyInfoP12dKy_tevstr_csfP9_GXTexObj)
//	805CA8EC: 80450BE5 (struct_80450BE4)
//	805CA8F0: 80450BE5 (struct_80450BE4)
//	805CA8F4: 80008078 (onBlure__13mDoGph_gInf_cFv)
//	805CA900: 80450BE4 (struct_80450BE4)
//	805CA904: 80450BE4 (struct_80450BE4)
//	805CA910: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daB_DRE_c* False
// 	 daB_DRE_c False
asm static void daB_DRE_Draw(daB_DRE_c* param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/daB_DRE_Draw__FP9daB_DRE_c.s"
}
#pragma pop


/* 805CA924-805CA944 0020+00 s=2 e=0 z=0  None .text      daB_DRE_Execute__FP9daB_DRE_c                                */
//	805CA930: 805CA158 (Execute__9daB_DRE_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  daB_DRE_c* False
// 	 daB_DRE_c False
asm static void daB_DRE_Execute(daB_DRE_c* param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/daB_DRE_Execute__FP9daB_DRE_c.s"
}
#pragma pop


/* 805CA944-805CAC3C 02F8+00 s=1 e=0 z=0  None .text      create__9daB_DRE_cFv                                         */
//	805CA954: 803621D8 (_savegpr_28)
//	805CA95C: 805CAD5C (lit_3844)
//	805CA960: 805CAD5C (lit_3844)
//	805CA97C: 80018B64 (__ct__10fopAc_ac_cFv)
//	805CA984: 802C0F64 (__ct__15Z2CreatureEnemyFv)
//	805CA98C: 80075EAC (__ct__12dBgS_AcchCirFv)
//	805CA998: 800760A0 (__ct__9dBgS_AcchFv)
//	805CA99C: 805CB004 (__vt__12dBgS_ObjAcch)
//	805CA9A0: 805CB004 (__vt__12dBgS_ObjAcch)
//	805CA9BC: 80078E68 (SetObj__16dBgS_PolyPassChkFv)
//	805CA9D0: 805CAECC (stringBase0)
//	805CA9D4: 805CAECC (stringBase0)
//	805CA9D8: 8002CEBC (dComIfG_resLoad__FP30request_of_phase_process_classPCc)
//	805CA9F4: 805C7B2C (useHeapInit__FP10fopAc_ac_c)
//	805CA9F8: 805C7B2C (useHeapInit__FP10fopAc_ac_c)
//	805CAA04: 8001A4B0 (fopAcM_entrySolidHeap__FP10fopAc_ac_cPFP10fopAc_ac_c_iUl)
//	805CAA34: 80075F58 (SetWall__12dBgS_AcchCirFff)
//	805CAA60: 80076248 (Set__9dBgS_AcchFP4cXyzP4cXyzP10fopAc_ac_ciP12dBgS_AcchCirP4cXyzP5csXyzP5csXyz)
//	805CAA78: 802C1094 (init__15Z2CreatureEnemyFP3VecP3VecUcUc)
//	805CAA8C: 8001A528 (fopAcM_SetMin__FP10fopAc_ac_cfff)
//	805CAAA0: 8001A538 (fopAcM_SetMax__FP10fopAc_ac_cfff)
//	805CAAC8: 805CA6C0 (setBaseMtx__9daB_DRE_cFv)
//	805CAACC: 80181640 (dCam_getBody__Fv)
//	805CAAD8: 805CAECC (stringBase0)
//	805CAADC: 805CAECC (stringBase0)
//	805CAAE0: 802C1B90 (setEnemyName__15Z2CreatureEnemyFPCc)
//	805CAB28: 80181E98 (Center__9dCamera_cFv)
//	805CAB64: 80181E64 (Eye__9dCamera_cFv)
//	805CAC1C: 805CA924 (daB_DRE_Execute__FP9daB_DRE_c)
//	805CAC28: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daB_DRE_c::create() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/create__9daB_DRE_cFv.s"
}
#pragma pop


/* 805CAC3C-805CACAC 0070+00 s=3 e=0 z=0  None .text      __dt__12dBgS_ObjAcchFv                                       */
//	805CAC5C: 805CB004 (__vt__12dBgS_ObjAcch)
//	805CAC60: 805CB004 (__vt__12dBgS_ObjAcch)
//	805CAC7C: 80075F94 (__dt__9dBgS_AcchFv)
//	805CAC8C: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dBgS_ObjAcch::~dBgS_ObjAcch() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/__dt__12dBgS_ObjAcchFv.s"
}
#pragma pop


/* 805CACAC-805CACB4 0008+00 s=1 e=0 z=0  None .text      daB_DRE_IsDelete__FP9daB_DRE_c                               */
// True False
//  bool False
//  daB_DRE_c* False
// 	 daB_DRE_c False
static bool daB_DRE_IsDelete(daB_DRE_c* param_0) {
	return true;
}


/* 805CACB4-805CAD1C 0068+00 s=0 e=1 z=0  None .text      __sinit_d_a_b_dre_cpp                                        */
//	805CACC4: 805CB040 (lit_1109)
//	805CACC8: 805CB040 (lit_1109)
//	805CACD0: 805C7FCC (__dt__4cXyzFv)
//	805CACD4: 805C7FCC (__dt__4cXyzFv)
//	805CACDC: 805C7AB8 (__register_global_object)
//	805CACE4: 805C7FCC (__dt__4cXyzFv)
//	805CACE8: 805C7FCC (__dt__4cXyzFv)
//	805CACF0: 805C7AB8 (__register_global_object)
//	805CACF8: 805C7FCC (__dt__4cXyzFv)
//	805CACFC: 805C7FCC (__dt__4cXyzFv)
//	805CAD04: 805C7AB8 (__register_global_object)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void __sinit_d_a_b_dre_cpp() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/__sinit_d_a_b_dre_cpp.s"
}
#pragma pop

#pragma push
#pragma force_active on
#pragma section ".ctors$15"
__declspec(section ".ctors$15") void* const _ctors_805CACB4 = (void*)__sinit_d_a_b_dre_cpp;
#pragma pop


/* 805CAD1C-805CAD24 0008+00 s=1 e=0 z=0  None .text      @36@__dt__12dBgS_ObjAcchFv                                   */
//	805CAD20: 805CAC3C (__dt__12dBgS_ObjAcchFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_805CAD1C() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/func_805CAD1C.s"
}
#pragma pop


/* 805CAD24-805CAD2C 0008+00 s=1 e=0 z=0  None .text      @20@__dt__12dBgS_ObjAcchFv                                   */
//	805CAD28: 805CAC3C (__dt__12dBgS_ObjAcchFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_805CAD24() {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/func_805CAD24.s"
}
#pragma pop


/* 805CAD2C-805CAD48 001C+00 s=1 e=0 z=0  None .text      setCurrentPos__16obj_ystone_classF4cXyz                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cXyz False
asm void obj_ystone_class::setCurrentPos(cXyz param_0) {
	nofralloc
#include "asm/rel/d/a/b/d_a_b_dre/d_a_b_dre/setCurrentPos__16obj_ystone_classF4cXyz.s"
}
#pragma pop


/* ############################################################################################## */
/* 805CB0D8-805CB0DC 0004+00 s=0 e=0 z=0  None .bss       sInstance__40JASGlobalInstance<19JASDefaultBankTable>        */
u8 data_805CB0D8[4];

/* 805CB0DC-805CB0E0 0004+00 s=0 e=0 z=0  None .bss       sInstance__35JASGlobalInstance<14JASAudioThread>             */
u8 data_805CB0DC[4];

/* 805CB0E0-805CB0E4 0004+00 s=0 e=0 z=0  None .bss       sInstance__27JASGlobalInstance<7Z2SeMgr>                     */
u8 data_805CB0E0[4];

/* 805CB0E4-805CB0E8 0004+00 s=0 e=0 z=0  None .bss       sInstance__28JASGlobalInstance<8Z2SeqMgr>                    */
u8 data_805CB0E4[4];

/* 805CB0E8-805CB0EC 0004+00 s=0 e=0 z=0  None .bss       sInstance__31JASGlobalInstance<10Z2SceneMgr>                 */
u8 data_805CB0E8[4];

/* 805CB0EC-805CB0F0 0004+00 s=0 e=0 z=0  None .bss       sInstance__32JASGlobalInstance<11Z2StatusMgr>                */
u8 data_805CB0EC[4];

/* 805CB0F0-805CB0F4 0004+00 s=0 e=0 z=0  None .bss       sInstance__31JASGlobalInstance<10Z2DebugSys>                 */
u8 data_805CB0F0[4];

/* 805CB0F4-805CB0F8 0004+00 s=0 e=0 z=0  None .bss       sInstance__36JASGlobalInstance<15JAISoundStarter>            */
u8 data_805CB0F4[4];

/* 805CB0F8-805CB0FC 0004+00 s=0 e=0 z=0  None .bss       sInstance__35JASGlobalInstance<14Z2SoundStarter>             */
u8 data_805CB0F8[4];

/* 805CB0FC-805CB100 0004+00 s=0 e=0 z=0  None .bss       sInstance__33JASGlobalInstance<12Z2SpeechMgr2>               */
u8 data_805CB0FC[4];

/* 805CB100-805CB104 0004+00 s=0 e=0 z=0  None .bss       sInstance__28JASGlobalInstance<8JAISeMgr>                    */
u8 data_805CB100[4];

/* 805CB104-805CB108 0004+00 s=0 e=0 z=0  None .bss       sInstance__29JASGlobalInstance<9JAISeqMgr>                   */
u8 data_805CB104[4];

/* 805CB108-805CB10C 0004+00 s=0 e=0 z=0  None .bss       sInstance__33JASGlobalInstance<12JAIStreamMgr>               */
u8 data_805CB108[4];

/* 805CB10C-805CB110 0004+00 s=0 e=0 z=0  None .bss       sInstance__31JASGlobalInstance<10Z2SoundMgr>                 */
u8 data_805CB10C[4];

/* 805CB110-805CB114 0004+00 s=0 e=0 z=0  None .bss       sInstance__33JASGlobalInstance<12JAISoundInfo>               */
u8 data_805CB110[4];

/* 805CB114-805CB118 0004+00 s=0 e=0 z=0  None .bss       sInstance__34JASGlobalInstance<13JAUSoundTable>              */
u8 data_805CB114[4];

/* 805CB118-805CB11C 0004+00 s=0 e=0 z=0  None .bss       sInstance__38JASGlobalInstance<17JAUSoundNameTable>          */
u8 data_805CB118[4];

/* 805CB11C-805CB120 0004+00 s=0 e=0 z=0  None .bss       sInstance__33JASGlobalInstance<12JAUSoundInfo>               */
u8 data_805CB11C[4];

/* 805CB120-805CB124 0004+00 s=0 e=0 z=0  None .bss       sInstance__32JASGlobalInstance<11Z2SoundInfo>                */
u8 data_805CB120[4];

/* 805CB124-805CB128 0004+00 s=0 e=0 z=0  None .bss       sInstance__34JASGlobalInstance<13Z2SoundObjMgr>              */
u8 data_805CB124[4];

/* 805CB128-805CB12C 0004+00 s=0 e=0 z=0  None .bss       sInstance__31JASGlobalInstance<10Z2Audience>                 */
u8 data_805CB128[4];

/* 805CB12C-805CB130 0004+00 s=0 e=0 z=0  None .bss       sInstance__32JASGlobalInstance<11Z2FxLineMgr>                */
u8 data_805CB12C[4];

/* 805CB130-805CB134 0004+00 s=0 e=0 z=0  None .bss       sInstance__31JASGlobalInstance<10Z2EnvSeMgr>                 */
u8 data_805CB130[4];

/* 805CB134-805CB138 0004+00 s=0 e=0 z=0  None .bss       sInstance__32JASGlobalInstance<11Z2SpeechMgr>                */
u8 data_805CB134[4];

/* 805CB138-805CB13C 0004+00 s=0 e=0 z=0  None .bss       sInstance__34JASGlobalInstance<13Z2WolfHowlMgr>              */
u8 data_805CB138[4];

