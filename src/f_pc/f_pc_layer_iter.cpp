//
// Generated By: dol2asm
// Translation Unit: f_pc/f_pc_layer_iter
//

#include "f_pc/f_pc_layer_iter.h"
#include "dol2asm.h"
#include "dolphin/types.h"

//
// Types:
//

struct node_lists_tree_class {};

struct node_class {};

struct method_filter {};

struct layer_class {};

struct judge_filter {};

struct create_tag_class {};

//
// Forward References:
//

void fpcLyIt_OnlyHere(layer_class*, int (*)(void*, void*), void*);
void fpcLyIt_OnlyHereLY(layer_class*, int (*)(void*, void*), void*);
void fpcLyIt_Judge(layer_class*, void* (*)(void*, void*), void*);
void fpcLyIt_AllJudge(void* (*)(void*, void*), void*);

extern "C" void fpcLyIt_OnlyHere__FP11layer_classPFPvPv_iPv();
extern "C" void fpcLyIt_OnlyHereLY__FP11layer_classPFPvPv_iPv();
extern "C" void fpcLyIt_Judge__FP11layer_classPFPvPv_PvPv();
extern "C" void fpcLyIt_AllJudge__FPFPvPv_PvPv();

//
// External References:
//

void fpcLy_RootLayer();
void fpcLy_SetCurrentLayer(layer_class*);
void fpcLy_CurrentLayer();
void cTrIt_Method(node_lists_tree_class*, int (*)(node_class*, void*), void*);
void cTrIt_Judge(node_lists_tree_class*, void* (*)(node_class*, void*), void*);
void cTgIt_MethodCall(create_tag_class*, method_filter*);
void cTgIt_JudgeFilter(create_tag_class*, judge_filter*);

extern "C" void fpcLy_RootLayer__Fv();
extern "C" void fpcLy_SetCurrentLayer__FP11layer_class();
extern "C" void fpcLy_CurrentLayer__Fv();
extern "C" void cTrIt_Method__FP21node_lists_tree_classPFP10node_classPv_iPv();
extern "C" void cTrIt_Judge__FP21node_lists_tree_classPFP10node_classPv_PvPv();
extern "C" void cTgIt_MethodCall__FP16create_tag_classP13method_filter();
extern "C" void cTgIt_JudgeFilter__FP16create_tag_classP12judge_filter();
extern "C" void _savegpr_28();
extern "C" void _restgpr_28();

//
// Declarations:
//

/* 80021B88-80021BC0 0038+00 s=1 e=4 z=0  None .text fpcLyIt_OnlyHere__FP11layer_classPFPvPv_iPv
 */
//	80021B9C: 80266A7C (cTgIt_MethodCall__FP16create_tag_classP13method_filter)
//	80021BA0: 80266A7C (cTgIt_MethodCall__FP16create_tag_classP13method_filter)
//	80021BAC: 80266540 (cTrIt_Method__FP21node_lists_tree_classPFP10node_classPv_iPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void fpcLyIt_OnlyHere(layer_class* param_0, int (*)(void*, void*), void* param_2) {
    nofralloc
#include "asm/f_pc/f_pc_layer_iter/fpcLyIt_OnlyHere__FP11layer_classPFPvPv_iPv.s"
}
#pragma pop

/* 80021BC0-80021C28 0068+00 s=0 e=1 z=0  None .text fpcLyIt_OnlyHereLY__FP11layer_classPFPvPv_iPv
 */
//	80021BD0: 803621D8 (_savegpr_28)
//	80021BE0: 800216F4 (fpcLy_CurrentLayer__Fv)
//	80021BEC: 800216EC (fpcLy_SetCurrentLayer__FP11layer_class)
//	80021BFC: 80021B88 (fpcLyIt_OnlyHere__FP11layer_classPFPvPv_iPv)
//	80021C08: 800216EC (fpcLy_SetCurrentLayer__FP11layer_class)
//	80021C14: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void fpcLyIt_OnlyHereLY(layer_class* param_0, int (*)(void*, void*), void* param_2) {
    nofralloc
#include "asm/f_pc/f_pc_layer_iter/fpcLyIt_OnlyHereLY__FP11layer_classPFPvPv_iPv.s"
}
#pragma pop

/* 80021C28-80021C60 0038+00 s=0 e=3 z=0  None .text      fpcLyIt_Judge__FP11layer_classPFPvPv_PvPv
 */
//	80021C3C: 80266AB0 (cTgIt_JudgeFilter__FP16create_tag_classP12judge_filter)
//	80021C40: 80266AB0 (cTgIt_JudgeFilter__FP16create_tag_classP12judge_filter)
//	80021C4C: 802665B4 (cTrIt_Judge__FP21node_lists_tree_classPFP10node_classPv_PvPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void fpcLyIt_Judge(layer_class* param_0, void* (*)(void*, void*), void* param_2) {
    nofralloc
#include "asm/f_pc/f_pc_layer_iter/fpcLyIt_Judge__FP11layer_classPFPvPv_PvPv.s"
}
#pragma pop

/* 80021C60-80021CD4 0074+00 s=0 e=1 z=4  None .text      fpcLyIt_AllJudge__FPFPvPv_PvPv */
//	80021C7C: 800216DC (fpcLy_RootLayer__Fv)
//	80021C84: 80266AB0 (cTgIt_JudgeFilter__FP16create_tag_classP12judge_filter)
//	80021C88: 80266AB0 (cTgIt_JudgeFilter__FP16create_tag_classP12judge_filter)
//	80021C9C: 802665B4 (cTrIt_Judge__FP21node_lists_tree_classPFP10node_classPv_PvPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void fpcLyIt_AllJudge(void* (*)(void*, void*), void* param_1) {
    nofralloc
#include "asm/f_pc/f_pc_layer_iter/fpcLyIt_AllJudge__FPFPvPv_PvPv.s"
}
#pragma pop
