/* f_op_scene_req.cpp autogenerated by split.py v0.4 at 2021-03-20 21:43:05.095943 */

#include "f/f_op/f_op_scene_req.h"
#include "f/f_op/f_op_overlap_mng.h"
#include "f/f_pc/f_pc_executor.h"
#include "global.h"

// additional symbols needed for f_op_scene_req.cpp
// autogenerated by split.py v0.4 at 2021-03-20 21:43:05.095971
extern "C" {
void cPhs_Set__FP30request_of_phase_process_classPPFPv_i(void);
void fpcNdRq_Delete__FP19node_create_request(void);
void fopScnRq_FadeRequest__FsUs(void);
void fpcNdRq_Request__FUliP18process_node_classsPvP32node_create_request_method_class(void);
}

// additional symbols needed for f_op_scene_req.cpp
// autogenerated by split.py v0.4 at 2021-03-20 21:43:05.095976
extern node_create_request_method_class* submethod[4];
extern request_of_phase_process_class* noFadeFase[8];
extern request_of_phase_process_class* fadeFase[8];
extern int l_fopScnRq_IsUsingOfOverlap;

scene_request_class* fopScnRq_phase_ClearOverlap(scene_request_class* pScnRq) {
    pScnRq = 0;

    if (fopOvlpM_ClearOfReq() == 1) {
        pScnRq = (scene_request_class*)2;
        return pScnRq;
    }

    return pScnRq;
}

void fopScnRq_phase_Execute(scene_request_class* pScnRq) {
    fpcNdRq_Execute((node_create_request*)pScnRq);
}

scene_request_class* fopScnRq_phase_IsDoingOverlap(scene_request_class* pScnRq) {
    pScnRq = 0;

    if (fopOvlpM_IsDoingReq() == 1) {
        pScnRq = (scene_request_class*)2;
        return pScnRq;
    }

    return pScnRq;
}

scene_request_class* fopScnRq_phase_IsDoneOverlap(scene_request_class* pScnRq) {
    pScnRq = 0;

    if (fopOvlpM_IsDone() == 1) {
        pScnRq = (scene_request_class*)2;
        return pScnRq;
    }

    return pScnRq;
}

int fopScnRq_phase_Done(scene_request_class* pScnRq) {
    if (pScnRq->mCrtReq.mParameter != 1) {
        fopScnPause_Disable((scene_class*)fpcEx_SearchByID(pScnRq->mCrtReq.mCreatingID));
    }
    l_fopScnRq_IsUsingOfOverlap = 0;
    return 2;
}

void fopScnRq_Execute(scene_request_class* pScnRq) {
    int tmp = cPhs_Do(&pScnRq->mReqPhsProcCls, pScnRq);
    switch (tmp) {
    case 2: {
        fopScnRq_Execute(pScnRq);
    }
    }
}

int fopScnRq_PostMethod(void* param_1, scene_request_class* pScnRq) {
    if (pScnRq->mFadeRequest) {
        fopScnPause_Enable((scene_class*)param_1);
        fopOvlpM_ToldAboutID(((scene_class*)param_1)->field_0x04);
    }
    return 1;
}

int fopScnRq_Cancel(scene_request_class* pScnRq) {
    if (pScnRq->mFadeRequest && !fopOvlpM_Cancel()) {
        return 0;
    }

    return 1;
}

scene_request_class* fopScnRq_FadeRequest(s16 param_1, u16 param_2) {
    request_base_class* tmp = 0;

    if (l_fopScnRq_IsUsingOfOverlap == 0 && (tmp = fopOvlpM_Request(param_1, param_2), tmp != 0)) {
        l_fopScnRq_IsUsingOfOverlap = 1;
    }

    return (scene_request_class*)tmp;
}

#ifdef NON_MATCHING
s32 fopScnRq_Request(int param_1, scene_class* param_2, s16 param_3, void* param_4, s16 param_5,
                     u16 param_6) {
    s32 ret;
    request_of_phase_process_class** phase_handler_table;
    phase_handler_table = noFadeFase;
    int tmp = 0;
    scene_request_class* pScnReq = (scene_request_class*)fpcNdRq_Request(
        0x74, param_1, (process_node_class*)param_2, param_3, param_4, submethod[0]);

    if (!pScnReq) {
        ret = -1;
    } else {
        if (param_5 != 0x7fff) {
            phase_handler_table = fadeFase;
            tmp = (int)fopScnRq_FadeRequest(param_5, param_6);
            if (!tmp) {
                fpcNdRq_Delete((node_create_request*)pScnReq);
                return -1;
            }
        }
        pScnReq->mFadeRequest = tmp;
        cPhs_Set(&pScnReq->mReqPhsProcCls, (cPhs__Handler*)phase_handler_table);
        ret = pScnReq->mCrtReq.mRequestId;
    }

    return ret;
}
#else
asm s32 fopScnRq_Request(int, scene_class*, s16, void*, s16, u16) {
    nofralloc
#include "f/f_op/f_op_scene_req/asm/func_8001F034.s"
}
#endif

s32 fopScnRq_ReRequest(unsigned int param_1, s16 param_2, void* param_3) {
    return fpcNdRq_ReRequest(param_1, param_2, param_3);
}

void fopScnRq_Handler(void) {
    fpcNdRq_Handler();
}