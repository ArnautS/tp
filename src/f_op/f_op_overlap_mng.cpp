//
// Generated By: dol2asm
// Translation Unit: f_op/f_op_overlap_mng
//

#include "f_op/f_op_overlap_mng.h"
#include "dol2asm.h"
#include "dolphin/types.h"

//
// Types:
//

struct scene_class {};

struct request_base_class {};

struct overlap_task_class {};

struct overlap_request_class {};

//
// Forward References:
//

extern "C" void fopOvlpM_SceneIsStop__Fv();
extern "C" void fopOvlpM_SceneIsStart__Fv();
extern "C" void fopOvlpM_IsOutReq__FP18overlap_task_class();
extern "C" void fopOvlpM_Done__FP18overlap_task_class();
extern "C" void fopOvlpM_ToldAboutID__FUi();
extern "C" void fopOvlpM_IsPeek__Fv();
extern "C" void fopOvlpM_IsDone__Fv();
extern "C" void fopOvlpM_IsDoingReq__Fv();
extern "C" void fopOvlpM_ClearOfReq__Fv();
extern "C" void fopOvlpM_Request__FsUs();
extern "C" void fopOvlpM_Management__Fv();
extern "C" void fopOvlpM_Cancel__Fv();
extern "C" void fopOvlpM_Init__Fv();

//
// External References:
//

extern "C" void fopOvlpReq_Request__FP21overlap_request_classsUs();
extern "C" void fopOvlpReq_Handler__FP21overlap_request_class();
extern "C" void fopOvlpReq_Cancel__FP21overlap_request_class();
extern "C" void fopOvlpReq_OverlapClr__FP21overlap_request_class();
extern "C" void fopScnPause_Enable__FP11scene_class();
extern "C" void fopScnPause_Disable__FP11scene_class();
extern "C" void fpcEx_SearchByID__FUi();
extern "C" void cReq_Is_Done__FP18request_base_class();
extern "C" void cReq_Done__FP18request_base_class();

//
// Declarations:
//

/* ############################################################################################## */
/* 804505B0-804505B8 000030 0004+04 10/10 0/0 0/0 .sdata           l_fopOvlpM_overlap */
SECTION_SDATA static u8 l_fopOvlpM_overlap[4 + 4 /* padding */] = {
    0x00,
    0x00,
    0x00,
    0x00,
    /* padding */
    0x00,
    0x00,
    0x00,
    0x00,
};

/* 8001E484-8001E4C4 018DC4 0040+00 0/0 1/1 0/0 .text            fopOvlpM_SceneIsStop__Fv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void fopOvlpM_SceneIsStop() {
    nofralloc
#include "asm/f_op/f_op_overlap_mng/fopOvlpM_SceneIsStop__Fv.s"
}
#pragma pop

/* 8001E4C4-8001E504 018E04 0040+00 0/0 5/5 0/0 .text            fopOvlpM_SceneIsStart__Fv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void fopOvlpM_SceneIsStart() {
    nofralloc
#include "asm/f_op/f_op_overlap_mng/fopOvlpM_SceneIsStart__Fv.s"
}
#pragma pop

/* 8001E504-8001E51C 018E44 0018+00 0/0 3/3 0/0 .text fopOvlpM_IsOutReq__FP18overlap_task_class */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void fopOvlpM_IsOutReq(overlap_task_class* param_0) {
    nofralloc
#include "asm/f_op/f_op_overlap_mng/fopOvlpM_IsOutReq__FP18overlap_task_class.s"
}
#pragma pop

/* 8001E51C-8001E540 018E5C 0024+00 0/0 6/6 0/0 .text fopOvlpM_Done__FP18overlap_task_class */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void fopOvlpM_Done(overlap_task_class* param_0) {
    nofralloc
#include "asm/f_op/f_op_overlap_mng/fopOvlpM_Done__FP18overlap_task_class.s"
}
#pragma pop

/* 8001E540-8001E558 018E80 0018+00 0/0 1/1 0/0 .text            fopOvlpM_ToldAboutID__FUi */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void fopOvlpM_ToldAboutID(unsigned int param_0) {
    nofralloc
#include "asm/f_op/f_op_overlap_mng/fopOvlpM_ToldAboutID__FUi.s"
}
#pragma pop

/* 8001E558-8001E574 018E98 001C+00 0/0 6/6 7/7 .text            fopOvlpM_IsPeek__Fv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void fopOvlpM_IsPeek() {
    nofralloc
#include "asm/f_op/f_op_overlap_mng/fopOvlpM_IsPeek__Fv.s"
}
#pragma pop

/* 8001E574-8001E5A8 018EB4 0034+00 0/0 1/1 0/0 .text            fopOvlpM_IsDone__Fv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void fopOvlpM_IsDone() {
    nofralloc
#include "asm/f_op/f_op_overlap_mng/fopOvlpM_IsDone__Fv.s"
}
#pragma pop

/* 8001E5A8-8001E5D0 018EE8 0028+00 0/0 3/3 1/1 .text            fopOvlpM_IsDoingReq__Fv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void fopOvlpM_IsDoingReq() {
    nofralloc
#include "asm/f_op/f_op_overlap_mng/fopOvlpM_IsDoingReq__Fv.s"
}
#pragma pop

/* 8001E5D0-8001E604 018F10 0034+00 0/0 1/1 0/0 .text            fopOvlpM_ClearOfReq__Fv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void fopOvlpM_ClearOfReq() {
    nofralloc
#include "asm/f_op/f_op_overlap_mng/fopOvlpM_ClearOfReq__Fv.s"
}
#pragma pop

/* ############################################################################################## */
/* 803F1DE8-803F1E10 01EB08 0028+00 1/1 0/0 0/0 .bss             l_fopOvlpM_Request */
static u8 l_fopOvlpM_Request[40];

/* 8001E604-8001E650 018F44 004C+00 0/0 1/1 0/0 .text            fopOvlpM_Request__FsUs */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void fopOvlpM_Request(s16 param_0, u16 param_1) {
    nofralloc
#include "asm/f_op/f_op_overlap_mng/fopOvlpM_Request__FsUs.s"
}
#pragma pop

/* 8001E650-8001E698 018F90 0048+00 0/0 1/1 0/0 .text            fopOvlpM_Management__Fv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void fopOvlpM_Management() {
    nofralloc
#include "asm/f_op/f_op_overlap_mng/fopOvlpM_Management__Fv.s"
}
#pragma pop

/* 8001E698-8001E6E8 018FD8 0050+00 0/0 1/1 0/0 .text            fopOvlpM_Cancel__Fv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void fopOvlpM_Cancel() {
    nofralloc
#include "asm/f_op/f_op_overlap_mng/fopOvlpM_Cancel__Fv.s"
}
#pragma pop

/* 8001E6E8-8001E6EC 019028 0004+00 0/0 1/1 0/0 .text            fopOvlpM_Init__Fv */
void fopOvlpM_Init() {
    /* empty function */
}
