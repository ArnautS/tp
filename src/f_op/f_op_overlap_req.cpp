// 
// Generated By: dol2asm
// Translation Unit: f_op/f_op_overlap_req
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "f_op/f_op_overlap_req.h"

// 
// Types:
// 

struct request_of_phase_process_class {
};

struct request_base_class {
};

struct overlap_request_class {
};

struct layer_class {
};

// 
// Forward References:
// 

// True False
//  overlap_request_class* False
// 	 overlap_request_class False
static void fopOvlpReq_phase_Done(overlap_request_class*);
// True False
//  overlap_request_class* False
// 	 overlap_request_class False
static void fopOvlpReq_phase_IsDone(overlap_request_class*);
// True False
//  overlap_request_class* False
// 	 overlap_request_class False
static void fopOvlpReq_phase_IsWaitOfFadeout(overlap_request_class*);
// True False
//  overlap_request_class* False
// 	 overlap_request_class False
static void fopOvlpReq_phase_WaitOfFadeout(overlap_request_class*);
// True False
//  overlap_request_class* False
// 	 overlap_request_class False
static void fopOvlpReq_phase_IsComplete(overlap_request_class*);
// True False
//  overlap_request_class* False
// 	 overlap_request_class False
static void fopOvlpReq_phase_IsCreated(overlap_request_class*);
// True False
//  overlap_request_class* False
// 	 overlap_request_class False
static void fopOvlpReq_phase_Create(overlap_request_class*);
// False False
//  overlap_request_class* False
// 	 overlap_request_class False
//  s16 False
//  u16 False
void fopOvlpReq_Request(overlap_request_class*, s16, u16);
// False False
//  overlap_request_class* False
// 	 overlap_request_class False
void fopOvlpReq_Handler(overlap_request_class*);
// False False
//  overlap_request_class* False
// 	 overlap_request_class False
void fopOvlpReq_Cancel(overlap_request_class*);
// True False
//  overlap_request_class* False
// 	 overlap_request_class False
static void fopOvlpReq_Is_PeektimeLimit(overlap_request_class*);
// True False
//  overlap_request_class* False
// 	 overlap_request_class False
//  u16 False
static void fopOvlpReq_SetPeektime(overlap_request_class*, u16);
// False False
//  overlap_request_class* False
// 	 overlap_request_class False
void fopOvlpReq_OverlapClr(overlap_request_class*);

// True False
//  overlap_request_class* False
// 	 overlap_request_class False
extern "C" static void fopOvlpReq_phase_Done__FP21overlap_request_class();
// True False
//  overlap_request_class* False
// 	 overlap_request_class False
extern "C" static void fopOvlpReq_phase_IsDone__FP21overlap_request_class();
// True False
//  overlap_request_class* False
// 	 overlap_request_class False
extern "C" static void fopOvlpReq_phase_IsWaitOfFadeout__FP21overlap_request_class();
// True False
//  overlap_request_class* False
// 	 overlap_request_class False
extern "C" static void fopOvlpReq_phase_WaitOfFadeout__FP21overlap_request_class();
// True False
//  overlap_request_class* False
// 	 overlap_request_class False
extern "C" static void fopOvlpReq_phase_IsComplete__FP21overlap_request_class();
// True False
//  overlap_request_class* False
// 	 overlap_request_class False
extern "C" static void fopOvlpReq_phase_IsCreated__FP21overlap_request_class();
// True False
//  overlap_request_class* False
// 	 overlap_request_class False
extern "C" static void fopOvlpReq_phase_Create__FP21overlap_request_class();
// False False
//  overlap_request_class* False
// 	 overlap_request_class False
//  s16 False
//  u16 False
extern "C" void fopOvlpReq_Request__FP21overlap_request_classsUs();
// False False
//  overlap_request_class* False
// 	 overlap_request_class False
extern "C" void fopOvlpReq_Handler__FP21overlap_request_class();
// False False
//  overlap_request_class* False
// 	 overlap_request_class False
extern "C" void fopOvlpReq_Cancel__FP21overlap_request_class();
// True False
//  overlap_request_class* False
// 	 overlap_request_class False
extern "C" static void fopOvlpReq_Is_PeektimeLimit__FP21overlap_request_class();
// True False
//  overlap_request_class* False
// 	 overlap_request_class False
//  u16 False
extern "C" static void fopOvlpReq_SetPeektime__FP21overlap_request_classUs();
// False False
//  overlap_request_class* False
// 	 overlap_request_class False
extern "C" void fopOvlpReq_OverlapClr__FP21overlap_request_class();

// 
// External References:
// 

// False False
//  unsigned int False
void fpcEx_SearchByID(unsigned int);
// False False
void fpcLy_RootLayer();
// False False
//  layer_class* False
// 	 layer_class False
void fpcLy_SetCurrentLayer(layer_class*);
// False False
void fpcLy_CurrentLayer();
// False False
//  void* False
// 	 void False
void fpcM_Delete(void*);
// False False
//  unsigned int False
void fpcM_IsCreating(unsigned int);
// False False
//  layer_class* False
// 	 layer_class False
//  s16 False
//  int (*)(void*, void*) False
// 	 * False
// 		  False
// 	 int False
// 	 void* False
// 		 void False
// 	 void* False
// 		 void False
//  void* False
// 	 void False
//  void* False
// 	 void False
void fpcSCtRq_Request(layer_class*, s16, int (*)(void*, void*), void*, void*);
// False False
//  request_of_phase_process_class* False
// 	 request_of_phase_process_class False
//  int (**)(void*) False
// 	 ** False
// 		 * False
// 			  False
// 	 int False
// 	 void* False
// 		 void False
void cPhs_Set(request_of_phase_process_class*, int (**)(void*));
// False False
//  request_of_phase_process_class* False
// 	 request_of_phase_process_class False
//  void* False
// 	 void False
void cPhs_Do(request_of_phase_process_class*, void*);
// False False
//  request_base_class* False
// 	 request_base_class False
void cReq_Is_Done(request_base_class*);
// False False
//  request_base_class* False
// 	 request_base_class False
void cReq_Done(request_base_class*);
// False False
//  request_base_class* False
// 	 request_base_class False
//  u8 False
void cReq_Command(request_base_class*, u8);
// False False
//  request_base_class* False
// 	 request_base_class False
//  u8 False
void cReq_Create(request_base_class*, u8);

// False False
//  unsigned int False
extern "C" void fpcEx_SearchByID__FUi();
// False False
extern "C" void fpcLy_RootLayer__Fv();
// False False
//  layer_class* False
// 	 layer_class False
extern "C" void fpcLy_SetCurrentLayer__FP11layer_class();
// False False
extern "C" void fpcLy_CurrentLayer__Fv();
// False False
//  void* False
// 	 void False
extern "C" void fpcM_Delete__FPv();
// False False
//  unsigned int False
extern "C" void fpcM_IsCreating__FUi();
// False False
//  layer_class* False
// 	 layer_class False
//  s16 False
//  int (*)(void*, void*) False
// 	 * False
// 		  False
// 	 int False
// 	 void* False
// 		 void False
// 	 void* False
// 		 void False
//  void* False
// 	 void False
//  void* False
// 	 void False
extern "C" void fpcSCtRq_Request__FP11layer_classsPFPvPv_iPvPv();
// False False
//  request_of_phase_process_class* False
// 	 request_of_phase_process_class False
//  int (**)(void*) False
// 	 ** False
// 		 * False
// 			  False
// 	 int False
// 	 void* False
// 		 void False
extern "C" void cPhs_Set__FP30request_of_phase_process_classPPFPv_i();
// False False
//  request_of_phase_process_class* False
// 	 request_of_phase_process_class False
//  void* False
// 	 void False
extern "C" void cPhs_Do__FP30request_of_phase_process_classPv();
// False False
//  request_base_class* False
// 	 request_base_class False
extern "C" void cReq_Is_Done__FP18request_base_class();
// False False
//  request_base_class* False
// 	 request_base_class False
extern "C" void cReq_Done__FP18request_base_class();
// False False
//  request_base_class* False
// 	 request_base_class False
//  u8 False
extern "C" void cReq_Command__FP18request_base_classUc();
// False False
//  request_base_class* False
// 	 request_base_class False
//  u8 False
extern "C" void cReq_Create__FP18request_base_classUc();
// False False
extern "C" void _savegpr_29();
// False False
extern "C" void _restgpr_29();

// 
// Declarations:
// 

/* 8001E6EC-8001E748 005C+00 s=2 e=0 z=0  None .text      fopOvlpReq_phase_Done__FP21overlap_request_class             */
//	8001E704: 80022118 (fpcM_Delete__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  overlap_request_class* False
// 	 overlap_request_class False
asm static void fopOvlpReq_phase_Done(overlap_request_class* param_0) {
	nofralloc
#include "asm/f_op/f_op_overlap_req/fopOvlpReq_phase_Done__FP21overlap_request_class.s"
}
#pragma pop


/* 8001E748-8001E794 004C+00 s=1 e=0 z=0  None .text      fopOvlpReq_phase_IsDone__FP21overlap_request_class           */
//	8001E75C: 80266800 (cReq_Done__FP18request_base_class)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  overlap_request_class* False
// 	 overlap_request_class False
asm static void fopOvlpReq_phase_IsDone(overlap_request_class* param_0) {
	nofralloc
#include "asm/f_op/f_op_overlap_req/fopOvlpReq_phase_IsDone__FP21overlap_request_class.s"
}
#pragma pop


/* 8001E794-8001E7E4 0050+00 s=1 e=0 z=0  None .text      fopOvlpReq_phase_IsWaitOfFadeout__FP21overlap_request_class  */
//	8001E7B0: 802667D4 (cReq_Is_Done__FP18request_base_class)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  overlap_request_class* False
// 	 overlap_request_class False
asm static void fopOvlpReq_phase_IsWaitOfFadeout(overlap_request_class* param_0) {
	nofralloc
#include "asm/f_op/f_op_overlap_req/fopOvlpReq_phase_IsWaitOfFadeout__FP21overlap_request_class.s"
}
#pragma pop


/* 8001E7E4-8001E854 0070+00 s=1 e=0 z=0  None .text      fopOvlpReq_phase_WaitOfFadeout__FP21overlap_request_class    */
//	8001E82C: 80266830 (cReq_Command__FP18request_base_classUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  overlap_request_class* False
// 	 overlap_request_class False
asm static void fopOvlpReq_phase_WaitOfFadeout(overlap_request_class* param_0) {
	nofralloc
#include "asm/f_op/f_op_overlap_req/fopOvlpReq_phase_WaitOfFadeout__FP21overlap_request_class.s"
}
#pragma pop


/* 8001E854-8001E8A4 0050+00 s=1 e=0 z=0  None .text      fopOvlpReq_phase_IsComplete__FP21overlap_request_class       */
//	8001E870: 802667D4 (cReq_Is_Done__FP18request_base_class)
//	8001E880: 80266800 (cReq_Done__FP18request_base_class)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  overlap_request_class* False
// 	 overlap_request_class False
asm static void fopOvlpReq_phase_IsComplete(overlap_request_class* param_0) {
	nofralloc
#include "asm/f_op/f_op_overlap_req/fopOvlpReq_phase_IsComplete__FP21overlap_request_class.s"
}
#pragma pop


/* 8001E8A4-8001E904 0060+00 s=1 e=0 z=0  None .text      fopOvlpReq_phase_IsCreated__FP21overlap_request_class        */
//	8001E8BC: 80022138 (fpcM_IsCreating__FUi)
//	8001E8CC: 80021358 (fpcEx_SearchByID__FUi)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  overlap_request_class* False
// 	 overlap_request_class False
asm static void fopOvlpReq_phase_IsCreated(overlap_request_class* param_0) {
	nofralloc
#include "asm/f_op/f_op_overlap_req/fopOvlpReq_phase_IsCreated__FP21overlap_request_class.s"
}
#pragma pop


/* 8001E904-8001E954 0050+00 s=1 e=0 z=0  None .text      fopOvlpReq_phase_Create__FP21overlap_request_class           */
//	8001E91C: 800216EC (fpcLy_SetCurrentLayer__FP11layer_class)
//	8001E920: 800216F4 (fpcLy_CurrentLayer__Fv)
//	8001E934: 80023D94 (fpcSCtRq_Request__FP11layer_classsPFPvPv_iPvPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  overlap_request_class* False
// 	 overlap_request_class False
asm static void fopOvlpReq_phase_Create(overlap_request_class* param_0) {
	nofralloc
#include "asm/f_op/f_op_overlap_req/fopOvlpReq_phase_Create__FP21overlap_request_class.s"
}
#pragma pop


/* ############################################################################################## */
/* 803A3890-803A38B0 0020+00 s=1 e=0 z=0  None .data      phaseMethod$2260                                             */
SECTION_DATA static void* phaseMethod[8] = {
	(void*)fopOvlpReq_phase_Create__FP21overlap_request_class,
	(void*)fopOvlpReq_phase_IsCreated__FP21overlap_request_class,
	(void*)fopOvlpReq_phase_IsComplete__FP21overlap_request_class,
	(void*)fopOvlpReq_phase_WaitOfFadeout__FP21overlap_request_class,
	(void*)fopOvlpReq_phase_IsWaitOfFadeout__FP21overlap_request_class,
	(void*)fopOvlpReq_phase_IsDone__FP21overlap_request_class,
	(void*)fopOvlpReq_phase_Done__FP21overlap_request_class,
	(void*)NULL,
};

/* 8001E954-8001E9F0 009C+00 s=0 e=1 z=0  None .text      fopOvlpReq_Request__FP21overlap_request_classsUs             */
//	8001E964: 803621DC (_savegpr_29)
//	8001E98C: 80266830 (cReq_Command__FP18request_base_classUc)
//	8001E998: 803A3890 (phaseMethod)
//	8001E99C: 803A3890 (phaseMethod)
//	8001E9A0: 80266630 (cPhs_Set__FP30request_of_phase_process_classPPFPv_i)
//	8001E9AC: 8001EAC4 (fopOvlpReq_SetPeektime__FP21overlap_request_classUs)
//	8001E9CC: 800216DC (fpcLy_RootLayer__Fv)
//	8001E9DC: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  overlap_request_class* False
// 	 overlap_request_class False
//  s16 False
//  u16 False
asm void fopOvlpReq_Request(overlap_request_class* param_0, s16 param_1, u16 param_2) {
	nofralloc
#include "asm/f_op/f_op_overlap_req/fopOvlpReq_Request__FP21overlap_request_classsUs.s"
}
#pragma pop


/* 8001E9F0-8001EA88 0098+00 s=0 e=1 z=0  None .text      fopOvlpReq_Handler__FP21overlap_request_class                */
//	8001EA0C: 802666D8 (cPhs_Do__FP30request_of_phase_process_classPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  overlap_request_class* False
// 	 overlap_request_class False
asm void fopOvlpReq_Handler(overlap_request_class* param_0) {
	nofralloc
#include "asm/f_op/f_op_overlap_req/fopOvlpReq_Handler__FP21overlap_request_class.s"
}
#pragma pop


/* 8001EA88-8001EAB4 002C+00 s=0 e=1 z=0  None .text      fopOvlpReq_Cancel__FP21overlap_request_class                 */
//	8001EA94: 8001E6EC (fopOvlpReq_phase_Done__FP21overlap_request_class)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  overlap_request_class* False
// 	 overlap_request_class False
asm void fopOvlpReq_Cancel(overlap_request_class* param_0) {
	nofralloc
#include "asm/f_op/f_op_overlap_req/fopOvlpReq_Cancel__FP21overlap_request_class.s"
}
#pragma pop


/* 8001EAB4-8001EAC4 0010+00 s=1 e=0 z=0  None .text      fopOvlpReq_Is_PeektimeLimit__FP21overlap_request_class       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  overlap_request_class* False
// 	 overlap_request_class False
asm static void fopOvlpReq_Is_PeektimeLimit(overlap_request_class* param_0) {
	nofralloc
#include "asm/f_op/f_op_overlap_req/fopOvlpReq_Is_PeektimeLimit__FP21overlap_request_class.s"
}
#pragma pop


/* 8001EAC4-8001EAD8 0014+00 s=1 e=0 z=0  None .text      fopOvlpReq_SetPeektime__FP21overlap_request_classUs          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  overlap_request_class* False
// 	 overlap_request_class False
//  u16 False
asm static void fopOvlpReq_SetPeektime(overlap_request_class* param_0, u16 param_1) {
	nofralloc
#include "asm/f_op/f_op_overlap_req/fopOvlpReq_SetPeektime__FP21overlap_request_classUs.s"
}
#pragma pop


/* 8001EAD8-8001EB34 005C+00 s=0 e=1 z=0  None .text      fopOvlpReq_OverlapClr__FP21overlap_request_class             */
//	8001EAFC: 8001EAB4 (fopOvlpReq_Is_PeektimeLimit__FP21overlap_request_class)
//	8001EB18: 80266850 (cReq_Create__FP18request_base_classUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  overlap_request_class* False
// 	 overlap_request_class False
asm void fopOvlpReq_OverlapClr(overlap_request_class* param_0) {
	nofralloc
#include "asm/f_op/f_op_overlap_req/fopOvlpReq_OverlapClr__FP21overlap_request_class.s"
}
#pragma pop


