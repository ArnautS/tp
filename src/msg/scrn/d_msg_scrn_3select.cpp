// 
// Generated By: dol2asm
// Translation Unit: msg/scrn/d_msg_scrn_3select
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "msg/scrn/d_msg_scrn_3select.h"

// 
// Types:
// 

struct J2DPane {
	/* 802F7100 */ // False False
void getBounds();
	/* 802F7FCC */ // False False
void animationTransform();
};

struct JKRArchive {
};

struct dSelect_cursor_c {
	/* 80194220 */ // False False
//  u8 False
//  f32 False
//  JKRArchive* False
// 	 JKRArchive False
dSelect_cursor_c(u8, f32, JKRArchive*);
	/* 801950F4 */ // False False
//  f32 False
//  f32 False
//  J2DPane* False
// 	 J2DPane False
//  bool False
void setPos(f32, f32, J2DPane*, bool);
	/* 801951B0 */ // False False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
void setParam(f32, f32, f32, f32, f32);
	/* 801952A0 */ // False False
//  f32 False
void setAlphaRate(f32);
};

struct dMsgScrn3Select_c {
	/* 802390B4 */ // False False
dMsgScrn3Select_c();
	/* 802398CC */ // True False
~dMsgScrn3Select_c();
	/* 80239C64 */ // False False
void isSelect();
	/* 80239C78 */ // False False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
void setString(char*, char*, char*);
	/* 80239D08 */ // False False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
void setRubyString(char*, char*, char*);
	/* 80239D98 */ // False False
//  f32 False
//  f32 False
void translate(f32, f32);
	/* 80239DD4 */ // False False
//  f32 False
//  f32 False
void draw(f32, f32);
	/* 8023A094 */ // False False
//  u8 False
//  u8 False
//  u8 False
//  f32 False
//  u8 False
void selAnimeInit(u8, u8, u8, f32, u8);
	/* 8023A398 */ // False False
//  u8 False
//  u8 False
//  bool False
void selAnimeMove(u8, u8, bool);
	/* 8023A680 */ // False False
void selAnimeEnd();
	/* 8023A934 */ // False False
void getTextBoxWidth();
	/* 8023A94C */ // False False
void getFontSize();
	/* 8023A95C */ // False False
void getRubyFontSize();
	/* 8023A97C */ // False False
void getCharSpace();
	/* 8023A98C */ // False False
void getRubyCharSpace();
	/* 8023A9AC */ // False False
//  int False
void getTextBoxGlobalPosX(int);
	/* 8023A9D8 */ // False False
//  int False
void getTextBoxGlobalPosY(int);
	/* 8023AA04 */ // True False
void open1Proc();
	/* 8023AAF4 */ // True False
void open2Proc();
	/* 8023AC14 */ // True False
void waitProc();
	/* 8023AC44 */ // True False
void selectProc();
	/* 8023AE68 */ // True False
void changeProc();
	/* 8023B148 */ // True False
void closeProc();
	/* 8023B228 */ // True False
void selectScale();
	/* 8023B4AC */ // True False
void selectTrans();
	/* 8023B870 */ // True False
//  int False
void selectAnimeTransform(int);
};

struct JKRFileLoader {
	/* 802D4270 */ // False False
//  char const* False
// 	 char const False
// 		 char False
//  JKRFileLoader* False
// 	 JKRFileLoader False
void getGlbResource(char const*, JKRFileLoader*);
};

struct JKRExpHeap {
};

struct J2DTextBox {
	/* 80300658 */ // False False
void getStringPtr() const;
	/* 8030074C */ // False False
//  s16 False
//  char const* False
// 	 char const False
// 		 char False
//  ... False
void setString(s16, char const*, ...);
};

struct J2DGrafContext {
};

struct J2DScreen {
	/* 802F8498 */ // False False
J2DScreen();
	/* 802F8648 */ // False False
//  char const* False
// 	 char const False
// 		 char False
//  u32 False
//  JKRArchive* False
// 	 JKRArchive False
void setPriority(char const*, u32, JKRArchive*);
	/* 802F8ED4 */ // False False
//  f32 False
//  f32 False
//  J2DGrafContext const* False
// 	 J2DGrafContext const False
// 		 J2DGrafContext False
void draw(f32, f32, J2DGrafContext const*);
	/* 802F9690 */ // False False
void animation();
};

struct J2DAnmLoaderDataBase {
	/* 80308A6C */ // False False
//  void const* False
// 	 void const False
// 		 void False
void load(void const*);
};

struct J2DAnmColorKey {
	/* 80239BE0 */ // False False
~J2DAnmColorKey();
};

struct CPaneMgrAlpha {
	/* 802555C8 */ // False False
void show();
	/* 80255608 */ // False False
void hide();
};

struct CPaneMgr {
	/* 80253984 */ // False False
//  J2DScreen* False
// 	 J2DScreen False
//  u64 False
//  u8 False
//  JKRExpHeap* False
// 	 JKRExpHeap False
CPaneMgr(J2DScreen*, u64, u8, JKRExpHeap*);
	/* 802542E8 */ // False False
void getGlobalPosX();
	/* 80254364 */ // False False
void getGlobalPosY();
	/* 802545B0 */ // False False
//  f32 False
//  f32 False
void paneTrans(f32, f32);
	/* 80254638 */ // False False
//  f32 False
//  f32 False
void paneScale(f32, f32);
	/* 80254EBC */ // False False
//  J2DPane* False
// 	 J2DPane False
//  bool False
//  s16 False
void getGlobalVtxCenter(J2DPane*, bool, s16);
};

// 
// Forward References:
// 


// False False
extern "C" void __ct__17dMsgScrn3Select_cFv();
// True False
extern "C" void __dt__17dMsgScrn3Select_cFv();
// False False
extern "C" void __dt__14J2DAnmColorKeyFv();
// False False
extern "C" void isSelect__17dMsgScrn3Select_cFv();
// False False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
extern "C" void setString__17dMsgScrn3Select_cFPcPcPc();
// False False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
extern "C" void setRubyString__17dMsgScrn3Select_cFPcPcPc();
// False False
//  f32 False
//  f32 False
extern "C" void translate__17dMsgScrn3Select_cFff();
// False False
//  f32 False
//  f32 False
extern "C" void draw__17dMsgScrn3Select_cFff();
// False False
//  u8 False
//  u8 False
//  u8 False
//  f32 False
//  u8 False
extern "C" void selAnimeInit__17dMsgScrn3Select_cFUcUcUcfUc();
// False False
//  u8 False
//  u8 False
//  bool False
extern "C" void selAnimeMove__17dMsgScrn3Select_cFUcUcb();
// False False
extern "C" void selAnimeEnd__17dMsgScrn3Select_cFv();
// False False
extern "C" void getTextBoxWidth__17dMsgScrn3Select_cFv();
// False False
extern "C" void getFontSize__17dMsgScrn3Select_cFv();
// False False
extern "C" void getRubyFontSize__17dMsgScrn3Select_cFv();
// False False
extern "C" void getCharSpace__17dMsgScrn3Select_cFv();
// False False
extern "C" void getRubyCharSpace__17dMsgScrn3Select_cFv();
// False False
//  int False
extern "C" void getTextBoxGlobalPosX__17dMsgScrn3Select_cFi();
// False False
//  int False
extern "C" void getTextBoxGlobalPosY__17dMsgScrn3Select_cFi();
// True False
extern "C" void open1Proc__17dMsgScrn3Select_cFv();
// True False
extern "C" void open2Proc__17dMsgScrn3Select_cFv();
// True False
extern "C" void waitProc__17dMsgScrn3Select_cFv();
// True False
extern "C" void selectProc__17dMsgScrn3Select_cFv();
// True False
extern "C" void changeProc__17dMsgScrn3Select_cFv();
// True False
extern "C" void closeProc__17dMsgScrn3Select_cFv();
// True False
extern "C" void selectScale__17dMsgScrn3Select_cFv();
// True False
extern "C" void selectTrans__17dMsgScrn3Select_cFv();
// True False
//  int False
extern "C" void selectAnimeTransform__17dMsgScrn3Select_cFi();
// False False
extern "C" void __sinit_d_msg_scrn_3select_cpp();
extern "C" extern char const* const msg_scrn_d_msg_scrn_3select__stringBase0;
extern "C" extern void* lit_3754[3];
extern "C" extern void* lit_3755[3];
extern "C" extern void* lit_3756[3];
extern "C" extern void* lit_3757[3];
extern "C" extern void* lit_3758[3];
extern "C" extern void* lit_3759[3];
extern "C" extern u8 data_803C0CA0[24 + 48 /* padding */];
extern "C" extern void* __vt__17dMsgScrn3Select_c[3 + 1 /* padding */];

// 
// External References:
// 

// False False
void mDoExt_getMesgFont();
// False False
//  J2DScreen* False
// 	 J2DScreen False
void dPaneClass_showNullPane(J2DScreen*);
// False False
//  void* False
// 	 void False
//  u32 False
void* operator new(u32);
// False False
//  void False
//  void* False
// 	 void False
void operator delete(void*);

// False False
extern "C" void mDoExt_getMesgFont__Fv();
// False False
//  u8 False
//  f32 False
//  JKRArchive* False
// 	 JKRArchive False
extern "C" void __ct__16dSelect_cursor_cFUcfP10JKRArchive();
// False False
//  f32 False
//  f32 False
//  J2DPane* False
// 	 J2DPane False
//  bool False
extern "C" void setPos__16dSelect_cursor_cFffP7J2DPaneb();
// False False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
extern "C" void setParam__16dSelect_cursor_cFfffff();
// False False
//  f32 False
extern "C" void setAlphaRate__16dSelect_cursor_cFf();
// False False
//  J2DScreen* False
// 	 J2DScreen False
//  u64 False
//  u8 False
//  JKRExpHeap* False
// 	 JKRExpHeap False
extern "C" void __ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap();
// False False
extern "C" void getGlobalPosX__8CPaneMgrFv();
// False False
extern "C" void getGlobalPosY__8CPaneMgrFv();
// False False
//  f32 False
//  f32 False
extern "C" void paneTrans__8CPaneMgrFff();
// False False
//  f32 False
//  f32 False
extern "C" void paneScale__8CPaneMgrFff();
// False False
//  J2DPane* False
// 	 J2DPane False
//  bool False
//  s16 False
extern "C" void getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs();
// False False
//  J2DScreen* False
// 	 J2DScreen False
extern "C" void dPaneClass_showNullPane__FP9J2DScreen();
// False False
extern "C" void show__13CPaneMgrAlphaFv();
// False False
extern "C" void hide__13CPaneMgrAlphaFv();
// False False
//  void* False
// 	 void False
//  u32 False
extern "C" void* __nw__FUl();
// False False
//  void False
//  void* False
// 	 void False
extern "C" void __dl__FPv();
// False False
//  char const* False
// 	 char const False
// 		 char False
//  JKRFileLoader* False
// 	 JKRFileLoader False
extern "C" void getGlbResource__13JKRFileLoaderFPCcP13JKRFileLoader();
// False False
extern "C" void getBounds__7J2DPaneFv();
// False False
extern "C" void animationTransform__7J2DPaneFv();
// False False
extern "C" void __ct__9J2DScreenFv();
// False False
//  char const* False
// 	 char const False
// 		 char False
//  u32 False
//  JKRArchive* False
// 	 JKRArchive False
extern "C" void setPriority__9J2DScreenFPCcUlP10JKRArchive();
// False False
//  f32 False
//  f32 False
//  J2DGrafContext const* False
// 	 J2DGrafContext const False
// 		 J2DGrafContext False
extern "C" void draw__9J2DScreenFffPC14J2DGrafContext();
// False False
extern "C" void animation__9J2DScreenFv();
// False False
extern "C" void getStringPtr__10J2DTextBoxCFv();
// False False
//  s16 False
//  char const* False
// 	 char const False
// 		 char False
//  ... False
extern "C" void setString__10J2DTextBoxFsPCce();
// False False
//  void const* False
// 	 void const False
// 		 void False
extern "C" void load__20J2DAnmLoaderDataBaseFPCv();
// False False
extern "C" void __ptmf_scall();
// False False
extern "C" void _savegpr_20();
// False False
extern "C" void _savegpr_23();
// False False
extern "C" void _savegpr_26();
// False False
extern "C" void _savegpr_27();
// False False
extern "C" void _savegpr_28();
// False False
extern "C" void _savegpr_29();
// False False
extern "C" void _restgpr_20();
// False False
extern "C" void _restgpr_23();
// False False
extern "C" void _restgpr_26();
// False False
extern "C" void _restgpr_27();
// False False
extern "C" void _restgpr_28();
// False False
extern "C" void _restgpr_29();
// False False
extern "C" void strcpy();
extern "C" extern void* __vt__10J2DAnmBase[4];
extern "C" extern void* __vt__10JUTNameTab[3];
extern "C" extern void* __vt__14J2DAnmColorKey[5];
extern "C" extern void* __vt__11J2DAnmColor[5];
extern "C" extern u8 g_dComIfG_gameInfo[122384];
extern "C" extern u8 g_MsgObject_HIO_c[1040];

// 
// Declarations:
// 

/* ############################################################################################## */
/* 80399708-80399828 0120+00 s=1 e=0 z=0  None .rodata    tag_name$3763                                                */
SECTION_RODATA static u8 const tag_name[288] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x5F, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x5F, 0x67,
	0x00, 0x00, 0x00, 0x00, 0x61, 0x5F, 0x67, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x5F, 0x6D,
	0x77, 0x5F, 0x79, 0x65, 0x73, 0x5F, 0x30, 0x30, 0x77, 0x5F, 0x79, 0x65, 0x73, 0x5F, 0x30, 0x31,
	0x77, 0x5F, 0x79, 0x65, 0x73, 0x5F, 0x30, 0x32, 0x77, 0x5F, 0x79, 0x65, 0x73, 0x5F, 0x30, 0x33,
	0x77, 0x5F, 0x79, 0x65, 0x73, 0x5F, 0x30, 0x34, 0x73, 0x65, 0x6C, 0x5F, 0x70, 0x6F, 0x30, 0x30,
	0x00, 0x61, 0x5F, 0x6B, 0x61, 0x68, 0x65, 0x6E, 0x61, 0x5F, 0x63, 0x75, 0x72, 0x73, 0x6F, 0x72,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x5F, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x5F, 0x67,
	0x00, 0x00, 0x00, 0x00, 0x62, 0x5F, 0x67, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x5F, 0x6D,
	0x77, 0x5F, 0x79, 0x65, 0x73, 0x5F, 0x30, 0x37, 0x77, 0x5F, 0x79, 0x65, 0x73, 0x5F, 0x30, 0x36,
	0x77, 0x5F, 0x79, 0x65, 0x73, 0x5F, 0x30, 0x35, 0x77, 0x5F, 0x79, 0x65, 0x73, 0x5F, 0x30, 0x38,
	0x77, 0x5F, 0x79, 0x65, 0x73, 0x5F, 0x30, 0x39, 0x73, 0x65, 0x6C, 0x5F, 0x70, 0x6F, 0x30, 0x31,
	0x00, 0x62, 0x5F, 0x6B, 0x61, 0x68, 0x65, 0x6E, 0x62, 0x5F, 0x63, 0x75, 0x72, 0x73, 0x6F, 0x72,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x5F, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x5F, 0x67,
	0x00, 0x00, 0x00, 0x00, 0x63, 0x5F, 0x67, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x5F, 0x6D,
	0x77, 0x5F, 0x79, 0x65, 0x73, 0x5F, 0x31, 0x32, 0x77, 0x5F, 0x79, 0x65, 0x73, 0x5F, 0x31, 0x31,
	0x77, 0x5F, 0x79, 0x65, 0x73, 0x5F, 0x31, 0x30, 0x77, 0x5F, 0x79, 0x65, 0x73, 0x5F, 0x31, 0x33,
	0x77, 0x5F, 0x79, 0x65, 0x73, 0x5F, 0x31, 0x34, 0x73, 0x65, 0x6C, 0x5F, 0x70, 0x6F, 0x30, 0x32,
	0x00, 0x63, 0x5F, 0x6B, 0x61, 0x68, 0x65, 0x6E, 0x63, 0x5F, 0x63, 0x75, 0x72, 0x73, 0x6F, 0x72,
};

/* 80399828-80399834 000C+00 s=1 e=0 z=0  None .rodata    @4497                                                        */
SECTION_RODATA static u8 const lit_4497[12] = {
	0x43, 0x4C, 0x00, 0x00, 0x43, 0x98, 0x00, 0x00, 0x43, 0xCA, 0x00, 0x00,
};

/* 80399834-80399840 000C+00 s=1 e=0 z=0  None .rodata    @4520                                                        */
SECTION_RODATA static u8 const lit_4520[12] = {
	0x43, 0x4C, 0x00, 0x00, 0x43, 0x98, 0x00, 0x00, 0x43, 0xCA, 0x00, 0x00,
};

/* 80399840-803998A0 005D+03 s=1 e=0 z=0  None .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char const* const stringBase_80399840 = "zelda_window_3menu.blo";
SECTION_DEAD char const* const stringBase_80399857 = "zelda_window_3menu.bck";
SECTION_DEAD char const* const stringBase_8039986E = "zelda_window_3menu.bpk";
SECTION_DEAD char const* const stringBase_80399885 = "zelda_window_3menu.btk";
SECTION_DEAD char const* const stringBase_8039989C = "";
/* @stringBase0 padding */
SECTION_DEAD static char const* const pad_8039989D = "\0\0";
#pragma pop

/* 803C0C00-803C0C0C 000C+00 s=1 e=0 z=0  None .data      cNullVec__6Z2Calc                                            */
SECTION_DATA static u8 cNullVec__6Z2Calc[12] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 803C0C0C-803C0C18 000C+00 s=0 e=0 z=0  None .data      @3754                                                        */
SECTION_DATA void* lit_3754[3] = {
	(void*)NULL,
	(void*)0xFFFFFFFF,
	(void*)open1Proc__17dMsgScrn3Select_cFv,
};

/* 803C0C18-803C0C24 000C+00 s=0 e=0 z=0  None .data      @3755                                                        */
SECTION_DATA void* lit_3755[3] = {
	(void*)NULL,
	(void*)0xFFFFFFFF,
	(void*)open2Proc__17dMsgScrn3Select_cFv,
};

/* 803C0C24-803C0C30 000C+00 s=0 e=0 z=0  None .data      @3756                                                        */
SECTION_DATA void* lit_3756[3] = {
	(void*)NULL,
	(void*)0xFFFFFFFF,
	(void*)waitProc__17dMsgScrn3Select_cFv,
};

/* 803C0C30-803C0C3C 000C+00 s=0 e=0 z=0  None .data      @3757                                                        */
SECTION_DATA void* lit_3757[3] = {
	(void*)NULL,
	(void*)0xFFFFFFFF,
	(void*)selectProc__17dMsgScrn3Select_cFv,
};

/* 803C0C3C-803C0C48 000C+00 s=0 e=0 z=0  None .data      @3758                                                        */
SECTION_DATA void* lit_3758[3] = {
	(void*)NULL,
	(void*)0xFFFFFFFF,
	(void*)changeProc__17dMsgScrn3Select_cFv,
};

/* 803C0C48-803C0C54 000C+00 s=0 e=0 z=0  None .data      @3759                                                        */
SECTION_DATA void* lit_3759[3] = {
	(void*)NULL,
	(void*)0xFFFFFFFF,
	(void*)closeProc__17dMsgScrn3Select_cFv,
};

/* 803C0C54-803C0CA0 0048+04 s=2 e=0 z=0  None .data      process                                                      */
SECTION_DATA static u8 process[72 + 4 /* padding */] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00,
};

/* 803C0CA0-803C0CE8 0018+30 s=0 e=0 z=0  None .data      tag_n$4921                                                   */
SECTION_DATA u8 data_803C0CA0[24 + 48 /* padding */] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x5F, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x5F, 0x74,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x5F, 0x74,
	/* padding */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 803C0CE8-803C0CF8 000C+04 s=2 e=0 z=0  None .data      __vt__17dMsgScrn3Select_c                                    */
SECTION_DATA void* __vt__17dMsgScrn3Select_c[3 + 1 /* padding */] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__17dMsgScrn3Select_cFv,
	/* padding */
	NULL,
};

/* 80454B58-80454B5C 0004+00 s=8 e=0 z=0  None .sdata2    @3909                                                        */
SECTION_SDATA2 static u8 lit_3909[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 80454B5C-80454B60 0004+00 s=4 e=0 z=0  None .sdata2    @3910                                                        */
SECTION_SDATA2 static f32 lit_3910 = 190.0f;

/* 80454B60-80454B64 0004+00 s=10 e=0 z=0  None .sdata2    @3911                                                        */
SECTION_SDATA2 static f32 lit_3911 = 1.0f;

/* 802390B4-802398CC 0818+00 s=0 e=4 z=0  None .text      __ct__17dMsgScrn3Select_cFv                                  */
//	802390CC: 803621B8 (_savegpr_20)
//	802390D4: 803C0CE8 (__vt__17dMsgScrn3Select_c)
//	802390D8: 803C0CE8 (__vt__17dMsgScrn3Select_c)
//	802390F0: 802CEC4C (__nw__FUl)
//	802390FC: 802F8498 (__ct__9J2DScreenFv)
//	8023910C: 80399840 (msg_scrn_d_msg_scrn_3select__stringBase0)
//	80239110: 80399840 (msg_scrn_d_msg_scrn_3select__stringBase0)
//	80239118: 804061C0 (g_dComIfG_gameInfo)
//	8023911C: 804061C0 (g_dComIfG_gameInfo)
//	80239124: 802F8648 (setPriority__9J2DScreenFPCcUlP10JKRArchive)
//	8023912C: 802550E8 (dPaneClass_showNullPane__FP9J2DScreen)
//	80239160: 80399840 (msg_scrn_d_msg_scrn_3select__stringBase0)
//	80239164: 80399840 (msg_scrn_d_msg_scrn_3select__stringBase0)
//	80239170: 802D4270 (getGlbResource__13JKRFileLoaderFPCcP13JKRFileLoader)
//	80239174: 80308A6C (load__20J2DAnmLoaderDataBaseFPCv)
//	8023917C: 80454B58 (lit_3909)
//	80239184: 80454B5C (lit_3910)
//	80239190: 80399840 (msg_scrn_d_msg_scrn_3select__stringBase0)
//	80239194: 80399840 (msg_scrn_d_msg_scrn_3select__stringBase0)
//	802391A0: 802D4270 (getGlbResource__13JKRFileLoaderFPCcP13JKRFileLoader)
//	802391A4: 80308A6C (load__20J2DAnmLoaderDataBaseFPCv)
//	802391C4: 80454B58 (lit_3909)
//	802391CC: 80399840 (msg_scrn_d_msg_scrn_3select__stringBase0)
//	802391D0: 80399840 (msg_scrn_d_msg_scrn_3select__stringBase0)
//	802391DC: 802D4270 (getGlbResource__13JKRFileLoaderFPCcP13JKRFileLoader)
//	802391E0: 80308A6C (load__20J2DAnmLoaderDataBaseFPCv)
//	80239200: 80454B58 (lit_3909)
//	8023920C: 802CEC4C (__nw__FUl)
//	8023921C: 80454B60 (lit_3911)
//	80239224: 80194220 (__ct__16dSelect_cursor_cFUcfP10JKRArchive)
//	80239234: 80454B58 (lit_3909)
//	80239238: 801952A0 (setAlphaRate__16dSelect_cursor_cFf)
//	80239240: 802CEC4C (__nw__FUl)
//	80239264: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80239280: 80454B58 (lit_3909)
//	80239284: 80399708 (tag_name)
//	80239288: 80399708 (tag_name)
//	802392A0: 802CEC4C (__nw__FUl)
//	802392B0: 80399708 (tag_name)
//	802392B4: 80399708 (tag_name)
//	802392CC: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	802392E0: 80255608 (hide__13CPaneMgrAlphaFv)
//	802392E8: 802CEC4C (__nw__FUl)
//	802392F8: 80399708 (tag_name)
//	802392FC: 80399708 (tag_name)
//	80239314: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80239340: 802CEC4C (__nw__FUl)
//	80239350: 80399708 (tag_name)
//	80239354: 80399708 (tag_name)
//	8023936C: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80239398: 802CEC4C (__nw__FUl)
//	802393A8: 80399708 (tag_name)
//	802393AC: 80399708 (tag_name)
//	802393C4: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80239400: 802CEC4C (__nw__FUl)
//	80239428: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80239450: 802CEC4C (__nw__FUl)
//	80239470: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80239480: 80255608 (hide__13CPaneMgrAlphaFv)
//	80239488: 802CEC4C (__nw__FUl)
//	802394A8: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	802394B8: 802CEC4C (__nw__FUl)
//	802394D8: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	802394F8: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	80239530: 802CEC4C (__nw__FUl)
//	80239554: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80239564: 802CEC4C (__nw__FUl)
//	80239588: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80239598: 802CEC4C (__nw__FUl)
//	802395BC: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	802395D0: 80399840 (msg_scrn_d_msg_scrn_3select__stringBase0)
//	802395D4: 80399840 (msg_scrn_d_msg_scrn_3select__stringBase0)
//	802395F4: 8030074C (setString__10J2DTextBoxFsPCce)
//	80239600: 800149F0 (mDoExt_getMesgFont__Fv)
//	8023984C: 80454B58 (lit_3909)
//	80239854: 80454B60 (lit_3911)
//	802398B8: 80362204 (_restgpr_20)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm dMsgScrn3Select_c::dMsgScrn3Select_c() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/__ct__17dMsgScrn3Select_cFv.s"
}
#pragma pop


/* 802398CC-80239BE0 0314+00 s=1 e=0 z=0  None .text      __dt__17dMsgScrn3Select_cFv                                  */
//	802398DC: 803621C4 (_savegpr_23)
//	802398EC: 803C0CE8 (__vt__17dMsgScrn3Select_c)
//	802398F0: 803C0CE8 (__vt__17dMsgScrn3Select_c)
//	80239BC0: 802CED3C (__dl__FPv)
//	80239BCC: 80362210 (_restgpr_23)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dMsgScrn3Select_c::~dMsgScrn3Select_c() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/__dt__17dMsgScrn3Select_cFv.s"
}
#pragma pop


/* 80239BE0-80239C64 0084+00 s=0 e=1 z=0  None .text      __dt__14J2DAnmColorKeyFv                                     */
//	80239BF8: 803CD780 (__vt__14J2DAnmColorKey)
//	80239BFC: 803CD780 (__vt__14J2DAnmColorKey)
//	80239C08: 803CD7A8 (__vt__11J2DAnmColor)
//	80239C0C: 803CD7A8 (__vt__11J2DAnmColor)
//	80239C1C: 803BB3DC (__vt__10JUTNameTab)
//	80239C20: 803BB3DC (__vt__10JUTNameTab)
//	80239C30: 803A8E04 (__vt__10J2DAnmBase)
//	80239C34: 803A8E04 (__vt__10J2DAnmBase)
//	80239C48: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm J2DAnmColorKey::~J2DAnmColorKey() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/__dt__14J2DAnmColorKeyFv.s"
}
#pragma pop


/* 80239C64-80239C78 0014+00 s=0 e=5 z=0  None .text      isSelect__17dMsgScrn3Select_cFv                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dMsgScrn3Select_c::isSelect() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/isSelect__17dMsgScrn3Select_cFv.s"
}
#pragma pop


/* 80239C78-80239D08 0090+00 s=0 e=5 z=0  None .text      setString__17dMsgScrn3Select_cFPcPcPc                        */
//	80239C88: 803621D8 (_savegpr_28)
//	80239CAC: 80300658 (getStringPtr__10J2DTextBoxCFv)
//	80239CB4: 80368B2C (strcpy)
//	80239CC8: 80300658 (getStringPtr__10J2DTextBoxCFv)
//	80239CD0: 80368B2C (strcpy)
//	80239CE4: 80300658 (getStringPtr__10J2DTextBoxCFv)
//	80239CEC: 80368B2C (strcpy)
//	80239CF4: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
asm void dMsgScrn3Select_c::setString(char* param_0, char* param_1, char* param_2) {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/setString__17dMsgScrn3Select_cFPcPcPc.s"
}
#pragma pop


/* 80239D08-80239D98 0090+00 s=0 e=5 z=0  None .text      setRubyString__17dMsgScrn3Select_cFPcPcPc                    */
//	80239D18: 803621D8 (_savegpr_28)
//	80239D3C: 80300658 (getStringPtr__10J2DTextBoxCFv)
//	80239D44: 80368B2C (strcpy)
//	80239D58: 80300658 (getStringPtr__10J2DTextBoxCFv)
//	80239D60: 80368B2C (strcpy)
//	80239D74: 80300658 (getStringPtr__10J2DTextBoxCFv)
//	80239D7C: 80368B2C (strcpy)
//	80239D84: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
asm void dMsgScrn3Select_c::setRubyString(char* param_0, char* param_1, char* param_2) {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/setRubyString__17dMsgScrn3Select_cFPcPcPc.s"
}
#pragma pop


/* 80239D98-80239DD4 003C+00 s=0 e=5 z=0  None .text      translate__17dMsgScrn3Select_cFff                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  f32 False
//  f32 False
asm void dMsgScrn3Select_c::translate(f32 param_0, f32 param_1) {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/translate__17dMsgScrn3Select_cFff.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454B64-80454B68 0004+00 s=2 e=0 z=0  None .sdata2    @4154                                                        */
SECTION_SDATA2 static f32 lit_4154 = 0.5f;

/* 80454B68-80454B6C 0004+00 s=1 e=0 z=0  None .sdata2    @4155                                                        */
SECTION_SDATA2 static f32 lit_4155 = 3.0f;

/* 80454B6C-80454B70 0004+00 s=1 e=0 z=0  None .sdata2    @4156                                                        */
SECTION_SDATA2 static f32 lit_4156 = 9.0f / 10.0f;

/* 80454B70-80454B74 0004+00 s=1 e=0 z=0  None .sdata2    @4157                                                        */
SECTION_SDATA2 static f32 lit_4157 = 7.0f / 10.0f;

/* 80454B74-80454B78 0004+00 s=1 e=0 z=0  None .sdata2    @4158                                                        */
SECTION_SDATA2 static f32 lit_4158 = 1.0f / 20.0f;

/* 80239DD4-8023A094 02C0+00 s=0 e=5 z=0  None .text      draw__17dMsgScrn3Select_cFff                                 */
//	80239DF4: 803621D4 (_savegpr_27)
//	80239E04: 804061C0 (g_dComIfG_gameInfo)
//	80239E08: 804061C0 (g_dComIfG_gameInfo)
//	80239E28: 8043028C (g_MsgObject_HIO_c)
//	80239E2C: 8043028C (g_MsgObject_HIO_c)
//	80239E60: 8043028C (g_MsgObject_HIO_c)
//	80239E64: 8043028C (g_MsgObject_HIO_c)
//	80239F60: 802F8ED4 (draw__9J2DScreenFffPC14J2DGrafContext)
//	80239F98: 80454B64 (lit_4154)
//	80239FB4: 80454B60 (lit_3911)
//	80239FCC: 80454B68 (lit_4155)
//	80239FE4: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	8023A038: 801950F4 (setPos__16dSelect_cursor_cFffP7J2DPaneb)
//	8023A040: 80454B6C (lit_4156)
//	8023A044: 80454B70 (lit_4157)
//	8023A048: 80454B74 (lit_4158)
//	8023A04C: 80454B64 (lit_4154)
//	8023A054: 801951B0 (setParam__16dSelect_cursor_cFfffff)
//	8023A080: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  f32 False
//  f32 False
asm void dMsgScrn3Select_c::draw(f32 param_0, f32 param_1) {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/draw__17dMsgScrn3Select_cFff.s"
}
#pragma pop


/* 8023A094-8023A398 0304+00 s=0 e=5 z=0  None .text      selAnimeInit__17dMsgScrn3Select_cFUcUcUcfUc                  */
//	8023A0AC: 803621D0 (_savegpr_26)
//	8023A0F4: 80454B60 (lit_3911)
//	8023A0FC: 80254638 (paneScale__8CPaneMgrFff)
//	8023A104: 80454B60 (lit_3911)
//	8023A10C: 80254638 (paneScale__8CPaneMgrFff)
//	8023A114: 80454B60 (lit_3911)
//	8023A11C: 80254638 (paneScale__8CPaneMgrFff)
//	8023A124: 80454B60 (lit_3911)
//	8023A12C: 80254638 (paneScale__8CPaneMgrFff)
//	8023A134: 80454B60 (lit_3911)
//	8023A13C: 80254638 (paneScale__8CPaneMgrFff)
//	8023A144: 80454B60 (lit_3911)
//	8023A14C: 80254638 (paneScale__8CPaneMgrFff)
//	8023A154: 80454B60 (lit_3911)
//	8023A15C: 80254638 (paneScale__8CPaneMgrFff)
//	8023A164: 80454B60 (lit_3911)
//	8023A16C: 80254638 (paneScale__8CPaneMgrFff)
//	8023A17C: 80454B60 (lit_3911)
//	8023A184: 80254638 (paneScale__8CPaneMgrFff)
//	8023A1BC: 80454B60 (lit_3911)
//	8023A1E4: 80255608 (hide__13CPaneMgrAlphaFv)
//	8023A1EC: 802555C8 (show__13CPaneMgrAlphaFv)
//	8023A1F4: 802555C8 (show__13CPaneMgrAlphaFv)
//	8023A218: 80454B58 (lit_3909)
//	8023A220: 802545B0 (paneTrans__8CPaneMgrFff)
//	8023A22C: 80454B58 (lit_3909)
//	8023A234: 802545B0 (paneTrans__8CPaneMgrFff)
//	8023A240: 802555C8 (show__13CPaneMgrAlphaFv)
//	8023A248: 802555C8 (show__13CPaneMgrAlphaFv)
//	8023A250: 802555C8 (show__13CPaneMgrAlphaFv)
//	8023A258: 80454B58 (lit_3909)
//	8023A260: 802545B0 (paneTrans__8CPaneMgrFff)
//	8023A264: 80454B5C (lit_3910)
//	8023A278: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023A28C: 8023B228 (selectScale__17dMsgScrn3Select_cFv)
//	8023A294: 8023B4AC (selectTrans__17dMsgScrn3Select_cFv)
//	8023A384: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  u8 False
//  u8 False
//  u8 False
//  f32 False
//  u8 False
asm void dMsgScrn3Select_c::selAnimeInit(u8 param_0, u8 param_1, u8 param_2, f32 param_3, u8 param_4) {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/selAnimeInit__17dMsgScrn3Select_cFUcUcUcfUc.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454B78-80454B80 0008+00 s=2 e=0 z=0  None .sdata2    @4345                                                        */
SECTION_SDATA2 static f64 lit_4345 = 4503601774854144.0 /* cast s32 to float */;

/* 8023A398-8023A680 02E8+00 s=0 e=5 z=0  None .text      selAnimeMove__17dMsgScrn3Select_cFUcUcb                      */
//	8023A3A8: 803621D8 (_savegpr_28)
//	8023A3CC: 803C0C54 (process)
//	8023A3D0: 803C0C54 (process)
//	8023A3D8: 80362084 (__ptmf_scall)
//	8023A3E4: 80454B60 (lit_3911)
//	8023A3FC: 80454B78 (lit_4345)
//	8023A44C: 80454B60 (lit_3911)
//	8023A464: 80454B78 (lit_4345)
//	8023A4B4: 802F9690 (animation__9J2DScreenFv)
//	8023A4D8: 80454B60 (lit_3911)
//	8023A4FC: 80454B60 (lit_3911)
//	8023A528: 80454B58 (lit_3909)
//	8023A54C: 80454B58 (lit_3909)
//	8023A57C: 8023B4AC (selectTrans__17dMsgScrn3Select_cFv)
//	8023A66C: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  u8 False
//  u8 False
//  bool False
asm void dMsgScrn3Select_c::selAnimeMove(u8 param_0, u8 param_1, bool param_2) {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/selAnimeMove__17dMsgScrn3Select_cFUcUcb.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454B80-80454B84 0004+00 s=2 e=0 z=0  None .sdata2    @4434                                                        */
SECTION_SDATA2 static f32 lit_4434 = 199.0f;

/* 8023A680-8023A934 02B4+00 s=0 e=9 z=0  None .text      selAnimeEnd__17dMsgScrn3Select_cFv                           */
//	8023A6A0: 803621D8 (_savegpr_28)
//	8023A6D0: 80454B80 (lit_4434)
//	8023A6F8: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023A748: 803C0C54 (process)
//	8023A74C: 803C0C54 (process)
//	8023A754: 80362084 (__ptmf_scall)
//	8023A760: 80454B60 (lit_3911)
//	8023A778: 80454B78 (lit_4345)
//	8023A7C8: 80454B60 (lit_3911)
//	8023A7E0: 80454B78 (lit_4345)
//	8023A830: 802F9690 (animation__9J2DScreenFv)
//	8023A854: 80454B60 (lit_3911)
//	8023A878: 80454B60 (lit_3911)
//	8023A8A4: 80454B58 (lit_3909)
//	8023A8C8: 80454B58 (lit_3909)
//	8023A8F8: 8023B4AC (selectTrans__17dMsgScrn3Select_cFv)
//	8023A920: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dMsgScrn3Select_c::selAnimeEnd() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/selAnimeEnd__17dMsgScrn3Select_cFv.s"
}
#pragma pop


/* 8023A934-8023A94C 0018+00 s=0 e=5 z=0  None .text      getTextBoxWidth__17dMsgScrn3Select_cFv                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dMsgScrn3Select_c::getTextBoxWidth() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/getTextBoxWidth__17dMsgScrn3Select_cFv.s"
}
#pragma pop


/* 8023A94C-8023A95C 0010+00 s=0 e=5 z=0  None .text      getFontSize__17dMsgScrn3Select_cFv                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dMsgScrn3Select_c::getFontSize() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/getFontSize__17dMsgScrn3Select_cFv.s"
}
#pragma pop


/* 8023A95C-8023A97C 0020+00 s=0 e=2 z=0  None .text      getRubyFontSize__17dMsgScrn3Select_cFv                       */
//	8023A974: 80454B58 (lit_3909)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dMsgScrn3Select_c::getRubyFontSize() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/getRubyFontSize__17dMsgScrn3Select_cFv.s"
}
#pragma pop


/* 8023A97C-8023A98C 0010+00 s=0 e=5 z=0  None .text      getCharSpace__17dMsgScrn3Select_cFv                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dMsgScrn3Select_c::getCharSpace() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/getCharSpace__17dMsgScrn3Select_cFv.s"
}
#pragma pop


/* 8023A98C-8023A9AC 0020+00 s=0 e=2 z=0  None .text      getRubyCharSpace__17dMsgScrn3Select_cFv                      */
//	8023A9A4: 80454B58 (lit_3909)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dMsgScrn3Select_c::getRubyCharSpace() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/getRubyCharSpace__17dMsgScrn3Select_cFv.s"
}
#pragma pop


/* 8023A9AC-8023A9D8 002C+00 s=0 e=2 z=0  None .text      getTextBoxGlobalPosX__17dMsgScrn3Select_cFi                  */
//	8023A9C4: 802542E8 (getGlobalPosX__8CPaneMgrFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  int False
asm void dMsgScrn3Select_c::getTextBoxGlobalPosX(int param_0) {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/getTextBoxGlobalPosX__17dMsgScrn3Select_cFi.s"
}
#pragma pop


/* 8023A9D8-8023AA04 002C+00 s=0 e=2 z=0  None .text      getTextBoxGlobalPosY__17dMsgScrn3Select_cFi                  */
//	8023A9F0: 80254364 (getGlobalPosY__8CPaneMgrFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  int False
asm void dMsgScrn3Select_c::getTextBoxGlobalPosY(int param_0) {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/getTextBoxGlobalPosY__17dMsgScrn3Select_cFi.s"
}
#pragma pop


/* 8023AA04-8023AAF4 00F0+00 s=1 e=0 z=0  None .text      open1Proc__17dMsgScrn3Select_cFv                             */
//	8023AA1C: 803621D8 (_savegpr_28)
//	8023AA24: 80399828 (lit_4497)
//	8023AA28: 80399828 (lit_4497)
//	8023AA74: 802F7100 (getBounds__7J2DPaneFv)
//	8023AA84: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023AA90: 802F7100 (getBounds__7J2DPaneFv)
//	8023AAC4: 80454B5C (lit_3910)
//	8023AAE0: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMsgScrn3Select_c::open1Proc() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/open1Proc__17dMsgScrn3Select_cFv.s"
}
#pragma pop


/* 8023AAF4-8023AC14 0120+00 s=1 e=0 z=0  None .text      open2Proc__17dMsgScrn3Select_cFv                             */
//	8023AB14: 803621D8 (_savegpr_28)
//	8023AB1C: 80399834 (lit_4520)
//	8023AB20: 80399834 (lit_4520)
//	8023AB40: 80454B60 (lit_3911)
//	8023AB50: 801952A0 (setAlphaRate__16dSelect_cursor_cFf)
//	8023AB58: 80454B80 (lit_4434)
//	8023ABB8: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023AC00: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMsgScrn3Select_c::open2Proc() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/open2Proc__17dMsgScrn3Select_cFv.s"
}
#pragma pop


/* 8023AC14-8023AC44 0030+00 s=1 e=0 z=0  None .text      waitProc__17dMsgScrn3Select_cFv                              */
//	8023AC24: 8043028C (g_MsgObject_HIO_c)
//	8023AC28: 8043028C (g_MsgObject_HIO_c)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMsgScrn3Select_c::waitProc() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/waitProc__17dMsgScrn3Select_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454B84-80454B88 0004+00 s=2 e=0 z=0  None .sdata2    @4604                                                        */
SECTION_SDATA2 static f32 lit_4604 = 303.0f;

/* 80454B88-80454B8C 0004+00 s=2 e=0 z=0  None .sdata2    @4605                                                        */
SECTION_SDATA2 static f32 lit_4605 = 300.0f;

/* 80454B8C-80454B90 0004+00 s=2 e=0 z=0  None .sdata2    @4606                                                        */
SECTION_SDATA2 static f32 lit_4606 = 403.0f;

/* 80454B90-80454B98 0004+04 s=2 e=0 z=0  None .sdata2    @4607                                                        */
SECTION_SDATA2 static f32 lit_4607[1 + 1 /* padding */] = {
	400.0f,
	/* padding */
	0.0f,
};

/* 8023AC44-8023AE68 0224+00 s=1 e=0 z=0  None .text      selectProc__17dMsgScrn3Select_cFv                            */
//	8023ACB0: 80454B84 (lit_4604)
//	8023ACBC: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023ACC0: 80454B88 (lit_4605)
//	8023ACD0: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023ACE0: 80454B8C (lit_4606)
//	8023ACEC: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023ACF0: 80454B90 (lit_4607)
//	8023AD00: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023AD14: 80454B88 (lit_4605)
//	8023AD20: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023AD24: 80454B84 (lit_4604)
//	8023AD34: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023AD44: 80454B8C (lit_4606)
//	8023AD50: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023AD54: 80454B90 (lit_4607)
//	8023AD64: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023AD78: 80454B90 (lit_4607)
//	8023AD84: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023AD88: 80454B8C (lit_4606)
//	8023AD98: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023ADA8: 80454B88 (lit_4605)
//	8023ADB4: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023ADB8: 80454B84 (lit_4604)
//	8023ADC8: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023ADDC: 80454B88 (lit_4605)
//	8023ADF0: 80454B84 (lit_4604)
//	8023AE04: 80454B8C (lit_4606)
//	8023AE18: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMsgScrn3Select_c::selectProc() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/selectProc__17dMsgScrn3Select_cFv.s"
}
#pragma pop


/* 8023AE68-8023B148 02E0+00 s=1 e=0 z=0  None .text      changeProc__17dMsgScrn3Select_cFv                            */
//	8023AE94: 80454B84 (lit_4604)
//	8023AEA0: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023AEB0: 80454B88 (lit_4605)
//	8023AEBC: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023AECC: 80454B90 (lit_4607)
//	8023AED8: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023AF24: 80454B84 (lit_4604)
//	8023AF34: 80454B60 (lit_3911)
//	8023AF48: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023AF50: 80454B84 (lit_4604)
//	8023AF80: 80454B8C (lit_4606)
//	8023AF90: 80454B60 (lit_3911)
//	8023AFA4: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023AFAC: 80454B8C (lit_4606)
//	8023AFDC: 80454B88 (lit_4605)
//	8023AFEC: 80454B60 (lit_3911)
//	8023B000: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023B008: 80454B88 (lit_4605)
//	8023B038: 80454B8C (lit_4606)
//	8023B048: 80454B60 (lit_3911)
//	8023B05C: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023B064: 80454B8C (lit_4606)
//	8023B094: 80454B90 (lit_4607)
//	8023B0A4: 80454B60 (lit_3911)
//	8023B0B8: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023B0C0: 80454B90 (lit_4607)
//	8023B0F0: 80454B88 (lit_4605)
//	8023B100: 80454B60 (lit_3911)
//	8023B114: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023B11C: 80454B88 (lit_4605)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMsgScrn3Select_c::changeProc() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/changeProc__17dMsgScrn3Select_cFv.s"
}
#pragma pop


/* 8023B148-8023B228 00E0+00 s=1 e=0 z=0  None .text      closeProc__17dMsgScrn3Select_cFv                             */
//	8023B168: 803621D8 (_savegpr_28)
//	8023B174: 80454B58 (lit_3909)
//	8023B178: 801952A0 (setAlphaRate__16dSelect_cursor_cFf)
//	8023B180: 80454B60 (lit_3911)
//	8023B1B0: 8023B870 (selectAnimeTransform__17dMsgScrn3Select_cFi)
//	8023B1E8: 80454B5C (lit_3910)
//	8023B214: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMsgScrn3Select_c::closeProc() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/closeProc__17dMsgScrn3Select_cFv.s"
}
#pragma pop


/* 8023B228-8023B4AC 0284+00 s=1 e=0 z=0  None .text      selectScale__17dMsgScrn3Select_cFv                           */
//	8023B240: 803621D8 (_savegpr_28)
//	8023B248: 80454B60 (lit_3911)
//	8023B26C: 80454B60 (lit_3911)
//	8023B270: 80254638 (paneScale__8CPaneMgrFff)
//	8023B2AC: 80254638 (paneScale__8CPaneMgrFff)
//	8023B2E8: 80254638 (paneScale__8CPaneMgrFff)
//	8023B344: 80254638 (paneScale__8CPaneMgrFff)
//	8023B380: 80254638 (paneScale__8CPaneMgrFff)
//	8023B3BC: 80254638 (paneScale__8CPaneMgrFff)
//	8023B3F8: 80254638 (paneScale__8CPaneMgrFff)
//	8023B434: 80254638 (paneScale__8CPaneMgrFff)
//	8023B478: 80254638 (paneScale__8CPaneMgrFff)
//	8023B498: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMsgScrn3Select_c::selectScale() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/selectScale__17dMsgScrn3Select_cFv.s"
}
#pragma pop


/* 8023B4AC-8023B870 03C4+00 s=3 e=0 z=0  None .text      selectTrans__17dMsgScrn3Select_cFv                           */
//	8023B4D4: 803621D0 (_savegpr_26)
//	8023B4F0: 80454B64 (lit_4154)
//	8023B504: 80454B58 (lit_3909)
//	8023B520: 80454B60 (lit_3911)
//	8023B55C: 80454B58 (lit_3909)
//	8023B56C: 802545B0 (paneTrans__8CPaneMgrFff)
//	8023B57C: 80454B58 (lit_3909)
//	8023B584: 802545B0 (paneTrans__8CPaneMgrFff)
//	8023B5D0: 80454B60 (lit_3911)
//	8023B5E0: 80454B64 (lit_4154)
//	8023B5E8: 80454B58 (lit_3909)
//	8023B5EC: 802545B0 (paneTrans__8CPaneMgrFff)
//	8023B5F8: 80454B64 (lit_4154)
//	8023B614: 80454B60 (lit_3911)
//	8023B628: 80454B58 (lit_3909)
//	8023B62C: 802545B0 (paneTrans__8CPaneMgrFff)
//	8023B644: 80454B60 (lit_3911)
//	8023B65C: 80454B58 (lit_3909)
//	8023B660: 802545B0 (paneTrans__8CPaneMgrFff)
//	8023B66C: 80454B64 (lit_4154)
//	8023B688: 80454B60 (lit_3911)
//	8023B69C: 80454B58 (lit_3909)
//	8023B6A0: 802545B0 (paneTrans__8CPaneMgrFff)
//	8023B6B8: 80454B60 (lit_3911)
//	8023B6C0: 80454B64 (lit_4154)
//	8023B6DC: 80454B58 (lit_3909)
//	8023B6E0: 802545B0 (paneTrans__8CPaneMgrFff)
//	8023B6EC: 80454B64 (lit_4154)
//	8023B708: 80454B60 (lit_3911)
//	8023B71C: 80454B58 (lit_3909)
//	8023B720: 802545B0 (paneTrans__8CPaneMgrFff)
//	8023B72C: 80454B64 (lit_4154)
//	8023B748: 80454B60 (lit_3911)
//	8023B75C: 80454B58 (lit_3909)
//	8023B760: 802545B0 (paneTrans__8CPaneMgrFff)
//	8023B76C: 80454B64 (lit_4154)
//	8023B788: 80454B60 (lit_3911)
//	8023B7AC: 802545B0 (paneTrans__8CPaneMgrFff)
//	8023B7C0: 80454B64 (lit_4154)
//	8023B7DC: 80454B60 (lit_3911)
//	8023B7F4: 802545B0 (paneTrans__8CPaneMgrFff)
//	8023B800: 802F7100 (getBounds__7J2DPaneFv)
//	8023B81C: 80454B58 (lit_3909)
//	8023B820: 802545B0 (paneTrans__8CPaneMgrFff)
//	8023B85C: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMsgScrn3Select_c::selectTrans() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/selectTrans__17dMsgScrn3Select_cFv.s"
}
#pragma pop


/* 8023B870-8023B914 00A4+00 s=7 e=0 z=0  None .text      selectAnimeTransform__17dMsgScrn3Select_cFi                  */
//	8023B880: 803621DC (_savegpr_29)
//	8023B8C4: 802F7FCC (animationTransform__7J2DPaneFv)
//	8023B900: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
asm void dMsgScrn3Select_c::selectAnimeTransform(int param_0) {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/selectAnimeTransform__17dMsgScrn3Select_cFi.s"
}
#pragma pop


/* 8023B914-8023B9B4 00A0+00 s=0 e=0 z=0  None .text      __sinit_d_msg_scrn_3select_cpp                               */
//	8023B914: 803C0C00 (cNullVec__6Z2Calc)
//	8023B918: 803C0C00 (cNullVec__6Z2Calc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void __sinit_d_msg_scrn_3select_cpp() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_3select/__sinit_d_msg_scrn_3select_cpp.s"
}
#pragma pop

#pragma push
#pragma force_active on
#pragma section ".ctors$15"
__declspec(section ".ctors$15") void* const _ctors_8023B914 = (void*)__sinit_d_msg_scrn_3select_cpp;
#pragma pop


