// 
// Generated By: dol2asm
// Translation Unit: msg/scrn/d_msg_scrn_kanban
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "msg/scrn/d_msg_scrn_kanban.h"

// 
// Types:
// 

struct JKRExpHeap {
};

struct dMsgScrnKanban_c {
	/* 80244E38 */ // False False
//  JKRExpHeap* False
// 	 JKRExpHeap False
dMsgScrnKanban_c(JKRExpHeap*);
	/* 8024534C */ // True False
~dMsgScrnKanban_c();
	/* 80245528 */ // True False
void exec();
	/* 80245618 */ // True False
void draw();
	/* 802456A0 */ // True False
//  f32 False
void fukiAlpha(f32);
	/* 80245754 */ // True False
//  void False
//  f32 False
void fukiScale(f32);
	/* 80245758 */ // True False
//  void False
//  f32 False
//  f32 False
void fukiTrans(f32, f32);
};

struct dMsgScrnBase_c {
	/* 80238C40 */ // False False
//  void False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
void setSelectRubyString(char*, char*, char*);
	/* 80238C44 */ // False False
//  void False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
void setSelectString(char*, char*, char*);
	/* 80238C48 */ // False False
//  bool False
//  u8 False
//  u8 False
//  bool False
bool selectAnimeMove(u8, u8, bool);
	/* 80238C50 */ // False False
//  void False
//  u8 False
//  u8 False
//  f32 False
//  u8 False
void selectAnimeInit(u8, u8, f32, u8);
	/* 80238C54 */ // False False
//  void False
void arwAnimeMove();
	/* 80238C58 */ // False False
//  void False
void arwAnimeInit();
	/* 80238C5C */ // False False
//  void False
//  u8 False
void fukiPosCalc(u8);
	/* 80238C60 */ // False False
//  bool False
bool isSelect();
	/* 80238C68 */ // False False
//  bool False
bool selectAnimeEnd();
	/* 80238C70 */ // False False
//  void False
void dotAnimeMove();
	/* 80238C74 */ // False False
//  void False
void dotAnimeInit();
	/* 8023C0DC */ // False False
dMsgScrnBase_c();
	/* 8023C124 */ // False False
~dMsgScrnBase_c();
	/* 8023C16C */ // False False
void init();
	/* 8023C234 */ // False False
void multiDraw();
	/* 8023C300 */ // False False
void drawSelf();
	/* 8023C4F4 */ // False False
//  f32 False
void fontAlpha(f32);
	/* 8023C574 */ // False False
void isTalkNow();
};

struct JKRHeap {
	/* 802CE784 */ // False False
void getTotalFreeSize();
};

struct JKRFileLoader {
	/* 802D4270 */ // False False
//  char const* False
// 	 char const False
// 		 char False
//  JKRFileLoader* False
// 	 JKRFileLoader False
void getGlbResource(char const*, JKRFileLoader*);
};

struct JKRArchive {
};

struct J2DGrafContext {
};

struct J2DScreen {
	/* 802F8498 */ // False False
J2DScreen();
	/* 802F8648 */ // False False
//  char const* False
// 	 char const False
// 		 char False
//  u32 False
//  JKRArchive* False
// 	 JKRArchive False
void setPriority(char const*, u32, JKRArchive*);
	/* 802F8ED4 */ // False False
//  f32 False
//  f32 False
//  J2DGrafContext const* False
// 	 J2DGrafContext const False
// 		 J2DGrafContext False
void draw(f32, f32, J2DGrafContext const*);
	/* 802F9690 */ // False False
void animation();
};

struct J2DPane {
	/* 802F7FCC */ // False False
void animationTransform();
};

struct J2DAnmLoaderDataBase {
	/* 80308A6C */ // False False
//  void const* False
// 	 void const False
// 		 void False
void load(void const*);
};

struct CPaneMgrAlpha {
	/* 802557D0 */ // False False
//  f32 False
void setAlphaRate(f32);
};

struct CPaneMgr {
	/* 80253984 */ // False False
//  J2DScreen* False
// 	 J2DScreen False
//  u64 False
//  u8 False
//  JKRExpHeap* False
// 	 JKRExpHeap False
CPaneMgr(J2DScreen*, u64, u8, JKRExpHeap*);
	/* 802542E8 */ // False False
void getGlobalPosX();
	/* 80254364 */ // False False
void getGlobalPosY();
};

// 
// Forward References:
// 


// False False
//  JKRExpHeap* False
// 	 JKRExpHeap False
extern "C" void __ct__16dMsgScrnKanban_cFP10JKRExpHeap();
// True False
extern "C" void __dt__16dMsgScrnKanban_cFv();
// True False
extern "C" void exec__16dMsgScrnKanban_cFv();
// True False
extern "C" void draw__16dMsgScrnKanban_cFv();
// True False
//  f32 False
extern "C" void fukiAlpha__16dMsgScrnKanban_cFf();
// True False
//  void False
//  f32 False
extern "C" void fukiScale__16dMsgScrnKanban_cFf();
// True False
//  void False
//  f32 False
//  f32 False
extern "C" void fukiTrans__16dMsgScrnKanban_cFff();
extern "C" extern char const* const msg_scrn_d_msg_scrn_kanban__stringBase0;
extern "C" extern void* __vt__16dMsgScrnKanban_c[22];

// 
// External References:
// 

// False False
void mDoExt_getMesgFont();
// False False
//  int False
void dComIfGp_getSubHeap2D(int);
// False False
//  J2DScreen* False
// 	 J2DScreen False
void dPaneClass_showNullPane(J2DScreen*);
// False False
//  void* False
// 	 void False
//  u32 False
void* operator new(u32);
// False False
//  void False
//  void* False
// 	 void False
void operator delete(void*);

// False False
extern "C" void mDoExt_getMesgFont__Fv();
// False False
//  int False
extern "C" void dComIfGp_getSubHeap2D__Fi();
// False False
//  void False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
extern "C" void setSelectRubyString__14dMsgScrnBase_cFPcPcPc();
// False False
//  void False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
extern "C" void setSelectString__14dMsgScrnBase_cFPcPcPc();
// False False
//  bool False
//  u8 False
//  u8 False
//  bool False
extern "C" bool selectAnimeMove__14dMsgScrnBase_cFUcUcb();
// False False
//  void False
//  u8 False
//  u8 False
//  f32 False
//  u8 False
extern "C" void selectAnimeInit__14dMsgScrnBase_cFUcUcfUc();
// False False
//  void False
extern "C" void arwAnimeMove__14dMsgScrnBase_cFv();
// False False
//  void False
extern "C" void arwAnimeInit__14dMsgScrnBase_cFv();
// False False
//  void False
//  u8 False
extern "C" void fukiPosCalc__14dMsgScrnBase_cFUc();
// False False
//  bool False
extern "C" bool isSelect__14dMsgScrnBase_cFv();
// False False
//  bool False
extern "C" bool selectAnimeEnd__14dMsgScrnBase_cFv();
// False False
//  void False
extern "C" void dotAnimeMove__14dMsgScrnBase_cFv();
// False False
//  void False
extern "C" void dotAnimeInit__14dMsgScrnBase_cFv();
// False False
extern "C" void __ct__14dMsgScrnBase_cFv();
// False False
extern "C" void __dt__14dMsgScrnBase_cFv();
// False False
extern "C" void init__14dMsgScrnBase_cFv();
// False False
extern "C" void multiDraw__14dMsgScrnBase_cFv();
// False False
extern "C" void drawSelf__14dMsgScrnBase_cFv();
// False False
//  f32 False
extern "C" void fontAlpha__14dMsgScrnBase_cFf();
// False False
extern "C" void isTalkNow__14dMsgScrnBase_cFv();
// False False
//  J2DScreen* False
// 	 J2DScreen False
//  u64 False
//  u8 False
//  JKRExpHeap* False
// 	 JKRExpHeap False
extern "C" void __ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap();
// False False
extern "C" void getGlobalPosX__8CPaneMgrFv();
// False False
extern "C" void getGlobalPosY__8CPaneMgrFv();
// False False
//  J2DScreen* False
// 	 J2DScreen False
extern "C" void dPaneClass_showNullPane__FP9J2DScreen();
// False False
//  f32 False
extern "C" void setAlphaRate__13CPaneMgrAlphaFf();
// False False
extern "C" void getTotalFreeSize__7JKRHeapFv();
// False False
//  void* False
// 	 void False
//  u32 False
extern "C" void* __nw__FUl();
// False False
//  void False
//  void* False
// 	 void False
extern "C" void __dl__FPv();
// False False
//  char const* False
// 	 char const False
// 		 char False
//  JKRFileLoader* False
// 	 JKRFileLoader False
extern "C" void getGlbResource__13JKRFileLoaderFPCcP13JKRFileLoader();
// False False
extern "C" void animationTransform__7J2DPaneFv();
// False False
extern "C" void __ct__9J2DScreenFv();
// False False
//  char const* False
// 	 char const False
// 		 char False
//  u32 False
//  JKRArchive* False
// 	 JKRArchive False
extern "C" void setPriority__9J2DScreenFPCcUlP10JKRArchive();
// False False
//  f32 False
//  f32 False
//  J2DGrafContext const* False
// 	 J2DGrafContext const False
// 		 J2DGrafContext False
extern "C" void draw__9J2DScreenFffPC14J2DGrafContext();
// False False
extern "C" void animation__9J2DScreenFv();
// False False
//  void const* False
// 	 void const False
// 		 void False
extern "C" void load__20J2DAnmLoaderDataBaseFPCv();
// False False
extern "C" void _savegpr_27();
// False False
extern "C" void _savegpr_28();
// False False
extern "C" void _restgpr_27();
// False False
extern "C" void _restgpr_28();
extern "C" extern u8 g_dComIfG_gameInfo[122384];
extern "C" extern u8 g_MsgObject_HIO_c[1040];

// 
// Declarations:
// 

/* ############################################################################################## */
/* 80399AA0-80399AB8 0018+00 s=1 e=0 z=0  None .rodata    t_tag$3768                                                   */
SECTION_RODATA static u8 const t_tag[24] = {
	0x6D, 0x67, 0x5F, 0x65, 0x34, 0x6C, 0x69, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x66, 0x34, 0x5F, 0x77,
	0x00, 0x00, 0x00, 0x00, 0x74, 0x34, 0x5F, 0x73,
};

/* 80399AB8-80399B08 004B+05 s=1 e=0 z=0  None .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char const* const stringBase_80399AB8 = "zelda_kanban_stone_a.blo";
SECTION_DEAD char const* const stringBase_80399AD1 = "zelda_kanban_stone_a.bck";
SECTION_DEAD char const* const stringBase_80399AEA = "zelda_kanban_stone_a.btk";
/* @stringBase0 padding */
SECTION_DEAD static char const* const pad_80399B03 = "\0\0\0\0";
#pragma pop

/* 803C1240-803C1298 0058+00 s=2 e=0 z=0  None .data      __vt__16dMsgScrnKanban_c                                     */
SECTION_DATA void* __vt__16dMsgScrnKanban_c[22] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)draw__16dMsgScrnKanban_cFv,
	(void*)__dt__16dMsgScrnKanban_cFv,
	(void*)exec__16dMsgScrnKanban_cFv,
	(void*)multiDraw__14dMsgScrnBase_cFv,
	(void*)drawSelf__14dMsgScrnBase_cFv,
	(void*)setSelectString__14dMsgScrnBase_cFPcPcPc,
	(void*)setSelectRubyString__14dMsgScrnBase_cFPcPcPc,
	(void*)arwAnimeInit__14dMsgScrnBase_cFv,
	(void*)arwAnimeMove__14dMsgScrnBase_cFv,
	(void*)dotAnimeInit__14dMsgScrnBase_cFv,
	(void*)dotAnimeMove__14dMsgScrnBase_cFv,
	(void*)isSelect__14dMsgScrnBase_cFv,
	(void*)selectAnimeInit__14dMsgScrnBase_cFUcUcfUc,
	(void*)selectAnimeMove__14dMsgScrnBase_cFUcUcb,
	(void*)selectAnimeEnd__14dMsgScrnBase_cFv,
	(void*)fukiScale__16dMsgScrnKanban_cFf,
	(void*)fukiTrans__16dMsgScrnKanban_cFff,
	(void*)fukiAlpha__16dMsgScrnKanban_cFf,
	(void*)fontAlpha__14dMsgScrnBase_cFf,
	(void*)fukiPosCalc__14dMsgScrnBase_cFUc,
};

/* 80454CC0-80454CC4 0004+00 s=2 e=0 z=0  None .sdata2    @3944                                                        */
SECTION_SDATA2 static u8 lit_3944[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 80454CC4-80454CC8 0004+00 s=3 e=0 z=0  None .sdata2    @3945                                                        */
SECTION_SDATA2 static f32 lit_3945 = 1.0f;

/* 80454CC8-80454CD0 0004+04 s=1 e=0 z=0  None .sdata2    @3946                                                        */
SECTION_SDATA2 static f32 lit_3946[1 + 1 /* padding */] = {
	6.0f / 5.0f,
	/* padding */
	0.0f,
};

/* 80244E38-8024534C 0514+00 s=0 e=1 z=0  None .text      __ct__16dMsgScrnKanban_cFP10JKRExpHeap                       */
//	80244E50: 803621D4 (_savegpr_27)
//	80244E5C: 8023C0DC (__ct__14dMsgScrnBase_cFv)
//	80244E60: 803C1240 (__vt__16dMsgScrnKanban_c)
//	80244E64: 803C1240 (__vt__16dMsgScrnKanban_c)
//	80244E80: 8002E3D0 (dComIfGp_getSubHeap2D__Fi)
//	80244E8C: 802CE784 (getTotalFreeSize__7JKRHeapFv)
//	80244E94: 8023C16C (init__14dMsgScrnBase_cFv)
//	80244E9C: 802CEC4C (__nw__FUl)
//	80244EA8: 802F8498 (__ct__9J2DScreenFv)
//	80244EB8: 80399AB8 (msg_scrn_d_msg_scrn_kanban__stringBase0)
//	80244EBC: 80399AB8 (msg_scrn_d_msg_scrn_kanban__stringBase0)
//	80244EC4: 804061C0 (g_dComIfG_gameInfo)
//	80244EC8: 804061C0 (g_dComIfG_gameInfo)
//	80244ED0: 802F8648 (setPriority__9J2DScreenFPCcUlP10JKRArchive)
//	80244ED8: 802550E8 (dPaneClass_showNullPane__FP9J2DScreen)
//	80244F0C: 80399AB8 (msg_scrn_d_msg_scrn_kanban__stringBase0)
//	80244F10: 80399AB8 (msg_scrn_d_msg_scrn_kanban__stringBase0)
//	80244F1C: 802D4270 (getGlbResource__13JKRFileLoaderFPCcP13JKRFileLoader)
//	80244F20: 80308A6C (load__20J2DAnmLoaderDataBaseFPCv)
//	80244F28: 80399AB8 (msg_scrn_d_msg_scrn_kanban__stringBase0)
//	80244F2C: 80399AB8 (msg_scrn_d_msg_scrn_kanban__stringBase0)
//	80244F38: 802D4270 (getGlbResource__13JKRFileLoaderFPCcP13JKRFileLoader)
//	80244F3C: 80308A6C (load__20J2DAnmLoaderDataBaseFPCv)
//	80244F5C: 80454CC0 (lit_3944)
//	80244F68: 802CEC4C (__nw__FUl)
//	80244F8C: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80244FB4: 80454CC4 (lit_3945)
//	80244FC8: 802F7FCC (animationTransform__7J2DPaneFv)
//	80244FE8: 8043028C (g_MsgObject_HIO_c)
//	80244FEC: 8043028C (g_MsgObject_HIO_c)
//	8024501C: 802CEC4C (__nw__FUl)
//	80245040: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80245050: 802CEC4C (__nw__FUl)
//	80245074: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	802450AC: 802CEC4C (__nw__FUl)
//	802450BC: 80399AA0 (t_tag)
//	802450C0: 80399AA0 (t_tag)
//	802450D8: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	802450F0: 800149F0 (mDoExt_getMesgFont__Fv)
//	80245214: 80454CC8 (lit_3946)
//	80245274: 802542E8 (getGlobalPosX__8CPaneMgrFv)
//	80245280: 80254364 (getGlobalPosY__8CPaneMgrFv)
//	80245288: 80454CC0 (lit_3944)
//	80245300: 80454CC8 (lit_3946)
//	80245338: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  JKRExpHeap* False
// 	 JKRExpHeap False
asm dMsgScrnKanban_c::dMsgScrnKanban_c(JKRExpHeap* param_0) {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_kanban/__ct__16dMsgScrnKanban_cFP10JKRExpHeap.s"
}
#pragma pop


/* 8024534C-80245528 01DC+00 s=1 e=0 z=0  None .text      __dt__16dMsgScrnKanban_cFv                                   */
//	8024535C: 803621D4 (_savegpr_27)
//	8024536C: 803C1240 (__vt__16dMsgScrnKanban_c)
//	80245370: 803C1240 (__vt__16dMsgScrnKanban_c)
//	802454D4: 804061C0 (g_dComIfG_gameInfo)
//	802454D8: 804061C0 (g_dComIfG_gameInfo)
//	802454F8: 8023C124 (__dt__14dMsgScrnBase_cFv)
//	80245508: 802CED3C (__dl__FPv)
//	80245514: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dMsgScrnKanban_c::~dMsgScrnKanban_c() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_kanban/__dt__16dMsgScrnKanban_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454CD0-80454CD8 0008+00 s=1 e=0 z=0  None .sdata2    @4033                                                        */
SECTION_SDATA2 static f64 lit_4033 = 4503601774854144.0 /* cast s32 to float */;

/* 80245528-80245618 00F0+00 s=1 e=0 z=0  None .text      exec__16dMsgScrnKanban_cFv                                   */
//	80245540: 80454CC4 (lit_3945)
//	80245558: 80454CD0 (lit_4033)
//	802455A8: 802F9690 (animation__9J2DScreenFv)
//	802455B0: 8023C574 (isTalkNow__14dMsgScrnBase_cFv)
//	802455C0: 80454CC4 (lit_3945)
//	802455D4: 8043028C (g_MsgObject_HIO_c)
//	802455D8: 8043028C (g_MsgObject_HIO_c)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMsgScrnKanban_c::exec() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_kanban/exec__16dMsgScrnKanban_cFv.s"
}
#pragma pop


/* 80245618-802456A0 0088+00 s=1 e=0 z=0  None .text      draw__16dMsgScrnKanban_cFv                                   */
//	80245630: 804061C0 (g_dComIfG_gameInfo)
//	80245634: 804061C0 (g_dComIfG_gameInfo)
//	80245654: 80454CC0 (lit_3944)
//	80245660: 802F8ED4 (draw__9J2DScreenFffPC14J2DGrafContext)
//	8024566C: 80454CC0 (lit_3944)
//	80245674: 80454CC4 (lit_3945)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMsgScrnKanban_c::draw() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_kanban/draw__16dMsgScrnKanban_cFv.s"
}
#pragma pop


/* 802456A0-80245754 00B4+00 s=1 e=0 z=0  None .text      fukiAlpha__16dMsgScrnKanban_cFf                              */
//	802456B8: 803621D8 (_savegpr_28)
//	802456C8: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	802456D0: 8043028C (g_MsgObject_HIO_c)
//	802456D4: 8043028C (g_MsgObject_HIO_c)
//	802456E0: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	802456EC: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80245708: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80245720: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80245740: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 False
asm void dMsgScrnKanban_c::fukiAlpha(f32 param_0) {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_kanban/fukiAlpha__16dMsgScrnKanban_cFf.s"
}
#pragma pop


/* 80245754-80245758 0004+00 s=1 e=0 z=0  None .text      fukiScale__16dMsgScrnKanban_cFf                              */
// True False
//  void False
//  f32 False
void dMsgScrnKanban_c::fukiScale(f32 param_0) {
	/* empty function */
}


/* 80245758-8024575C 0004+00 s=1 e=0 z=0  None .text      fukiTrans__16dMsgScrnKanban_cFff                             */
// True False
//  void False
//  f32 False
//  f32 False
void dMsgScrnKanban_c::fukiTrans(f32 param_0, f32 param_1) {
	/* empty function */
}


