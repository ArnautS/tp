// 
// Generated By: dol2asm
// Translation Unit: msg/scrn/d_msg_scrn_boss
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "msg/scrn/d_msg_scrn_boss.h"

// 
// Types:
// 

struct dMsgScrnBoss_c {
	/* 8023C5C8 */ // False False
dMsgScrnBoss_c();
	/* 8023C928 */ // True False
~dMsgScrnBoss_c();
	/* 8023CA88 */ // True False
void exec();
	/* 8023CB98 */ // True False
void drawSelf();
	/* 8023CBF0 */ // True False
//  f32 False
void fukiAlpha(f32);
	/* 8023CC7C */ // True False
//  void False
//  f32 False
void fukiScale(f32);
	/* 8023CC80 */ // True False
//  void False
//  f32 False
//  f32 False
void fukiTrans(f32, f32);
	/* 8023CC84 */ // True False
//  void False
//  f32 False
void fontAlpha(f32);
};

struct dMsgScrnBase_c {
	/* 80238C40 */ // False False
//  void False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
void setSelectRubyString(char*, char*, char*);
	/* 80238C44 */ // False False
//  void False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
void setSelectString(char*, char*, char*);
	/* 80238C48 */ // False False
//  bool False
//  u8 False
//  u8 False
//  bool False
bool selectAnimeMove(u8, u8, bool);
	/* 80238C50 */ // False False
//  void False
//  u8 False
//  u8 False
//  f32 False
//  u8 False
void selectAnimeInit(u8, u8, f32, u8);
	/* 80238C54 */ // False False
//  void False
void arwAnimeMove();
	/* 80238C58 */ // False False
//  void False
void arwAnimeInit();
	/* 80238C5C */ // False False
//  void False
//  u8 False
void fukiPosCalc(u8);
	/* 80238C60 */ // False False
//  bool False
bool isSelect();
	/* 80238C68 */ // False False
//  bool False
bool selectAnimeEnd();
	/* 80238C70 */ // False False
//  void False
void dotAnimeMove();
	/* 80238C74 */ // False False
//  void False
void dotAnimeInit();
	/* 8023C0DC */ // False False
dMsgScrnBase_c();
	/* 8023C124 */ // False False
~dMsgScrnBase_c();
	/* 8023C16C */ // False False
void init();
	/* 8023C234 */ // False False
void multiDraw();
	/* 8023C274 */ // False False
void draw();
	/* 8023C32C */ // False False
//  f32 False
//  f32 False
//  f32 False
void drawOutFont(f32, f32, f32);
	/* 8023C574 */ // False False
void isTalkNow();
};

struct JKRExpHeap {
};

struct JKRArchive {
};

struct J2DTextBox {
	/* 8030074C */ // False False
//  s16 False
//  char const* False
// 	 char const False
// 		 char False
//  ... False
void setString(s16, char const*, ...);
};

struct J2DScreen {
	/* 802F8498 */ // False False
J2DScreen();
	/* 802F8648 */ // False False
//  char const* False
// 	 char const False
// 		 char False
//  u32 False
//  JKRArchive* False
// 	 JKRArchive False
void setPriority(char const*, u32, JKRArchive*);
};

struct CPaneMgrAlpha {
	/* 802557D0 */ // False False
//  f32 False
void setAlphaRate(f32);
};

struct CPaneMgr {
	/* 80253984 */ // False False
//  J2DScreen* False
// 	 J2DScreen False
//  u64 False
//  u8 False
//  JKRExpHeap* False
// 	 JKRExpHeap False
CPaneMgr(J2DScreen*, u64, u8, JKRExpHeap*);
	/* 802542E8 */ // False False
void getGlobalPosX();
	/* 80254364 */ // False False
void getGlobalPosY();
	/* 802545B0 */ // False False
//  f32 False
//  f32 False
void paneTrans(f32, f32);
};

// 
// Forward References:
// 


// False False
extern "C" void __ct__14dMsgScrnBoss_cFv();
// True False
extern "C" void __dt__14dMsgScrnBoss_cFv();
// True False
extern "C" void exec__14dMsgScrnBoss_cFv();
// True False
extern "C" void drawSelf__14dMsgScrnBoss_cFv();
// True False
//  f32 False
extern "C" void fukiAlpha__14dMsgScrnBoss_cFf();
// True False
//  void False
//  f32 False
extern "C" void fukiScale__14dMsgScrnBoss_cFf();
// True False
//  void False
//  f32 False
//  f32 False
extern "C" void fukiTrans__14dMsgScrnBoss_cFff();
// True False
//  void False
//  f32 False
extern "C" void fontAlpha__14dMsgScrnBoss_cFf();
extern "C" extern char const* const msg_scrn_d_msg_scrn_boss__stringBase0;
extern "C" extern void* __vt__14dMsgScrnBoss_c[22];

// 
// External References:
// 

// False False
void mDoExt_getRubyFont();
// False False
//  J2DScreen* False
// 	 J2DScreen False
void dPaneClass_showNullPane(J2DScreen*);
// False False
//  void* False
// 	 void False
//  u32 False
void* operator new(u32);
// False False
//  void False
//  void* False
// 	 void False
void operator delete(void*);

// False False
extern "C" void mDoExt_getRubyFont__Fv();
// False False
//  void False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
extern "C" void setSelectRubyString__14dMsgScrnBase_cFPcPcPc();
// False False
//  void False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
extern "C" void setSelectString__14dMsgScrnBase_cFPcPcPc();
// False False
//  bool False
//  u8 False
//  u8 False
//  bool False
extern "C" bool selectAnimeMove__14dMsgScrnBase_cFUcUcb();
// False False
//  void False
//  u8 False
//  u8 False
//  f32 False
//  u8 False
extern "C" void selectAnimeInit__14dMsgScrnBase_cFUcUcfUc();
// False False
//  void False
extern "C" void arwAnimeMove__14dMsgScrnBase_cFv();
// False False
//  void False
extern "C" void arwAnimeInit__14dMsgScrnBase_cFv();
// False False
//  void False
//  u8 False
extern "C" void fukiPosCalc__14dMsgScrnBase_cFUc();
// False False
//  bool False
extern "C" bool isSelect__14dMsgScrnBase_cFv();
// False False
//  bool False
extern "C" bool selectAnimeEnd__14dMsgScrnBase_cFv();
// False False
//  void False
extern "C" void dotAnimeMove__14dMsgScrnBase_cFv();
// False False
//  void False
extern "C" void dotAnimeInit__14dMsgScrnBase_cFv();
// False False
extern "C" void __ct__14dMsgScrnBase_cFv();
// False False
extern "C" void __dt__14dMsgScrnBase_cFv();
// False False
extern "C" void init__14dMsgScrnBase_cFv();
// False False
extern "C" void multiDraw__14dMsgScrnBase_cFv();
// False False
extern "C" void draw__14dMsgScrnBase_cFv();
// False False
//  f32 False
//  f32 False
//  f32 False
extern "C" void drawOutFont__14dMsgScrnBase_cFfff();
// False False
extern "C" void isTalkNow__14dMsgScrnBase_cFv();
// False False
//  J2DScreen* False
// 	 J2DScreen False
//  u64 False
//  u8 False
//  JKRExpHeap* False
// 	 JKRExpHeap False
extern "C" void __ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap();
// False False
extern "C" void getGlobalPosX__8CPaneMgrFv();
// False False
extern "C" void getGlobalPosY__8CPaneMgrFv();
// False False
//  f32 False
//  f32 False
extern "C" void paneTrans__8CPaneMgrFff();
// False False
//  J2DScreen* False
// 	 J2DScreen False
extern "C" void dPaneClass_showNullPane__FP9J2DScreen();
// False False
//  f32 False
extern "C" void setAlphaRate__13CPaneMgrAlphaFf();
// False False
//  void* False
// 	 void False
//  u32 False
extern "C" void* __nw__FUl();
// False False
//  void False
//  void* False
// 	 void False
extern "C" void __dl__FPv();
// False False
extern "C" void __ct__9J2DScreenFv();
// False False
//  char const* False
// 	 char const False
// 		 char False
//  u32 False
//  JKRArchive* False
// 	 JKRArchive False
extern "C" void setPriority__9J2DScreenFPCcUlP10JKRArchive();
// False False
//  s16 False
//  char const* False
// 	 char const False
// 		 char False
//  ... False
extern "C" void setString__10J2DTextBoxFsPCce();
// False False
extern "C" void _savegpr_26();
// False False
extern "C" void _savegpr_29();
// False False
extern "C" void _restgpr_26();
// False False
extern "C" void _restgpr_29();
extern "C" extern u8 g_dComIfG_gameInfo[122384];
extern "C" extern u8 g_MsgObject_HIO_c[1040];

// 
// Declarations:
// 

/* ############################################################################################## */
/* 803998F8-80399910 0015+03 s=1 e=0 z=0  None .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char const* const stringBase_803998F8 = "zelda_boss_name.blo";
SECTION_DEAD char const* const stringBase_8039990C = "";
/* @stringBase0 padding */
SECTION_DEAD static char const* const pad_8039990D = "\0\0";
#pragma pop

/* 803C0DB0-803C0DE8 0038+00 s=1 e=0 z=0  None .data      t_tag$3759                                                   */
SECTION_DATA static u8 t_tag[56] = {
	0x00, 0x73, 0x66, 0x6F, 0x6E, 0x74, 0x62, 0x30, 0x00, 0x73, 0x66, 0x6F, 0x6E, 0x74, 0x62, 0x31,
	0x00, 0x73, 0x66, 0x6F, 0x6E, 0x74, 0x62, 0x32, 0x00, 0x73, 0x66, 0x6F, 0x6E, 0x74, 0x6C, 0x30,
	0x00, 0x73, 0x66, 0x6F, 0x6E, 0x74, 0x6C, 0x31, 0x00, 0x73, 0x66, 0x6F, 0x6E, 0x74, 0x6C, 0x32,
	0x00, 0x73, 0x66, 0x6F, 0x6E, 0x74, 0x30, 0x30,
};

/* 803C0DE8-803C0E40 0058+00 s=2 e=0 z=0  None .data      __vt__14dMsgScrnBoss_c                                       */
SECTION_DATA void* __vt__14dMsgScrnBoss_c[22] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)draw__14dMsgScrnBase_cFv,
	(void*)__dt__14dMsgScrnBoss_cFv,
	(void*)exec__14dMsgScrnBoss_cFv,
	(void*)multiDraw__14dMsgScrnBase_cFv,
	(void*)drawSelf__14dMsgScrnBoss_cFv,
	(void*)setSelectString__14dMsgScrnBase_cFPcPcPc,
	(void*)setSelectRubyString__14dMsgScrnBase_cFPcPcPc,
	(void*)arwAnimeInit__14dMsgScrnBase_cFv,
	(void*)arwAnimeMove__14dMsgScrnBase_cFv,
	(void*)dotAnimeInit__14dMsgScrnBase_cFv,
	(void*)dotAnimeMove__14dMsgScrnBase_cFv,
	(void*)isSelect__14dMsgScrnBase_cFv,
	(void*)selectAnimeInit__14dMsgScrnBase_cFUcUcfUc,
	(void*)selectAnimeMove__14dMsgScrnBase_cFUcUcb,
	(void*)selectAnimeEnd__14dMsgScrnBase_cFv,
	(void*)fukiScale__14dMsgScrnBoss_cFf,
	(void*)fukiTrans__14dMsgScrnBoss_cFff,
	(void*)fukiAlpha__14dMsgScrnBoss_cFf,
	(void*)fontAlpha__14dMsgScrnBoss_cFf,
	(void*)fukiPosCalc__14dMsgScrnBase_cFUc,
};

/* 80454BB0-80454BB4 0004+00 s=3 e=0 z=0  None .sdata2    @3854                                                        */
SECTION_SDATA2 static f32 lit_3854 = 1.0f;

/* 8023C5C8-8023C928 0360+00 s=0 e=1 z=0  None .text      __ct__14dMsgScrnBoss_cFv                                     */
//	8023C5E0: 803621D0 (_savegpr_26)
//	8023C5E8: 8023C0DC (__ct__14dMsgScrnBase_cFv)
//	8023C5EC: 803C0DE8 (__vt__14dMsgScrnBoss_c)
//	8023C5F0: 803C0DE8 (__vt__14dMsgScrnBoss_c)
//	8023C5FC: 8023C16C (init__14dMsgScrnBase_cFv)
//	8023C604: 802CEC4C (__nw__FUl)
//	8023C610: 802F8498 (__ct__9J2DScreenFv)
//	8023C620: 803998F8 (msg_scrn_d_msg_scrn_boss__stringBase0)
//	8023C624: 803998F8 (msg_scrn_d_msg_scrn_boss__stringBase0)
//	8023C62C: 804061C0 (g_dComIfG_gameInfo)
//	8023C630: 804061C0 (g_dComIfG_gameInfo)
//	8023C638: 802F8648 (setPriority__9J2DScreenFPCcUlP10JKRArchive)
//	8023C640: 802550E8 (dPaneClass_showNullPane__FP9J2DScreen)
//	8023C648: 802CEC4C (__nw__FUl)
//	8023C66C: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	8023C678: 8043028C (g_MsgObject_HIO_c)
//	8023C67C: 8043028C (g_MsgObject_HIO_c)
//	8023C6AC: 802CEC4C (__nw__FUl)
//	8023C6D4: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	8023C6E0: 8043028C (g_MsgObject_HIO_c)
//	8023C6E4: 8043028C (g_MsgObject_HIO_c)
//	8023C714: 8043028C (g_MsgObject_HIO_c)
//	8023C718: 8043028C (g_MsgObject_HIO_c)
//	8023C724: 802545B0 (paneTrans__8CPaneMgrFff)
//	8023C72C: 802CEC4C (__nw__FUl)
//	8023C750: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	8023C75C: 8043028C (g_MsgObject_HIO_c)
//	8023C760: 8043028C (g_MsgObject_HIO_c)
//	8023C790: 8043028C (g_MsgObject_HIO_c)
//	8023C794: 8043028C (g_MsgObject_HIO_c)
//	8023C7A0: 802545B0 (paneTrans__8CPaneMgrFff)
//	8023C7B0: 80454BB0 (lit_3854)
//	8023C7B4: 803998F8 (msg_scrn_d_msg_scrn_boss__stringBase0)
//	8023C7B8: 803998F8 (msg_scrn_d_msg_scrn_boss__stringBase0)
//	8023C7C0: 802CEC4C (__nw__FUl)
//	8023C7D0: 803C0DB0 (t_tag)
//	8023C7D4: 803C0DB0 (t_tag)
//	8023C7EC: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	8023C804: 80014B04 (mDoExt_getRubyFont__Fv)
//	8023C844: 8030074C (setString__10J2DTextBoxFsPCce)
//	8023C8F0: 802542E8 (getGlobalPosX__8CPaneMgrFv)
//	8023C8FC: 80254364 (getGlobalPosY__8CPaneMgrFv)
//	8023C914: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm dMsgScrnBoss_c::dMsgScrnBoss_c() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_boss/__ct__14dMsgScrnBoss_cFv.s"
}
#pragma pop


/* 8023C928-8023CA88 0160+00 s=1 e=0 z=0  None .text      __dt__14dMsgScrnBoss_cFv                                     */
//	8023C938: 803621D0 (_savegpr_26)
//	8023C948: 803C0DE8 (__vt__14dMsgScrnBoss_c)
//	8023C94C: 803C0DE8 (__vt__14dMsgScrnBoss_c)
//	8023CA34: 804061C0 (g_dComIfG_gameInfo)
//	8023CA38: 804061C0 (g_dComIfG_gameInfo)
//	8023CA58: 8023C124 (__dt__14dMsgScrnBase_cFv)
//	8023CA68: 802CED3C (__dl__FPv)
//	8023CA74: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dMsgScrnBoss_c::~dMsgScrnBoss_c() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_boss/__dt__14dMsgScrnBoss_cFv.s"
}
#pragma pop


/* 8023CA88-8023CB98 0110+00 s=1 e=0 z=0  None .text      exec__14dMsgScrnBoss_cFv                                     */
//	8023CA9C: 8043028C (g_MsgObject_HIO_c)
//	8023CAA0: 8043028C (g_MsgObject_HIO_c)
//	8023CACC: 8043028C (g_MsgObject_HIO_c)
//	8023CAD0: 8043028C (g_MsgObject_HIO_c)
//	8023CB00: 8043028C (g_MsgObject_HIO_c)
//	8023CB04: 8043028C (g_MsgObject_HIO_c)
//	8023CB10: 802545B0 (paneTrans__8CPaneMgrFff)
//	8023CB14: 8043028C (g_MsgObject_HIO_c)
//	8023CB18: 8043028C (g_MsgObject_HIO_c)
//	8023CB48: 8043028C (g_MsgObject_HIO_c)
//	8023CB4C: 8043028C (g_MsgObject_HIO_c)
//	8023CB58: 802545B0 (paneTrans__8CPaneMgrFff)
//	8023CB60: 8023C574 (isTalkNow__14dMsgScrnBase_cFv)
//	8023CB70: 80454BB0 (lit_3854)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMsgScrnBoss_c::exec() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_boss/exec__14dMsgScrnBoss_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454BB4-80454BB8 0004+00 s=1 e=0 z=0  None .sdata2    @3916                                                        */
SECTION_SDATA2 static u8 lit_3916[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 8023CB98-8023CBF0 0058+00 s=1 e=0 z=0  None .text      drawSelf__14dMsgScrnBoss_cFv                                 */
//	8023CBAC: 804061C0 (g_dComIfG_gameInfo)
//	8023CBB0: 804061C0 (g_dComIfG_gameInfo)
//	8023CBCC: 80454BB4 (lit_3916)
//	8023CBD4: 80454BB0 (lit_3854)
//	8023CBD8: 8023C32C (drawOutFont__14dMsgScrnBase_cFfff)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMsgScrnBoss_c::drawSelf() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_boss/drawSelf__14dMsgScrnBoss_cFv.s"
}
#pragma pop


/* 8023CBF0-8023CC7C 008C+00 s=1 e=0 z=0  None .text      fukiAlpha__14dMsgScrnBoss_cFf                                */
//	8023CC08: 803621DC (_savegpr_29)
//	8023CC18: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8023CC20: 8043028C (g_MsgObject_HIO_c)
//	8023CC24: 8043028C (g_MsgObject_HIO_c)
//	8023CC30: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8023CC48: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8023CC68: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 False
asm void dMsgScrnBoss_c::fukiAlpha(f32 param_0) {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_boss/fukiAlpha__14dMsgScrnBoss_cFf.s"
}
#pragma pop


/* 8023CC7C-8023CC80 0004+00 s=1 e=0 z=0  None .text      fukiScale__14dMsgScrnBoss_cFf                                */
// True False
//  void False
//  f32 False
void dMsgScrnBoss_c::fukiScale(f32 param_0) {
	/* empty function */
}


/* 8023CC80-8023CC84 0004+00 s=1 e=0 z=0  None .text      fukiTrans__14dMsgScrnBoss_cFff                               */
// True False
//  void False
//  f32 False
//  f32 False
void dMsgScrnBoss_c::fukiTrans(f32 param_0, f32 param_1) {
	/* empty function */
}


/* 8023CC84-8023CC88 0004+00 s=1 e=0 z=0  None .text      fontAlpha__14dMsgScrnBoss_cFf                                */
// True False
//  void False
//  f32 False
void dMsgScrnBoss_c::fontAlpha(f32 param_0) {
	/* empty function */
}


