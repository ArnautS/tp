// 
// Generated By: dol2asm
// Translation Unit: msg/scrn/d_msg_scrn_staff
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "msg/scrn/d_msg_scrn_staff.h"

// 
// Types:
// 

struct dMsgScrnStaff_c {
	/* 80246B34 */ // False False
//  u8 False
dMsgScrnStaff_c(u8);
	/* 80246DD8 */ // True False
~dMsgScrnStaff_c();
	/* 80246EE8 */ // True False
void exec();
	/* 80246F68 */ // True False
void drawSelf();
	/* 80246FC0 */ // True False
//  f32 False
void fukiAlpha(f32);
	/* 80246FE4 */ // True False
//  void False
//  f32 False
void fukiScale(f32);
	/* 80246FE8 */ // True False
//  void False
//  f32 False
//  f32 False
void fukiTrans(f32, f32);
	/* 80246FEC */ // True False
//  void False
//  f32 False
void fontAlpha(f32);
};

struct dMsgScrnBase_c {
	/* 80238C40 */ // False False
//  void False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
void setSelectRubyString(char*, char*, char*);
	/* 80238C44 */ // False False
//  void False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
void setSelectString(char*, char*, char*);
	/* 80238C48 */ // False False
//  bool False
//  u8 False
//  u8 False
//  bool False
bool selectAnimeMove(u8, u8, bool);
	/* 80238C50 */ // False False
//  void False
//  u8 False
//  u8 False
//  f32 False
//  u8 False
void selectAnimeInit(u8, u8, f32, u8);
	/* 80238C54 */ // False False
//  void False
void arwAnimeMove();
	/* 80238C58 */ // False False
//  void False
void arwAnimeInit();
	/* 80238C5C */ // False False
//  void False
//  u8 False
void fukiPosCalc(u8);
	/* 80238C60 */ // False False
//  bool False
bool isSelect();
	/* 80238C68 */ // False False
//  bool False
bool selectAnimeEnd();
	/* 80238C70 */ // False False
//  void False
void dotAnimeMove();
	/* 80238C74 */ // False False
//  void False
void dotAnimeInit();
	/* 8023C0DC */ // False False
dMsgScrnBase_c();
	/* 8023C124 */ // False False
~dMsgScrnBase_c();
	/* 8023C16C */ // False False
void init();
	/* 8023C234 */ // False False
void multiDraw();
	/* 8023C274 */ // False False
void draw();
	/* 8023C32C */ // False False
//  f32 False
//  f32 False
//  f32 False
void drawOutFont(f32, f32, f32);
	/* 8023C574 */ // False False
void isTalkNow();
};

struct JKRExpHeap {
};

struct JKRArchive {
};

struct J2DTextBox {
	/* 8030074C */ // False False
//  s16 False
//  char const* False
// 	 char const False
// 		 char False
//  ... False
void setString(s16, char const*, ...);
};

struct J2DScreen {
	/* 802F8498 */ // False False
J2DScreen();
	/* 802F8648 */ // False False
//  char const* False
// 	 char const False
// 		 char False
//  u32 False
//  JKRArchive* False
// 	 JKRArchive False
void setPriority(char const*, u32, JKRArchive*);
};

struct CPaneMgrAlpha {
	/* 802557D0 */ // False False
//  f32 False
void setAlphaRate(f32);
};

struct CPaneMgr {
	/* 80253984 */ // False False
//  J2DScreen* False
// 	 J2DScreen False
//  u64 False
//  u8 False
//  JKRExpHeap* False
// 	 JKRExpHeap False
CPaneMgr(J2DScreen*, u64, u8, JKRExpHeap*);
	/* 802542E8 */ // False False
void getGlobalPosX();
	/* 80254364 */ // False False
void getGlobalPosY();
};

// 
// Forward References:
// 


// False False
//  u8 False
extern "C" void __ct__15dMsgScrnStaff_cFUc();
// True False
extern "C" void __dt__15dMsgScrnStaff_cFv();
// True False
extern "C" void exec__15dMsgScrnStaff_cFv();
// True False
extern "C" void drawSelf__15dMsgScrnStaff_cFv();
// True False
//  f32 False
extern "C" void fukiAlpha__15dMsgScrnStaff_cFf();
// True False
//  void False
//  f32 False
extern "C" void fukiScale__15dMsgScrnStaff_cFf();
// True False
//  void False
//  f32 False
//  f32 False
extern "C" void fukiTrans__15dMsgScrnStaff_cFff();
// True False
//  void False
//  f32 False
extern "C" void fontAlpha__15dMsgScrnStaff_cFf();
extern "C" extern char const* const msg_scrn_d_msg_scrn_staff__stringBase0;
extern "C" extern void* __vt__15dMsgScrnStaff_c[22];

// 
// External References:
// 

// False False
void mDoExt_getMesgFont();
// False False
//  J2DScreen* False
// 	 J2DScreen False
void dPaneClass_showNullPane(J2DScreen*);
// False False
//  void* False
// 	 void False
//  u32 False
void* operator new(u32);
// False False
//  void False
//  void* False
// 	 void False
void operator delete(void*);

// False False
extern "C" void mDoExt_getMesgFont__Fv();
// False False
//  void False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
extern "C" void setSelectRubyString__14dMsgScrnBase_cFPcPcPc();
// False False
//  void False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
extern "C" void setSelectString__14dMsgScrnBase_cFPcPcPc();
// False False
//  bool False
//  u8 False
//  u8 False
//  bool False
extern "C" bool selectAnimeMove__14dMsgScrnBase_cFUcUcb();
// False False
//  void False
//  u8 False
//  u8 False
//  f32 False
//  u8 False
extern "C" void selectAnimeInit__14dMsgScrnBase_cFUcUcfUc();
// False False
//  void False
extern "C" void arwAnimeMove__14dMsgScrnBase_cFv();
// False False
//  void False
extern "C" void arwAnimeInit__14dMsgScrnBase_cFv();
// False False
//  void False
//  u8 False
extern "C" void fukiPosCalc__14dMsgScrnBase_cFUc();
// False False
//  bool False
extern "C" bool isSelect__14dMsgScrnBase_cFv();
// False False
//  bool False
extern "C" bool selectAnimeEnd__14dMsgScrnBase_cFv();
// False False
//  void False
extern "C" void dotAnimeMove__14dMsgScrnBase_cFv();
// False False
//  void False
extern "C" void dotAnimeInit__14dMsgScrnBase_cFv();
// False False
extern "C" void __ct__14dMsgScrnBase_cFv();
// False False
extern "C" void __dt__14dMsgScrnBase_cFv();
// False False
extern "C" void init__14dMsgScrnBase_cFv();
// False False
extern "C" void multiDraw__14dMsgScrnBase_cFv();
// False False
extern "C" void draw__14dMsgScrnBase_cFv();
// False False
//  f32 False
//  f32 False
//  f32 False
extern "C" void drawOutFont__14dMsgScrnBase_cFfff();
// False False
extern "C" void isTalkNow__14dMsgScrnBase_cFv();
// False False
//  J2DScreen* False
// 	 J2DScreen False
//  u64 False
//  u8 False
//  JKRExpHeap* False
// 	 JKRExpHeap False
extern "C" void __ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap();
// False False
extern "C" void getGlobalPosX__8CPaneMgrFv();
// False False
extern "C" void getGlobalPosY__8CPaneMgrFv();
// False False
//  J2DScreen* False
// 	 J2DScreen False
extern "C" void dPaneClass_showNullPane__FP9J2DScreen();
// False False
//  f32 False
extern "C" void setAlphaRate__13CPaneMgrAlphaFf();
// False False
//  void* False
// 	 void False
//  u32 False
extern "C" void* __nw__FUl();
// False False
//  void False
//  void* False
// 	 void False
extern "C" void __dl__FPv();
// False False
extern "C" void __ct__9J2DScreenFv();
// False False
//  char const* False
// 	 char const False
// 		 char False
//  u32 False
//  JKRArchive* False
// 	 JKRArchive False
extern "C" void setPriority__9J2DScreenFPCcUlP10JKRArchive();
// False False
//  s16 False
//  char const* False
// 	 char const False
// 		 char False
//  ... False
extern "C" void setString__10J2DTextBoxFsPCce();
// False False
extern "C" void _savegpr_26();
// False False
extern "C" void _restgpr_26();
extern "C" extern u8 g_dComIfG_gameInfo[122384];
extern "C" extern u8 g_MsgObject_HIO_c[1040];

// 
// Declarations:
// 

/* ############################################################################################## */
/* 80399B98-80399BB0 0016+02 s=1 e=0 z=0  None .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char const* const stringBase_80399B98 = "zelda_staff_roll.blo";
SECTION_DEAD char const* const stringBase_80399BAD = "";
/* @stringBase0 padding */
SECTION_DEAD static char const* const pad_80399BAE = "\0";
#pragma pop

/* 803C1340-803C1370 0030+00 s=1 e=0 z=0  None .data      t_tag$3752                                                   */
SECTION_DATA static u8 t_tag[48] = {
	0x00, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5F, 0x73, 0x00, 0x00, 0x00, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x63, 0x65, 0x6E, 0x74, 0x65, 0x72, 0x5F, 0x73, 0x00, 0x00, 0x63, 0x65, 0x6E, 0x74, 0x65, 0x72,
	0x00, 0x00, 0x6C, 0x65, 0x66, 0x74, 0x5F, 0x73, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x65, 0x66, 0x74,
};

/* 803C1370-803C13C8 0058+00 s=2 e=0 z=0  None .data      __vt__15dMsgScrnStaff_c                                      */
SECTION_DATA void* __vt__15dMsgScrnStaff_c[22] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)draw__14dMsgScrnBase_cFv,
	(void*)__dt__15dMsgScrnStaff_cFv,
	(void*)exec__15dMsgScrnStaff_cFv,
	(void*)multiDraw__14dMsgScrnBase_cFv,
	(void*)drawSelf__15dMsgScrnStaff_cFv,
	(void*)setSelectString__14dMsgScrnBase_cFPcPcPc,
	(void*)setSelectRubyString__14dMsgScrnBase_cFPcPcPc,
	(void*)arwAnimeInit__14dMsgScrnBase_cFv,
	(void*)arwAnimeMove__14dMsgScrnBase_cFv,
	(void*)dotAnimeInit__14dMsgScrnBase_cFv,
	(void*)dotAnimeMove__14dMsgScrnBase_cFv,
	(void*)isSelect__14dMsgScrnBase_cFv,
	(void*)selectAnimeInit__14dMsgScrnBase_cFUcUcfUc,
	(void*)selectAnimeMove__14dMsgScrnBase_cFUcUcb,
	(void*)selectAnimeEnd__14dMsgScrnBase_cFv,
	(void*)fukiScale__15dMsgScrnStaff_cFf,
	(void*)fukiTrans__15dMsgScrnStaff_cFff,
	(void*)fukiAlpha__15dMsgScrnStaff_cFf,
	(void*)fontAlpha__15dMsgScrnStaff_cFf,
	(void*)fukiPosCalc__14dMsgScrnBase_cFUc,
};

/* 80454CF8-80454CFC 0004+00 s=2 e=0 z=0  None .sdata2    @3842                                                        */
SECTION_SDATA2 static u8 lit_3842[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 80246B34-80246DD8 02A4+00 s=0 e=1 z=0  None .text      __ct__15dMsgScrnStaff_cFUc                                   */
//	80246B44: 803621D0 (_savegpr_26)
//	80246B4C: 8023C0DC (__ct__14dMsgScrnBase_cFv)
//	80246B50: 803C1370 (__vt__15dMsgScrnStaff_c)
//	80246B54: 803C1370 (__vt__15dMsgScrnStaff_c)
//	80246B60: 8023C16C (init__14dMsgScrnBase_cFv)
//	80246B64: 80454CF8 (lit_3842)
//	80246B74: 802CEC4C (__nw__FUl)
//	80246B80: 802F8498 (__ct__9J2DScreenFv)
//	80246B90: 80399B98 (msg_scrn_d_msg_scrn_staff__stringBase0)
//	80246B94: 80399B98 (msg_scrn_d_msg_scrn_staff__stringBase0)
//	80246B9C: 804061C0 (g_dComIfG_gameInfo)
//	80246BA0: 804061C0 (g_dComIfG_gameInfo)
//	80246BA8: 802F8648 (setPriority__9J2DScreenFPCcUlP10JKRArchive)
//	80246BB0: 802550E8 (dPaneClass_showNullPane__FP9J2DScreen)
//	80246BB8: 802CEC4C (__nw__FUl)
//	80246BDC: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80246C44: 80399B98 (msg_scrn_d_msg_scrn_staff__stringBase0)
//	80246C48: 80399B98 (msg_scrn_d_msg_scrn_staff__stringBase0)
//	80246C50: 802CEC4C (__nw__FUl)
//	80246C60: 803C1340 (t_tag)
//	80246C64: 803C1340 (t_tag)
//	80246C7C: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80246C94: 800149F0 (mDoExt_getMesgFont__Fv)
//	80246CC8: 8030074C (setString__10J2DTextBoxFsPCce)
//	80246DA8: 802542E8 (getGlobalPosX__8CPaneMgrFv)
//	80246DB4: 80254364 (getGlobalPosY__8CPaneMgrFv)
//	80246DC4: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  u8 False
asm dMsgScrnStaff_c::dMsgScrnStaff_c(u8 param_0) {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_staff/__ct__15dMsgScrnStaff_cFUc.s"
}
#pragma pop


/* 80246DD8-80246EE8 0110+00 s=1 e=0 z=0  None .text      __dt__15dMsgScrnStaff_cFv                                    */
//	80246DE8: 803621D0 (_savegpr_26)
//	80246DF8: 803C1370 (__vt__15dMsgScrnStaff_c)
//	80246DFC: 803C1370 (__vt__15dMsgScrnStaff_c)
//	80246E94: 804061C0 (g_dComIfG_gameInfo)
//	80246E98: 804061C0 (g_dComIfG_gameInfo)
//	80246EB8: 8023C124 (__dt__14dMsgScrnBase_cFv)
//	80246EC8: 802CED3C (__dl__FPv)
//	80246ED4: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dMsgScrnStaff_c::~dMsgScrnStaff_c() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_staff/__dt__15dMsgScrnStaff_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454CFC-80454D00 0004+00 s=2 e=0 z=0  None .sdata2    @3877                                                        */
SECTION_SDATA2 static f32 lit_3877 = 1.0f;

/* 80246EE8-80246F68 0080+00 s=1 e=0 z=0  None .text      exec__15dMsgScrnStaff_cFv                                    */
//	80246EFC: 8043028C (g_MsgObject_HIO_c)
//	80246F00: 8043028C (g_MsgObject_HIO_c)
//	80246F30: 8023C574 (isTalkNow__14dMsgScrnBase_cFv)
//	80246F40: 80454CFC (lit_3877)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMsgScrnStaff_c::exec() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_staff/exec__15dMsgScrnStaff_cFv.s"
}
#pragma pop


/* 80246F68-80246FC0 0058+00 s=1 e=0 z=0  None .text      drawSelf__15dMsgScrnStaff_cFv                                */
//	80246F7C: 804061C0 (g_dComIfG_gameInfo)
//	80246F80: 804061C0 (g_dComIfG_gameInfo)
//	80246F9C: 80454CF8 (lit_3842)
//	80246FA4: 80454CFC (lit_3877)
//	80246FA8: 8023C32C (drawOutFont__14dMsgScrnBase_cFfff)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMsgScrnStaff_c::drawSelf() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_staff/drawSelf__15dMsgScrnStaff_cFv.s"
}
#pragma pop


/* 80246FC0-80246FE4 0024+00 s=1 e=0 z=0  None .text      fukiAlpha__15dMsgScrnStaff_cFf                               */
//	80246FD0: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 False
asm void dMsgScrnStaff_c::fukiAlpha(f32 param_0) {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_staff/fukiAlpha__15dMsgScrnStaff_cFf.s"
}
#pragma pop


/* 80246FE4-80246FE8 0004+00 s=1 e=0 z=0  None .text      fukiScale__15dMsgScrnStaff_cFf                               */
// True False
//  void False
//  f32 False
void dMsgScrnStaff_c::fukiScale(f32 param_0) {
	/* empty function */
}


/* 80246FE8-80246FEC 0004+00 s=1 e=0 z=0  None .text      fukiTrans__15dMsgScrnStaff_cFff                              */
// True False
//  void False
//  f32 False
//  f32 False
void dMsgScrnStaff_c::fukiTrans(f32 param_0, f32 param_1) {
	/* empty function */
}


/* 80246FEC-80246FF0 0004+00 s=1 e=0 z=0  None .text      fontAlpha__15dMsgScrnStaff_cFf                               */
// True False
//  void False
//  f32 False
void dMsgScrnStaff_c::fontAlpha(f32 param_0) {
	/* empty function */
}


