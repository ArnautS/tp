// 
// Generated By: dol2asm
// Translation Unit: msg/scrn/d_msg_scrn_talk
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "msg/scrn/d_msg_scrn_talk.h"

// 
// Types:
// 

struct JKRExpHeap {
};

struct dMsgScrnTalk_c {
	/* 80246FF0 */ // False False
//  u8 False
//  u8 False
//  JKRExpHeap* False
// 	 JKRExpHeap False
dMsgScrnTalk_c(u8, u8, JKRExpHeap*);
	/* 80247A90 */ // True False
~dMsgScrnTalk_c();
	/* 80247D34 */ // True False
void exec();
	/* 80247E4C */ // True False
void drawSelf();
	/* 802480F0 */ // True False
void arwAnimeInit();
	/* 80248114 */ // True False
void arwAnimeMove();
	/* 80248138 */ // True False
void dotAnimeInit();
	/* 8024815C */ // True False
void dotAnimeMove();
	/* 80248180 */ // True False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
void setSelectString(char*, char*, char*);
	/* 802481AC */ // True False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
void setSelectRubyString(char*, char*, char*);
	/* 802481D8 */ // True False
void isSelect();
	/* 8024820C */ // True False
//  u8 False
//  u8 False
//  f32 False
//  u8 False
void selectAnimeInit(u8, u8, f32, u8);
	/* 80248244 */ // True False
//  u8 False
//  u8 False
//  bool False
void selectAnimeMove(u8, u8, bool);
	/* 80248278 */ // True False
void selectAnimeEnd();
	/* 802482AC */ // True False
//  void False
//  f32 False
void fukiScale(f32);
	/* 802482B0 */ // True False
//  void False
//  f32 False
//  f32 False
void fukiTrans(f32, f32);
	/* 802482B4 */ // True False
//  f32 False
void fukiAlpha(f32);
	/* 8024835C */ // True False
//  u8 False
void fukiPosCalc(u8);
};

struct dMsgScrnLight_c {
	/* 80245934 */ // False False
//  u8 False
//  u8 False
dMsgScrnLight_c(u8, u8);
	/* 80245C04 */ // False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  u8 False
void draw(f32*, f32, f32, f32, f32, f32, u8);
};

struct dMsgScrnBase_c {
	/* 8023C0DC */ // False False
dMsgScrnBase_c();
	/* 8023C124 */ // False False
~dMsgScrnBase_c();
	/* 8023C16C */ // False False
void init();
	/* 8023C234 */ // False False
void multiDraw();
	/* 8023C274 */ // False False
void draw();
	/* 8023C32C */ // False False
//  f32 False
//  f32 False
//  f32 False
void drawOutFont(f32, f32, f32);
	/* 8023C4F4 */ // False False
//  f32 False
void fontAlpha(f32);
	/* 8023C574 */ // False False
void isTalkNow();
};

struct dMsgScrnArrow_c {
	/* 8023B9B4 */ // False False
dMsgScrnArrow_c();
	/* 8023BDC0 */ // False False
void draw();
	/* 8023BDF8 */ // False False
//  f32 False
//  f32 False
void setPos(f32, f32);
	/* 8023BE34 */ // False False
void arwAnimeInit();
	/* 8023BE90 */ // False False
void arwAnimeMove();
	/* 8023BFC4 */ // False False
void dotAnimeInit();
	/* 8023C010 */ // False False
void dotAnimeMove();
};

struct dMsgScrn3Select_c {
	/* 802390B4 */ // False False
dMsgScrn3Select_c();
	/* 80239C64 */ // False False
void isSelect();
	/* 80239C78 */ // False False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
void setString(char*, char*, char*);
	/* 80239D08 */ // False False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
void setRubyString(char*, char*, char*);
	/* 80239D98 */ // False False
//  f32 False
//  f32 False
void translate(f32, f32);
	/* 80239DD4 */ // False False
//  f32 False
//  f32 False
void draw(f32, f32);
	/* 8023A094 */ // False False
//  u8 False
//  u8 False
//  u8 False
//  f32 False
//  u8 False
void selAnimeInit(u8, u8, u8, f32, u8);
	/* 8023A398 */ // False False
//  u8 False
//  u8 False
//  bool False
void selAnimeMove(u8, u8, bool);
	/* 8023A680 */ // False False
void selAnimeEnd();
	/* 8023A934 */ // False False
void getTextBoxWidth();
	/* 8023A94C */ // False False
void getFontSize();
	/* 8023A95C */ // False False
void getRubyFontSize();
	/* 8023A97C */ // False False
void getCharSpace();
	/* 8023A98C */ // False False
void getRubyCharSpace();
	/* 8023A9AC */ // False False
//  int False
void getTextBoxGlobalPosX(int);
	/* 8023A9D8 */ // False False
//  int False
void getTextBoxGlobalPosY(int);
};

struct dMsgObject_c {
	/* 8023819C */ // False False
void getActor();
};

struct JUtility {
	struct TColor {
	};

};

struct dMeter2Draw_c {
	/* 802140DC */ // False False
//  f32 False
//  f32 False
//  f32* False
// 	 f32 False
//  f32 False
//  JUtility::TColor False
//  JUtility::TColor False
//  JUtility::TColor False
//  JUtility::TColor False
//  f32 False
//  u8 False
void drawPikari(f32, f32, f32*, f32, JUtility::TColor, JUtility::TColor, JUtility::TColor, JUtility::TColor, f32, u8);
};

struct Vec {
};

struct cXyz {
	/* 8026702C */ // False False
//  bool False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
bool operator==(Vec const&) const;
};

struct JKRHeap {
	/* 802CE4D4 */ // False False
//  u32 False
//  int False
void alloc(u32, int);
	/* 802CE548 */ // False False
//  void* False
// 	 void False
void free(void*);
};

struct JKRArchive {
};

struct J2DTextBox {
	/* 8030074C */ // False False
//  s16 False
//  char const* False
// 	 char const False
// 		 char False
//  ... False
void setString(s16, char const*, ...);
};

struct J2DGrafContext {
};

struct J2DScreen {
	/* 802F8498 */ // False False
J2DScreen();
	/* 802F8648 */ // False False
//  char const* False
// 	 char const False
// 		 char False
//  u32 False
//  JKRArchive* False
// 	 JKRArchive False
void setPriority(char const*, u32, JKRArchive*);
	/* 802F8ED4 */ // False False
//  f32 False
//  f32 False
//  J2DGrafContext const* False
// 	 J2DGrafContext const False
// 		 J2DGrafContext False
void draw(f32, f32, J2DGrafContext const*);
};

struct J2DPane {
	/* 802F7100 */ // False False
void getBounds();
};

struct CPaneMgrAlpha {
	/* 802557D0 */ // False False
//  f32 False
void setAlphaRate(f32);
	/* 80255828 */ // False False
void getAlphaRate();
};

struct CPaneMgr {
	/* 80253984 */ // False False
//  J2DScreen* False
// 	 J2DScreen False
//  u64 False
//  u8 False
//  JKRExpHeap* False
// 	 JKRExpHeap False
CPaneMgr(J2DScreen*, u64, u8, JKRExpHeap*);
	/* 80253B2C */ // False False
void reinit();
	/* 802542E8 */ // False False
void getGlobalPosX();
	/* 80254364 */ // False False
void getGlobalPosY();
	/* 80254458 */ // False False
//  JUtility::TColor False
//  JUtility::TColor False
void setBlackWhite(JUtility::TColor, JUtility::TColor);
	/* 80254EBC */ // False False
//  J2DPane* False
// 	 J2DPane False
//  bool False
//  s16 False
void getGlobalVtxCenter(J2DPane*, bool, s16);
};

// 
// Forward References:
// 


// False False
//  u8 False
//  u8 False
//  JKRExpHeap* False
// 	 JKRExpHeap False
extern "C" void __ct__14dMsgScrnTalk_cFUcUcP10JKRExpHeap();
// True False
extern "C" void __dt__14dMsgScrnTalk_cFv();
// True False
extern "C" void exec__14dMsgScrnTalk_cFv();
// True False
extern "C" void drawSelf__14dMsgScrnTalk_cFv();
// True False
extern "C" void arwAnimeInit__14dMsgScrnTalk_cFv();
// True False
extern "C" void arwAnimeMove__14dMsgScrnTalk_cFv();
// True False
extern "C" void dotAnimeInit__14dMsgScrnTalk_cFv();
// True False
extern "C" void dotAnimeMove__14dMsgScrnTalk_cFv();
// True False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
extern "C" void setSelectString__14dMsgScrnTalk_cFPcPcPc();
// True False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
extern "C" void setSelectRubyString__14dMsgScrnTalk_cFPcPcPc();
// True False
extern "C" void isSelect__14dMsgScrnTalk_cFv();
// True False
//  u8 False
//  u8 False
//  f32 False
//  u8 False
extern "C" void selectAnimeInit__14dMsgScrnTalk_cFUcUcfUc();
// True False
//  u8 False
//  u8 False
//  bool False
extern "C" void selectAnimeMove__14dMsgScrnTalk_cFUcUcb();
// True False
extern "C" void selectAnimeEnd__14dMsgScrnTalk_cFv();
// True False
//  void False
//  f32 False
extern "C" void fukiScale__14dMsgScrnTalk_cFf();
// True False
//  void False
//  f32 False
//  f32 False
extern "C" void fukiTrans__14dMsgScrnTalk_cFff();
// True False
//  f32 False
extern "C" void fukiAlpha__14dMsgScrnTalk_cFf();
// True False
//  u8 False
extern "C" void fukiPosCalc__14dMsgScrnTalk_cFUc();
extern "C" extern char const* const msg_scrn_d_msg_scrn_talk__stringBase0;
extern "C" extern void* __vt__14dMsgScrnTalk_c[22];

// 
// External References:
// 

// False False
void mDoExt_getMesgFont();
// False False
//  Vec* False
// 	 Vec False
//  Vec* False
// 	 Vec False
void mDoLib_project(Vec*, Vec*);
// False False
//  int False
void dComIfGp_getSubHeap2D(int);
// False False
//  J2DScreen* False
// 	 J2DScreen False
void dPaneClass_showNullPane(J2DScreen*);
// False False
//  void* False
// 	 void False
//  u32 False
void* operator new(u32);
// False False
//  void False
//  void* False
// 	 void False
void operator delete(void*);

// False False
SECTION_INIT void memset();
// False False
extern "C" void mDoExt_getMesgFont__Fv();
// False False
//  Vec* False
// 	 Vec False
//  Vec* False
// 	 Vec False
extern "C" void mDoLib_project__FP3VecP3Vec();
// False False
//  int False
extern "C" void dComIfGp_getSubHeap2D__Fi();
// False False
//  f32 False
//  f32 False
//  f32* False
// 	 f32 False
//  f32 False
//  JUtility::TColor False
//  JUtility::TColor False
//  JUtility::TColor False
//  JUtility::TColor False
//  f32 False
//  u8 False
extern "C" void drawPikari__13dMeter2Draw_cFffPffQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorfUc();
// False False
extern "C" void getActor__12dMsgObject_cFv();
// False False
extern "C" void __ct__17dMsgScrn3Select_cFv();
// False False
extern "C" void isSelect__17dMsgScrn3Select_cFv();
// False False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
extern "C" void setString__17dMsgScrn3Select_cFPcPcPc();
// False False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
extern "C" void setRubyString__17dMsgScrn3Select_cFPcPcPc();
// False False
//  f32 False
//  f32 False
extern "C" void translate__17dMsgScrn3Select_cFff();
// False False
//  f32 False
//  f32 False
extern "C" void draw__17dMsgScrn3Select_cFff();
// False False
//  u8 False
//  u8 False
//  u8 False
//  f32 False
//  u8 False
extern "C" void selAnimeInit__17dMsgScrn3Select_cFUcUcUcfUc();
// False False
//  u8 False
//  u8 False
//  bool False
extern "C" void selAnimeMove__17dMsgScrn3Select_cFUcUcb();
// False False
extern "C" void selAnimeEnd__17dMsgScrn3Select_cFv();
// False False
extern "C" void getTextBoxWidth__17dMsgScrn3Select_cFv();
// False False
extern "C" void getFontSize__17dMsgScrn3Select_cFv();
// False False
extern "C" void getRubyFontSize__17dMsgScrn3Select_cFv();
// False False
extern "C" void getCharSpace__17dMsgScrn3Select_cFv();
// False False
extern "C" void getRubyCharSpace__17dMsgScrn3Select_cFv();
// False False
//  int False
extern "C" void getTextBoxGlobalPosX__17dMsgScrn3Select_cFi();
// False False
//  int False
extern "C" void getTextBoxGlobalPosY__17dMsgScrn3Select_cFi();
// False False
extern "C" void __ct__15dMsgScrnArrow_cFv();
// False False
extern "C" void draw__15dMsgScrnArrow_cFv();
// False False
//  f32 False
//  f32 False
extern "C" void setPos__15dMsgScrnArrow_cFff();
// False False
extern "C" void arwAnimeInit__15dMsgScrnArrow_cFv();
// False False
extern "C" void arwAnimeMove__15dMsgScrnArrow_cFv();
// False False
extern "C" void dotAnimeInit__15dMsgScrnArrow_cFv();
// False False
extern "C" void dotAnimeMove__15dMsgScrnArrow_cFv();
// False False
extern "C" void __ct__14dMsgScrnBase_cFv();
// False False
extern "C" void __dt__14dMsgScrnBase_cFv();
// False False
extern "C" void init__14dMsgScrnBase_cFv();
// False False
extern "C" void multiDraw__14dMsgScrnBase_cFv();
// False False
extern "C" void draw__14dMsgScrnBase_cFv();
// False False
//  f32 False
//  f32 False
//  f32 False
extern "C" void drawOutFont__14dMsgScrnBase_cFfff();
// False False
//  f32 False
extern "C" void fontAlpha__14dMsgScrnBase_cFf();
// False False
extern "C" void isTalkNow__14dMsgScrnBase_cFv();
// False False
//  u8 False
//  u8 False
extern "C" void __ct__15dMsgScrnLight_cFUcUc();
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  u8 False
extern "C" void draw__15dMsgScrnLight_cFPffffffUc();
// False False
//  J2DScreen* False
// 	 J2DScreen False
//  u64 False
//  u8 False
//  JKRExpHeap* False
// 	 JKRExpHeap False
extern "C" void __ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap();
// False False
extern "C" void reinit__8CPaneMgrFv();
// False False
extern "C" void getGlobalPosX__8CPaneMgrFv();
// False False
extern "C" void getGlobalPosY__8CPaneMgrFv();
// False False
//  JUtility::TColor False
//  JUtility::TColor False
extern "C" void setBlackWhite__8CPaneMgrFQ28JUtility6TColorQ28JUtility6TColor();
// False False
//  J2DPane* False
// 	 J2DPane False
//  bool False
//  s16 False
extern "C" void getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs();
// False False
//  J2DScreen* False
// 	 J2DScreen False
extern "C" void dPaneClass_showNullPane__FP9J2DScreen();
// False False
//  f32 False
extern "C" void setAlphaRate__13CPaneMgrAlphaFf();
// False False
extern "C" void getAlphaRate__13CPaneMgrAlphaFv();
// False False
//  bool False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
extern "C" bool __eq__4cXyzCFRC3Vec();
// False False
//  u32 False
//  int False
extern "C" void alloc__7JKRHeapFUli();
// False False
//  void* False
// 	 void False
extern "C" void free__7JKRHeapFPv();
// False False
//  void* False
// 	 void False
//  u32 False
extern "C" void* __nw__FUl();
// False False
//  void False
//  void* False
// 	 void False
extern "C" void __dl__FPv();
// False False
extern "C" void getBounds__7J2DPaneFv();
// False False
extern "C" void __ct__9J2DScreenFv();
// False False
//  char const* False
// 	 char const False
// 		 char False
//  u32 False
//  JKRArchive* False
// 	 JKRArchive False
extern "C" void setPriority__9J2DScreenFPCcUlP10JKRArchive();
// False False
//  f32 False
//  f32 False
//  J2DGrafContext const* False
// 	 J2DGrafContext const False
// 		 J2DGrafContext False
extern "C" void draw__9J2DScreenFffPC14J2DGrafContext();
// False False
//  s16 False
//  char const* False
// 	 char const False
// 		 char False
//  ... False
extern "C" void setString__10J2DTextBoxFsPCce();
// False False
extern "C" void _savegpr_21();
// False False
extern "C" void _savegpr_26();
// False False
extern "C" void _savegpr_27();
// False False
extern "C" void _savegpr_28();
// False False
extern "C" void _savegpr_29();
// False False
extern "C" void _restgpr_21();
// False False
extern "C" void _restgpr_26();
// False False
extern "C" void _restgpr_27();
// False False
extern "C" void _restgpr_28();
// False False
extern "C" void _restgpr_29();
extern "C" extern u8 g_dComIfG_gameInfo[122384];
extern "C" extern u8 g_meter2_info[248];
extern "C" extern u8 g_MsgObject_HIO_c[1040];

// 
// Declarations:
// 

/* ############################################################################################## */
/* 80399BB0-80399C18 0061+07 s=1 e=0 z=0  None .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char const* const stringBase_80399BB0 = "zelda_message_window_new.blo";
SECTION_DEAD char const* const stringBase_80399BCD = 
    "zelda_message_window_text_seirei.blo";
SECTION_DEAD char const* const stringBase_80399BF2 = "zelda_message_window_text.blo";
SECTION_DEAD char const* const stringBase_80399C10 = "";
/* @stringBase0 padding */
SECTION_DEAD static char const* const pad_80399C11 = "\0\0\0\0\0\0";
#pragma pop

/* 803C13C8-803C1420 0058+00 s=2 e=0 z=0  None .data      __vt__14dMsgScrnTalk_c                                       */
SECTION_DATA void* __vt__14dMsgScrnTalk_c[22] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)draw__14dMsgScrnBase_cFv,
	(void*)__dt__14dMsgScrnTalk_cFv,
	(void*)exec__14dMsgScrnTalk_cFv,
	(void*)multiDraw__14dMsgScrnBase_cFv,
	(void*)drawSelf__14dMsgScrnTalk_cFv,
	(void*)setSelectString__14dMsgScrnTalk_cFPcPcPc,
	(void*)setSelectRubyString__14dMsgScrnTalk_cFPcPcPc,
	(void*)arwAnimeInit__14dMsgScrnTalk_cFv,
	(void*)arwAnimeMove__14dMsgScrnTalk_cFv,
	(void*)dotAnimeInit__14dMsgScrnTalk_cFv,
	(void*)dotAnimeMove__14dMsgScrnTalk_cFv,
	(void*)isSelect__14dMsgScrnTalk_cFv,
	(void*)selectAnimeInit__14dMsgScrnTalk_cFUcUcfUc,
	(void*)selectAnimeMove__14dMsgScrnTalk_cFUcUcb,
	(void*)selectAnimeEnd__14dMsgScrnTalk_cFv,
	(void*)fukiScale__14dMsgScrnTalk_cFf,
	(void*)fukiTrans__14dMsgScrnTalk_cFff,
	(void*)fukiAlpha__14dMsgScrnTalk_cFf,
	(void*)fontAlpha__14dMsgScrnBase_cFf,
	(void*)fukiPosCalc__14dMsgScrnTalk_cFUc,
};

/* 80454D00-80454D04 0004+00 s=2 e=0 z=0  None .sdata2    @4086                                                        */
SECTION_SDATA2 static f32 lit_4086 = 18.0f;

/* 80454D04-80454D08 0004+00 s=3 e=0 z=0  None .sdata2    @4087                                                        */
SECTION_SDATA2 static u8 lit_4087[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 80454D08-80454D0C 0004+00 s=1 e=0 z=0  None .sdata2    @4088                                                        */
SECTION_SDATA2 static f32 lit_4088 = -10.0f;

/* 80454D0C-80454D10 0004+00 s=1 e=0 z=0  None .sdata2    @4089                                                        */
SECTION_SDATA2 static f32 lit_4089 = 6.0f / 5.0f;

/* 80246FF0-80247A90 0AA0+00 s=0 e=1 z=0  None .text      __ct__14dMsgScrnTalk_cFUcUcP10JKRExpHeap                     */
//	80247010: 803621D4 (_savegpr_27)
//	80247024: 8023C0DC (__ct__14dMsgScrnBase_cFv)
//	80247028: 803C13C8 (__vt__14dMsgScrnTalk_c)
//	8024702C: 803C13C8 (__vt__14dMsgScrnTalk_c)
//	80247048: 8002E3D0 (dComIfGp_getSubHeap2D__Fi)
//	80247054: 8023C16C (init__14dMsgScrnBase_cFv)
//	8024705C: 802CEC4C (__nw__FUl)
//	80247068: 802F8498 (__ct__9J2DScreenFv)
//	80247078: 80399BB0 (msg_scrn_d_msg_scrn_talk__stringBase0)
//	8024707C: 80399BB0 (msg_scrn_d_msg_scrn_talk__stringBase0)
//	80247084: 804061C0 (g_dComIfG_gameInfo)
//	80247088: 804061C0 (g_dComIfG_gameInfo)
//	80247090: 802F8648 (setPriority__9J2DScreenFPCcUlP10JKRArchive)
//	80247098: 802550E8 (dPaneClass_showNullPane__FP9J2DScreen)
//	802470A0: 802CEC4C (__nw__FUl)
//	802470AC: 802F8498 (__ct__9J2DScreenFv)
//	802470B8: 804061C0 (g_dComIfG_gameInfo)
//	802470BC: 804061C0 (g_dComIfG_gameInfo)
//	802470D4: 80399BB0 (msg_scrn_d_msg_scrn_talk__stringBase0)
//	802470D8: 80399BB0 (msg_scrn_d_msg_scrn_talk__stringBase0)
//	802470E8: 802F8648 (setPriority__9J2DScreenFPCcUlP10JKRArchive)
//	802470F4: 80399BB0 (msg_scrn_d_msg_scrn_talk__stringBase0)
//	802470F8: 80399BB0 (msg_scrn_d_msg_scrn_talk__stringBase0)
//	80247108: 802F8648 (setPriority__9J2DScreenFPCcUlP10JKRArchive)
//	80247110: 802550E8 (dPaneClass_showNullPane__FP9J2DScreen)
//	80247118: 802CEC4C (__nw__FUl)
//	80247124: 8023B9B4 (__ct__15dMsgScrnArrow_cFv)
//	80247130: 804061C0 (g_dComIfG_gameInfo)
//	80247134: 804061C0 (g_dComIfG_gameInfo)
//	80247148: 802CEC4C (__nw__FUl)
//	80247154: 802390B4 (__ct__17dMsgScrn3Select_cFv)
//	802471B8: 802CEC4C (__nw__FUl)
//	802471CC: 80245934 (__ct__15dMsgScrnLight_cFUcUc)
//	802471E4: 802CE4D4 (alloc__7JKRHeapFUli)
//	802471F4: 80003458 (memset)
//	80247204: 8043028C (g_MsgObject_HIO_c)
//	80247208: 8043028C (g_MsgObject_HIO_c)
//	8024720C: 80454D00 (lit_4086)
//	80247260: 802F7100 (getBounds__7J2DPaneFv)
//	8024728C: 802F7100 (getBounds__7J2DPaneFv)
//	80247298: 80454D04 (lit_4087)
//	802472A8: 8043028C (g_MsgObject_HIO_c)
//	802472AC: 8043028C (g_MsgObject_HIO_c)
//	802472F8: 802F7100 (getBounds__7J2DPaneFv)
//	80247300: 8043028C (g_MsgObject_HIO_c)
//	80247304: 8043028C (g_MsgObject_HIO_c)
//	80247334: 802F7100 (getBounds__7J2DPaneFv)
//	8024733C: 8043028C (g_MsgObject_HIO_c)
//	80247340: 8043028C (g_MsgObject_HIO_c)
//	8024738C: 802CEC4C (__nw__FUl)
//	802473B4: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	802473C4: 802CEC4C (__nw__FUl)
//	802473EC: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	802473FC: 802CEC4C (__nw__FUl)
//	80247424: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80247460: 80454D08 (lit_4088)
//	80247484: 802CEC4C (__nw__FUl)
//	802474A8: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	802474B4: 8043028C (g_MsgObject_HIO_c)
//	802474B8: 8043028C (g_MsgObject_HIO_c)
//	802474E8: 802CEC4C (__nw__FUl)
//	80247510: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80247520: 802CEC4C (__nw__FUl)
//	80247544: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80247564: 802CEC4C (__nw__FUl)
//	80247588: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80247598: 802CEC4C (__nw__FUl)
//	802475BC: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	802475CC: 802CEC4C (__nw__FUl)
//	802475F0: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80247600: 802CEC4C (__nw__FUl)
//	80247624: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	802476D0: 800149F0 (mDoExt_getMesgFont__Fv)
//	802476FC: 80399BB0 (msg_scrn_d_msg_scrn_talk__stringBase0)
//	80247700: 80399BB0 (msg_scrn_d_msg_scrn_talk__stringBase0)
//	8024770C: 8030074C (setString__10J2DTextBoxFsPCce)
//	80247724: 800149F0 (mDoExt_getMesgFont__Fv)
//	80247750: 80399BB0 (msg_scrn_d_msg_scrn_talk__stringBase0)
//	80247754: 80399BB0 (msg_scrn_d_msg_scrn_talk__stringBase0)
//	80247760: 8030074C (setString__10J2DTextBoxFsPCce)
//	802477A0: 8043028C (g_MsgObject_HIO_c)
//	802477A4: 8043028C (g_MsgObject_HIO_c)
//	802477C8: 80254458 (setBlackWhite__8CPaneMgrFQ28JUtility6TColorQ28JUtility6TColor)
//	802477DC: 8043028C (g_MsgObject_HIO_c)
//	802477E0: 8043028C (g_MsgObject_HIO_c)
//	80247804: 80254458 (setBlackWhite__8CPaneMgrFQ28JUtility6TColorQ28JUtility6TColor)
//	802478C8: 80454D0C (lit_4089)
//	802478F4: 802542E8 (getGlobalPosX__8CPaneMgrFv)
//	80247900: 80254364 (getGlobalPosY__8CPaneMgrFv)
//	80247978: 80454D0C (lit_4089)
//	802479AC: 8023A934 (getTextBoxWidth__17dMsgScrn3Select_cFv)
//	802479B8: 8023A94C (getFontSize__17dMsgScrn3Select_cFv)
//	802479C4: 8023A95C (getRubyFontSize__17dMsgScrn3Select_cFv)
//	802479D0: 8023A97C (getCharSpace__17dMsgScrn3Select_cFv)
//	802479DC: 8023A98C (getRubyCharSpace__17dMsgScrn3Select_cFv)
//	802479F4: 8023A9AC (getTextBoxGlobalPosX__17dMsgScrn3Select_cFi)
//	80247A08: 8023A9D8 (getTextBoxGlobalPosY__17dMsgScrn3Select_cFi)
//	80247A28: 80454D04 (lit_4087)
//	80247A7C: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  u8 False
//  u8 False
//  JKRExpHeap* False
// 	 JKRExpHeap False
asm dMsgScrnTalk_c::dMsgScrnTalk_c(u8 param_0, u8 param_1, JKRExpHeap* param_2) {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_talk/__ct__14dMsgScrnTalk_cFUcUcP10JKRExpHeap.s"
}
#pragma pop


/* 80247A90-80247D34 02A4+00 s=1 e=0 z=0  None .text      __dt__14dMsgScrnTalk_cFv                                     */
//	80247AA0: 803621D0 (_savegpr_26)
//	80247AB0: 803C13C8 (__vt__14dMsgScrnTalk_c)
//	80247AB4: 803C13C8 (__vt__14dMsgScrnTalk_c)
//	80247B98: 802CE548 (free__7JKRHeapFPv)
//	80247CA8: 804061C0 (g_dComIfG_gameInfo)
//	80247CAC: 804061C0 (g_dComIfG_gameInfo)
//	80247CC4: 804061C0 (g_dComIfG_gameInfo)
//	80247CC8: 804061C0 (g_dComIfG_gameInfo)
//	80247CE0: 804061C0 (g_dComIfG_gameInfo)
//	80247CE4: 804061C0 (g_dComIfG_gameInfo)
//	80247D04: 8023C124 (__dt__14dMsgScrnBase_cFv)
//	80247D14: 802CED3C (__dl__FPv)
//	80247D20: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dMsgScrnTalk_c::~dMsgScrnTalk_c() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_talk/__dt__14dMsgScrnTalk_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454D10-80454D14 0004+00 s=2 e=0 z=0  None .sdata2    @4197                                                        */
SECTION_SDATA2 static f32 lit_4197 = 1.0f;

/* 80247D34-80247E4C 0118+00 s=1 e=0 z=0  None .text      exec__14dMsgScrnTalk_cFv                                     */
//	80247D44: 803621D4 (_savegpr_27)
//	80247D4C: 8023C574 (isTalkNow__14dMsgScrnBase_cFv)
//	80247D5C: 80454D10 (lit_4197)
//	80247D70: 8043028C (g_MsgObject_HIO_c)
//	80247D74: 8043028C (g_MsgObject_HIO_c)
//	80247DBC: 8043028C (g_MsgObject_HIO_c)
//	80247DC0: 8043028C (g_MsgObject_HIO_c)
//	80247DE4: 80254458 (setBlackWhite__8CPaneMgrFQ28JUtility6TColorQ28JUtility6TColor)
//	80247DF4: 8043028C (g_MsgObject_HIO_c)
//	80247DF8: 8043028C (g_MsgObject_HIO_c)
//	80247E1C: 80254458 (setBlackWhite__8CPaneMgrFQ28JUtility6TColorQ28JUtility6TColor)
//	80247E38: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMsgScrnTalk_c::exec() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_talk/exec__14dMsgScrnTalk_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454D14-80454D18 0004+00 s=1 e=0 z=0  None .sdata2    @4278                                                        */
SECTION_SDATA2 static f32 lit_4278 = 4.0f / 5.0f;

/* 80454D18-80454D1C 0004+00 s=1 e=0 z=0  None .sdata2    @4279                                                        */
SECTION_SDATA2 static f32 lit_4279 = -1.0f;

/* 80247E4C-802480F0 02A4+00 s=1 e=0 z=0  None .text      drawSelf__14dMsgScrnTalk_cFv                                 */
//	80247E64: 803621BC (_savegpr_21)
//	80247E6C: 804061C0 (g_dComIfG_gameInfo)
//	80247E70: 804061C0 (g_dComIfG_gameInfo)
//	80247EA0: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80247EB8: 804061C0 (g_dComIfG_gameInfo)
//	80247EBC: 804061C0 (g_dComIfG_gameInfo)
//	80247EC0: 8043028C (g_MsgObject_HIO_c)
//	80247EC4: 8043028C (g_MsgObject_HIO_c)
//	80247EC8: 80430188 (g_meter2_info)
//	80247ECC: 80430188 (g_meter2_info)
//	80247EEC: 80454D04 (lit_4087)
//	80247F10: 80454D14 (lit_4278)
//	80247F70: 802140DC (drawPikari__13dMeter2Draw_cFffPffQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorfUc)
//	80247F74: 80454D04 (lit_4087)
//	80247F84: 80454D18 (lit_4279)
//	80247FD4: 80245C04 (draw__15dMsgScrnLight_cFPffffffUc)
//	80248008: 80245C04 (draw__15dMsgScrnLight_cFPffffffUc)
//	8024802C: 804061C0 (g_dComIfG_gameInfo)
//	80248030: 804061C0 (g_dComIfG_gameInfo)
//	8024804C: 8043028C (g_MsgObject_HIO_c)
//	80248050: 8043028C (g_MsgObject_HIO_c)
//	80248054: 80454D00 (lit_4086)
//	8024808C: 80454D04 (lit_4087)
//	80248094: 80454D10 (lit_4197)
//	80248098: 8023C32C (drawOutFont__14dMsgScrnBase_cFfff)
//	802480A0: 80454D04 (lit_4087)
//	802480AC: 802F8ED4 (draw__9J2DScreenFffPC14J2DGrafContext)
//	802480BC: 80454D04 (lit_4087)
//	802480C4: 80239DD4 (draw__17dMsgScrn3Select_cFff)
//	802480CC: 8023BDC0 (draw__15dMsgScrnArrow_cFv)
//	802480DC: 80362208 (_restgpr_21)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMsgScrnTalk_c::drawSelf() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_talk/drawSelf__14dMsgScrnTalk_cFv.s"
}
#pragma pop


/* 802480F0-80248114 0024+00 s=1 e=0 z=0  None .text      arwAnimeInit__14dMsgScrnTalk_cFv                             */
//	80248100: 8023BE34 (arwAnimeInit__15dMsgScrnArrow_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMsgScrnTalk_c::arwAnimeInit() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_talk/arwAnimeInit__14dMsgScrnTalk_cFv.s"
}
#pragma pop


/* 80248114-80248138 0024+00 s=1 e=0 z=0  None .text      arwAnimeMove__14dMsgScrnTalk_cFv                             */
//	80248124: 8023BE90 (arwAnimeMove__15dMsgScrnArrow_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMsgScrnTalk_c::arwAnimeMove() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_talk/arwAnimeMove__14dMsgScrnTalk_cFv.s"
}
#pragma pop


/* 80248138-8024815C 0024+00 s=1 e=0 z=0  None .text      dotAnimeInit__14dMsgScrnTalk_cFv                             */
//	80248148: 8023BFC4 (dotAnimeInit__15dMsgScrnArrow_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMsgScrnTalk_c::dotAnimeInit() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_talk/dotAnimeInit__14dMsgScrnTalk_cFv.s"
}
#pragma pop


/* 8024815C-80248180 0024+00 s=1 e=0 z=0  None .text      dotAnimeMove__14dMsgScrnTalk_cFv                             */
//	8024816C: 8023C010 (dotAnimeMove__15dMsgScrnArrow_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMsgScrnTalk_c::dotAnimeMove() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_talk/dotAnimeMove__14dMsgScrnTalk_cFv.s"
}
#pragma pop


/* 80248180-802481AC 002C+00 s=1 e=0 z=0  None .text      setSelectString__14dMsgScrnTalk_cFPcPcPc                     */
//	80248198: 80239C78 (setString__17dMsgScrn3Select_cFPcPcPc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
asm void dMsgScrnTalk_c::setSelectString(char* param_0, char* param_1, char* param_2) {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_talk/setSelectString__14dMsgScrnTalk_cFPcPcPc.s"
}
#pragma pop


/* 802481AC-802481D8 002C+00 s=1 e=0 z=0  None .text      setSelectRubyString__14dMsgScrnTalk_cFPcPcPc                 */
//	802481C4: 80239D08 (setRubyString__17dMsgScrn3Select_cFPcPcPc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
asm void dMsgScrnTalk_c::setSelectRubyString(char* param_0, char* param_1, char* param_2) {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_talk/setSelectRubyString__14dMsgScrnTalk_cFPcPcPc.s"
}
#pragma pop


/* 802481D8-8024820C 0034+00 s=1 e=0 z=0  None .text      isSelect__14dMsgScrnTalk_cFv                                 */
//	802481F0: 80239C64 (isSelect__17dMsgScrn3Select_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMsgScrnTalk_c::isSelect() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_talk/isSelect__14dMsgScrnTalk_cFv.s"
}
#pragma pop


/* 8024820C-80248244 0038+00 s=1 e=0 z=0  None .text      selectAnimeInit__14dMsgScrnTalk_cFUcUcfUc                    */
//	80248230: 8023A094 (selAnimeInit__17dMsgScrn3Select_cFUcUcUcfUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u8 False
//  u8 False
//  f32 False
//  u8 False
asm void dMsgScrnTalk_c::selectAnimeInit(u8 param_0, u8 param_1, f32 param_2, u8 param_3) {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_talk/selectAnimeInit__14dMsgScrnTalk_cFUcUcfUc.s"
}
#pragma pop


/* 80248244-80248278 0034+00 s=1 e=0 z=0  None .text      selectAnimeMove__14dMsgScrnTalk_cFUcUcb                      */
//	8024825C: 8023A398 (selAnimeMove__17dMsgScrn3Select_cFUcUcb)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u8 False
//  u8 False
//  bool False
asm void dMsgScrnTalk_c::selectAnimeMove(u8 param_0, u8 param_1, bool param_2) {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_talk/selectAnimeMove__14dMsgScrnTalk_cFUcUcb.s"
}
#pragma pop


/* 80248278-802482AC 0034+00 s=1 e=0 z=0  None .text      selectAnimeEnd__14dMsgScrnTalk_cFv                           */
//	80248290: 8023A680 (selAnimeEnd__17dMsgScrn3Select_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMsgScrnTalk_c::selectAnimeEnd() {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_talk/selectAnimeEnd__14dMsgScrnTalk_cFv.s"
}
#pragma pop


/* 802482AC-802482B0 0004+00 s=1 e=0 z=0  None .text      fukiScale__14dMsgScrnTalk_cFf                                */
// True False
//  void False
//  f32 False
void dMsgScrnTalk_c::fukiScale(f32 param_0) {
	/* empty function */
}


/* 802482B0-802482B4 0004+00 s=1 e=0 z=0  None .text      fukiTrans__14dMsgScrnTalk_cFff                               */
// True False
//  void False
//  f32 False
//  f32 False
void dMsgScrnTalk_c::fukiTrans(f32 param_0, f32 param_1) {
	/* empty function */
}


/* 802482B4-8024835C 00A8+00 s=1 e=0 z=0  None .text      fukiAlpha__14dMsgScrnTalk_cFf                                */
//	802482CC: 803621D8 (_savegpr_28)
//	802482DC: 8043028C (g_MsgObject_HIO_c)
//	802482E0: 8043028C (g_MsgObject_HIO_c)
//	802482EC: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80248310: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80248328: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80248348: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 False
asm void dMsgScrnTalk_c::fukiAlpha(f32 param_0) {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_talk/fukiAlpha__14dMsgScrnTalk_cFf.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454D1C-80454D20 0004+00 s=1 e=0 z=0  None .sdata2    @4489                                                        */
SECTION_SDATA2 static f32 lit_4489 = 608.0f;

/* 80454D20-80454D24 0004+00 s=1 e=0 z=0  None .sdata2    @4490                                                        */
SECTION_SDATA2 static f32 lit_4490 = 448.0f;

/* 80454D24-80454D28 0004+00 s=1 e=0 z=0  None .sdata2    @4491                                                        */
SECTION_SDATA2 static f32 lit_4491 = 0.5f;

/* 80454D28-80454D2C 0004+00 s=1 e=0 z=0  None .sdata2    @4492                                                        */
SECTION_SDATA2 static f32 lit_4492 = 50.0f;

/* 80454D2C-80454D30 0004+00 s=1 e=0 z=0  None .sdata2    @4493                                                        */
SECTION_SDATA2 static f32 lit_4493 = 105.0f;

/* 80454D30-80454D34 0004+00 s=1 e=0 z=0  None .sdata2    @4494                                                        */
SECTION_SDATA2 static f32 lit_4494 = 486.0f;

/* 80454D34-80454D38 0004+00 s=1 e=0 z=0  None .sdata2    @4495                                                        */
SECTION_SDATA2 static f32 lit_4495 = 230.0f;

/* 80454D38-80454D3C 0004+00 s=1 e=0 z=0  None .sdata2    @4496                                                        */
SECTION_SDATA2 static f32 lit_4496 = 235.0f;

/* 80454D3C-80454D40 0004+00 s=1 e=0 z=0  None .sdata2    @4497                                                        */
SECTION_SDATA2 static f32 lit_4497 = 355.0f;

/* 80454D40-80454D44 0004+00 s=1 e=0 z=0  None .sdata2    @4498                                                        */
SECTION_SDATA2 static f32 lit_4498 = 209.0f;

/* 80454D44-80454D48 0004+00 s=1 e=0 z=0  None .sdata2    @4499                                                        */
SECTION_SDATA2 static f32 lit_4499 = -190.0f;

/* 80454D48-80454D50 0004+04 s=1 e=0 z=0  None .sdata2    @4500                                                        */
SECTION_SDATA2 static f32 lit_4500[1 + 1 /* padding */] = {
	190.0f,
	/* padding */
	0.0f,
};

/* 80454D50-80454D58 0008+00 s=1 e=0 z=0  None .sdata2    @4502                                                        */
SECTION_SDATA2 static f64 lit_4502 = 4503601774854144.0 /* cast s32 to float */;

/* 8024835C-80248954 05F8+00 s=1 e=0 z=0  None .text      fukiPosCalc__14dMsgScrnTalk_cFUc                             */
//	80248384: 803621DC (_savegpr_29)
//	80248390: 8023819C (getActor__12dMsgObject_cFv)
//	802483CC: 804061C0 (g_dComIfG_gameInfo)
//	802483D0: 804061C0 (g_dComIfG_gameInfo)
//	802483E0: 80015310 (mDoLib_project__FP3VecP3Vec)
//	802483E4: 80454D04 (lit_4087)
//	802483FC: 8026702C (__eq__4cXyzCFRC3Vec)
//	80248418: 80015310 (mDoLib_project__FP3VecP3Vec)
//	80248420: 80454D04 (lit_4087)
//	80248430: 80454D1C (lit_4489)
//	80248450: 80454D20 (lit_4490)
//	80248460: 80454D24 (lit_4491)
//	802484A0: 8043028C (g_MsgObject_HIO_c)
//	802484A4: 8043028C (g_MsgObject_HIO_c)
//	802484AC: 80454D50 (lit_4502)
//	802484C8: 80454D28 (lit_4492)
//	802484E8: 80454D28 (lit_4492)
//	802484EC: 8043028C (g_MsgObject_HIO_c)
//	802484F0: 8043028C (g_MsgObject_HIO_c)
//	802484F8: 80454D50 (lit_4502)
//	80248530: 8043028C (g_MsgObject_HIO_c)
//	80248534: 8043028C (g_MsgObject_HIO_c)
//	8024853C: 80454D50 (lit_4502)
//	8024856C: 80454D04 (lit_4087)
//	80248594: 8043028C (g_MsgObject_HIO_c)
//	80248598: 8043028C (g_MsgObject_HIO_c)
//	802485C0: 802F7100 (getBounds__7J2DPaneFv)
//	802485E8: 802F7100 (getBounds__7J2DPaneFv)
//	802485F4: 80454D24 (lit_4491)
//	802485FC: 80454D2C (lit_4493)
//	80248614: 80454D30 (lit_4494)
//	80248618: 80454D34 (lit_4495)
//	8024861C: 80239D98 (translate__17dMsgScrn3Select_cFff)
//	80248624: 8043028C (g_MsgObject_HIO_c)
//	80248628: 8043028C (g_MsgObject_HIO_c)
//	80248650: 802F7100 (getBounds__7J2DPaneFv)
//	80248678: 802F7100 (getBounds__7J2DPaneFv)
//	80248684: 80454D24 (lit_4491)
//	8024868C: 80454D38 (lit_4496)
//	802486A4: 80454D30 (lit_4494)
//	802486A8: 80454D3C (lit_4497)
//	802486AC: 80239D98 (translate__17dMsgScrn3Select_cFff)
//	802486B4: 8043028C (g_MsgObject_HIO_c)
//	802486B8: 8043028C (g_MsgObject_HIO_c)
//	802486C0: 80454D04 (lit_4087)
//	802486D4: 80454D30 (lit_4494)
//	802486D8: 80454D40 (lit_4498)
//	802486DC: 80239D98 (translate__17dMsgScrn3Select_cFff)
//	802486E0: 804061C0 (g_dComIfG_gameInfo)
//	802486E4: 804061C0 (g_dComIfG_gameInfo)
//	802486FC: 80454D44 (lit_4499)
//	8024872C: 80454D48 (lit_4500)
//	802487A4: 80253B2C (reinit__8CPaneMgrFv)
//	802487C8: 80254364 (getGlobalPosY__8CPaneMgrFv)
//	802487CC: 80454D24 (lit_4491)
//	802487DC: 802542E8 (getGlobalPosX__8CPaneMgrFv)
//	802487E0: 80454D24 (lit_4491)
//	802487F4: 8023BDF8 (setPos__15dMsgScrnArrow_cFff)
//	8024880C: 80254364 (getGlobalPosY__8CPaneMgrFv)
//	80248810: 80454D24 (lit_4491)
//	80248830: 802542E8 (getGlobalPosX__8CPaneMgrFv)
//	80248834: 80454D24 (lit_4491)
//	8024886C: 802542E8 (getGlobalPosX__8CPaneMgrFv)
//	80248878: 80254364 (getGlobalPosY__8CPaneMgrFv)
//	80248898: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	802488C0: 8023BDF8 (setPos__15dMsgScrnArrow_cFff)
//	802488D8: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	80248940: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u8 False
asm void dMsgScrnTalk_c::fukiPosCalc(u8 param_0) {
	nofralloc
#include "asm/msg/scrn/d_msg_scrn_talk/fukiPosCalc__14dMsgScrnTalk_cFUc.s"
}
#pragma pop


