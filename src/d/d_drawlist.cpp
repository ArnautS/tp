// 
// Generated By: dol2asm
// Translation Unit: d/d_drawlist
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "d/d_drawlist.h"

// 
// Types:
// 

struct mDoMtx_stack_c {
	/* 8000CE38 */ // False False
//  f32 False
//  f32 False
//  f32 False
void scaleM(f32, f32, f32);
};

struct mDoExt_3DlineMatSortPacket {
	/* 80014E20 */ // False False
~mDoExt_3DlineMatSortPacket();
	/* 800561C8 */ // True False
mDoExt_3DlineMatSortPacket();
};

struct dKy_tevstr_c {
};

struct dDlst_window_c {
	/* 80051AC0 */ // False False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
void setViewPort(f32, f32, f32, f32, f32, f32);
	/* 80051ADC */ // False False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
void setScissor(f32, f32, f32, f32);
};

struct dDlst_shadowTri_c {
	/* 80056270 */ // True False
~dDlst_shadowTri_c();
	/* 80056344 */ // True False
dDlst_shadowTri_c();
};

struct Vec {
};

struct cXyz {
	/* 80009184 */ // False False
~cXyz();
	/* 800125DC */ // False False
cXyz();
	/* 80266B34 */ // False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
void operator-(Vec const&) const;
	/* 80266EF4 */ // False False
void normalize();
	/* 802670AC */ // False False
void isZero() const;
};

struct _GXTexObj {
};

struct dDlst_shadowSimple_c {
	/* 8005520C */ // True False
void draw();
	/* 800553EC */ // True False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  cXyz* False
// 	 cXyz False
//  s16 False
//  f32 False
//  _GXTexObj* False
// 	 _GXTexObj False
void set(cXyz*, f32, f32, cXyz*, s16, f32, _GXTexObj*);
	/* 8005638C */ // True False
dDlst_shadowSimple_c();
};

struct J3DModel {
};

struct dDlst_shadowReal_c {
	/* 800544F0 */ // True False
void reset();
	/* 80054500 */ // True False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
void imageDraw(f32 (* )[4]);
	/* 800545D4 */ // True False
void draw();
	/* 80054BD0 */ // True False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  f32 False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
void setShadowRealMtx(cXyz*, cXyz*, f32, f32, f32, dKy_tevstr_c*);
	/* 80055028 */ // True False
//  u32 False
//  J3DModel* False
// 	 J3DModel False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
//  f32 False
//  f32 False
void set(u32, J3DModel*, cXyz*, f32, f32, dKy_tevstr_c*, f32, f32);
	/* 800551D4 */ // True False
//  J3DModel* False
// 	 J3DModel False
void add(J3DModel*);
	/* 800561F8 */ // True False
~dDlst_shadowReal_c();
	/* 800562D0 */ // True False
dDlst_shadowReal_c();
};

struct dDlst_shadowRealPoly_c {
	/* 800569A0 */ // True False
void getTri();
	/* 800569A8 */ // True False
//  s32 False
s32 getTriMax();
};

struct cBgD_Vtx_t {
};

struct cM3dGPla {
};

struct dDlst_shadowPoly_c {
	/* 80054288 */ // True False
//  cBgD_Vtx_t* False
// 	 cBgD_Vtx_t False
//  u16 False
//  u16 False
//  u16 False
//  cM3dGPla* False
// 	 cM3dGPla False
void set(cBgD_Vtx_t*, u16, u16, u16, cM3dGPla*);
	/* 800543B4 */ // True False
void draw();
};

struct ResTIMG {
};

struct dDlst_shadowControl_c {
	/* 80055684 */ // True False
void init();
	/* 80055768 */ // True False
void reset();
	/* 800557C8 */ // False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
void imageDraw(f32 (* )[4]);
	/* 80055A14 */ // False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
void draw(f32 (* )[4]);
	/* 80055C74 */ // False False
//  u32 False
//  s8 False
//  J3DModel* False
// 	 J3DModel False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
void setReal(u32, s8, J3DModel*, cXyz*, f32, f32, dKy_tevstr_c*);
	/* 80055F1C */ // False False
//  u32 False
//  J3DModel* False
// 	 J3DModel False
void addReal(u32, J3DModel*);
	/* 80055F84 */ // False False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  cXyz* False
// 	 cXyz False
//  s16 False
//  f32 False
//  _GXTexObj* False
// 	 _GXTexObj False
void setSimple(cXyz*, f32, f32, cXyz*, s16, f32, _GXTexObj*);
	/* 80055FE8 */ // False False
//  ResTIMG const* False
// 	 ResTIMG const False
// 		 ResTIMG False
void setSimpleTex(ResTIMG const*);
};

struct dDlst_peekZ_c {
	/* 80056018 */ // False False
//  s16 False
//  s16 False
//  u32* False
// 	 u32 False
void newData(s16, s16, u32*);
	/* 80056080 */ // False False
void peekData();
};

struct J3DPacket {
};

struct J3DDrawBuffer {
	/* 80324F08 */ // False False
void initialize();
	/* 80324F70 */ // False False
//  u32 False
void allocBuffer(u32);
	/* 80325008 */ // False False
~J3DDrawBuffer();
	/* 80325068 */ // False False
void frameInit();
	/* 8032548C */ // False False
//  J3DPacket* False
// 	 J3DPacket False
//  u16 False
void entryImm(J3DPacket*, u16);
	/* 803254AC */ // False False
void draw() const;
};

struct dDlst_base_c {
};

struct _GXColor {
};

struct dDlst_list_c {
	/* 800560F0 */ // False False
dDlst_list_c();
	/* 80056390 */ // False False
void init();
	/* 8005648C */ // False False
~dDlst_list_c();
	/* 80056538 */ // False False
void reset();
	/* 800565EC */ // False False
//  J3DDrawBuffer* False
// 	 J3DDrawBuffer False
//  J3DPacket* False
// 	 J3DPacket False
//  cXyz& False
// 	 cXyz False
void entryZSortXluDrawList(J3DDrawBuffer*, J3DPacket*, cXyz&);
	/* 800566D4 */ // False False
//  J3DDrawBuffer* False
// 	 J3DDrawBuffer False
void drawOpaDrawList(J3DDrawBuffer*);
	/* 80056710 */ // False False
//  J3DDrawBuffer* False
// 	 J3DDrawBuffer False
void drawXluDrawList(J3DDrawBuffer*);
	/* 8005674C */ // False False
void drawOpaListItem3d();
	/* 80056770 */ // False False
void drawXluListItem3d();
	/* 80056794 */ // False False
//  dDlst_base_c**& False
// 	 dDlst_base_c** False
// 		 dDlst_base_c* False
// 			 dDlst_base_c False
//  dDlst_base_c**& False
// 	 dDlst_base_c** False
// 		 dDlst_base_c* False
// 			 dDlst_base_c False
//  dDlst_base_c* False
// 	 dDlst_base_c False
void set(dDlst_base_c**&, dDlst_base_c**&, dDlst_base_c*);
	/* 800567C4 */ // False False
//  dDlst_base_c** False
// 	 dDlst_base_c* False
// 		 dDlst_base_c False
//  dDlst_base_c** False
// 	 dDlst_base_c* False
// 		 dDlst_base_c False
void draw(dDlst_base_c**, dDlst_base_c**);
	/* 8005681C */ // True False
//  f32 False
//  _GXColor& False
// 	 _GXColor False
void wipeIn(f32, _GXColor&);
	/* 800568D8 */ // False False
//  f32 False
void wipeIn(f32);
	/* 80056900 */ // False False
void calcWipe();
};

struct dDlst_effectLine_c {
	/* 80053E9C */ // True False
void draw();
	/* 800541F4 */ // False False
//  cXyz& False
// 	 cXyz False
//  _GXColor& False
// 	 _GXColor False
//  u16 False
//  u16 False
//  u16 False
//  u16 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
void update(cXyz&, _GXColor&, u16, u16, u16, u16, f32, f32, f32, f32);
};

struct dDlst_blo_c {
	/* 80053B64 */ // True False
void draw();
};

struct dDlst_2Dm_c {
	/* 8005312C */ // True False
void draw();
};

struct dDlst_2D_c {
	/* 80053A00 */ // False False
//  ResTIMG* False
// 	 ResTIMG False
//  s16 False
//  s16 False
//  s16 False
//  s16 False
//  u8 False
dDlst_2D_c(ResTIMG*, s16, s16, s16, s16, u8);
	/* 80053A9C */ // True False
void draw();
};

struct dDlst_2DTri_c {
	/* 80051AF0 */ // True False
void draw();
};

struct dDlst_2DT_c {
	/* 80051F98 */ // True False
void draw();
};

struct dDlst_2DT2_c {
	/* 80052354 */ // True False
void draw();
	/* 80052B00 */ // True False
dDlst_2DT2_c();
	/* 80052B4C */ // True False
//  ResTIMG* False
// 	 ResTIMG False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  u8 False
//  u8 False
//  u8 False
//  f32 False
//  f32 False
void init(ResTIMG*, f32, f32, f32, f32, u8, u8, u8, f32, f32);
};

struct dDlst_2DQuad_c {
	/* 80051CF0 */ // True False
void draw();
};

struct dDlst_2DPoint_c {
	/* 80051E5C */ // True False
void draw();
};

struct dDlst_2DMt_c {
	/* 8005364C */ // True False
void draw();
};

struct dDlst_2DM_c {
	/* 80052C58 */ // True False
void draw();
};

struct cM_rnd_c {
	/* 80053CDC */ // False False
//  int False
//  int False
//  int False
void init(int, int, int);
	/* 80053CEC */ // True False
void get();
	/* 80053DE0 */ // True False
//  f32 False
void getF(f32);
	/* 80053E18 */ // True False
//  f32 False
void getFX(f32);
	/* 80053E60 */ // True False
//  f32 False
//  f32 False
void getValue(f32, f32);
};

struct cBgS_ShdwDraw {
	/* 80267F88 */ // False False
cBgS_ShdwDraw();
	/* 80267FD0 */ // False False
~cBgS_ShdwDraw();
	/* 80268048 */ // False False
//  cXyz& False
// 	 cXyz False
//  cXyz& False
// 	 cXyz False
void Set(cXyz&, cXyz&);
	/* 8026806C */ // False False
//  int (*)(cBgS_ShdwDraw*, cBgD_Vtx_t*, int, int, int, cM3dGPla*) False
// 	 * False
// 		  False
// 	 int False
// 	 cBgS_ShdwDraw* False
// 		 cBgS_ShdwDraw False
// 	 cBgD_Vtx_t* False
// 		 cBgD_Vtx_t False
// 	 int False
// 	 int False
// 	 int False
// 	 cM3dGPla* False
// 		 cM3dGPla False
void SetCallback(int (*)(cBgS_ShdwDraw*, cBgD_Vtx_t*, int, int, int, cM3dGPla*));
};

struct cBgS {
	/* 80074840 */ // False False
//  cBgS_ShdwDraw* False
// 	 cBgS_ShdwDraw False
void ShdwDraw(cBgS_ShdwDraw*);
};

struct _GXTlutObj {
};

struct ShdwDrawPoly_c {
	/* 80054A6C */ // True False
~ShdwDrawPoly_c();
};

struct JUtility {
	struct TColor {
	};

};

struct JKRArchive {
	/* 802D5B38 */ // False False
//  u32 False
//  char const* False
// 	 char const False
// 		 char False
//  JKRArchive* False
// 	 JKRArchive False
void getGlbResource(u32, char const*, JKRArchive*);
};

struct J3DUClipper {
	/* 8027378C */ // False False
void calcViewFrustum();
	/* 80273A44 */ // False False
//  f32 const (* )[4] False
// 	 f32 const False
// 		 f32 False
// 	 * False
// 		  False
//  Vec* False
// 	 Vec False
//  Vec* False
// 	 Vec False
void clip(f32 const (* )[4], Vec*, Vec*) const;
};

struct J3DSys {
	/* 8031073C */ // False False
void reinitGX();
};

struct J3DShapePacket {
	/* 80312FBC */ // False False
void drawFast();
};

struct J3DShape {
	/* 80315300 */ // False False
void loadPreDrawSetting() const;
};

struct J2DGrafContext {
};

struct J2DScreen {
	/* 80053BA0 */ // False False
void clearAnmTransform();
	/* 802F8ED4 */ // False False
//  f32 False
//  f32 False
//  J2DGrafContext const* False
// 	 J2DGrafContext const False
// 		 J2DGrafContext False
void draw(f32, f32, J2DGrafContext const*);
};

struct J2DPicture {
	/* 800539DC */ // False False
//  u8 False
void getTexture(u8) const;
	/* 80053C44 */ // False False
//  JUtility::TColor False
void setWhite(JUtility::TColor);
	/* 80053C6C */ // False False
//  JUtility::TColor False
void setBlack(JUtility::TColor);
	/* 802FC050 */ // False False
J2DPicture();
};

struct J2DPane {
	/* 80053BC0 */ // False False
void calcMtx();
	/* 80053C00 */ // False False
//  f32 False
//  f32 False
void makeMatrix(f32, f32);
	/* 80053C3C */ // False False
//  s32 False
s32 getTypeID() const;
	/* 802F8004 */ // False False
void clearAnmTransform();
};

struct J2DAnmBase {
	/* 80053C94 */ // True False
~J2DAnmBase();
	/* 800569B0 */ // False False
//  void False
//  J2DScreen* False
// 	 J2DScreen False
void searchUpdateMaterialID(J2DScreen*);
};

// 
// Forward References:
// 

// True False
//  u32 False
static void J3DDrawBuffer__create(u32);
// True False
//  cBgS_ShdwDraw* False
// 	 cBgS_ShdwDraw False
//  cBgD_Vtx_t* False
// 	 cBgD_Vtx_t False
//  int False
//  int False
//  int False
//  cM3dGPla* False
// 	 cM3dGPla False
static void psdRealCallBack(cBgS_ShdwDraw*, cBgD_Vtx_t*, int, int, int, cM3dGPla*);
// True False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  cXyz* False
// 	 cXyz False
//  dDlst_shadowPoly_c* False
// 	 dDlst_shadowPoly_c False
static void realPolygonCheck(cXyz*, f32, f32, cXyz*, dDlst_shadowPoly_c*);
// True False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
//  f32* False
// 	 f32 False
static void setkankyoShadow(dKy_tevstr_c*, f32*);

// False False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
extern "C" void setViewPort__14dDlst_window_cFffffff();
// False False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
extern "C" void setScissor__14dDlst_window_cFffff();
// True False
extern "C" void draw__13dDlst_2DTri_cFv();
// True False
extern "C" void draw__14dDlst_2DQuad_cFv();
// True False
extern "C" void draw__15dDlst_2DPoint_cFv();
// True False
extern "C" void draw__11dDlst_2DT_cFv();
// True False
extern "C" void draw__12dDlst_2DT2_cFv();
// True False
extern "C" void __ct__12dDlst_2DT2_cFv();
// True False
//  ResTIMG* False
// 	 ResTIMG False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  u8 False
//  u8 False
//  u8 False
//  f32 False
//  f32 False
extern "C" void init__12dDlst_2DT2_cFP7ResTIMGffffUcUcUcff();
// True False
extern "C" void draw__11dDlst_2DM_cFv();
// True False
extern "C" void draw__11dDlst_2Dm_cFv();
// True False
extern "C" void draw__12dDlst_2DMt_cFv();
// False False
//  u8 False
extern "C" void getTexture__10J2DPictureCFUc();
// False False
//  ResTIMG* False
// 	 ResTIMG False
//  s16 False
//  s16 False
//  s16 False
//  s16 False
//  u8 False
extern "C" void __ct__10dDlst_2D_cFP7ResTIMGssssUc();
// True False
extern "C" void draw__10dDlst_2D_cFv();
// True False
extern "C" void draw__11dDlst_blo_cFv();
// False False
extern "C" void clearAnmTransform__9J2DScreenFv();
// False False
extern "C" void calcMtx__7J2DPaneFv();
// False False
//  f32 False
//  f32 False
extern "C" void makeMatrix__7J2DPaneFff();
// False False
//  s32 False
extern "C" s32 getTypeID__7J2DPaneCFv();
// False False
//  JUtility::TColor False
extern "C" void setWhite__10J2DPictureFQ28JUtility6TColor();
// False False
//  JUtility::TColor False
extern "C" void setBlack__10J2DPictureFQ28JUtility6TColor();
// True False
extern "C" void __dt__10J2DAnmBaseFv();
// False False
//  int False
//  int False
//  int False
extern "C" void init__8cM_rnd_cFiii();
// True False
extern "C" void get__8cM_rnd_cFv();
// True False
//  f32 False
extern "C" void getF__8cM_rnd_cFf();
// True False
//  f32 False
extern "C" void getFX__8cM_rnd_cFf();
// True False
//  f32 False
//  f32 False
extern "C" void getValue__8cM_rnd_cFff();
// True False
extern "C" void draw__18dDlst_effectLine_cFv();
// False False
//  cXyz& False
// 	 cXyz False
//  _GXColor& False
// 	 _GXColor False
//  u16 False
//  u16 False
//  u16 False
//  u16 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
extern "C" void update__18dDlst_effectLine_cFR4cXyzR8_GXColorUsUsUsUsffff();
// True False
//  cBgD_Vtx_t* False
// 	 cBgD_Vtx_t False
//  u16 False
//  u16 False
//  u16 False
//  cM3dGPla* False
// 	 cM3dGPla False
extern "C" void set__18dDlst_shadowPoly_cFP10cBgD_Vtx_tUsUsUsP8cM3dGPla();
// True False
extern "C" void draw__18dDlst_shadowPoly_cFv();
// True False
//  u32 False
extern "C" static void J3DDrawBuffer__create__FUl();
// True False
extern "C" void reset__18dDlst_shadowReal_cFv();
// True False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
extern "C" void imageDraw__18dDlst_shadowReal_cFPA4_f();
// True False
extern "C" void draw__18dDlst_shadowReal_cFv();
// True False
//  cBgS_ShdwDraw* False
// 	 cBgS_ShdwDraw False
//  cBgD_Vtx_t* False
// 	 cBgD_Vtx_t False
//  int False
//  int False
//  int False
//  cM3dGPla* False
// 	 cM3dGPla False
extern "C" static void psdRealCallBack__FP13cBgS_ShdwDrawP10cBgD_Vtx_tiiiP8cM3dGPla();
// True False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  cXyz* False
// 	 cXyz False
//  dDlst_shadowPoly_c* False
// 	 dDlst_shadowPoly_c False
extern "C" static void realPolygonCheck__FP4cXyzffP4cXyzP18dDlst_shadowPoly_c();
// True False
extern "C" void __dt__14ShdwDrawPoly_cFv();
// True False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
//  f32* False
// 	 f32 False
extern "C" static void setkankyoShadow__FP12dKy_tevstr_cPf();
// True False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  f32 False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
extern "C" void setShadowRealMtx__18dDlst_shadowReal_cFP4cXyzP4cXyzfffP12dKy_tevstr_c();
// True False
//  u32 False
//  J3DModel* False
// 	 J3DModel False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
//  f32 False
//  f32 False
extern "C" void set__18dDlst_shadowReal_cFUlP8J3DModelP4cXyzffP12dKy_tevstr_cff();
// True False
//  J3DModel* False
// 	 J3DModel False
extern "C" void add__18dDlst_shadowReal_cFP8J3DModel();
// True False
extern "C" void draw__20dDlst_shadowSimple_cFv();
// True False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  cXyz* False
// 	 cXyz False
//  s16 False
//  f32 False
//  _GXTexObj* False
// 	 _GXTexObj False
extern "C" void set__20dDlst_shadowSimple_cFP4cXyzffP4cXyzsfP9_GXTexObj();
// True False
extern "C" void init__21dDlst_shadowControl_cFv();
// True False
extern "C" void reset__21dDlst_shadowControl_cFv();
// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
extern "C" void imageDraw__21dDlst_shadowControl_cFPA4_f();
// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
extern "C" void draw__21dDlst_shadowControl_cFPA4_f();
// False False
//  u32 False
//  s8 False
//  J3DModel* False
// 	 J3DModel False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
extern "C" void setReal__21dDlst_shadowControl_cFUlScP8J3DModelP4cXyzffP12dKy_tevstr_c();
// False False
//  u32 False
//  J3DModel* False
// 	 J3DModel False
extern "C" void addReal__21dDlst_shadowControl_cFUlP8J3DModel();
// False False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  cXyz* False
// 	 cXyz False
//  s16 False
//  f32 False
//  _GXTexObj* False
// 	 _GXTexObj False
extern "C" void setSimple__21dDlst_shadowControl_cFP4cXyzffP4cXyzsfP9_GXTexObj();
// False False
//  ResTIMG const* False
// 	 ResTIMG const False
// 		 ResTIMG False
extern "C" void setSimpleTex__21dDlst_shadowControl_cFPC7ResTIMG();
// False False
//  s16 False
//  s16 False
//  u32* False
// 	 u32 False
extern "C" void newData__13dDlst_peekZ_cFssPUl();
// False False
extern "C" void peekData__13dDlst_peekZ_cFv();
// False False
extern "C" void __ct__12dDlst_list_cFv();
// True False
extern "C" void __ct__26mDoExt_3DlineMatSortPacketFv();
// True False
extern "C" void __dt__18dDlst_shadowReal_cFv();
// True False
extern "C" void __dt__17dDlst_shadowTri_cFv();
// True False
extern "C" void __ct__18dDlst_shadowReal_cFv();
// True False
extern "C" void __ct__17dDlst_shadowTri_cFv();
// True False
extern "C" void __ct__20dDlst_shadowSimple_cFv();
// False False
extern "C" void init__12dDlst_list_cFv();
// False False
extern "C" void __dt__12dDlst_list_cFv();
// False False
extern "C" void reset__12dDlst_list_cFv();
// False False
//  J3DDrawBuffer* False
// 	 J3DDrawBuffer False
//  J3DPacket* False
// 	 J3DPacket False
//  cXyz& False
// 	 cXyz False
extern "C" void entryZSortXluDrawList__12dDlst_list_cFP13J3DDrawBufferP9J3DPacketR4cXyz();
// False False
//  J3DDrawBuffer* False
// 	 J3DDrawBuffer False
extern "C" void drawOpaDrawList__12dDlst_list_cFP13J3DDrawBuffer();
// False False
//  J3DDrawBuffer* False
// 	 J3DDrawBuffer False
extern "C" void drawXluDrawList__12dDlst_list_cFP13J3DDrawBuffer();
// False False
extern "C" void drawOpaListItem3d__12dDlst_list_cFv();
// False False
extern "C" void drawXluListItem3d__12dDlst_list_cFv();
// False False
//  dDlst_base_c**& False
// 	 dDlst_base_c** False
// 		 dDlst_base_c* False
// 			 dDlst_base_c False
//  dDlst_base_c**& False
// 	 dDlst_base_c** False
// 		 dDlst_base_c* False
// 			 dDlst_base_c False
//  dDlst_base_c* False
// 	 dDlst_base_c False
extern "C" void set__12dDlst_list_cFRPP12dDlst_base_cRPP12dDlst_base_cP12dDlst_base_c();
// False False
//  dDlst_base_c** False
// 	 dDlst_base_c* False
// 		 dDlst_base_c False
//  dDlst_base_c** False
// 	 dDlst_base_c* False
// 		 dDlst_base_c False
extern "C" void draw__12dDlst_list_cFPP12dDlst_base_cPP12dDlst_base_c();
// True False
//  f32 False
//  _GXColor& False
// 	 _GXColor False
extern "C" void wipeIn__12dDlst_list_cFfR8_GXColor();
// False False
//  f32 False
extern "C" void wipeIn__12dDlst_list_cFf();
// False False
extern "C" void calcWipe__12dDlst_list_cFv();
// True False
extern "C" void getTri__22dDlst_shadowRealPoly_cFv();
// True False
//  s32 False
extern "C" s32 getTriMax__22dDlst_shadowRealPoly_cFv();
// False False
//  void False
//  J2DScreen* False
// 	 J2DScreen False
extern "C" void searchUpdateMaterialID__10J2DAnmBaseFP9J2DScreen();
// False False
extern "C" void __sinit_d_drawlist_cpp();
extern "C" extern char const* const d_d_drawlist__stringBase0;
extern "C" extern u8 l_frontZMat[60 + 4 /* padding */];
extern "C" extern u8 l_frontNoZSubMat[42 + 2 /* padding */];
extern "C" extern u8 l_shadowVolPos[96 + 20 /* padding */];
extern "C" extern u8 l_shadowVolDL[59 + 5 /* padding */];
extern "C" extern u8 l_shadowVolMat[90 + 6 /* padding */];
extern "C" extern u8 l_clearMat[85 + 11 /* padding */];
extern "C" extern u8 l_frontMat[85 + 11 /* padding */];
extern "C" extern u8 l_backSubMat[60];
extern "C" extern u8 l_simpleShadowPos[168 + 28 /* padding */];
extern "C" extern u8 l_shadowVolumeDL[88 + 8 /* padding */];
extern "C" extern u8 l_shadowSealTexDL[85 + 11 /* padding */];
extern "C" extern u8 l_shadowSealTex2DL[85 + 11 /* padding */];
extern "C" extern u8 l_shadowSealDL[105 + 23 /* padding */];
extern "C" extern u8 data_803A8D8C[16];
extern "C" extern u8 data_803A8D9C[48];
extern "C" extern void* __vt__18dDlst_shadowPoly_c[4];
extern "C" extern void* __vt__22dDlst_shadowRealPoly_c[4];
extern "C" extern void* __vt__14ShdwDrawPoly_c[3];
extern "C" extern void* __vt__18dDlst_effectLine_c[3];
extern "C" extern void* __vt__10J2DAnmBase[4];
extern "C" extern void* __vt__11dDlst_blo_c[3];
extern "C" extern void* __vt__10dDlst_2D_c[3];
extern "C" extern void* __vt__12dDlst_2DMt_c[3];
extern "C" extern void* __vt__11dDlst_2Dm_c[3];
extern "C" extern void* __vt__11dDlst_2DM_c[3 + 3 /* padding */];
extern "C" extern void* __vt__12dDlst_2DT2_c[3];
extern "C" extern void* __vt__11dDlst_2DT_c[3];
extern "C" extern void* __vt__15dDlst_2DPoint_c[3];
extern "C" extern void* __vt__14dDlst_2DQuad_c[3];
extern "C" extern void* __vt__13dDlst_2DTri_c[3];
extern "C" extern u8 mSimpleTexObj__21dDlst_shadowControl_c[32];
extern "C" extern u8 data_80450ED0[4];
extern "C" extern f32 mWipeRate__12dDlst_list_c;
extern "C" extern u8 data_80450EE0[8];

// 
// External References:
// 

// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
void mDoMtx_YrotM(f32 (* )[4], s16);
// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  s16 False
void mDoMtx_lookAt(f32 (* )[4], Vec const*, Vec const*, s16);
// False False
//  ResTIMG const* False
// 	 ResTIMG const False
// 		 ResTIMG False
//  _GXTexObj* False
// 	 _GXTexObj False
//  u32 False
//  _GXTlutObj* False
// 	 _GXTlutObj False
void mDoLib_setResTimgObj(ResTIMG const*, _GXTexObj*, u32, _GXTlutObj*);
// False False
void dKy_plight_near_pos();
// False False
void dKy_GxFog_set();
// False False
//  u8* False
// 	 u8 False
//  u8 False
//  u8 False
void cLib_chaseUC(u8*, u8, u8);
// False False
//  void* False
// 	 void False
//  u32 False
void* operator new(u32);
// False False
//  void* False
// 	 void False
//  u32 False
//  int False
void* operator new[](u32, int);
// False False
//  void False
//  void* False
// 	 void False
void operator delete(void*);

// False False
extern "C" void __dt__4cXyzFv();
// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
extern "C" void mDoMtx_YrotM__FPA4_fs();
// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  s16 False
extern "C" void mDoMtx_lookAt__FPA4_fPC3VecPC3Vecs();
// False False
//  f32 False
//  f32 False
//  f32 False
extern "C" void scaleM__14mDoMtx_stack_cFfff();
// False False
extern "C" void __ct__4cXyzFv();
// False False
extern "C" void __dt__26mDoExt_3DlineMatSortPacketFv();
// False False
//  ResTIMG const* False
// 	 ResTIMG const False
// 		 ResTIMG False
//  _GXTexObj* False
// 	 _GXTexObj False
//  u32 False
//  _GXTlutObj* False
// 	 _GXTlutObj False
extern "C" void mDoLib_setResTimgObj__FPC7ResTIMGP9_GXTexObjUlP10_GXTlutObj();
// False False
//  cBgS_ShdwDraw* False
// 	 cBgS_ShdwDraw False
extern "C" void ShdwDraw__4cBgSFP13cBgS_ShdwDraw();
// False False
extern "C" void dKy_plight_near_pos__Fv();
// False False
extern "C" void dKy_GxFog_set__Fv();
// False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
extern "C" void __mi__4cXyzCFRC3Vec();
// False False
extern "C" void normalize__4cXyzFv();
// False False
extern "C" void isZero__4cXyzCFv();
// False False
extern "C" void __ct__13cBgS_ShdwDrawFv();
// False False
extern "C" void __dt__13cBgS_ShdwDrawFv();
// False False
//  cXyz& False
// 	 cXyz False
//  cXyz& False
// 	 cXyz False
extern "C" void Set__13cBgS_ShdwDrawFR4cXyzR4cXyz();
// False False
//  int (*)(cBgS_ShdwDraw*, cBgD_Vtx_t*, int, int, int, cM3dGPla*) False
// 	 * False
// 		  False
// 	 int False
// 	 cBgS_ShdwDraw* False
// 		 cBgS_ShdwDraw False
// 	 cBgD_Vtx_t* False
// 		 cBgD_Vtx_t False
// 	 int False
// 	 int False
// 	 int False
// 	 cM3dGPla* False
// 		 cM3dGPla False
extern "C" void SetCallback__13cBgS_ShdwDrawFPFP13cBgS_ShdwDrawP10cBgD_Vtx_tiiiP8cM3dGPla_i();
// False False
//  u8* False
// 	 u8 False
//  u8 False
//  u8 False
extern "C" void cLib_chaseUC__FPUcUcUc();
// False False
extern "C" void calcViewFrustum__11J3DUClipperFv();
// False False
//  f32 const (* )[4] False
// 	 f32 const False
// 		 f32 False
// 	 * False
// 		  False
//  Vec* False
// 	 Vec False
//  Vec* False
// 	 Vec False
extern "C" void clip__11J3DUClipperCFPA4_CfP3VecP3Vec();
// False False
//  void* False
// 	 void False
//  u32 False
extern "C" void* __nw__FUl();
// False False
//  void* False
// 	 void False
//  u32 False
//  int False
extern "C" void* __nwa__FUli();
// False False
//  void False
//  void* False
// 	 void False
extern "C" void __dl__FPv();
// False False
//  u32 False
//  char const* False
// 	 char const False
// 		 char False
//  JKRArchive* False
// 	 JKRArchive False
extern "C" void getGlbResource__10JKRArchiveFUlPCcP10JKRArchive();
// False False
extern "C" void clearAnmTransform__7J2DPaneFv();
// False False
//  f32 False
//  f32 False
//  J2DGrafContext const* False
// 	 J2DGrafContext const False
// 		 J2DGrafContext False
extern "C" void draw__9J2DScreenFffPC14J2DGrafContext();
// False False
extern "C" void __ct__10J2DPictureFv();
// False False
extern "C" void reinitGX__6J3DSysFv();
// False False
extern "C" void drawFast__14J3DShapePacketFv();
// False False
extern "C" void loadPreDrawSetting__8J3DShapeCFv();
// False False
extern "C" void initialize__13J3DDrawBufferFv();
// False False
//  u32 False
extern "C" void allocBuffer__13J3DDrawBufferFUl();
// False False
extern "C" void __dt__13J3DDrawBufferFv();
// False False
extern "C" void frameInit__13J3DDrawBufferFv();
// False False
//  J3DPacket* False
// 	 J3DPacket False
//  u16 False
extern "C" void entryImm__13J3DDrawBufferFP9J3DPacketUs();
// False False
extern "C" void draw__13J3DDrawBufferCFv();
// False False
extern "C" void PSMTXConcat();
// False False
extern "C" void PSMTXTrans();
// False False
extern "C" void C_MTXLightOrtho();
// False False
extern "C" void PSMTXMultVec();
// False False
extern "C" void C_MTXOrtho();
// False False
extern "C" void PSVECAdd();
// False False
extern "C" void PSVECScale();
// False False
extern "C" void PSVECSquareMag();
// False False
extern "C" void PSVECDotProduct();
// False False
extern "C" void GXSetVtxDesc();
// False False
extern "C" void GXClearVtxDesc();
// False False
extern "C" void GXSetVtxAttrFmt();
// False False
extern "C" void GXSetArray();
// False False
extern "C" void GXSetTexCoordGen2();
// False False
extern "C" void GXSetNumTexGens();
// False False
extern "C" void GXPixModeSync();
// False False
extern "C" void GXPeekZ();
// False False
extern "C" void GXBegin();
// False False
extern "C" void GXSetLineWidth();
// False False
extern "C" void GXSetPointSize();
// False False
extern "C" void GXSetCullMode();
// False False
extern "C" void GXSetTexCopySrc();
// False False
extern "C" void GXSetTexCopyDst();
// False False
extern "C" void GXCopyTex();
// False False
extern "C" void GXSetChanMatColor();
// False False
extern "C" void GXSetNumChans();
// False False
extern "C" void GXSetChanCtrl();
// False False
extern "C" void GXGetTexBufferSize();
// False False
extern "C" void GXInitTexObj();
// False False
extern "C" void GXInitTexObjLOD();
// False False
extern "C" void GXGetTexObjWidth();
// False False
extern "C" void GXGetTexObjHeight();
// False False
extern "C" void GXGetTexObjWrapS();
// False False
extern "C" void GXGetTexObjWrapT();
// False False
extern "C" void GXGetTexObjTlut();
// False False
extern "C" void GXLoadTexObj();
// False False
extern "C" void GXLoadTlut();
// False False
extern "C" void GXSetNumIndStages();
// False False
extern "C" void GXSetTevOp();
// False False
extern "C" void GXSetTevColorIn();
// False False
extern "C" void GXSetTevAlphaIn();
// False False
extern "C" void GXSetTevColorOp();
// False False
extern "C" void GXSetTevAlphaOp();
// False False
extern "C" void GXSetTevColor();
// False False
extern "C" void GXSetTevSwapModeTable();
// False False
extern "C" void GXSetAlphaCompare();
// False False
extern "C" void GXSetTevOrder();
// False False
extern "C" void GXSetNumTevStages();
// False False
extern "C" void GXSetFog();
// False False
extern "C" void GXSetBlendMode();
// False False
extern "C" void GXSetColorUpdate();
// False False
extern "C" void GXSetAlphaUpdate();
// False False
extern "C" void GXSetZMode();
// False False
extern "C" void GXSetZCompLoc();
// False False
extern "C" void GXSetDither();
// False False
extern "C" void GXCallDisplayList();
// False False
extern "C" void GXSetProjection();
// False False
extern "C" void GXLoadPosMtxImm();
// False False
extern "C" void GXSetCurrentMtx();
// False False
extern "C" void GXLoadTexMtxImm();
// False False
extern "C" void GXSetViewport();
// False False
extern "C" void GXSetScissor();
// False False
extern "C" void GXSetClipMode();
// False False
extern "C" void __destroy_arr();
// False False
extern "C" void __construct_array();
// False False
extern "C" void _savefpr_26();
// False False
extern "C" void _restfpr_26();
// False False
extern "C" void _savegpr_22();
// False False
extern "C" void _savegpr_23();
// False False
extern "C" void _savegpr_24();
// False False
extern "C" void _savegpr_25();
// False False
extern "C" void _savegpr_26();
// False False
extern "C" void _savegpr_27();
// False False
extern "C" void _savegpr_28();
// False False
extern "C" void _savegpr_29();
// False False
extern "C" void _restgpr_22();
// False False
extern "C" void _restgpr_23();
// False False
extern "C" void _restgpr_24();
// False False
extern "C" void _restgpr_25();
// False False
extern "C" void _restgpr_26();
// False False
extern "C" void _restgpr_27();
// False False
extern "C" void _restgpr_28();
// False False
extern "C" void _restgpr_29();
// False False
extern "C" void fmod();
extern "C" extern u8 g_mDoMtx_identity[48 + 24 /* padding */];
extern "C" extern void* __vt__26mDoExt_3DlineMatSortPacket[5];
extern "C" extern void* __vt__12dDlst_base_c[3];
extern "C" extern void* __vt__9J3DPacket[5];
extern "C" extern u8 now__14mDoMtx_stack_c[48];
extern "C" extern u8 mClipper__14mDoLib_clipper[92];
extern "C" extern u8 g_dComIfG_gameInfo[122384];
extern "C" extern u8 g_env_light[4880];
extern "C" extern u8 g_envHIO[68];
extern "C" extern u8 j3dSys[284];
extern "C" extern u8 sincosTable___5JMath[65536];
extern "C" extern u8 mBackColor__13mDoGph_gInf_c[4];
extern "C" extern u8 g_clearColor[4];
extern "C" extern u32 g_blackColor;
extern "C" extern u32 g_whiteColor;
extern "C" extern u32 __float_nan;
extern "C" extern u32 __float_max;
extern "C" extern f32 mSystemFar__14mDoLib_clipper;
extern "C" extern f32 mFovyRate__14mDoLib_clipper;
extern "C" extern f32 G_CM3D_F_ABS_MIN[1 + 1 /* padding */];
extern "C" extern u8 sOldVcdVatCmd__8J3DShape[4];

// 
// Declarations:
// 

/* 80051AC0-80051ADC 001C+00 s=0 e=3 z=0  None .text      setViewPort__14dDlst_window_cFffffff                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
asm void dDlst_window_c::setViewPort(f32 param_0, f32 param_1, f32 param_2, f32 param_3, f32 param_4, f32 param_5) {
	nofralloc
#include "asm/d/d_drawlist/setViewPort__14dDlst_window_cFffffff.s"
}
#pragma pop


/* 80051ADC-80051AF0 0014+00 s=0 e=4 z=0  None .text      setScissor__14dDlst_window_cFffff                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
asm void dDlst_window_c::setScissor(f32 param_0, f32 param_1, f32 param_2, f32 param_3) {
	nofralloc
#include "asm/d/d_drawlist/setScissor__14dDlst_window_cFffff.s"
}
#pragma pop


/* 80051AF0-80051CF0 0200+00 s=1 e=0 z=0  None .text      draw__13dDlst_2DTri_cFv                                      */
//	80051B04: 80439A20 (sincosTable___5JMath)
//	80051B08: 80439A20 (sincosTable___5JMath)
//	80051BAC: 8035B58C (GXClearVtxDesc)
//	80051BB8: 8035AEB8 (GXSetVtxDesc)
//	80051BD0: 8035B5C4 (GXSetVtxAttrFmt)
//	80051BD8: 8035DB30 (GXSetNumChans)
//	80051BF8: 8035DB6C (GXSetChanCtrl)
//	80051C0C: 8035DA48 (GXSetChanMatColor)
//	80051C14: 8035BDFC (GXSetNumTexGens)
//	80051C1C: 8035F890 (GXSetNumTevStages)
//	80051C30: 8035F6F4 (GXSetTevOrder)
//	80051C3C: 8035F198 (GXSetTevOp)
//	80051C50: 8035FBF0 (GXSetBlendMode)
//	80051C54: 803A2FD8 (g_mDoMtx_identity)
//	80051C58: 803A2FD8 (g_mDoMtx_identity)
//	80051C60: 8036024C (GXLoadPosMtxImm)
//	80051C68: 803602EC (GXSetCurrentMtx)
//	80051C78: 8035C764 (GXBegin)
//	80051CC0: 804061C0 (g_dComIfG_gameInfo)
//	80051CC4: 804061C0 (g_dComIfG_gameInfo)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dDlst_2DTri_c::draw() {
	nofralloc
#include "asm/d/d_drawlist/draw__13dDlst_2DTri_cFv.s"
}
#pragma pop


/* 80051CF0-80051E5C 016C+00 s=1 e=0 z=0  None .text      draw__14dDlst_2DQuad_cFv                                     */
//	80051D04: 8035B58C (GXClearVtxDesc)
//	80051D10: 8035AEB8 (GXSetVtxDesc)
//	80051D28: 8035B5C4 (GXSetVtxAttrFmt)
//	80051D30: 8035DB30 (GXSetNumChans)
//	80051D50: 8035DB6C (GXSetChanCtrl)
//	80051D64: 8035DA48 (GXSetChanMatColor)
//	80051D6C: 8035BDFC (GXSetNumTexGens)
//	80051D74: 8035F890 (GXSetNumTevStages)
//	80051D88: 8035F6F4 (GXSetTevOrder)
//	80051D94: 8035F198 (GXSetTevOp)
//	80051DA8: 8035FBF0 (GXSetBlendMode)
//	80051DAC: 803A2FD8 (g_mDoMtx_identity)
//	80051DB0: 803A2FD8 (g_mDoMtx_identity)
//	80051DB8: 8036024C (GXLoadPosMtxImm)
//	80051DC0: 803602EC (GXSetCurrentMtx)
//	80051DD0: 8035C764 (GXBegin)
//	80051E2C: 804061C0 (g_dComIfG_gameInfo)
//	80051E30: 804061C0 (g_dComIfG_gameInfo)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dDlst_2DQuad_c::draw() {
	nofralloc
#include "asm/d/d_drawlist/draw__14dDlst_2DQuad_cFv.s"
}
#pragma pop


/* 80051E5C-80051F98 013C+00 s=1 e=0 z=0  None .text      draw__15dDlst_2DPoint_cFv                                    */
//	80051E70: 8035B58C (GXClearVtxDesc)
//	80051E7C: 8035AEB8 (GXSetVtxDesc)
//	80051E94: 8035B5C4 (GXSetVtxAttrFmt)
//	80051E9C: 8035DB30 (GXSetNumChans)
//	80051EBC: 8035DB6C (GXSetChanCtrl)
//	80051ED0: 8035DA48 (GXSetChanMatColor)
//	80051ED8: 8035BDFC (GXSetNumTexGens)
//	80051EE0: 8035F890 (GXSetNumTevStages)
//	80051EF4: 8035F6F4 (GXSetTevOrder)
//	80051F00: 8035F198 (GXSetTevOp)
//	80051F14: 8035FBF0 (GXSetBlendMode)
//	80051F20: 8035C8FC (GXSetPointSize)
//	80051F24: 803A2FD8 (g_mDoMtx_identity)
//	80051F28: 803A2FD8 (g_mDoMtx_identity)
//	80051F30: 8036024C (GXLoadPosMtxImm)
//	80051F38: 803602EC (GXSetCurrentMtx)
//	80051F48: 8035C764 (GXBegin)
//	80051F68: 804061C0 (g_dComIfG_gameInfo)
//	80051F6C: 804061C0 (g_dComIfG_gameInfo)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dDlst_2DPoint_c::draw() {
	nofralloc
#include "asm/d/d_drawlist/draw__15dDlst_2DPoint_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80450648-8045064C 0004+00 s=1 e=0 z=0  None .sdata     l_color$4033                                                 */
SECTION_SDATA static u8 l_color_4033[4] = {
	0xFF, 0xFF, 0xFF, 0xE0,
};

/* 80452008-8045200C 0004+00 s=4 e=0 z=0  None .sdata2    @4072                                                        */
SECTION_SDATA2 static f32 lit_4072 = 0.5f;

/* 8045200C-80452010 0004+00 s=1 e=0 z=0  None .sdata2    @4073                                                        */
SECTION_SDATA2 static f32 lit_4073 = 32768.0f;

/* 80452010-80452018 0004+04 s=10 e=0 z=0  None .sdata2    @4074                                                        */
SECTION_SDATA2 static f32 lit_4074[1 + 1 /* padding */] = {
	0.0f,
	/* padding */
	0.0f,
};

/* 80452018-80452020 0008+00 s=8 e=0 z=0  None .sdata2    @4076                                                        */
SECTION_SDATA2 static f64 lit_4076 = 4503599627370496.0 /* cast u32 to float */;

/* 80452020-80452028 0008+00 s=5 e=0 z=0  None .sdata2    @4079                                                        */
SECTION_SDATA2 static f64 lit_4079 = 4503601774854144.0 /* cast s32 to float */;

/* 80051F98-80052354 03BC+00 s=1 e=0 z=0  None .text      draw__11dDlst_2DT_cFv                                        */
//	80051FA8: 803621D4 (_savegpr_27)
//	80051FB4: 80452018 (lit_4076)
//	80051FE0: 80452008 (lit_4072)
//	80051FF0: 80452020 (lit_4079)
//	80052040: 8045200C (lit_4073)
//	800520C4: 8035DE40 (GXInitTexObj)
//	800520D4: 80452010 (lit_4074)
//	800520EC: 8035E0D4 (GXInitTexObjLOD)
//	800520F8: 8035E414 (GXLoadTexObj)
//	800520FC: 8035B58C (GXClearVtxDesc)
//	80052108: 8035AEB8 (GXSetVtxDesc)
//	80052114: 8035AEB8 (GXSetVtxDesc)
//	80052120: 8035AEB8 (GXSetVtxDesc)
//	80052138: 8035B5C4 (GXSetVtxAttrFmt)
//	80052150: 8035B5C4 (GXSetVtxAttrFmt)
//	80052168: 8035B5C4 (GXSetVtxAttrFmt)
//	80052170: 8035DB30 (GXSetNumChans)
//	80052190: 8035DB6C (GXSetChanCtrl)
//	80052198: 80450648 (l_color_4033)
//	800521A4: 8035BDFC (GXSetNumTexGens)
//	800521AC: 8035F890 (GXSetNumTevStages)
//	800521C0: 8035F6F4 (GXSetTevOrder)
//	800521CC: 8035F198 (GXSetTevOp)
//	800521D4: 8035FCD0 (GXSetZCompLoc)
//	800521E4: 8035FC9C (GXSetZMode)
//	800521F8: 8035FBF0 (GXSetBlendMode)
//	80052210: 8035F624 (GXSetAlphaCompare)
//	80052214: 80450600 (g_clearColor)
//	80052220: 80452010 (lit_4074)
//	80052234: 8035F8B8 (GXSetFog)
//	8005223C: 8035C984 (GXSetCullMode)
//	80052244: 8035FDD8 (GXSetDither)
//	80052248: 803A2FD8 (g_mDoMtx_identity)
//	8005224C: 803A2FD8 (g_mDoMtx_identity)
//	80052254: 8036024C (GXLoadPosMtxImm)
//	80052258: 80450648 (l_color_4033)
//	80052268: 8035DA48 (GXSetChanMatColor)
//	80052270: 803605D0 (GXSetClipMode)
//	80052278: 803602EC (GXSetCurrentMtx)
//	80052288: 8035C764 (GXBegin)
//	8005231C: 803605D0 (GXSetClipMode)
//	80052320: 804061C0 (g_dComIfG_gameInfo)
//	80052324: 804061C0 (g_dComIfG_gameInfo)
//	80052340: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dDlst_2DT_c::draw() {
	nofralloc
#include "asm/d/d_drawlist/draw__11dDlst_2DT_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80452028-8045202C 0004+00 s=10 e=0 z=0  None .sdata2    @4270                                                        */
SECTION_SDATA2 static f32 lit_4270 = 1.0f;

/* 80052354-80052B00 07AC+00 s=1 e=0 z=0  None .text      draw__12dDlst_2DT2_cFv                                       */
//	800523BC: 8035B5C4 (GXSetVtxAttrFmt)
//	800523D4: 8035B5C4 (GXSetVtxAttrFmt)
//	800523D8: 8035B58C (GXClearVtxDesc)
//	800523E4: 8035AEB8 (GXSetVtxDesc)
//	800523F0: 8035AEB8 (GXSetVtxDesc)
//	800523FC: 8035E414 (GXLoadTexObj)
//	80052404: 8035DB30 (GXSetNumChans)
//	80052418: 8035F37C (GXSetTevColor)
//	8005242C: 8035F37C (GXSetTevColor)
//	80052434: 8035BDFC (GXSetNumTexGens)
//	80052450: 8035BB7C (GXSetTexCoordGen2)
//	80052458: 8035F890 (GXSetNumTevStages)
//	8005246C: 8035F6F4 (GXSetTevOrder)
//	80052484: 8035F224 (GXSetTevColorIn)
//	800524A0: 8035F2AC (GXSetTevColorOp)
//	800524C4: 8035F268 (GXSetTevAlphaIn)
//	800524E0: 8035F268 (GXSetTevAlphaIn)
//	800524FC: 8035F314 (GXSetTevAlphaOp)
//	80052504: 8035FCD0 (GXSetZCompLoc)
//	80052514: 8035FC9C (GXSetZMode)
//	80052528: 8035FBF0 (GXSetBlendMode)
//	80052540: 8035F624 (GXSetAlphaCompare)
//	80052544: 80450600 (g_clearColor)
//	80052550: 80452010 (lit_4074)
//	80052564: 8035F8B8 (GXSetFog)
//	8005256C: 8035C984 (GXSetCullMode)
//	80052574: 8035FDD8 (GXSetDither)
//	80052578: 803A2FD8 (g_mDoMtx_identity)
//	8005257C: 803A2FD8 (g_mDoMtx_identity)
//	80052584: 8036024C (GXLoadPosMtxImm)
//	8005258C: 803605D0 (GXSetClipMode)
//	80052594: 803602EC (GXSetCurrentMtx)
//	800525C8: 80452008 (lit_4072)
//	800525DC: 80452010 (lit_4074)
//	800525F8: 80452028 (lit_4270)
//	80052608: 80452010 (lit_4074)
//	80052624: 80452028 (lit_4270)
//	80052640: 8035C764 (GXBegin)
//	80052774: 80452008 (lit_4072)
//	80052780: 80452010 (lit_4074)
//	8005279C: 80452028 (lit_4270)
//	800527AC: 80452010 (lit_4074)
//	800527BC: 80452028 (lit_4270)
//	800527C4: 80452008 (lit_4072)
//	800527C8: 80452028 (lit_4270)
//	800527E4: 8035C764 (GXBegin)
//	80052824: 80452028 (lit_4270)
//	8005283C: 80452028 (lit_4270)
//	80052878: 80452028 (lit_4270)
//	8005288C: 80452028 (lit_4270)
//	800528A4: 80452008 (lit_4072)
//	800528B0: 80452010 (lit_4074)
//	800528C0: 80452028 (lit_4270)
//	800528CC: 80452028 (lit_4270)
//	800528E0: 80452010 (lit_4074)
//	800528FC: 80452028 (lit_4270)
//	80052918: 8035C764 (GXBegin)
//	800529BC: 80452010 (lit_4074)
//	800529D8: 80452008 (lit_4072)
//	800529DC: 80452028 (lit_4270)
//	800529F0: 80452010 (lit_4074)
//	80052A0C: 80452008 (lit_4072)
//	80052A10: 80452028 (lit_4270)
//	80052A30: 8035C764 (GXBegin)
//	80052A8C: 803605D0 (GXSetClipMode)
//	80052A90: 804061C0 (g_dComIfG_gameInfo)
//	80052A94: 804061C0 (g_dComIfG_gameInfo)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dDlst_2DT2_c::draw() {
	nofralloc
#include "asm/d/d_drawlist/draw__12dDlst_2DT2_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 803A87A0-803A87C0 000C+14 s=2 e=0 z=0  None .data      cNullVec__6Z2Calc                                            */
SECTION_DATA static u8 cNullVec__6Z2Calc[12 + 20 /* padding */] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
};

/* 803A87C0-803A8800 003C+04 s=0 e=0 z=0  None .data      l_frontZMat                                                  */
SECTION_DATA u8 l_frontZMat[60 + 4 /* padding */] = {
	0x61, 0x40, 0x00, 0x00, 0x07, 0x10, 0x00, 0x00, 0x10, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
	0x00, 0x10, 0x09, 0x00, 0x00, 0x00, 0x01, 0x61, 0x00, 0x00, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00,
};

/* 803A8800-803A882C 002A+02 s=0 e=0 z=0  None .data      l_frontNoZSubMat                                             */
SECTION_DATA u8 l_frontNoZSubMat[42 + 2 /* padding */] = {
	0x61, 0x40, 0x00, 0x00, 0x06, 0x61, 0x41, 0x00, 0x09, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	/* padding */
	0x00, 0x00,
};

/* 803A882C-803A88A0 0060+14 s=0 e=0 z=0  None .data      l_shadowVolPos                                               */
SECTION_DATA u8 l_shadowVolPos[96 + 20 /* padding */] = {
	0xBF, 0x80, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00,
	0xBF, 0x80, 0x00, 0x00, 0xC3, 0x96, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xC3, 0x96, 0x00, 0x00,
	0x3F, 0x80, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
	0xBF, 0x80, 0x00, 0x00, 0xC3, 0x96, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xC3, 0x96, 0x00, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
};

/* 803A88A0-803A88E0 003B+05 s=0 e=0 z=0  None .data      l_shadowVolDL                                                */
SECTION_DATA u8 l_shadowVolDL[59 + 5 /* padding */] = {
	0x80, 0x00, 0x18, 0x06, 0x02, 0x03, 0x07, 0x00, 0x04, 0x05, 0x01, 0x06, 0x04, 0x00, 0x02, 0x07,
	0x05, 0x04, 0x06, 0x03, 0x01, 0x05, 0x07, 0x02, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 803A88E0-803A8940 005A+06 s=1 e=0 z=0  None .data      l_shadowProjMat                                              */
SECTION_DATA static u8 l_shadowProjMat[90 + 6 /* padding */] = {
	0x61, 0x28, 0x38, 0x03, 0xC0, 0x61, 0xC0, 0x08, 0xFF, 0xFF, 0x61, 0xC1, 0x08, 0xE6, 0x70, 0x61,
	0x43, 0x00, 0x00, 0x01, 0x61, 0x40, 0x00, 0x00, 0x07, 0x61, 0x41, 0x00, 0x04, 0xAD, 0x61, 0xF3,
	0x64, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x3F, 0x00, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x10,
	0x09, 0x00, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 803A8940-803A89A0 005A+06 s=0 e=0 z=0  None .data      l_shadowVolMat                                               */
SECTION_DATA u8 l_shadowVolMat[90 + 6 /* padding */] = {
	0x61, 0x28, 0x38, 0x00, 0x00, 0x61, 0xC0, 0x08, 0xFF, 0xFC, 0x61, 0xC1, 0x08, 0xFF, 0x90, 0x61,
	0x43, 0x00, 0x00, 0x41, 0x61, 0x40, 0x00, 0x00, 0x0D, 0x61, 0x41, 0x00, 0x01, 0x35, 0x61, 0xF3,
	0x7F, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10,
	0x09, 0x00, 0x00, 0x00, 0x01, 0x61, 0x00, 0x00, 0x80, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 803A89A0-803A8A00 0055+0B s=0 e=0 z=0  None .data      l_clearMat                                                   */
SECTION_DATA u8 l_clearMat[85 + 11 /* padding */] = {
	0x61, 0x28, 0x38, 0x00, 0x00, 0x61, 0xC0, 0x08, 0xFF, 0xFF, 0x61, 0xC1, 0x08, 0xFF, 0xA0, 0x61,
	0x40, 0x00, 0x00, 0x06, 0x61, 0x41, 0x00, 0x00, 0x14, 0x61, 0xF3, 0x7F, 0x00, 0x00, 0x10, 0x00,
	0x00, 0x10, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x09, 0x00, 0x00, 0x00, 0x01,
	0x61, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 803A8A00-803A8A60 0055+0B s=0 e=0 z=0  None .data      l_frontMat                                                   */
SECTION_DATA u8 l_frontMat[85 + 11 /* padding */] = {
	0x61, 0x28, 0x38, 0x00, 0x00, 0x61, 0xC0, 0x08, 0xFF, 0xFF, 0x61, 0xC1, 0x08, 0xFF, 0x90, 0x61,
	0x43, 0x00, 0x00, 0x41, 0x61, 0x40, 0x00, 0x00, 0x07, 0x61, 0x41, 0x00, 0x01, 0x15, 0x10, 0x00,
	0x00, 0x10, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x09, 0x00, 0x00, 0x00, 0x01,
	0x61, 0x00, 0x00, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 803A8A60-803A8A9C 003C+00 s=0 e=0 z=0  None .data      l_backSubMat                                                 */
SECTION_DATA u8 l_backSubMat[60] = {
	0x61, 0x41, 0x00, 0x09, 0x35, 0x10, 0x00, 0x00, 0x10, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
	0x00, 0x10, 0x09, 0x00, 0x00, 0x00, 0x01, 0x61, 0x00, 0x00, 0x80, 0x10, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 803A8A9C-803A8B60 00A8+1C s=0 e=0 z=0  None .data      l_simpleShadowPos                                            */
SECTION_DATA u8 l_simpleShadowPos[168 + 28 /* padding */] = {
	0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00,
	0xBF, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00,
	0xBF, 0x80, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00,
	0x3F, 0x80, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
	0x3F, 0x80, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
	0xBF, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00,
	0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00,
	0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 803A8B60-803A8BC0 0058+08 s=0 e=0 z=0  None .data      l_shadowVolumeDL                                             */
SECTION_DATA u8 l_shadowVolumeDL[88 + 8 /* padding */] = {
	0x98, 0x00, 0x05, 0x03, 0x09, 0x01, 0x07, 0x05, 0x98, 0x00, 0x05, 0x04, 0x06, 0x00, 0x08, 0x02,
	0x98, 0x00, 0x04, 0x04, 0x05, 0x06, 0x07, 0x98, 0x00, 0x04, 0x02, 0x03, 0x04, 0x05, 0x98, 0x00,
	0x04, 0x08, 0x09, 0x02, 0x03, 0x98, 0x00, 0x04, 0x06, 0x07, 0x08, 0x09, 0x98, 0x00, 0x03, 0x01,
	0x05, 0x03, 0x98, 0x00, 0x03, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 803A8BC0-803A8C20 0055+0B s=0 e=0 z=0  None .data      l_shadowSealTexDL                                            */
SECTION_DATA u8 l_shadowSealTexDL[85 + 11 /* padding */] = {
	0x61, 0x28, 0x38, 0x03, 0xC0, 0x61, 0x40, 0x00, 0x00, 0x06, 0x61, 0x41, 0x00, 0x06, 0x15, 0x10,
	0x00, 0x00, 0x10, 0x3F, 0x00, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x10, 0x09, 0x00, 0x00, 0x00,
	0x00, 0x61, 0x00, 0x00, 0x40, 0x01, 0x80, 0x00, 0x04, 0x0A, 0x00, 0x00, 0x0B, 0x01, 0x00, 0x0C,
	0x01, 0x01, 0x0D, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 803A8C20-803A8C80 0055+0B s=0 e=0 z=0  None .data      l_shadowSealTex2DL                                           */
SECTION_DATA u8 l_shadowSealTex2DL[85 + 11 /* padding */] = {
	0x61, 0x28, 0x38, 0x03, 0xC0, 0x61, 0x40, 0x00, 0x00, 0x06, 0x61, 0x41, 0x00, 0x06, 0x15, 0x10,
	0x00, 0x00, 0x10, 0x3F, 0x00, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x10, 0x09, 0x00, 0x00, 0x00,
	0x00, 0x61, 0x00, 0x00, 0x40, 0x01, 0x80, 0x00, 0x04, 0x0A, 0x00, 0x00, 0x0B, 0x02, 0x00, 0x0C,
	0x02, 0x01, 0x0D, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 803A8C80-803A8D00 0069+17 s=0 e=0 z=0  None .data      l_shadowSealDL                                               */
SECTION_DATA u8 l_shadowSealDL[105 + 23 /* padding */] = {
	0x10, 0x00, 0x00, 0x10, 0x0E, 0x00, 0x00, 0x05, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00,
	0x05, 0x00, 0x61, 0x28, 0x38, 0x00, 0x00, 0x61, 0xC0, 0x08, 0xFF, 0xFF, 0x61, 0xC1, 0x08, 0xFF,
	0xB0, 0x61, 0x40, 0x00, 0x00, 0x06, 0x61, 0x41, 0x00, 0x06, 0xED, 0x10, 0x00, 0x00, 0x10, 0x3F,
	0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x09, 0x00, 0x00, 0x00, 0x01, 0x61, 0x00, 0x00,
	0x40, 0x10, 0x80, 0x00, 0x04, 0x0A, 0x0B, 0x0C, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 803A8D00-803A8D7C 007B+01 s=1 e=0 z=0  None .data      l_matDL$5404                                                 */
SECTION_DATA static u8 l_matDL[123 + 1 /* padding */] = {
	0x10, 0x00, 0x00, 0x10, 0x0E, 0x00, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00,
	0x04, 0x00, 0x61, 0x28, 0x38, 0x00, 0x00, 0x61, 0xC0, 0x08, 0xFF, 0xF2, 0x61, 0xC1, 0x08, 0xFF,
	0x90, 0x61, 0x43, 0x00, 0x00, 0x41, 0x61, 0xF3, 0x7F, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x3F,
	0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x09, 0x00, 0x00, 0x00, 0x01, 0x61, 0x00, 0x00,
	0x40, 0x10, 0x61, 0xEE, 0x00, 0x00, 0x00, 0x61, 0xEF, 0x00, 0x00, 0x00, 0x61, 0xF0, 0x00, 0x00,
	0x00, 0x61, 0xF1, 0x00, 0x00, 0x00, 0x61, 0xF2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	/* padding */
	0x00,
};

/* 803A8D7C-803A8D8C 0010+00 s=1 e=0 z=0  None .data      l_imageDrawColor$5405                                        */
SECTION_DATA static u8 l_imageDrawColor[16] = {
	0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF,
};

/* 803A8D8C-803A8D9C 0010+00 s=0 e=0 z=0  None .data      l_tevColorChan$5438                                          */
SECTION_DATA u8 data_803A8D8C[16] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03,
};

/* 803A8D9C-803A8DCC 0030+00 s=0 e=0 z=0  None .data      mtx_adj$5842                                                 */
SECTION_DATA u8 data_803A8D9C[48] = {
	0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 803A8DCC-803A8DDC 0010+00 s=1 e=0 z=0  None .data      __vt__18dDlst_shadowPoly_c                                   */
SECTION_DATA void* __vt__18dDlst_shadowPoly_c[4] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)NULL,
	(void*)NULL,
};

/* 803A8DDC-803A8DEC 0010+00 s=2 e=0 z=0  None .data      __vt__22dDlst_shadowRealPoly_c                               */
SECTION_DATA void* __vt__22dDlst_shadowRealPoly_c[4] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)getTri__22dDlst_shadowRealPoly_cFv,
	(void*)getTriMax__22dDlst_shadowRealPoly_cFv,
};

/* 803A8DEC-803A8DF8 000C+00 s=2 e=0 z=0  None .data      __vt__14ShdwDrawPoly_c                                       */
SECTION_DATA void* __vt__14ShdwDrawPoly_c[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__14ShdwDrawPoly_cFv,
};

/* 803A8DF8-803A8E04 000C+00 s=0 e=2 z=0  None .data      __vt__18dDlst_effectLine_c                                   */
SECTION_DATA void* __vt__18dDlst_effectLine_c[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)draw__18dDlst_effectLine_cFv,
};

/* 803A8E04-803A8E14 0010+00 s=1 e=14 z=0  None .data      __vt__10J2DAnmBase                                           */
SECTION_DATA void* __vt__10J2DAnmBase[4] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__10J2DAnmBaseFv,
	(void*)searchUpdateMaterialID__10J2DAnmBaseFP9J2DScreen,
};

/* 803A8E14-803A8E20 000C+00 s=0 e=0 z=0  None .data      __vt__11dDlst_blo_c                                          */
SECTION_DATA void* __vt__11dDlst_blo_c[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)draw__11dDlst_blo_cFv,
};

/* 803A8E20-803A8E2C 000C+00 s=1 e=1 z=0  None .data      __vt__10dDlst_2D_c                                           */
SECTION_DATA void* __vt__10dDlst_2D_c[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)draw__10dDlst_2D_cFv,
};

/* 803A8E2C-803A8E38 000C+00 s=0 e=0 z=0  None .data      __vt__12dDlst_2DMt_c                                         */
SECTION_DATA void* __vt__12dDlst_2DMt_c[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)draw__12dDlst_2DMt_cFv,
};

/* 803A8E38-803A8E44 000C+00 s=0 e=0 z=0  None .data      __vt__11dDlst_2Dm_c                                          */
SECTION_DATA void* __vt__11dDlst_2Dm_c[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)draw__11dDlst_2Dm_cFv,
};

/* 803A8E44-803A8E5C 000C+0C s=0 e=0 z=0  None .data      __vt__11dDlst_2DM_c                                          */
SECTION_DATA void* __vt__11dDlst_2DM_c[3 + 3 /* padding */] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)draw__11dDlst_2DM_cFv,
	/* padding */
	NULL,
	NULL,
	NULL,
};

/* 803A8E5C-803A8E68 000C+00 s=1 e=0 z=0  None .data      __vt__12dDlst_2DT2_c                                         */
SECTION_DATA void* __vt__12dDlst_2DT2_c[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)draw__12dDlst_2DT2_cFv,
};

/* 80456B68-80456B70 0004+04 s=1 e=0 z=0  None .sbss2     @4275                                                        */
SECTION_SBSS2 static u8 lit_4275[4 + 4 /* padding */];

/* 80052B00-80052B4C 004C+00 s=1 e=0 z=0  None .text      __ct__12dDlst_2DT2_cFv                                       */
//	80052B04: 803A6F88 (__vt__12dDlst_base_c)
//	80052B08: 803A6F88 (__vt__12dDlst_base_c)
//	80052B10: 803A8E5C (__vt__12dDlst_2DT2_c)
//	80052B14: 803A8E5C (__vt__12dDlst_2DT2_c)
//	80052B1C: 80456B68 (lit_4275)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dDlst_2DT2_c::dDlst_2DT2_c() {
	nofralloc
#include "asm/d/d_drawlist/__ct__12dDlst_2DT2_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 8045202C-80452030 0004+00 s=1 e=0 z=0  None .sdata2    @4284                                                        */
SECTION_SDATA2 static u32 lit_4284 = 0x000000FF;

/* 80052B4C-80052C58 010C+00 s=1 e=0 z=0  None .text      init__12dDlst_2DT2_cFP7ResTIMGffffUcUcUcff                   */
//	80052B5C: 80362138 (_savefpr_26)
//	80052B64: 803621D8 (_savegpr_28)
//	80052BA0: 8001513C (mDoLib_setResTimgObj__FPC7ResTIMGP9_GXTexObjUlP10_GXTlutObj)
//	80052BBC: 8045202C (lit_4284)
//	80052BF8: 8035E260 (GXGetTexObjWrapS)
//	80052C20: 8035E26C (GXGetTexObjWrapT)
//	80052C3C: 80362184 (_restfpr_26)
//	80052C44: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  ResTIMG* False
// 	 ResTIMG False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  u8 False
//  u8 False
//  u8 False
//  f32 False
//  f32 False
asm void dDlst_2DT2_c::init(ResTIMG* param_0, f32 param_1, f32 param_2, f32 param_3, f32 param_4, u8 param_5, u8 param_6, u8 param_7, f32 param_8, f32 param_9) {
	nofralloc
#include "asm/d/d_drawlist/init__12dDlst_2DT2_cFP7ResTIMGffffUcUcUcff.s"
}
#pragma pop


/* ############################################################################################## */
/* 80452030-80452034 0004+00 s=2 e=0 z=0  None .sdata2    @4360                                                        */
SECTION_SDATA2 static f32 lit_4360 = 256.0f;

/* 80052C58-8005312C 04D4+00 s=1 e=0 z=0  None .text      draw__11dDlst_2DM_cFv                                        */
//	80052C68: 803621C0 (_savegpr_22)
//	80052C78: 80452030 (lit_4360)
//	80052C7C: 80452020 (lit_4079)
//	80052CD0: 80452018 (lit_4076)
//	80052DC0: 8035DE40 (GXInitTexObj)
//	80052DD0: 80452010 (lit_4074)
//	80052DE8: 8035E0D4 (GXInitTexObjLOD)
//	80052E18: 8035DE40 (GXInitTexObj)
//	80052E28: 80452010 (lit_4074)
//	80052E40: 8035E0D4 (GXInitTexObjLOD)
//	80052E4C: 8035E414 (GXLoadTexObj)
//	80052E58: 8035E414 (GXLoadTexObj)
//	80052E70: 8035B5C4 (GXSetVtxAttrFmt)
//	80052E88: 8035B5C4 (GXSetVtxAttrFmt)
//	80052EA0: 8035B5C4 (GXSetVtxAttrFmt)
//	80052EA4: 8035B58C (GXClearVtxDesc)
//	80052EB0: 8035AEB8 (GXSetVtxDesc)
//	80052EBC: 8035AEB8 (GXSetVtxDesc)
//	80052EC8: 8035AEB8 (GXSetVtxDesc)
//	80052ED0: 8035DB30 (GXSetNumChans)
//	80052EE4: 8035F37C (GXSetTevColor)
//	80052EF8: 8035F37C (GXSetTevColor)
//	80052F00: 8035BDFC (GXSetNumTexGens)
//	80052F1C: 8035BB7C (GXSetTexCoordGen2)
//	80052F38: 8035BB7C (GXSetTexCoordGen2)
//	80052F40: 8035F890 (GXSetNumTevStages)
//	80052F54: 8035F6F4 (GXSetTevOrder)
//	80052F6C: 8035F224 (GXSetTevColorIn)
//	80052F88: 8035F2AC (GXSetTevColorOp)
//	80052FA0: 8035F268 (GXSetTevAlphaIn)
//	80052FBC: 8035F314 (GXSetTevAlphaOp)
//	80052FD0: 8035F6F4 (GXSetTevOrder)
//	80052FE8: 8035F224 (GXSetTevColorIn)
//	80053004: 8035F2AC (GXSetTevColorOp)
//	8005301C: 8035F268 (GXSetTevAlphaIn)
//	80053038: 8035F314 (GXSetTevAlphaOp)
//	8005304C: 8035FBF0 (GXSetBlendMode)
//	8005305C: 8035C764 (GXBegin)
//	800530F8: 804061C0 (g_dComIfG_gameInfo)
//	800530FC: 804061C0 (g_dComIfG_gameInfo)
//	80053118: 8036220C (_restgpr_22)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dDlst_2DM_c::draw() {
	nofralloc
#include "asm/d/d_drawlist/draw__11dDlst_2DM_cFv.s"
}
#pragma pop


/* 8005312C-8005364C 0520+00 s=1 e=0 z=0  None .text      draw__11dDlst_2Dm_cFv                                        */
//	8005314C: 803621C4 (_savegpr_23)
//	8005315C: 80452030 (lit_4360)
//	80053160: 80452020 (lit_4079)
//	800531B4: 8035E238 (GXGetTexObjWidth)
//	800531BC: 80452018 (lit_4076)
//	800531D4: 80452030 (lit_4360)
//	800531E8: 8035E248 (GXGetTexObjHeight)
//	800531F0: 80452018 (lit_4076)
//	80053208: 80452030 (lit_4360)
//	8005321C: 80452020 (lit_4079)
//	80053270: 8035E238 (GXGetTexObjWidth)
//	80053278: 80452018 (lit_4076)
//	800532AC: 8035E248 (GXGetTexObjHeight)
//	800532B4: 80452018 (lit_4076)
//	800532F8: 8035B5C4 (GXSetVtxAttrFmt)
//	80053310: 8035B5C4 (GXSetVtxAttrFmt)
//	80053328: 8035B5C4 (GXSetVtxAttrFmt)
//	8005332C: 8035B58C (GXClearVtxDesc)
//	80053338: 8035AEB8 (GXSetVtxDesc)
//	80053344: 8035AEB8 (GXSetVtxDesc)
//	80053350: 8035AEB8 (GXSetVtxDesc)
//	8005335C: 8035E414 (GXLoadTexObj)
//	80053370: 8035E290 (GXGetTexObjTlut)
//	8005337C: 8035E4A0 (GXLoadTlut)
//	80053388: 8035E414 (GXLoadTexObj)
//	8005339C: 8035E290 (GXGetTexObjTlut)
//	800533A8: 8035E4A0 (GXLoadTlut)
//	800533B0: 8035DB30 (GXSetNumChans)
//	800533C4: 8035F37C (GXSetTevColor)
//	800533D8: 8035F37C (GXSetTevColor)
//	800533E0: 8035BDFC (GXSetNumTexGens)
//	800533FC: 8035BB7C (GXSetTexCoordGen2)
//	80053418: 8035BB7C (GXSetTexCoordGen2)
//	80053420: 8035F890 (GXSetNumTevStages)
//	80053434: 8035F6F4 (GXSetTevOrder)
//	8005344C: 8035F224 (GXSetTevColorIn)
//	80053468: 8035F2AC (GXSetTevColorOp)
//	80053480: 8035F268 (GXSetTevAlphaIn)
//	8005349C: 8035F314 (GXSetTevAlphaOp)
//	800534B0: 8035F6F4 (GXSetTevOrder)
//	800534C8: 8035F224 (GXSetTevColorIn)
//	800534E4: 8035F2AC (GXSetTevColorOp)
//	800534FC: 8035F268 (GXSetTevAlphaIn)
//	80053518: 8035F314 (GXSetTevAlphaOp)
//	80053530: 8035F624 (GXSetAlphaCompare)
//	80053544: 8035FBF0 (GXSetBlendMode)
//	80053548: 803A2FD8 (g_mDoMtx_identity)
//	8005354C: 803A2FD8 (g_mDoMtx_identity)
//	80053554: 8036024C (GXLoadPosMtxImm)
//	8005355C: 803602EC (GXSetCurrentMtx)
//	8005356C: 8035C764 (GXBegin)
//	80053608: 804061C0 (g_dComIfG_gameInfo)
//	8005360C: 804061C0 (g_dComIfG_gameInfo)
//	80053638: 80362210 (_restgpr_23)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dDlst_2Dm_c::draw() {
	nofralloc
#include "asm/d/d_drawlist/func_8005312C.s"
}
#pragma pop


/* 8005364C-800539DC 0390+00 s=1 e=0 z=0  None .text      draw__12dDlst_2DMt_cFv                                       */
//	8005365C: 803621D0 (_savegpr_26)
//	80053678: 8035B5C4 (GXSetVtxAttrFmt)
//	8005367C: 8035B58C (GXClearVtxDesc)
//	80053688: 8035AEB8 (GXSetVtxDesc)
//	800536C0: 8035E4A0 (GXLoadTlut)
//	800536CC: 8035E414 (GXLoadTexObj)
//	800536E8: 8035B5C4 (GXSetVtxAttrFmt)
//	800536F4: 8035AEB8 (GXSetVtxDesc)
//	8005370C: 8035F37C (GXSetTevColor)
//	80053728: 8035BB7C (GXSetTexCoordGen2)
//	8005373C: 8035F6F4 (GXSetTevOrder)
//	80053760: 8035F224 (GXSetTevColorIn)
//	8005377C: 8035F2AC (GXSetTevColorOp)
//	800537A0: 8035F268 (GXSetTevAlphaIn)
//	800537BC: 8035F314 (GXSetTevAlphaOp)
//	800537F0: 8035DB30 (GXSetNumChans)
//	800537F8: 8035BDFC (GXSetNumTexGens)
//	80053800: 8035F890 (GXSetNumTevStages)
//	80053814: 8035FBF0 (GXSetBlendMode)
//	80053824: 8035C764 (GXBegin)
//	800539A8: 804061C0 (g_dComIfG_gameInfo)
//	800539AC: 804061C0 (g_dComIfG_gameInfo)
//	800539C8: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dDlst_2DMt_c::draw() {
	nofralloc
#include "asm/d/d_drawlist/draw__12dDlst_2DMt_cFv.s"
}
#pragma pop


/* 800539DC-80053A00 0024+00 s=0 e=1 z=0  None .text      getTexture__10J2DPictureCFUc                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  u8 False
asm void J2DPicture::getTexture(u8 param_0) const {
	nofralloc
#include "asm/d/d_drawlist/getTexture__10J2DPictureCFUc.s"
}
#pragma pop


/* 80053A00-80053A9C 009C+00 s=0 e=1 z=0  None .text      __ct__10dDlst_2D_cFP7ResTIMGssssUc                           */
//	80053A10: 803621CC (_savegpr_25)
//	80053A30: 803A6F88 (__vt__12dDlst_base_c)
//	80053A34: 803A6F88 (__vt__12dDlst_base_c)
//	80053A3C: 803A8E20 (__vt__10dDlst_2D_c)
//	80053A40: 803A8E20 (__vt__10dDlst_2D_c)
//	80053A4C: 802FC050 (__ct__10J2DPictureFv)
//	80053A88: 80362218 (_restgpr_25)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  ResTIMG* False
// 	 ResTIMG False
//  s16 False
//  s16 False
//  s16 False
//  s16 False
//  u8 False
asm dDlst_2D_c::dDlst_2D_c(ResTIMG* param_0, s16 param_1, s16 param_2, s16 param_3, s16 param_4, u8 param_5) {
	nofralloc
#include "asm/d/d_drawlist/__ct__10dDlst_2D_cFP7ResTIMGssssUc.s"
}
#pragma pop


/* 80053A9C-80053B64 00C8+00 s=1 e=0 z=0  None .text      draw__10dDlst_2D_cFv                                         */
//	80053AD0: 80452020 (lit_4079)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dDlst_2D_c::draw() {
	nofralloc
#include "asm/d/d_drawlist/draw__10dDlst_2D_cFv.s"
}
#pragma pop


/* 80053B64-80053BA0 003C+00 s=1 e=0 z=0  None .text      draw__11dDlst_blo_cFv                                        */
//	80053B80: 804061C0 (g_dComIfG_gameInfo)
//	80053B84: 804061C0 (g_dComIfG_gameInfo)
//	80053B8C: 802F8ED4 (draw__9J2DScreenFffPC14J2DGrafContext)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dDlst_blo_c::draw() {
	nofralloc
#include "asm/d/d_drawlist/draw__11dDlst_blo_cFv.s"
}
#pragma pop


/* 80053BA0-80053BC0 0020+00 s=0 e=1 z=0  None .text      clearAnmTransform__9J2DScreenFv                              */
//	80053BAC: 802F8004 (clearAnmTransform__7J2DPaneFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void J2DScreen::clearAnmTransform() {
	nofralloc
#include "asm/d/d_drawlist/clearAnmTransform__9J2DScreenFv.s"
}
#pragma pop


/* 80053BC0-80053C00 0040+00 s=0 e=7 z=0  None .text      calcMtx__7J2DPaneFv                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void J2DPane::calcMtx() {
	nofralloc
#include "asm/d/d_drawlist/calcMtx__7J2DPaneFv.s"
}
#pragma pop


/* 80053C00-80053C3C 003C+00 s=0 e=8 z=0  None .text      makeMatrix__7J2DPaneFff                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  f32 False
//  f32 False
asm void J2DPane::makeMatrix(f32 param_0, f32 param_1) {
	nofralloc
#include "asm/d/d_drawlist/makeMatrix__7J2DPaneFff.s"
}
#pragma pop


/* 80053C3C-80053C44 0008+00 s=0 e=1 z=0  None .text      getTypeID__7J2DPaneCFv                                       */
// False False
//  s32 False
s32 J2DPane::getTypeID() const {
	return 16;
}


/* 80053C44-80053C6C 0028+00 s=0 e=1 z=0  None .text      setWhite__10J2DPictureFQ28JUtility6TColor                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  JUtility::TColor False
asm void J2DPicture::setWhite(JUtility::TColor param_0) {
	nofralloc
#include "asm/d/d_drawlist/setWhite__10J2DPictureFQ28JUtility6TColor.s"
}
#pragma pop


/* 80053C6C-80053C94 0028+00 s=0 e=1 z=0  None .text      setBlack__10J2DPictureFQ28JUtility6TColor                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  JUtility::TColor False
asm void J2DPicture::setBlack(JUtility::TColor param_0) {
	nofralloc
#include "asm/d/d_drawlist/setBlack__10J2DPictureFQ28JUtility6TColor.s"
}
#pragma pop


/* 80053C94-80053CDC 0048+00 s=1 e=0 z=0  None .text      __dt__10J2DAnmBaseFv                                         */
//	80053CAC: 803A8E04 (__vt__10J2DAnmBase)
//	80053CB0: 803A8E04 (__vt__10J2DAnmBase)
//	80053CC0: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm J2DAnmBase::~J2DAnmBase() {
	nofralloc
#include "asm/d/d_drawlist/__dt__10J2DAnmBaseFv.s"
}
#pragma pop


/* 80053CDC-80053CEC 0010+00 s=0 e=2 z=0  None .text      init__8cM_rnd_cFiii                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  int False
//  int False
//  int False
asm void cM_rnd_c::init(int param_0, int param_1, int param_2) {
	nofralloc
#include "asm/d/d_drawlist/init__8cM_rnd_cFiii.s"
}
#pragma pop


/* ############################################################################################## */
/* 80452034-80452038 0004+00 s=1 e=0 z=0  None .sdata2    @4791                                                        */
SECTION_SDATA2 static f32 lit_4791 = 30323.0f;

/* 80452038-8045203C 0004+00 s=1 e=0 z=0  None .sdata2    @4792                                                        */
SECTION_SDATA2 static f32 lit_4792 = 30269.0f;

/* 8045203C-80452040 0004+00 s=1 e=0 z=0  None .sdata2    @4793                                                        */
SECTION_SDATA2 static f32 lit_4793 = 30307.0f;

/* 80452040-80452048 0008+00 s=1 e=0 z=0  None .sdata2    @4794                                                        */
SECTION_SDATA2 static f64 lit_4794 = 1.0;

/* 80053CEC-80053DE0 00F4+00 s=2 e=0 z=0  None .text      get__8cM_rnd_cFv                                             */
//	80053D50: 80452020 (lit_4079)
//	80053D6C: 80452034 (lit_4791)
//	80053D8C: 80452038 (lit_4792)
//	80053DAC: 8045203C (lit_4793)
//	80053DBC: 80452040 (lit_4794)
//	80053DC0: 8036C760 (fmod)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void cM_rnd_c::get() {
	nofralloc
#include "asm/d/d_drawlist/get__8cM_rnd_cFv.s"
}
#pragma pop


/* 80053DE0-80053E18 0038+00 s=1 e=0 z=0  None .text      getF__8cM_rnd_cFf                                            */
//	80053DF8: 80053CEC (get__8cM_rnd_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 False
asm void cM_rnd_c::getF(f32 param_0) {
	nofralloc
#include "asm/d/d_drawlist/getF__8cM_rnd_cFf.s"
}
#pragma pop


/* ############################################################################################## */
/* 80452048-8045204C 0004+00 s=5 e=0 z=0  None .sdata2    @4806                                                        */
SECTION_SDATA2 static f32 lit_4806 = 2.0f;

/* 80053E18-80053E60 0048+00 s=1 e=0 z=0  None .text      getFX__8cM_rnd_cFf                                           */
//	80053E30: 80053CEC (get__8cM_rnd_cFv)
//	80053E34: 80452008 (lit_4072)
//	80053E40: 80452048 (lit_4806)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 False
asm void cM_rnd_c::getFX(f32 param_0) {
	nofralloc
#include "asm/d/d_drawlist/getFX__8cM_rnd_cFf.s"
}
#pragma pop


/* 80053E60-80053E9C 003C+00 s=1 e=0 z=0  None .text      getValue__8cM_rnd_cFff                                       */
//	80053E7C: 80053DE0 (getF__8cM_rnd_cFf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 False
//  f32 False
asm void cM_rnd_c::getValue(f32 param_0, f32 param_1) {
	nofralloc
#include "asm/d/d_drawlist/getValue__8cM_rnd_cFff.s"
}
#pragma pop


/* ############################################################################################## */
/* 8045204C-80452050 0004+00 s=1 e=0 z=0  None .sdata2    @4876                                                        */
SECTION_SDATA2 static f32 lit_4876 = 32767.0f;

/* 80053E9C-800541F4 0358+00 s=1 e=0 z=0  None .text      draw__18dDlst_effectLine_cFv                                 */
//	80053EB4: 803621C4 (_savegpr_23)
//	80053ED0: 8035B5C4 (GXSetVtxAttrFmt)
//	80053ED4: 8035B58C (GXClearVtxDesc)
//	80053EE0: 8035AEB8 (GXSetVtxDesc)
//	80053EE8: 8035DB30 (GXSetNumChans)
//	80053F08: 8035DB6C (GXSetChanCtrl)
//	80053F10: 8035BDFC (GXSetNumTexGens)
//	80053F18: 8035F890 (GXSetNumTevStages)
//	80053F2C: 8035F37C (GXSetTevColor)
//	80053F40: 8035F6F4 (GXSetTevOrder)
//	80053F58: 8035F224 (GXSetTevColorIn)
//	80053F74: 8035F2AC (GXSetTevColorOp)
//	80053F8C: 8035F268 (GXSetTevAlphaIn)
//	80053FA8: 8035F314 (GXSetTevAlphaOp)
//	80053FB8: 8035FC9C (GXSetZMode)
//	80053FCC: 8035FBF0 (GXSetBlendMode)
//	80053FE4: 8035F624 (GXSetAlphaCompare)
//	80053FEC: 8035C984 (GXSetCullMode)
//	80053FF0: 80434AC8 (j3dSys)
//	80053FF4: 80434AC8 (j3dSys)
//	80053FFC: 8036024C (GXLoadPosMtxImm)
//	80054004: 803605D0 (GXSetClipMode)
//	8005400C: 803602EC (GXSetCurrentMtx)
//	80054018: 80452018 (lit_4076)
//	80054044: 80053E60 (getValue__8cM_rnd_cFff)
//	80054058: 804061C0 (g_dComIfG_gameInfo)
//	8005405C: 804061C0 (g_dComIfG_gameInfo)
//	80054060: 80439A20 (sincosTable___5JMath)
//	80054064: 80439A20 (sincosTable___5JMath)
//	80054068: 80452018 (lit_4076)
//	8005407C: 8045204C (lit_4876)
//	80054080: 80053E18 (getFX__8cM_rnd_cFf)
//	8005409C: 80053E60 (getValue__8cM_rnd_cFff)
//	800540E8: 80053E60 (getValue__8cM_rnd_cFff)
//	8005412C: 80346D6C (PSMTXMultVec)
//	80054140: 80346D6C (PSMTXMultVec)
//	80054170: 80053E60 (getValue__8cM_rnd_cFff)
//	80054184: 8035C8BC (GXSetLineWidth)
//	80054194: 8035C764 (GXBegin)
//	800541E0: 80362210 (_restgpr_23)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dDlst_effectLine_c::draw() {
	nofralloc
#include "asm/d/d_drawlist/draw__18dDlst_effectLine_cFv.s"
}
#pragma pop


/* 800541F4-80054288 0094+00 s=0 e=1 z=0  None .text      update__18dDlst_effectLine_cFR4cXyzR8_GXColorUsUsUsUsffff    */
//	8005425C: 804061C0 (g_dComIfG_gameInfo)
//	80054260: 804061C0 (g_dComIfG_gameInfo)
//	80054274: 80056794 (set__12dDlst_list_cFRPP12dDlst_base_cRPP12dDlst_base_cP12dDlst_base_c)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cXyz& False
// 	 cXyz False
//  _GXColor& False
// 	 _GXColor False
//  u16 False
//  u16 False
//  u16 False
//  u16 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
asm void dDlst_effectLine_c::update(cXyz& param_0, _GXColor& param_1, u16 param_2, u16 param_3, u16 param_4, u16 param_5, f32 param_6, f32 param_7, f32 param_8, f32 param_9) {
	nofralloc
#include "asm/d/d_drawlist/update__18dDlst_effectLine_cFR4cXyzR8_GXColorUsUsUsUsffff.s"
}
#pragma pop


/* 80054288-800543B4 012C+00 s=1 e=0 z=0  None .text      set__18dDlst_shadowPoly_cFP10cBgD_Vtx_tUsUsUsP8cM3dGPla      */
//	80054298: 803621CC (_savegpr_25)
//	80054318: 80452028 (lit_4270)
//	8005433C: 80452048 (lit_4806)
//	80054340: 803470D8 (PSVECScale)
//	80054358: 80347090 (PSVECAdd)
//	80054370: 80347090 (PSVECAdd)
//	80054388: 80347090 (PSVECAdd)
//	800543A0: 80362218 (_restgpr_25)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cBgD_Vtx_t* False
// 	 cBgD_Vtx_t False
//  u16 False
//  u16 False
//  u16 False
//  cM3dGPla* False
// 	 cM3dGPla False
asm void dDlst_shadowPoly_c::set(cBgD_Vtx_t* param_0, u16 param_1, u16 param_2, u16 param_3, cM3dGPla* param_4) {
	nofralloc
#include "asm/d/d_drawlist/set__18dDlst_shadowPoly_cFP10cBgD_Vtx_tUsUsUsP8cM3dGPla.s"
}
#pragma pop


/* 800543B4-80054478 00C4+00 s=1 e=0 z=0  None .text      draw__18dDlst_shadowPoly_cFv                                 */
//	800543F4: 8035C764 (GXBegin)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dDlst_shadowPoly_c::draw() {
	nofralloc
#include "asm/d/d_drawlist/draw__18dDlst_shadowPoly_cFv.s"
}
#pragma pop


/* 80054478-800544F0 0078+00 s=1 e=0 z=0  None .text      J3DDrawBuffer__create__FUl                                   */
//	80054494: 802CEC4C (__nw__FUl)
//	800544A0: 80324F08 (initialize__13J3DDrawBufferFv)
//	800544B4: 80324F70 (allocBuffer__13J3DDrawBufferFUl)
//	800544D0: 80325008 (__dt__13J3DDrawBufferFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
asm static void J3DDrawBuffer__create(u32 param_0) {
	nofralloc
#include "asm/d/d_drawlist/J3DDrawBuffer__create__FUl.s"
}
#pragma pop


/* 800544F0-80054500 0010+00 s=2 e=0 z=0  None .text      reset__18dDlst_shadowReal_cFv                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dDlst_shadowReal_c::reset() {
	nofralloc
#include "asm/d/d_drawlist/reset__18dDlst_shadowReal_cFv.s"
}
#pragma pop


/* 80054500-800545D4 00D4+00 s=1 e=0 z=0  None .text      imageDraw__18dDlst_shadowReal_cFPA4_f                        */
//	80054510: 803621C8 (_savegpr_24)
//	80054524: 803600D4 (GXSetProjection)
//	80054548: 80315300 (loadPreDrawSetting__8J3DShapeCFv)
//	80054588: 80312FBC (drawFast__14J3DShapePacketFv)
//	800545C0: 80362214 (_restgpr_24)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
asm void dDlst_shadowReal_c::imageDraw(f32 (* param_0)[4]) {
	nofralloc
#include "asm/d/d_drawlist/imageDraw__18dDlst_shadowReal_cFPA4_f.s"
}
#pragma pop


/* ############################################################################################## */
/* 8045064C-80450650 0004+00 s=1 e=0 z=0  None .sdata     l_color$5004                                                 */
SECTION_SDATA static u8 l_color_5004[4] = {
	0x00, 0x00, 0x00, 0x40,
};

/* 800545D4-80054688 00B4+00 s=1 e=0 z=0  None .text      draw__18dDlst_shadowReal_cFv                                 */
//	800545EC: 8045064C (l_color_5004)
//	800545F4: 8045064C (l_color_5004)
//	80054604: 8035F37C (GXSetTevColor)
//	80054608: 803A88E0 (l_shadowProjMat)
//	8005460C: 803A88E0 (l_shadowProjMat)
//	80054614: 8035FEF0 (GXCallDisplayList)
//	80054628: 8035F6F4 (GXSetTevOrder)
//	8005462C: 8035B58C (GXClearVtxDesc)
//	80054638: 8035AEB8 (GXSetVtxDesc)
//	80054650: 8035B5C4 (GXSetVtxAttrFmt)
//	80054658: 803602EC (GXSetCurrentMtx)
//	80054668: 80360320 (GXLoadTexMtxImm)
//	80054670: 800543B4 (draw__18dDlst_shadowPoly_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dDlst_shadowReal_c::draw() {
	nofralloc
#include "asm/d/d_drawlist/draw__18dDlst_shadowReal_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80452050-80452054 0004+00 s=1 e=0 z=0  None .sdata2    @5061                                                        */
SECTION_SDATA2 static f32 lit_5061 = -1.0f / 5.0f;

/* 80452054-80452058 0004+00 s=1 e=0 z=0  None .sdata2    @5062                                                        */
SECTION_SDATA2 static f32 lit_5062 = -90.0f;

/* 80054688-80054854 01CC+00 s=1 e=0 z=0  None .text      psdRealCallBack__FP13cBgS_ShdwDrawP10cBgD_Vtx_tiiiP8cM3dGPla */
//	80054698: 803621D0 (_savegpr_26)
//	800546BC: 80347194 (PSVECDotProduct)
//	800546C0: 80452050 (lit_5061)
//	80054704: 80452054 (lit_5062)
//	80054830: 80054288 (set__18dDlst_shadowPoly_cFP10cBgD_Vtx_tUsUsUsP8cM3dGPla)
//	80054840: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cBgS_ShdwDraw* False
// 	 cBgS_ShdwDraw False
//  cBgD_Vtx_t* False
// 	 cBgD_Vtx_t False
//  int False
//  int False
//  int False
//  cM3dGPla* False
// 	 cM3dGPla False
asm static void psdRealCallBack(cBgS_ShdwDraw* param_0, cBgD_Vtx_t* param_1, int param_2, int param_3, int param_4, cM3dGPla* param_5) {
	nofralloc
#include "asm/d/d_drawlist/psdRealCallBack__FP13cBgS_ShdwDrawP10cBgD_Vtx_tiiiP8cM3dGPla.s"
}
#pragma pop


/* ############################################################################################## */
/* 80452058-8045205C 0004+00 s=1 e=0 z=0  None .sdata2    @5127                                                        */
SECTION_SDATA2 static f32 lit_5127 = 0.0020000000949949026f;

/* 8045205C-80452060 0004+00 s=1 e=0 z=0  None .sdata2    @5128                                                        */
SECTION_SDATA2 static f32 lit_5128 = 120.0f;

/* 80452060-80452064 0004+00 s=1 e=0 z=0  None .sdata2    @5129                                                        */
SECTION_SDATA2 static f32 lit_5129 = 3.0f / 20.0f;

/* 80452064-80452068 0004+00 s=3 e=0 z=0  None .sdata2    @5130                                                        */
SECTION_SDATA2 static f32 lit_5130 = 10000.0f;

/* 80054854-80054A6C 0218+00 s=1 e=0 z=0  None .text      realPolygonCheck__FP4cXyzffP4cXyzP18dDlst_shadowPoly_c       */
//	80054874: 803621D4 (_savegpr_27)
//	80054890: 80267F88 (__ct__13cBgS_ShdwDrawFv)
//	80054894: 803A8DEC (__vt__14ShdwDrawPoly_c)
//	80054898: 803A8DEC (__vt__14ShdwDrawPoly_c)
//	800548A0: 80452058 (lit_5127)
//	800548AC: 8045205C (lit_5128)
//	800548D4: 80452060 (lit_5129)
//	8005496C: 80452064 (lit_5130)
//	80054970: 80450C74 (mFovyRate__14mDoLib_clipper)
//	80054978: 803DD8E4 (mClipper__14mDoLib_clipper)
//	8005497C: 803DD8E4 (mClipper__14mDoLib_clipper)
//	80054988: 8027378C (calcViewFrustum__11J3DUClipperFv)
//	8005498C: 803DD8E4 (mClipper__14mDoLib_clipper)
//	80054990: 803DD8E4 (mClipper__14mDoLib_clipper)
//	80054994: 80434AC8 (j3dSys)
//	80054998: 80434AC8 (j3dSys)
//	800549A4: 80273A44 (clip__11J3DUClipperCFPA4_CfP3VecP3Vec)
//	800549AC: 80450C70 (mSystemFar__14mDoLib_clipper)
//	800549B4: 803DD8E4 (mClipper__14mDoLib_clipper)
//	800549B8: 803DD8E4 (mClipper__14mDoLib_clipper)
//	800549BC: 8027378C (calcViewFrustum__11J3DUClipperFv)
//	800549C8: 803A8DEC (__vt__14ShdwDrawPoly_c)
//	800549CC: 803A8DEC (__vt__14ShdwDrawPoly_c)
//	800549DC: 80267FD0 (__dt__13cBgS_ShdwDrawFv)
//	800549F4: 80268048 (Set__13cBgS_ShdwDrawFR4cXyzR4cXyz)
//	800549FC: 80054688 (psdRealCallBack__FP13cBgS_ShdwDrawP10cBgD_Vtx_tiiiP8cM3dGPla)
//	80054A00: 80054688 (psdRealCallBack__FP13cBgS_ShdwDrawP10cBgD_Vtx_tiiiP8cM3dGPla)
//	80054A04: 8026806C (SetCallback__13cBgS_ShdwDrawFPFP13cBgS_ShdwDrawP10cBgD_Vtx_tiiiP8cM3dGPla_i)
//	80054A14: 804061C0 (g_dComIfG_gameInfo)
//	80054A18: 804061C0 (g_dComIfG_gameInfo)
//	80054A24: 80074840 (ShdwDraw__4cBgSFP13cBgS_ShdwDraw)
//	80054A28: 803A8DEC (__vt__14ShdwDrawPoly_c)
//	80054A2C: 803A8DEC (__vt__14ShdwDrawPoly_c)
//	80054A3C: 80267FD0 (__dt__13cBgS_ShdwDrawFv)
//	80054A58: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  cXyz* False
// 	 cXyz False
//  dDlst_shadowPoly_c* False
// 	 dDlst_shadowPoly_c False
asm static void realPolygonCheck(cXyz* param_0, f32 param_1, f32 param_2, cXyz* param_3, dDlst_shadowPoly_c* param_4) {
	nofralloc
#include "asm/d/d_drawlist/realPolygonCheck__FP4cXyzffP4cXyzP18dDlst_shadowPoly_c.s"
}
#pragma pop


/* 80054A6C-80054ACC 0060+00 s=1 e=0 z=0  None .text      __dt__14ShdwDrawPoly_cFv                                     */
//	80054A8C: 803A8DEC (__vt__14ShdwDrawPoly_c)
//	80054A90: 803A8DEC (__vt__14ShdwDrawPoly_c)
//	80054A9C: 80267FD0 (__dt__13cBgS_ShdwDrawFv)
//	80054AAC: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm ShdwDrawPoly_c::~ShdwDrawPoly_c() {
	nofralloc
#include "asm/d/d_drawlist/__dt__14ShdwDrawPoly_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80452068-8045206C 0004+00 s=1 e=0 z=0  None .sdata2    @5155                                                        */
SECTION_SDATA2 static f32 lit_5155 = 15.0f;

/* 8045206C-80452070 0004+00 s=1 e=0 z=0  None .sdata2    @5156                                                        */
SECTION_SDATA2 static f32 lit_5156 = 13.0f / 20.0f;

/* 80054ACC-80054BD0 0104+00 s=2 e=0 z=0  None .text      setkankyoShadow__FP12dKy_tevstr_cPf                          */
//	80054AD0: 8042CA54 (g_env_light)
//	80054AD4: 8042CA54 (g_env_light)
//	80054B4C: 8042CA54 (g_env_light)
//	80054B50: 8042CA54 (g_env_light)
//	80054B64: 80452018 (lit_4076)
//	80054B7C: 80452068 (lit_5155)
//	80054B84: 80452028 (lit_4270)
//	80054B98: 80452028 (lit_4270)
//	80054BA0: 8045206C (lit_5156)
//	80054BB8: 80452028 (lit_4270)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
//  f32* False
// 	 f32 False
asm static void setkankyoShadow(dKy_tevstr_c* param_0, f32* param_1) {
	nofralloc
#include "asm/d/d_drawlist/setkankyoShadow__FP12dKy_tevstr_cPf.s"
}
#pragma pop


/* ############################################################################################## */
/* 80452070-80452074 0004+00 s=1 e=0 z=0  None .sdata2    @5267                                                        */
SECTION_SDATA2 static f32 lit_5267 = 50.0f;

/* 80452074-80452078 0004+00 s=1 e=0 z=0  None .sdata2    @5268                                                        */
SECTION_SDATA2 static f32 lit_5268 = 4.0f / 5.0f;

/* 80452078-80452080 0004+04 s=1 e=0 z=0  None .sdata2    @5269                                                        */
SECTION_SDATA2 static f32 lit_5269[1 + 1 /* padding */] = {
	255.0f,
	/* padding */
	0.0f,
};

/* 80452080-80452088 0008+00 s=1 e=0 z=0  None .sdata2    @5270                                                        */
SECTION_SDATA2 static f64 lit_5270 = 0.5;

/* 80452088-80452090 0008+00 s=1 e=0 z=0  None .sdata2    @5271                                                        */
SECTION_SDATA2 static f64 lit_5271 = 3.0;

/* 80452090-80452098 0008+00 s=1 e=0 z=0  None .sdata2    @5272                                                        */
SECTION_SDATA2 static u8 lit_5272[8] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 80452098-8045209C 0004+00 s=1 e=0 z=0  None .sdata2    @5273                                                        */
SECTION_SDATA2 static f32 lit_5273 = 2.0f / 5.0f;

/* 8045209C-804520A0 0004+00 s=1 e=0 z=0  None .sdata2    @5274                                                        */
SECTION_SDATA2 static f32 lit_5274 = -1.0f;

/* 804520A0-804520A4 0004+00 s=1 e=0 z=0  None .sdata2    @5275                                                        */
SECTION_SDATA2 static f32 lit_5275 = -0.5f;

/* 80054BD0-80055028 0458+00 s=1 e=0 z=0  None .text      setShadowRealMtx__18dDlst_shadowReal_cFP4cXyzP4cXyzfffP12dKy_tevstr_c */
//	80054BF8: 803621D4 (_savegpr_27)
//	80054C28: 80054ACC (setkankyoShadow__FP12dKy_tevstr_cPf)
//	80054C2C: 8043079C (g_envHIO)
//	80054C30: 8043079C (g_envHIO)
//	80054C58: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80054C84: 80452070 (lit_5267)
//	80054CA4: 8027065C (cLib_chaseUC__FPUcUcUc)
//	80054CB0: 80347138 (PSVECSquareMag)
//	80054CC0: 80451180 (G_CM3D_F_ABS_MIN)
//	80054CCC: 80452010 (lit_4074)
//	80054CF0: 80452074 (lit_5268)
//	80054D0C: 80452010 (lit_4074)
//	80054D20: 80347138 (PSVECSquareMag)
//	80054D2C: 80451180 (G_CM3D_F_ABS_MIN)
//	80054D48: 80452010 (lit_4074)
//	80054D7C: 80452010 (lit_4074)
//	80054D94: 80452018 (lit_4076)
//	80054DAC: 80452078 (lit_5269)
//	80054DD0: 80347138 (PSVECSquareMag)
//	80054DD4: 80452010 (lit_4074)
//	80054DE4: 80452080 (lit_5270)
//	80054DEC: 80452088 (lit_5271)
//	80054E34: 80452090 (lit_5272)
//	80054E40: 80450AE0 (__float_nan)
//	80054E44: 80450AE0 (__float_nan)
//	80054EB0: 80450AE0 (__float_nan)
//	80054EB4: 80450AE0 (__float_nan)
//	80054EC0: 80451180 (G_CM3D_F_ABS_MIN)
//	80054ECC: 80452008 (lit_4072)
//	80054EE0: 803470D8 (PSVECScale)
//	80054EF0: 80347090 (PSVECAdd)
//	80054EF4: 80452098 (lit_5273)
//	80054F08: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80054F28: 802670AC (isZero__4cXyzCFv)
//	80054F34: 8045209C (lit_5274)
//	80054F3C: 80452028 (lit_4270)
//	80054F58: 80266EF4 (normalize__4cXyzFv)
//	80054F70: 80054854 (realPolygonCheck__FP4cXyzffP4cXyzP18dDlst_shadowPoly_c)
//	80054F94: 8000C50C (mDoMtx_lookAt__FPA4_fPC3VecPC3Vecs)
//	80054FB0: 80452028 (lit_4270)
//	80054FB4: 80452064 (lit_5130)
//	80054FB8: 80346FF8 (C_MTXOrtho)
//	80054FD0: 80452008 (lit_4072)
//	80054FD4: 804520A0 (lit_5275)
//	80054FE0: 80346CE4 (C_MTXLightOrtho)
//	80054FF0: 803464E4 (PSMTXConcat)
//	80055014: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  f32 False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
asm void dDlst_shadowReal_c::setShadowRealMtx(cXyz* param_0, cXyz* param_1, f32 param_2, f32 param_3, f32 param_4, dKy_tevstr_c* param_5) {
	nofralloc
#include "asm/d/d_drawlist/setShadowRealMtx__18dDlst_shadowReal_cFP4cXyzP4cXyzfffP12dKy_tevstr_c.s"
}
#pragma pop


/* 80055028-800551D4 01AC+00 s=1 e=0 z=0  None .text      set__18dDlst_shadowReal_cFUlP8J3DModelP4cXyzffP12dKy_tevstr_cff */
//	80055058: 803621D0 (_savegpr_26)
//	80055080: 8042CA54 (g_env_light)
//	80055084: 8042CA54 (g_env_light)
//	800550BC: 801A7714 (dKy_plight_near_pos__Fv)
//	800550F4: 8042CA54 (g_env_light)
//	800550F8: 8042CA54 (g_env_light)
//	80055144: 80054BD0 (setShadowRealMtx__18dDlst_shadowReal_cFP4cXyzP4cXyzfffP12dKy_tevstr_c)
//	800551C0: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
//  J3DModel* False
// 	 J3DModel False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
//  f32 False
//  f32 False
asm void dDlst_shadowReal_c::set(u32 param_0, J3DModel* param_1, cXyz* param_2, f32 param_3, f32 param_4, dKy_tevstr_c* param_5, f32 param_6, f32 param_7) {
	nofralloc
#include "asm/d/d_drawlist/set__18dDlst_shadowReal_cFUlP8J3DModelP4cXyzffP12dKy_tevstr_cff.s"
}
#pragma pop


/* 800551D4-8005520C 0038+00 s=1 e=0 z=0  None .text      add__18dDlst_shadowReal_cFP8J3DModel                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  J3DModel* False
// 	 J3DModel False
asm void dDlst_shadowReal_c::add(J3DModel* param_0) {
	nofralloc
#include "asm/d/d_drawlist/add__18dDlst_shadowReal_cFP8J3DModel.s"
}
#pragma pop


/* ############################################################################################## */
/* 80450650-80450654 0004+00 s=1 e=0 z=0  None .sdata     l_color$5326                                                 */
SECTION_SDATA static u8 l_color_5326[4] = {
	0x00, 0x00, 0x00, 0x40,
};

/* 8005520C-800553EC 01E0+00 s=1 e=0 z=0  None .text      draw__20dDlst_shadowSimple_cFv                               */
//	8005521C: 803621DC (_savegpr_29)
//	80055224: 803A87A0 (cNullVec__6Z2Calc)
//	80055228: 803A87A0 (cNullVec__6Z2Calc)
//	80055230: 80450650 (l_color_5326)
//	80055238: 80450650 (l_color_5326)
//	80055248: 8035F37C (GXSetTevColor)
//	8005524C: 8035B58C (GXClearVtxDesc)
//	80055258: 8035AEB8 (GXSetVtxDesc)
//	80055264: 8036024C (GXLoadPosMtxImm)
//	8005526C: 803602EC (GXSetCurrentMtx)
//	80055278: 8035FEF0 (GXCallDisplayList)
//	80055284: 8035FEF0 (GXCallDisplayList)
//	80055290: 8035FEF0 (GXCallDisplayList)
//	8005529C: 8035FEF0 (GXCallDisplayList)
//	800552A8: 8036024C (GXLoadPosMtxImm)
//	800552B0: 803602EC (GXSetCurrentMtx)
//	800552C4: 8035E414 (GXLoadTexObj)
//	800552C8: 8035B58C (GXClearVtxDesc)
//	800552D4: 8035AEB8 (GXSetVtxDesc)
//	800552E0: 8035AEB8 (GXSetVtxDesc)
//	800552F8: 8035F224 (GXSetTevColorIn)
//	80055314: 8035F2AC (GXSetTevColorOp)
//	8005532C: 8035F268 (GXSetTevAlphaIn)
//	80055348: 8035F314 (GXSetTevAlphaOp)
//	80055350: 8035E248 (GXGetTexObjHeight)
//	8005535C: 8035E238 (GXGetTexObjWidth)
//	80055374: 8035FEF0 (GXCallDisplayList)
//	80055384: 8035FEF0 (GXCallDisplayList)
//	80055388: 8035B58C (GXClearVtxDesc)
//	80055394: 8035AEB8 (GXSetVtxDesc)
//	800553A0: 8035FEF0 (GXCallDisplayList)
//	800553A4: 8035B58C (GXClearVtxDesc)
//	800553B0: 8035AEB8 (GXSetVtxDesc)
//	800553B8: 803602EC (GXSetCurrentMtx)
//	800553C4: 8035FEF0 (GXCallDisplayList)
//	800553D0: 8035FEF0 (GXCallDisplayList)
//	800553D8: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dDlst_shadowSimple_c::draw() {
	nofralloc
#include "asm/d/d_drawlist/draw__20dDlst_shadowSimple_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 804520A4-804520A8 0004+00 s=1 e=0 z=0  None .sdata2    @5375                                                        */
SECTION_SDATA2 static f32 lit_5375 = -255.0f;

/* 804520A8-804520AC 0004+00 s=1 e=0 z=0  None .sdata2    @5376                                                        */
SECTION_SDATA2 static f32 lit_5376 = 0.000699999975040555f;

/* 804520AC-804520B0 0004+00 s=1 e=0 z=0  None .sdata2    @5377                                                        */
SECTION_SDATA2 static f32 lit_5377 = 7.0f / 5.0f;

/* 804520B0-804520B4 0004+00 s=1 e=0 z=0  None .sdata2    @5378                                                        */
SECTION_SDATA2 static f32 lit_5378 = 16.0f;

/* 800553EC-80055684 0298+00 s=1 e=0 z=0  None .text      set__20dDlst_shadowSimple_cFP4cXyzffP4cXyzsfP9_GXTexObj      */
//	8005541C: 803621D4 (_savegpr_27)
//	80055440: 80452010 (lit_4074)
//	8005544C: 804520A4 (lit_5375)
//	80055464: 80452028 (lit_4270)
//	8005546C: 80452028 (lit_4270)
//	80055470: 804520A8 (lit_5376)
//	800554AC: 80054ACC (setkankyoShadow__FP12dKy_tevstr_cPf)
//	800554B4: 804520AC (lit_5377)
//	800554C0: 80452028 (lit_4270)
//	800554D0: 8043079C (g_envHIO)
//	800554D4: 8043079C (g_envHIO)
//	800554F4: 80452048 (lit_4806)
//	800554F8: 804520B0 (lit_5378)
//	80055500: 80452028 (lit_4270)
//	80055514: 803DD470 (now__14mDoMtx_stack_c)
//	80055518: 803DD470 (now__14mDoMtx_stack_c)
//	80055528: 803468E8 (PSMTXTrans)
//	8005552C: 803DD470 (now__14mDoMtx_stack_c)
//	80055530: 803DD470 (now__14mDoMtx_stack_c)
//	80055538: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	80055540: 804520B0 (lit_5378)
//	80055554: 8000CE38 (scaleM__14mDoMtx_stack_cFfff)
//	80055558: 80434AC8 (j3dSys)
//	8005555C: 80434AC8 (j3dSys)
//	80055560: 803DD470 (now__14mDoMtx_stack_c)
//	80055564: 803DD470 (now__14mDoMtx_stack_c)
//	8005556C: 803464E4 (PSMTXConcat)
//	80055570: 80452028 (lit_4270)
//	80055580: 80452010 (lit_4074)
//	80055594: 80452010 (lit_4074)
//	800555C0: 803DD470 (now__14mDoMtx_stack_c)
//	800555C4: 803DD470 (now__14mDoMtx_stack_c)
//	800555D0: 80452010 (lit_4074)
//	8005561C: 8000C434 (mDoMtx_YrotM__FPA4_fs)
//	80055624: 80452028 (lit_4270)
//	8005562C: 8000CE38 (scaleM__14mDoMtx_stack_cFfff)
//	80055630: 80434AC8 (j3dSys)
//	80055634: 80434AC8 (j3dSys)
//	80055638: 803DD470 (now__14mDoMtx_stack_c)
//	8005563C: 803DD470 (now__14mDoMtx_stack_c)
//	80055644: 803464E4 (PSMTXConcat)
//	80055670: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  cXyz* False
// 	 cXyz False
//  s16 False
//  f32 False
//  _GXTexObj* False
// 	 _GXTexObj False
asm void dDlst_shadowSimple_c::set(cXyz* param_0, f32 param_1, f32 param_2, cXyz* param_3, s16 param_4, f32 param_5, _GXTexObj* param_6) {
	nofralloc
#include "asm/d/d_drawlist/set__20dDlst_shadowSimple_cFP4cXyzffP4cXyzsfP9_GXTexObj.s"
}
#pragma pop


/* ############################################################################################## */
/* 80450654-80450658 0004+00 s=1 e=0 z=0  None .sdata     l_realImageSize$5383                                         */
SECTION_SDATA static u8 l_realImageSize[4] = {
	0x00, 0xC0, 0x00, 0x40,
};

/* 80055684-80055768 00E4+00 s=1 e=0 z=0  None .text      init__21dDlst_shadowControl_cFv                              */
//	80055694: 803621CC (_savegpr_25)
//	800556AC: 80450654 (l_realImageSize)
//	800556C8: 8035DC1C (GXGetTexBufferSize)
//	800556D0: 802CECEC (__nwa__FUli)
//	8005570C: 8035DE40 (GXInitTexObj)
//	8005571C: 80452010 (lit_4074)
//	80055734: 8035E0D4 (GXInitTexObjLOD)
//	80055754: 80362218 (_restgpr_25)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dDlst_shadowControl_c::init() {
	nofralloc
#include "asm/d/d_drawlist/init__21dDlst_shadowControl_cFv.s"
}
#pragma pop


/* 80055768-800557C8 0060+00 s=1 e=0 z=0  None .text      reset__21dDlst_shadowControl_cFv                             */
//	80055778: 803621DC (_savegpr_29)
//	8005578C: 800544F0 (reset__18dDlst_shadowReal_cFv)
//	800557B4: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dDlst_shadowControl_c::reset() {
	nofralloc
#include "asm/d/d_drawlist/reset__21dDlst_shadowControl_cFv.s"
}
#pragma pop


/* 800557C8-80055A14 024C+00 s=0 e=1 z=0  None .text      imageDraw__21dDlst_shadowControl_cFPA4_f                     */
//	800557D8: 803621C4 (_savegpr_23)
//	800557E4: 803A8D00 (l_matDL)
//	800557E8: 803A8D00 (l_matDL)
//	800557F0: 8035FEF0 (GXCallDisplayList)
//	80055800: 8035FC9C (GXSetZMode)
//	80055808: 8035FCD0 (GXSetZCompLoc)
//	8005581C: 8035FBF0 (GXSetBlendMode)
//	80055824: 803605D0 (GXSetClipMode)
//	8005582C: 80434AC8 (j3dSys)
//	80055830: 80434AC8 (j3dSys)
//	8005583C: 804515D0 (sOldVcdVatCmd__8J3DShape)
//	80055874: 8035E238 (GXGetTexObjWidth)
//	80055880: 80452010 (lit_4074)
//	80055888: 80452018 (lit_4076)
//	800558B4: 80452028 (lit_4270)
//	800558B8: 80360464 (GXSetViewport)
//	800558CC: 803604D0 (GXSetScissor)
//	800558D4: 803A8D7C (l_imageDrawColor)
//	800558D8: 803A8D7C (l_imageDrawColor)
//	800558EC: 8035F37C (GXSetTevColor)
//	800558FC: 8035FC44 (GXSetColorUpdate)
//	80055904: 8035FC70 (GXSetAlphaUpdate)
//	80055910: 80054500 (imageDraw__18dDlst_shadowReal_cFPA4_f)
//	80055940: 8035CA80 (GXSetTexCopySrc)
//	80055954: 8035CB30 (GXSetTexCopyDst)
//	8005595C: 8035FC44 (GXSetColorUpdate)
//	8005597C: 8035D46C (GXCopyTex)
//	80055980: 8035C374 (GXPixModeSync)
//	80055988: 8035FC70 (GXSetAlphaUpdate)
//	800559B0: 8035CA80 (GXSetTexCopySrc)
//	800559C4: 8035CB30 (GXSetTexCopyDst)
//	800559DC: 8035D46C (GXCopyTex)
//	800559E0: 8035C374 (GXPixModeSync)
//	800559E8: 8035FC70 (GXSetAlphaUpdate)
//	800559F0: 803605D0 (GXSetClipMode)
//	800559F8: 8035FDD8 (GXSetDither)
//	80055A00: 80362210 (_restgpr_23)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
asm void dDlst_shadowControl_c::imageDraw(f32 (* param_0)[4]) {
	nofralloc
#include "asm/d/d_drawlist/imageDraw__21dDlst_shadowControl_cFPA4_f.s"
}
#pragma pop


/* ############################################################################################## */
/* 80450658-8045065C 0004+00 s=1 e=0 z=0  None .sdata     clearColor$5435                                              */
SECTION_SDATA static u8 clearColor[4] = {
	0x00, 0x00, 0x00, 0x40,
};

/* 804520B4-804520B8 0004+00 s=1 e=0 z=0  None .sdata2    @5433                                                        */
SECTION_SDATA2 static u32 lit_5433 = 0x00000020;

/* 80055A14-80055C74 0260+00 s=0 e=1 z=0  None .text      draw__21dDlst_shadowControl_cFPA4_f                          */
//	80055A24: 803621D4 (_savegpr_27)
//	80055A30: 803A87A0 (cNullVec__6Z2Calc)
//	80055A34: 803A87A0 (cNullVec__6Z2Calc)
//	80055A38: 80434AC8 (j3dSys)
//	80055A3C: 80434AC8 (j3dSys)
//	80055A40: 8031073C (reinitGX__6J3DSysFv)
//	80055A48: 8035F0D4 (GXSetNumIndStages)
//	80055A4C: 801A862C (dKy_GxFog_set__Fv)
//	80055A6C: 8035DB6C (GXSetChanCtrl)
//	80055A7C: 8035BB28 (GXSetArray)
//	80055A98: 8035BB7C (GXSetTexCoordGen2)
//	80055AA0: 8035F890 (GXSetNumTevStages)
//	80055AB8: 8035B5C4 (GXSetVtxAttrFmt)
//	80055AC4: 8036024C (GXLoadPosMtxImm)
//	80055AC8: 804520B4 (lit_5433)
//	80055AD8: 8035DA48 (GXSetChanMatColor)
//	80055ADC: 80450590 (mBackColor__13mDoGph_gInf_c)
//	80055AE4: 80450658 (clearColor)
//	80055AEC: 80450658 (clearColor)
//	80055AFC: 8035F37C (GXSetTevColor)
//	80055B00: 80450608 (g_whiteColor)
//	80055B10: 8035F37C (GXSetTevColor)
//	80055B4C: 8035E414 (GXLoadTexObj)
//	80055B6C: 8035F5A4 (GXSetTevSwapModeTable)
//	80055B74: 800545D4 (draw__18dDlst_shadowReal_cFv)
//	80055BB0: 8035F5A4 (GXSetTevSwapModeTable)
//	80055BC8: 8035B5C4 (GXSetVtxAttrFmt)
//	80055BD8: 8035BB28 (GXSetArray)
//	80055BF4: 8035BB7C (GXSetTexCoordGen2)
//	80055C08: 8035F6F4 (GXSetTevOrder)
//	80055C20: 8035F624 (GXSetAlphaCompare)
//	80055C34: 8005520C (draw__20dDlst_shadowSimple_cFv)
//	80055C50: 8035FC44 (GXSetColorUpdate)
//	80055C58: 8035FC70 (GXSetAlphaUpdate)
//	80055C60: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
asm void dDlst_shadowControl_c::draw(f32 (* param_0)[4]) {
	nofralloc
#include "asm/d/d_drawlist/draw__21dDlst_shadowControl_cFPA4_f.s"
}
#pragma pop


/* ############################################################################################## */
/* 804520B8-804520BC 0004+00 s=1 e=0 z=0  None .sdata2    @5551                                                        */
SECTION_SDATA2 static f32 lit_5551 = 0.003000000026077032f;

/* 804520BC-804520C0 0004+00 s=1 e=0 z=0  None .sdata2    @5552                                                        */
SECTION_SDATA2 static f32 lit_5552 = -1000.0f;

/* 804520C0-804520C4 0004+00 s=1 e=0 z=0  None .sdata2    @5553                                                        */
SECTION_SDATA2 static f32 lit_5553 = 0.0010000000474974513f;

/* 80055C74-80055F1C 02A8+00 s=0 e=1 z=1  None .text      setReal__21dDlst_shadowControl_cFUlScP8J3DModelP4cXyzffP12dKy_tevstr_c */
//	80055CA4: 803621CC (_savegpr_25)
//	80055CCC: 80452028 (lit_4270)
//	80055CD4: 80452028 (lit_4270)
//	80055CD8: 804520B8 (lit_5551)
//	80055CE8: 80452010 (lit_4074)
//	80055D00: 80452028 (lit_4270)
//	80055D10: 80434AC8 (j3dSys)
//	80055D14: 80434AC8 (j3dSys)
//	80055D20: 80346D6C (PSMTXMultVec)
//	80055D2C: 80452010 (lit_4074)
//	80055D48: 804520BC (lit_5552)
//	80055D54: 804520C0 (lit_5553)
//	80055D60: 80452028 (lit_4270)
//	80055D88: 80450AE8 (__float_max)
//	80055D8C: 80450AE8 (__float_max)
//	80055E10: 800544F0 (reset__18dDlst_shadowReal_cFv)
//	80055E78: 80055028 (set__18dDlst_shadowReal_cFUlP8J3DModelP4cXyzffP12dKy_tevstr_cff)
//	80055F08: 80362218 (_restgpr_25)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  u32 False
//  s8 False
//  J3DModel* False
// 	 J3DModel False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  dKy_tevstr_c* False
// 	 dKy_tevstr_c False
asm void dDlst_shadowControl_c::setReal(u32 param_0, s8 param_1, J3DModel* param_2, cXyz* param_3, f32 param_4, f32 param_5, dKy_tevstr_c* param_6) {
	nofralloc
#include "asm/d/d_drawlist/setReal__21dDlst_shadowControl_cFUlScP8J3DModelP4cXyzffP12dKy_tevstr_c.s"
}
#pragma pop


/* 80055F1C-80055F84 0068+00 s=0 e=1 z=45  None .text      addReal__21dDlst_shadowControl_cFUlP8J3DModel                */
//	80055F5C: 800551D4 (add__18dDlst_shadowReal_cFP8J3DModel)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  u32 False
//  J3DModel* False
// 	 J3DModel False
asm void dDlst_shadowControl_c::addReal(u32 param_0, J3DModel* param_1) {
	nofralloc
#include "asm/d/d_drawlist/addReal__21dDlst_shadowControl_cFUlP8J3DModel.s"
}
#pragma pop


/* 80055F84-80055FE8 0064+00 s=0 e=1 z=10  None .text      setSimple__21dDlst_shadowControl_cFP4cXyzffP4cXyzsfP9_GXTexObj */
//	80055FC0: 800553EC (set__20dDlst_shadowSimple_cFP4cXyzffP4cXyzsfP9_GXTexObj)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  f32 False
//  cXyz* False
// 	 cXyz False
//  s16 False
//  f32 False
//  _GXTexObj* False
// 	 _GXTexObj False
asm void dDlst_shadowControl_c::setSimple(cXyz* param_0, f32 param_1, f32 param_2, cXyz* param_3, s16 param_4, f32 param_5, _GXTexObj* param_6) {
	nofralloc
#include "asm/d/d_drawlist/setSimple__21dDlst_shadowControl_cFP4cXyzffP4cXyzsfP9_GXTexObj.s"
}
#pragma pop


/* ############################################################################################## */
/* 804248D0-804248F0 0020+00 s=1 e=6 z=173  None .bss       mSimpleTexObj__21dDlst_shadowControl_c                       */
u8 mSimpleTexObj__21dDlst_shadowControl_c[32];

/* 80055FE8-80056018 0030+00 s=0 e=1 z=0  None .text      setSimpleTex__21dDlst_shadowControl_cFPC7ResTIMG             */
//	80055FF4: 804248D0 (mSimpleTexObj__21dDlst_shadowControl_c)
//	80055FF8: 804248D0 (mSimpleTexObj__21dDlst_shadowControl_c)
//	80056004: 8001513C (mDoLib_setResTimgObj__FPC7ResTIMGP9_GXTexObjUlP10_GXTlutObj)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  ResTIMG const* False
// 	 ResTIMG const False
// 		 ResTIMG False
asm void dDlst_shadowControl_c::setSimpleTex(ResTIMG const* param_0) {
	nofralloc
#include "asm/d/d_drawlist/setSimpleTex__21dDlst_shadowControl_cFPC7ResTIMG.s"
}
#pragma pop


/* 80056018-80056080 0068+00 s=0 e=3 z=9  None .text      newData__13dDlst_peekZ_cFssPUl                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  s16 False
//  s16 False
//  u32* False
// 	 u32 False
asm void dDlst_peekZ_c::newData(s16 param_0, s16 param_1, u32* param_2) {
	nofralloc
#include "asm/d/d_drawlist/newData__13dDlst_peekZ_cFssPUl.s"
}
#pragma pop


/* 80056080-800560F0 0070+00 s=0 e=1 z=0  None .text      peekData__13dDlst_peekZ_cFv                                  */
//	80056090: 803621DC (_savegpr_29)
//	800560B8: 8035C4BC (GXPeekZ)
//	800560DC: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dDlst_peekZ_c::peekData() {
	nofralloc
#include "asm/d/d_drawlist/peekData__13dDlst_peekZ_cFv.s"
}
#pragma pop


/* 800560F0-800561C8 00D8+00 s=0 e=1 z=0  None .text      __ct__12dDlst_list_cFv                                       */
//	80056108: 8005638C (__ct__20dDlst_shadowSimple_cFv)
//	8005610C: 8005638C (__ct__20dDlst_shadowSimple_cFv)
//	8005611C: 80361D60 (__construct_array)
//	80056124: 800562D0 (__ct__18dDlst_shadowReal_cFv)
//	80056128: 800562D0 (__ct__18dDlst_shadowReal_cFv)
//	8005612C: 800561F8 (__dt__18dDlst_shadowReal_cFv)
//	80056130: 800561F8 (__dt__18dDlst_shadowReal_cFv)
//	8005613C: 80361D60 (__construct_array)
//	8005614C: 800561C8 (__ct__26mDoExt_3DlineMatSortPacketFv)
//	80056150: 800561C8 (__ct__26mDoExt_3DlineMatSortPacketFv)
//	80056154: 80014E20 (__dt__26mDoExt_3DlineMatSortPacketFv)
//	80056158: 80014E20 (__dt__26mDoExt_3DlineMatSortPacketFv)
//	80056168: 80361D60 (__construct_array)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm dDlst_list_c::dDlst_list_c() {
	nofralloc
#include "asm/d/d_drawlist/__ct__12dDlst_list_cFv.s"
}
#pragma pop


/* 800561C8-800561F8 0030+00 s=1 e=0 z=0  None .text      __ct__26mDoExt_3DlineMatSortPacketFv                         */
//	800561C8: 803CD97C (__vt__9J3DPacket)
//	800561CC: 803CD97C (__vt__9J3DPacket)
//	800561E4: 803A3234 (__vt__26mDoExt_3DlineMatSortPacket)
//	800561E8: 803A3234 (__vt__26mDoExt_3DlineMatSortPacket)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm mDoExt_3DlineMatSortPacket::mDoExt_3DlineMatSortPacket() {
	nofralloc
#include "asm/d/d_drawlist/__ct__26mDoExt_3DlineMatSortPacketFv.s"
}
#pragma pop


/* 800561F8-80056270 0078+00 s=2 e=0 z=0  None .text      __dt__18dDlst_shadowReal_cFv                                 */
//	80056220: 803A8DDC (__vt__22dDlst_shadowRealPoly_c)
//	80056224: 803A8DDC (__vt__22dDlst_shadowRealPoly_c)
//	80056230: 80056270 (__dt__17dDlst_shadowTri_cFv)
//	80056234: 80056270 (__dt__17dDlst_shadowTri_cFv)
//	80056240: 80361CE8 (__destroy_arr)
//	80056250: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dDlst_shadowReal_c::~dDlst_shadowReal_c() {
	nofralloc
#include "asm/d/d_drawlist/__dt__18dDlst_shadowReal_cFv.s"
}
#pragma pop


/* 80056270-800562D0 0060+00 s=2 e=0 z=0  None .text      __dt__17dDlst_shadowTri_cFv                                  */
//	80056290: 80009184 (__dt__4cXyzFv)
//	80056294: 80009184 (__dt__4cXyzFv)
//	800562A0: 80361CE8 (__destroy_arr)
//	800562B0: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dDlst_shadowTri_c::~dDlst_shadowTri_c() {
	nofralloc
#include "asm/d/d_drawlist/__dt__17dDlst_shadowTri_cFv.s"
}
#pragma pop


/* 800562D0-80056344 0074+00 s=1 e=0 z=0  None .text      __ct__18dDlst_shadowReal_cFv                                 */
//	800562E4: 803A8DCC (__vt__18dDlst_shadowPoly_c)
//	800562E8: 803A8DCC (__vt__18dDlst_shadowPoly_c)
//	800562F8: 803A8DDC (__vt__22dDlst_shadowRealPoly_c)
//	800562FC: 803A8DDC (__vt__22dDlst_shadowRealPoly_c)
//	80056308: 80056344 (__ct__17dDlst_shadowTri_cFv)
//	8005630C: 80056344 (__ct__17dDlst_shadowTri_cFv)
//	80056310: 80056270 (__dt__17dDlst_shadowTri_cFv)
//	80056314: 80056270 (__dt__17dDlst_shadowTri_cFv)
//	80056320: 80361D60 (__construct_array)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dDlst_shadowReal_c::dDlst_shadowReal_c() {
	nofralloc
#include "asm/d/d_drawlist/__ct__18dDlst_shadowReal_cFv.s"
}
#pragma pop


/* 80056344-8005638C 0048+00 s=1 e=0 z=0  None .text      __ct__17dDlst_shadowTri_cFv                                  */
//	80056358: 800125DC (__ct__4cXyzFv)
//	8005635C: 800125DC (__ct__4cXyzFv)
//	80056360: 80009184 (__dt__4cXyzFv)
//	80056364: 80009184 (__dt__4cXyzFv)
//	80056370: 80361D60 (__construct_array)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dDlst_shadowTri_c::dDlst_shadowTri_c() {
	nofralloc
#include "asm/d/d_drawlist/__ct__17dDlst_shadowTri_cFv.s"
}
#pragma pop


/* 8005638C-80056390 0004+00 s=1 e=0 z=0  None .text      __ct__20dDlst_shadowSimple_cFv                               */
// True False
dDlst_shadowSimple_c::dDlst_shadowSimple_c() {
	/* empty function */
}


/* ############################################################################################## */
/* 8037A178-8037A1A4 002A+02 s=1 e=0 z=0  None .rodata    l_drawlistSize$5656                                          */
SECTION_RODATA static u8 const l_drawlistSize[42 + 2 /* padding */] = {
	0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x80,
	0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x20, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20,
	0x00, 0x20, 0x01, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x04,
	/* padding */
	0x00, 0x00,
};

/* 8037A1A4-8037A1B0 0009+03 s=1 e=0 z=0  None .rodata    l_nonSortId$5662                                             */
SECTION_RODATA static u8 const l_nonSortId[9 + 3 /* padding */] = {
	0x00, 0x01, 0x02, 0x04, 0x05, 0x06, 0x09, 0x12, 0x0D,
	/* padding */
	0x00, 0x00, 0x00,
};

/* 804520C4-804520CC 0006+02 s=1 e=0 z=0  None .sdata2    l_zSortId$5668                                               */
SECTION_SDATA2 static u8 l_zSortId[6 + 2 /* padding */] = {
	0x08, 0x0A, 0x0C, 0x0E, 0x10, 0x11,
	/* padding */
	0x00, 0x00,
};

/* 80056390-8005648C 00FC+00 s=0 e=1 z=0  None .text      init__12dDlst_list_cFv                                       */
//	800563A0: 803621D8 (_savegpr_28)
//	800563AC: 8037A178 (l_drawlistSize)
//	800563B0: 8037A178 (l_drawlistSize)
//	800563C4: 80054478 (J3DDrawBuffer__create__FUl)
//	800563DC: 8037A1A4 (l_nonSortId)
//	800563E0: 8037A1A4 (l_nonSortId)
//	8005640C: 804520C4 (l_zSortId)
//	80056438: 80434AC8 (j3dSys)
//	8005643C: 80434AC8 (j3dSys)
//	80056470: 80055684 (init__21dDlst_shadowControl_cFv)
//	80056478: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dDlst_list_c::init() {
	nofralloc
#include "asm/d/d_drawlist/init__12dDlst_list_cFv.s"
}
#pragma pop


/* 8005648C-80056538 00AC+00 s=0 e=1 z=0  None .text      __dt__12dDlst_list_cFv                                       */
//	8005649C: 803621D8 (_savegpr_28)
//	800564C0: 80325008 (__dt__13J3DDrawBufferFv)
//	800564D4: 80014E20 (__dt__26mDoExt_3DlineMatSortPacketFv)
//	800564D8: 80014E20 (__dt__26mDoExt_3DlineMatSortPacketFv)
//	800564E8: 80361CE8 (__destroy_arr)
//	800564F8: 800561F8 (__dt__18dDlst_shadowReal_cFv)
//	800564FC: 800561F8 (__dt__18dDlst_shadowReal_cFv)
//	80056508: 80361CE8 (__destroy_arr)
//	80056518: 802CED3C (__dl__FPv)
//	80056524: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm dDlst_list_c::~dDlst_list_c() {
	nofralloc
#include "asm/d/d_drawlist/__dt__12dDlst_list_cFv.s"
}
#pragma pop


/* 80056538-800565EC 00B4+00 s=0 e=1 z=0  None .text      reset__12dDlst_list_cFv                                      */
//	80056548: 803621DC (_savegpr_29)
//	80056560: 80325068 (frameInit__13J3DDrawBufferFv)
//	80056574: 80434AC8 (j3dSys)
//	80056578: 80434AC8 (j3dSys)
//	800565AC: 80055768 (reset__21dDlst_shadowControl_cFv)
//	800565D8: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dDlst_list_c::reset() {
	nofralloc
#include "asm/d/d_drawlist/reset__12dDlst_list_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 804520CC-804520D0 0004+00 s=1 e=0 z=0  None .sdata2    @5747                                                        */
SECTION_SDATA2 static f32 lit_5747 = 9999.0f;

/* 800565EC-800566D4 00E8+00 s=0 e=2 z=0  None .text      entryZSortXluDrawList__12dDlst_list_cFP13J3DDrawBufferP9J3DPacketR4cXyz */
//	80056610: 80434AC8 (j3dSys)
//	80056614: 80434AC8 (j3dSys)
//	80056618: 80452028 (lit_4270)
//	80056644: 80452018 (lit_4076)
//	8005665C: 804520CC (lit_5747)
//	80056670: 80452064 (lit_5130)
//	800566C0: 8032548C (entryImm__13J3DDrawBufferFP9J3DPacketUs)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  J3DDrawBuffer* False
// 	 J3DDrawBuffer False
//  J3DPacket* False
// 	 J3DPacket False
//  cXyz& False
// 	 cXyz False
asm void dDlst_list_c::entryZSortXluDrawList(J3DDrawBuffer* param_0, J3DPacket* param_1, cXyz& param_2) {
	nofralloc
#include "asm/d/d_drawlist/entryZSortXluDrawList__12dDlst_list_cFP13J3DDrawBufferP9J3DPacketR4cXyz.s"
}
#pragma pop


/* 800566D4-80056710 003C+00 s=1 e=1 z=0  None .text      drawOpaDrawList__12dDlst_list_cFP13J3DDrawBuffer             */
//	800566E4: 804515D0 (sOldVcdVatCmd__8J3DShape)
//	800566EC: 80434AC8 (j3dSys)
//	800566F0: 80434AC8 (j3dSys)
//	800566FC: 803254AC (draw__13J3DDrawBufferCFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  J3DDrawBuffer* False
// 	 J3DDrawBuffer False
asm void dDlst_list_c::drawOpaDrawList(J3DDrawBuffer* param_0) {
	nofralloc
#include "asm/d/d_drawlist/drawOpaDrawList__12dDlst_list_cFP13J3DDrawBuffer.s"
}
#pragma pop


/* 80056710-8005674C 003C+00 s=1 e=1 z=0  None .text      drawXluDrawList__12dDlst_list_cFP13J3DDrawBuffer             */
//	80056720: 804515D0 (sOldVcdVatCmd__8J3DShape)
//	80056728: 80434AC8 (j3dSys)
//	8005672C: 80434AC8 (j3dSys)
//	80056738: 803254AC (draw__13J3DDrawBufferCFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  J3DDrawBuffer* False
// 	 J3DDrawBuffer False
asm void dDlst_list_c::drawXluDrawList(J3DDrawBuffer* param_0) {
	nofralloc
#include "asm/d/d_drawlist/drawXluDrawList__12dDlst_list_cFP13J3DDrawBuffer.s"
}
#pragma pop


/* 8005674C-80056770 0024+00 s=0 e=1 z=0  None .text      drawOpaListItem3d__12dDlst_list_cFv                          */
//	8005675C: 800566D4 (drawOpaDrawList__12dDlst_list_cFP13J3DDrawBuffer)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dDlst_list_c::drawOpaListItem3d() {
	nofralloc
#include "asm/d/d_drawlist/drawOpaListItem3d__12dDlst_list_cFv.s"
}
#pragma pop


/* 80056770-80056794 0024+00 s=0 e=1 z=0  None .text      drawXluListItem3d__12dDlst_list_cFv                          */
//	80056780: 80056710 (drawXluDrawList__12dDlst_list_cFP13J3DDrawBuffer)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dDlst_list_c::drawXluListItem3d() {
	nofralloc
#include "asm/d/d_drawlist/drawXluListItem3d__12dDlst_list_cFv.s"
}
#pragma pop


/* 80056794-800567C4 0030+00 s=2 e=35 z=6  None .text      set__12dDlst_list_cFRPP12dDlst_base_cRPP12dDlst_base_cP12dDlst_base_c */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  dDlst_base_c**& False
// 	 dDlst_base_c** False
// 		 dDlst_base_c* False
// 			 dDlst_base_c False
//  dDlst_base_c**& False
// 	 dDlst_base_c** False
// 		 dDlst_base_c* False
// 			 dDlst_base_c False
//  dDlst_base_c* False
// 	 dDlst_base_c False
asm void dDlst_list_c::set(dDlst_base_c**& param_0, dDlst_base_c**& param_1, dDlst_base_c* param_2) {
	nofralloc
#include "asm/d/d_drawlist/set__12dDlst_list_cFRPP12dDlst_base_cRPP12dDlst_base_cP12dDlst_base_c.s"
}
#pragma pop


/* 800567C4-8005681C 0058+00 s=0 e=1 z=0  None .text      draw__12dDlst_list_cFPP12dDlst_base_cPP12dDlst_base_c        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  dDlst_base_c** False
// 	 dDlst_base_c* False
// 		 dDlst_base_c False
//  dDlst_base_c** False
// 	 dDlst_base_c* False
// 		 dDlst_base_c False
asm void dDlst_list_c::draw(dDlst_base_c** param_0, dDlst_base_c** param_1) {
	nofralloc
#include "asm/d/d_drawlist/draw__12dDlst_list_cFPP12dDlst_base_cPP12dDlst_base_c.s"
}
#pragma pop


/* ############################################################################################## */
/* 8037A1B0-8037A1C0 000C+04 s=1 e=0 z=0  None .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char const* const stringBase_8037A1B0 = "wipe_00.bti";
/* @stringBase0 padding */
SECTION_DEAD static char const* const pad_8037A1BC = "\0\0\0";
#pragma pop

/* 804248F0-80424938 0048+00 s=3 e=0 z=0  None .bss       mWipeDlst__12dDlst_list_c                                    */
static u8 mWipeDlst__12dDlst_list_c[72];

/* 8045065C-80450660 0004+00 s=1 e=0 z=0  None .sdata     mWipeColor__12dDlst_list_c                                   */
SECTION_SDATA static u8 mWipeColor__12dDlst_list_c[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 80450ED0-80450ED4 0004+00 s=2 e=1 z=0  None .sbss      None                                                         */
u8 data_80450ED0[4];

/* 80450ED4-80450ED8 0004+00 s=2 e=1 z=0  None .sbss      mWipeRate__12dDlst_list_c                                    */
f32 mWipeRate__12dDlst_list_c;

/* 80450ED8-80450EE0 0004+04 s=2 e=0 z=0  None .sbss      mWipeSpeed__12dDlst_list_c                                   */
static f32 mWipeSpeed__12dDlst_list_c[1 + 1 /* padding */];

/* 804520D0-804520D4 0004+00 s=1 e=0 z=0  None .sdata2    @5809                                                        */
SECTION_SDATA2 static f32 lit_5809 = 608.0f;

/* 804520D4-804520D8 0004+00 s=1 e=0 z=0  None .sdata2    @5810                                                        */
SECTION_SDATA2 static f32 lit_5810 = 448.0f;

/* 804520D8-804520DC 0004+00 s=1 e=0 z=0  None .sdata2    @5811                                                        */
SECTION_SDATA2 static f32 lit_5811 = 2.436000108718872f;

/* 8005681C-800568D8 00BC+00 s=1 e=0 z=0  None .text      wipeIn__12dDlst_list_cFfR8_GXColor                           */
//	8005682C: 80450ED0 (data_80450ED0)
//	80056830: 80450ED8 (mWipeSpeed__12dDlst_list_c)
//	80056838: 8045065C (mWipeColor__12dDlst_list_c)
//	80056840: 8045065C (mWipeColor__12dDlst_list_c)
//	80056858: 80452010 (lit_4074)
//	8005686C: 80452028 (lit_4270)
//	80056870: 80450ED4 (mWipeRate__12dDlst_list_c)
//	80056874: 804061C0 (g_dComIfG_gameInfo)
//	80056878: 804061C0 (g_dComIfG_gameInfo)
//	80056888: 8037A1B0 (d_d_drawlist__stringBase0)
//	8005688C: 8037A1B0 (d_d_drawlist__stringBase0)
//	80056890: 802D5B38 (getGlbResource__10JKRArchiveFUlPCcP10JKRArchive)
//	80056898: 804248F0 (mWipeDlst__12dDlst_list_c)
//	8005689C: 804248F0 (mWipeDlst__12dDlst_list_c)
//	800568A0: 80452010 (lit_4074)
//	800568A8: 804520D0 (lit_5809)
//	800568AC: 804520D4 (lit_5810)
//	800568BC: 80452048 (lit_4806)
//	800568C0: 804520D8 (lit_5811)
//	800568C4: 80052B4C (init__12dDlst_2DT2_cFP7ResTIMGffffUcUcUcff)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 False
//  _GXColor& False
// 	 _GXColor False
asm void dDlst_list_c::wipeIn(f32 param_0, _GXColor& param_1) {
	nofralloc
#include "asm/d/d_drawlist/wipeIn__12dDlst_list_cFfR8_GXColor.s"
}
#pragma pop


/* 800568D8-80056900 0028+00 s=0 e=1 z=0  None .text      wipeIn__12dDlst_list_cFf                                     */
//	800568E8: 80450604 (g_blackColor)
//	800568EC: 8005681C (wipeIn__12dDlst_list_cFfR8_GXColor)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  f32 False
asm void dDlst_list_c::wipeIn(f32 param_0) {
	nofralloc
#include "asm/d/d_drawlist/wipeIn__12dDlst_list_cFf.s"
}
#pragma pop


/* ############################################################################################## */
/* 804520DC-804520E0 0004+00 s=1 e=0 z=0  None .sdata2    @5838                                                        */
SECTION_SDATA2 static f32 lit_5838 = 1.218000054359436f;

/* 80056900-800569A0 00A0+00 s=0 e=1 z=0  None .text      calcWipe__12dDlst_list_cFv                                   */
//	8005690C: 80450ED0 (data_80450ED0)
//	80056918: 80450ED4 (mWipeRate__12dDlst_list_c)
//	8005691C: 80450ED8 (mWipeSpeed__12dDlst_list_c)
//	80056924: 80450ED4 (mWipeRate__12dDlst_list_c)
//	80056928: 80452010 (lit_4074)
//	80056934: 80450ED4 (mWipeRate__12dDlst_list_c)
//	8005693C: 80452028 (lit_4270)
//	80056948: 80450ED4 (mWipeRate__12dDlst_list_c)
//	80056950: 80450ED0 (data_80450ED0)
//	80056954: 80452048 (lit_4806)
//	80056958: 80450ED4 (mWipeRate__12dDlst_list_c)
//	80056960: 804248F0 (mWipeDlst__12dDlst_list_c)
//	80056964: 804248F0 (mWipeDlst__12dDlst_list_c)
//	8005696C: 804520DC (lit_5838)
//	80056978: 804061C0 (g_dComIfG_gameInfo)
//	8005697C: 804061C0 (g_dComIfG_gameInfo)
//	8005698C: 80056794 (set__12dDlst_list_cFRPP12dDlst_base_cRPP12dDlst_base_cP12dDlst_base_c)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dDlst_list_c::calcWipe() {
	nofralloc
#include "asm/d/d_drawlist/calcWipe__12dDlst_list_cFv.s"
}
#pragma pop


/* 800569A0-800569A8 0008+00 s=1 e=0 z=0  None .text      getTri__22dDlst_shadowRealPoly_cFv                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dDlst_shadowRealPoly_c::getTri() {
	nofralloc
#include "asm/d/d_drawlist/getTri__22dDlst_shadowRealPoly_cFv.s"
}
#pragma pop


/* 800569A8-800569B0 0008+00 s=1 e=0 z=0  None .text      getTriMax__22dDlst_shadowRealPoly_cFv                        */
// True False
//  s32 False
s32 dDlst_shadowRealPoly_c::getTriMax() {
	return 256;
}


/* 800569B0-800569B4 0004+00 s=1 e=7 z=0  None .text      searchUpdateMaterialID__10J2DAnmBaseFP9J2DScreen             */
// False False
//  void False
//  J2DScreen* False
// 	 J2DScreen False
void J2DAnmBase::searchUpdateMaterialID(J2DScreen* param_0) {
	/* empty function */
}


/* 800569B4-800569DC 0028+00 s=0 e=0 z=0  None .text      __sinit_d_drawlist_cpp                                       */
//	800569C0: 804248F0 (mWipeDlst__12dDlst_list_c)
//	800569C4: 804248F0 (mWipeDlst__12dDlst_list_c)
//	800569C8: 80052B00 (__ct__12dDlst_2DT2_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void __sinit_d_drawlist_cpp() {
	nofralloc
#include "asm/d/d_drawlist/__sinit_d_drawlist_cpp.s"
}
#pragma pop

#pragma push
#pragma force_active on
#pragma section ".ctors$15"
__declspec(section ".ctors$15") void* const _ctors_800569B4 = (void*)__sinit_d_drawlist_cpp;
#pragma pop


/* ############################################################################################## */
/* 803A8E68-803A8E74 000C+00 s=0 e=0 z=0  None .data      __vt__11dDlst_2DT_c                                          */
SECTION_DATA void* __vt__11dDlst_2DT_c[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)draw__11dDlst_2DT_cFv,
};

/* 803A8E74-803A8E80 000C+00 s=0 e=0 z=0  None .data      __vt__15dDlst_2DPoint_c                                      */
SECTION_DATA void* __vt__15dDlst_2DPoint_c[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)draw__15dDlst_2DPoint_cFv,
};

/* 803A8E80-803A8E8C 000C+00 s=0 e=0 z=0  None .data      __vt__14dDlst_2DQuad_c                                       */
SECTION_DATA void* __vt__14dDlst_2DQuad_c[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)draw__14dDlst_2DQuad_cFv,
};

/* 803A8E8C-803A8E98 000C+00 s=0 e=0 z=0  None .data      __vt__13dDlst_2DTri_c                                        */
SECTION_DATA void* __vt__13dDlst_2DTri_c[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)draw__13dDlst_2DTri_cFv,
};

/* 80450EE0-80450EE8 0008+00 s=0 e=1 z=0  None .sbss      None                                                         */
u8 data_80450EE0[8];

