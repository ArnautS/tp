// 
// Generated By: dol2asm
// Translation Unit: d/ovlp/d_ovlp_fade2
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "d/ovlp/d_ovlp_fade2.h"

// 
// Types:
// 

struct overlap_task_class {
};

struct mDoMtx_stack_c {
	/* 8000CE38 */ // False False
//  f32 False
//  f32 False
//  f32 False
void scaleM(f32, f32, f32);
};

struct dOvlpFd2_dlst_c {
	/* 8025247C */ // True False
void draw();
	/* 80252E8C */ // True False
~dOvlpFd2_dlst_c();
};

struct dOvlpFd2_c {
	/* 80252990 */ // True False
dOvlpFd2_c();
	/* 802529F4 */ // True False
void execFirstSnap();
	/* 80252A78 */ // True False
void execFadeOut();
	/* 80252BC0 */ // True False
void execNextSnap();
	/* 80252C68 */ // True False
void execFadeIn();
};

struct dDlst_base_c {
};

struct dDlst_list_c {
	/* 80056794 */ // False False
//  dDlst_base_c**& False
// 	 dDlst_base_c** False
// 		 dDlst_base_c* False
// 			 dDlst_base_c False
//  dDlst_base_c**& False
// 	 dDlst_base_c** False
// 		 dDlst_base_c* False
// 			 dDlst_base_c False
//  dDlst_base_c* False
// 	 dDlst_base_c False
void set(dDlst_base_c**&, dDlst_base_c**&, dDlst_base_c*);
};

struct JGeometry {
	template <typename A1>
	struct TBox2 { };
	/* TBox2<f32> */
	struct TBox2__template0 {
	};

};

struct J2DOrthoGraph {
	/* 802E980C */ // False True
//  JGeometry::TBox2<f32> const& False
// 	 JGeometry::TBox2<f32> const False
// 		 JGeometry::TBox2<f32> True
// 			 f32 False
//  f32 False
//  f32 False
void setOrtho(JGeometry::TBox2<f32> const&, f32, f32);
};

// 
// Forward References:
// 

// True False
//  dOvlpFd2_c* False
// 	 dOvlpFd2_c False
static void dOvlpFd2_Draw(dOvlpFd2_c*);
// True False
//  dOvlpFd2_c* False
// 	 dOvlpFd2_c False
static void dOvlpFd2_Execute(dOvlpFd2_c*);
// True False
//  bool False
//  dOvlpFd2_c* False
// 	 dOvlpFd2_c False
static bool dOvlpFd2_IsDelete(dOvlpFd2_c*);
// True False
//  bool False
//  dOvlpFd2_c* False
// 	 dOvlpFd2_c False
static bool dOvlpFd2_Delete(dOvlpFd2_c*);
// True False
//  void* False
// 	 void False
static void dOvlpFd2_Create(void*);
// False True
//  s8* False
// 	 s8 False
void cLib_calcTimer__template4(s8*);

// True False
extern "C" void draw__15dOvlpFd2_dlst_cFv();
// True False
extern "C" void __ct__10dOvlpFd2_cFv();
// True False
extern "C" void execFirstSnap__10dOvlpFd2_cFv();
// True False
extern "C" void execFadeOut__10dOvlpFd2_cFv();
// True False
extern "C" void execNextSnap__10dOvlpFd2_cFv();
// True False
extern "C" void execFadeIn__10dOvlpFd2_cFv();
// True False
//  dOvlpFd2_c* False
// 	 dOvlpFd2_c False
extern "C" static void dOvlpFd2_Draw__FP10dOvlpFd2_c();
// True False
//  dOvlpFd2_c* False
// 	 dOvlpFd2_c False
extern "C" static void dOvlpFd2_Execute__FP10dOvlpFd2_c();
// True False
//  bool False
//  dOvlpFd2_c* False
// 	 dOvlpFd2_c False
extern "C" static bool dOvlpFd2_IsDelete__FP10dOvlpFd2_c();
// True False
//  bool False
//  dOvlpFd2_c* False
// 	 dOvlpFd2_c False
extern "C" static bool dOvlpFd2_Delete__FP10dOvlpFd2_c();
// True False
//  void* False
// 	 void False
extern "C" static void dOvlpFd2_Create__FPv();
// False True
//  s8* False
// 	 s8 False
extern "C" void func_80252E70();
// True False
extern "C" void __dt__15dOvlpFd2_dlst_cFv();
extern "C" extern void* g_profile_OVERLAP2[10];
extern "C" extern void* __vt__15dOvlpFd2_dlst_c[4 + 1 /* padding */];

// 
// External References:
// 

// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
void mDoMtx_ZrotM(f32 (* )[4], s16);
// False False
void fopOvlpM_SceneIsStop();
// False False
void fopOvlpM_SceneIsStart();
// False False
//  overlap_task_class* False
// 	 overlap_task_class False
void fopOvlpM_IsOutReq(overlap_task_class*);
// False False
//  overlap_task_class* False
// 	 overlap_task_class False
void fopOvlpM_Done(overlap_task_class*);
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
//  f32 False
void cLib_addCalc2(f32*, f32, f32, f32);
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
void cLib_addCalc0(f32*, f32, f32);
// False False
//  s16* False
// 	 s16 False
//  s16 False
//  s16 False
void cLib_chaseAngleS(s16*, s16, s16);
// False False
//  void False
//  void* False
// 	 void False
void operator delete(void*);

// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  s16 False
extern "C" void mDoMtx_ZrotM__FPA4_fs();
// False False
//  f32 False
//  f32 False
//  f32 False
extern "C" void scaleM__14mDoMtx_stack_cFfff();
// False False
extern "C" void fopOvlpM_SceneIsStop__Fv();
// False False
extern "C" void fopOvlpM_SceneIsStart__Fv();
// False False
//  overlap_task_class* False
// 	 overlap_task_class False
extern "C" void fopOvlpM_IsOutReq__FP18overlap_task_class();
// False False
//  overlap_task_class* False
// 	 overlap_task_class False
extern "C" void fopOvlpM_Done__FP18overlap_task_class();
// False False
//  dDlst_base_c**& False
// 	 dDlst_base_c** False
// 		 dDlst_base_c* False
// 			 dDlst_base_c False
//  dDlst_base_c**& False
// 	 dDlst_base_c** False
// 		 dDlst_base_c* False
// 			 dDlst_base_c False
//  dDlst_base_c* False
// 	 dDlst_base_c False
extern "C" void set__12dDlst_list_cFRPP12dDlst_base_cRPP12dDlst_base_cP12dDlst_base_c();
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
//  f32 False
extern "C" void cLib_addCalc2__FPffff();
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
extern "C" void cLib_addCalc0__FPfff();
// False False
//  s16* False
// 	 s16 False
//  s16 False
//  s16 False
extern "C" void cLib_chaseAngleS__FPsss();
// False False
//  void False
//  void* False
// 	 void False
extern "C" void __dl__FPv();
// False True
//  JGeometry::TBox2<f32> const& False
// 	 JGeometry::TBox2<f32> const False
// 		 JGeometry::TBox2<f32> True
// 			 f32 False
//  f32 False
//  f32 False
extern "C" void func_802E980C();
// False False
extern "C" void PSMTXCopy();
// False False
extern "C" void PSMTXTrans();
// False False
extern "C" void C_MTXPerspective();
// False False
extern "C" void GXSetVtxDesc();
// False False
extern "C" void GXClearVtxDesc();
// False False
extern "C" void GXSetVtxAttrFmt();
// False False
extern "C" void GXSetTexCoordGen2();
// False False
extern "C" void GXSetNumTexGens();
// False False
extern "C" void GXBegin();
// False False
extern "C" void GXSetCullMode();
// False False
extern "C" void GXSetChanMatColor();
// False False
extern "C" void GXSetNumChans();
// False False
extern "C" void GXSetChanCtrl();
// False False
extern "C" void GXInitTexObj();
// False False
extern "C" void GXInitTexObjLOD();
// False False
extern "C" void GXLoadTexObj();
// False False
extern "C" void GXSetTevColorIn();
// False False
extern "C" void GXSetTevAlphaIn();
// False False
extern "C" void GXSetTevColorOp();
// False False
extern "C" void GXSetTevAlphaOp();
// False False
extern "C" void GXSetAlphaCompare();
// False False
extern "C" void GXSetTevOrder();
// False False
extern "C" void GXSetNumTevStages();
// False False
extern "C" void GXSetFog();
// False False
extern "C" void GXSetBlendMode();
// False False
extern "C" void GXSetZMode();
// False False
extern "C" void GXSetZCompLoc();
// False False
extern "C" void GXSetDither();
// False False
extern "C" void GXSetProjection();
// False False
extern "C" void GXLoadPosMtxImm();
// False False
extern "C" void GXSetCurrentMtx();
// False False
extern "C" void GXSetViewport();
// False False
extern "C" void GXSetScissor();
// False False
extern "C" void GXSetClipMode();
// False False
extern "C" void __ptmf_scall();
extern "C" extern u8 g_mDoMtx_identity[48 + 24 /* padding */];
extern "C" extern void* g_fopOvlp_Method[5 + 1 /* padding */];
extern "C" extern void* g_fpcLf_Method[5 + 1 /* padding */];
extern "C" extern void* __vt__12dDlst_base_c[3];
extern "C" extern void* __vt__16dDlst_snapShot_c[3];
extern "C" extern u8 mFrameBufferTexObj__13mDoGph_gInf_c[32];
extern "C" extern u8 now__14mDoMtx_stack_c[48];
extern "C" extern u8 g_dComIfG_gameInfo[122384];
extern "C" extern u8 g_clearColor[4];
extern "C" extern u8 mFrameBufferTex__13mDoGph_gInf_c[4];
extern "C" extern u8 struct_80450BE4[4];
extern "C" extern u8 sManager__10JFWDisplay[4];

// 
// Declarations:
// 

/* ############################################################################################## */
/* 80454E20-80454E24 0004+00 s=1 e=0 z=0  None .sdata2    @3631                                                        */
SECTION_SDATA2 static u32 lit_3631 = 0xFFFFFFFF;

/* 80454E24-80454E28 0004+00 s=2 e=0 z=0  None .sdata2    @3683                                                        */
SECTION_SDATA2 static u8 lit_3683[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 80454E28-80454E2C 0004+00 s=1 e=0 z=0  None .sdata2    @3684                                                        */
SECTION_SDATA2 static f32 lit_3684 = 608.0f;

/* 80454E2C-80454E30 0004+00 s=1 e=0 z=0  None .sdata2    @3685                                                        */
SECTION_SDATA2 static f32 lit_3685 = 448.0f;

/* 80454E30-80454E34 0004+00 s=4 e=0 z=0  None .sdata2    @3686                                                        */
SECTION_SDATA2 static f32 lit_3686 = 1.0f;

/* 80454E34-80454E38 0004+00 s=1 e=0 z=0  None .sdata2    @3687                                                        */
SECTION_SDATA2 static f32 lit_3687 = 60.0f;

/* 80454E38-80454E3C 0004+00 s=1 e=0 z=0  None .sdata2    @3688                                                        */
SECTION_SDATA2 static f32 lit_3688 = 19.0f / 14.0f;

/* 80454E3C-80454E40 0004+00 s=1 e=0 z=0  None .sdata2    @3689                                                        */
SECTION_SDATA2 static f32 lit_3689 = 100.0f;

/* 80454E40-80454E44 0004+00 s=1 e=0 z=0  None .sdata2    @3690                                                        */
SECTION_SDATA2 static f32 lit_3690 = 100000.0f;

/* 80454E44-80454E48 0004+00 s=1 e=0 z=0  None .sdata2    @3691                                                        */
SECTION_SDATA2 static f32 lit_3691 = -1.0f;

/* 8025247C-80252990 0514+00 s=1 e=0 z=0  None .text      draw__15dOvlpFd2_dlst_cFv                                    */
//	80252490: 80454E24 (lit_3683)
//	80252498: 80454E28 (lit_3684)
//	8025249C: 80454E2C (lit_3685)
//	802524A4: 80454E30 (lit_3686)
//	802524A8: 80360464 (GXSetViewport)
//	802524BC: 803604D0 (GXSetScissor)
//	802524D4: 8035B5C4 (GXSetVtxAttrFmt)
//	802524D8: 8035B58C (GXClearVtxDesc)
//	802524E4: 8035AEB8 (GXSetVtxDesc)
//	802524EC: 8035DB30 (GXSetNumChans)
//	8025250C: 8035DB6C (GXSetChanCtrl)
//	80252514: 8035BDFC (GXSetNumTexGens)
//	8025251C: 8035F890 (GXSetNumTevStages)
//	80252530: 8035F6F4 (GXSetTevOrder)
//	80252548: 8035F224 (GXSetTevColorIn)
//	80252564: 8035F2AC (GXSetTevColorOp)
//	8025257C: 8035F268 (GXSetTevAlphaIn)
//	80252598: 8035F314 (GXSetTevAlphaOp)
//	802525A0: 8035FCD0 (GXSetZCompLoc)
//	802525B0: 8035FC9C (GXSetZMode)
//	802525C4: 8035FBF0 (GXSetBlendMode)
//	802525DC: 8035F624 (GXSetAlphaCompare)
//	802525E0: 80450600 (g_clearColor)
//	802525EC: 80454E24 (lit_3683)
//	80252600: 8035F8B8 (GXSetFog)
//	80252608: 8035C984 (GXSetCullMode)
//	80252610: 8035FDD8 (GXSetDither)
//	80252618: 803605D0 (GXSetClipMode)
//	8025261C: 803A2FD8 (g_mDoMtx_identity)
//	80252620: 803A2FD8 (g_mDoMtx_identity)
//	80252628: 8036024C (GXLoadPosMtxImm)
//	80252630: 803602EC (GXSetCurrentMtx)
//	80252640: 8035C764 (GXBegin)
//	80252678: 80454E34 (lit_3687)
//	8025267C: 80454E38 (lit_3688)
//	80252680: 80454E3C (lit_3689)
//	80252684: 80454E40 (lit_3690)
//	80252688: 80346F28 (C_MTXPerspective)
//	80252694: 803600D4 (GXSetProjection)
//	80252698: 803DD3E8 (mFrameBufferTexObj__13mDoGph_gInf_c)
//	8025269C: 803DD3E8 (mFrameBufferTexObj__13mDoGph_gInf_c)
//	802526A0: 80450BD0 (mFrameBufferTex__13mDoGph_gInf_c)
//	802526BC: 8035DE40 (GXInitTexObj)
//	802526C0: 803DD3E8 (mFrameBufferTexObj__13mDoGph_gInf_c)
//	802526C4: 803DD3E8 (mFrameBufferTexObj__13mDoGph_gInf_c)
//	802526D0: 80454E24 (lit_3683)
//	802526E8: 8035E0D4 (GXInitTexObjLOD)
//	802526EC: 803DD3E8 (mFrameBufferTexObj__13mDoGph_gInf_c)
//	802526F0: 803DD3E8 (mFrameBufferTexObj__13mDoGph_gInf_c)
//	802526F8: 8035E414 (GXLoadTexObj)
//	80252700: 8035DB30 (GXSetNumChans)
//	80252720: 8035DB6C (GXSetChanCtrl)
//	80252724: 80454E20 (lit_3631)
//	80252734: 8035DA48 (GXSetChanMatColor)
//	8025273C: 8035BDFC (GXSetNumTexGens)
//	80252758: 8035BB7C (GXSetTexCoordGen2)
//	80252760: 8035F890 (GXSetNumTevStages)
//	80252774: 8035F6F4 (GXSetTevOrder)
//	8025278C: 8035F224 (GXSetTevColorIn)
//	802527A8: 8035F2AC (GXSetTevColorOp)
//	802527C0: 8035F268 (GXSetTevAlphaIn)
//	802527DC: 8035F314 (GXSetTevAlphaOp)
//	802527E4: 8035FCD0 (GXSetZCompLoc)
//	802527F4: 8035FC9C (GXSetZMode)
//	80252808: 8035FBF0 (GXSetBlendMode)
//	80252820: 8035F624 (GXSetAlphaCompare)
//	80252824: 80450600 (g_clearColor)
//	80252830: 80454E24 (lit_3683)
//	80252844: 8035F8B8 (GXSetFog)
//	8025284C: 8035C984 (GXSetCullMode)
//	80252854: 8035FDD8 (GXSetDither)
//	8025285C: 803605D0 (GXSetClipMode)
//	80252868: 8036024C (GXLoadPosMtxImm)
//	80252870: 803602EC (GXSetCurrentMtx)
//	80252874: 8035B58C (GXClearVtxDesc)
//	80252880: 8035AEB8 (GXSetVtxDesc)
//	8025288C: 8035AEB8 (GXSetVtxDesc)
//	802528A4: 8035B5C4 (GXSetVtxAttrFmt)
//	802528BC: 8035B5C4 (GXSetVtxAttrFmt)
//	802528CC: 8035C764 (GXBegin)
//	8025292C: 804061C0 (g_dComIfG_gameInfo)
//	80252930: 804061C0 (g_dComIfG_gameInfo)
//	80252938: 80454E24 (lit_3683)
//	80252944: 80454E28 (lit_3684)
//	8025294C: 80454E2C (lit_3685)
//	8025295C: 80454E44 (lit_3691)
//	80252960: 80454E30 (lit_3686)
//	80252964: 802E980C (func_802E980C)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dOvlpFd2_dlst_c::draw() {
	nofralloc
#include "asm/d/ovlp/d_ovlp_fade2/draw__15dOvlpFd2_dlst_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 803C2CF0-803C2CFC 000C+00 s=1 e=0 z=0  None .data      @3695                                                        */
SECTION_DATA static void* lit_3695[3] = {
	(void*)NULL,
	(void*)0xFFFFFFFF,
	(void*)execFirstSnap__10dOvlpFd2_cFv,
};

/* 803C2CFC-803C2D08 000C+00 s=1 e=0 z=0  None .data      @3721                                                        */
SECTION_DATA static void* lit_3721[3] = {
	(void*)NULL,
	(void*)0xFFFFFFFF,
	(void*)execFadeOut__10dOvlpFd2_cFv,
};

/* 803C2D08-803C2D14 000C+00 s=1 e=0 z=0  None .data      @3736                                                        */
SECTION_DATA static void* lit_3736[3] = {
	(void*)NULL,
	(void*)0xFFFFFFFF,
	(void*)execNextSnap__10dOvlpFd2_cFv,
};

/* 803C2D14-803C2D20 000C+00 s=1 e=0 z=0  None .data      @3765                                                        */
SECTION_DATA static void* lit_3765[3] = {
	(void*)NULL,
	(void*)0xFFFFFFFF,
	(void*)execFadeIn__10dOvlpFd2_cFv,
};

/* 803C2D20-803C2D34 0014+00 s=1 e=0 z=0  None .data      l_dOvlpFd2_Method                                            */
SECTION_DATA static void* l_dOvlpFd2_Method[5] = {
	(void*)dOvlpFd2_Create__FPv,
	(void*)dOvlpFd2_Delete__FP10dOvlpFd2_c,
	(void*)dOvlpFd2_Execute__FP10dOvlpFd2_c,
	(void*)dOvlpFd2_IsDelete__FP10dOvlpFd2_c,
	(void*)dOvlpFd2_Draw__FP10dOvlpFd2_c,
};

/* 803C2D34-803C2D5C 0028+00 s=0 e=0 z=1  None .data      g_profile_OVERLAP2                                           */
SECTION_DATA void* g_profile_OVERLAP2[10] = {
	(void*)NULL,
	(void*)0x0002FFFD,
	(void*)0x00110000,
	(void*)&g_fpcLf_Method,
	(void*)0x00000120,
	(void*)NULL,
	(void*)NULL,
	(void*)&g_fopOvlp_Method,
	(void*)0x03070000,
	(void*)&l_dOvlpFd2_Method,
};

/* 803C2D5C-803C2D70 0010+04 s=2 e=0 z=0  None .data      __vt__15dOvlpFd2_dlst_c                                      */
SECTION_DATA void* __vt__15dOvlpFd2_dlst_c[4 + 1 /* padding */] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)draw__15dOvlpFd2_dlst_cFv,
	(void*)__dt__15dOvlpFd2_dlst_cFv,
	/* padding */
	NULL,
};

/* 80252990-802529F4 0064+00 s=1 e=0 z=0  None .text      __ct__10dOvlpFd2_cFv                                         */
//	80252990: 803A6F88 (__vt__12dDlst_base_c)
//	80252994: 803A6F88 (__vt__12dDlst_base_c)
//	8025299C: 803C2DEC (__vt__16dDlst_snapShot_c)
//	802529A0: 803C2DEC (__vt__16dDlst_snapShot_c)
//	802529AC: 803C2D5C (__vt__15dOvlpFd2_dlst_c)
//	802529B0: 803C2D5C (__vt__15dOvlpFd2_dlst_c)
//	802529B8: 803C2CF0 (lit_3695)
//	802529BC: 803C2CF0 (lit_3695)
//	802529DC: 804061C0 (g_dComIfG_gameInfo)
//	802529E0: 804061C0 (g_dComIfG_gameInfo)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dOvlpFd2_c::dOvlpFd2_c() {
	nofralloc
#include "asm/d/ovlp/d_ovlp_fade2/__ct__10dOvlpFd2_cFv.s"
}
#pragma pop


/* 802529F4-80252A78 0084+00 s=1 e=0 z=0  None .text      execFirstSnap__10dOvlpFd2_cFv                                */
//	80252A18: 80252E70 (func_80252E70)
//	80252A24: 803C2CFC (lit_3721)
//	80252A28: 803C2CFC (lit_3721)
//	80252A48: 8001E51C (fopOvlpM_Done__FP18overlap_task_class)
//	80252A58: 804061C0 (g_dComIfG_gameInfo)
//	80252A5C: 804061C0 (g_dComIfG_gameInfo)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dOvlpFd2_c::execFirstSnap() {
	nofralloc
#include "asm/d/ovlp/d_ovlp_fade2/execFirstSnap__10dOvlpFd2_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454E48-80454E4C 0004+00 s=1 e=0 z=0  None .sdata2    @3757                                                        */
SECTION_SDATA2 static f32 lit_3757 = 1.0f / 20.0f;

/* 80252A78-80252BC0 0148+00 s=1 e=0 z=0  None .text      execFadeOut__10dOvlpFd2_cFv                                  */
//	80252A90: 804061C0 (g_dComIfG_gameInfo)
//	80252A94: 804061C0 (g_dComIfG_gameInfo)
//	80252AA8: 80270B90 (cLib_chaseAngleS__FPsss)
//	80252AF8: 8001E504 (fopOvlpM_IsOutReq__FP18overlap_task_class)
//	80252B04: 8001E4C4 (fopOvlpM_SceneIsStart__Fv)
//	80252B08: 803C2D08 (lit_3736)
//	80252B0C: 803C2D08 (lit_3736)
//	80252B54: 804511C0 (sManager__10JFWDisplay)
//	80252B88: 80252E70 (func_80252E70)
//	80252B9C: 80454E30 (lit_3686)
//	80252BA4: 80454E48 (lit_3757)
//	80252BA8: 8026FA3C (cLib_addCalc2__FPffff)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dOvlpFd2_c::execFadeOut() {
	nofralloc
#include "asm/d/ovlp/d_ovlp_fade2/execFadeOut__10dOvlpFd2_cFv.s"
}
#pragma pop


/* 80252BC0-80252C68 00A8+00 s=1 e=0 z=0  None .text      execNextSnap__10dOvlpFd2_cFv                                 */
//	80252BD8: 80252E70 (func_80252E70)
//	80252BE4: 804511C0 (sManager__10JFWDisplay)
//	80252C24: 804061C0 (g_dComIfG_gameInfo)
//	80252C28: 804061C0 (g_dComIfG_gameInfo)
//	80252C34: 803C2D14 (lit_3765)
//	80252C38: 803C2D14 (lit_3765)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dOvlpFd2_c::execNextSnap() {
	nofralloc
#include "asm/d/ovlp/d_ovlp_fade2/execNextSnap__10dOvlpFd2_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454E4C-80454E50 0004+00 s=1 e=0 z=0  None .sdata2    @3794                                                        */
SECTION_SDATA2 static f32 lit_3794 = 3.0f / 100.0f;

/* 80454E50-80454E54 0004+00 s=1 e=0 z=0  None .sdata2    @3795                                                        */
SECTION_SDATA2 static f32 lit_3795 = 0.0010000000474974513f;

/* 80252C68-80252D0C 00A4+00 s=1 e=0 z=0  None .text      execFadeIn__10dOvlpFd2_cFv                                   */
//	80252C8C: 80454E30 (lit_3686)
//	80252C90: 80454E4C (lit_3794)
//	80252C94: 8026FA80 (cLib_addCalc0__FPfff)
//	80252C9C: 80454E50 (lit_3795)
//	80252CB4: 8001E4C4 (fopOvlpM_SceneIsStart__Fv)
//	80252CC8: 8001E51C (fopOvlpM_Done__FP18overlap_task_class)
//	80252CD0: 804061C0 (g_dComIfG_gameInfo)
//	80252CD4: 804061C0 (g_dComIfG_gameInfo)
//	80252CE8: 804061C0 (g_dComIfG_gameInfo)
//	80252CEC: 804061C0 (g_dComIfG_gameInfo)
//	80252CF4: 8001E484 (fopOvlpM_SceneIsStop__Fv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dOvlpFd2_c::execFadeIn() {
	nofralloc
#include "asm/d/ovlp/d_ovlp_fade2/execFadeIn__10dOvlpFd2_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454E54-80454E58 0004+00 s=1 e=0 z=0  None .sdata2    @3822                                                        */
SECTION_SDATA2 static f32 lit_3822 = -420.0f;

/* 80252D0C-80252E08 00FC+00 s=1 e=0 z=0  None .text      dOvlpFd2_Draw__FP10dOvlpFd2_c                                */
//	80252D2C: 804061C0 (g_dComIfG_gameInfo)
//	80252D30: 804061C0 (g_dComIfG_gameInfo)
//	80252D44: 80056794 (set__12dDlst_list_cFRPP12dDlst_base_cRPP12dDlst_base_cP12dDlst_base_c)
//	80252D54: 804061C0 (g_dComIfG_gameInfo)
//	80252D58: 804061C0 (g_dComIfG_gameInfo)
//	80252D68: 803DD470 (now__14mDoMtx_stack_c)
//	80252D6C: 803DD470 (now__14mDoMtx_stack_c)
//	80252D70: 80454E24 (lit_3683)
//	80252D78: 80454E54 (lit_3822)
//	80252D7C: 803468E8 (PSMTXTrans)
//	80252D80: 803DD470 (now__14mDoMtx_stack_c)
//	80252D84: 803DD470 (now__14mDoMtx_stack_c)
//	80252D8C: 8000C4CC (mDoMtx_ZrotM__FPA4_fs)
//	80252D90: 80454E30 (lit_3686)
//	80252DA0: 8000CE38 (scaleM__14mDoMtx_stack_cFfff)
//	80252DA4: 803DD470 (now__14mDoMtx_stack_c)
//	80252DA8: 803DD470 (now__14mDoMtx_stack_c)
//	80252DB8: 8000C4CC (mDoMtx_ZrotM__FPA4_fs)
//	80252DC0: 803DD470 (now__14mDoMtx_stack_c)
//	80252DC4: 803DD470 (now__14mDoMtx_stack_c)
//	80252DC8: 803464B0 (PSMTXCopy)
//	80252DCC: 804061C0 (g_dComIfG_gameInfo)
//	80252DD0: 804061C0 (g_dComIfG_gameInfo)
//	80252DE4: 80056794 (set__12dDlst_list_cFRPP12dDlst_base_cRPP12dDlst_base_cP12dDlst_base_c)
//	80252DEC: 80450BE4 (struct_80450BE4)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  dOvlpFd2_c* False
// 	 dOvlpFd2_c False
asm static void dOvlpFd2_Draw(dOvlpFd2_c* param_0) {
	nofralloc
#include "asm/d/ovlp/d_ovlp_fade2/dOvlpFd2_Draw__FP10dOvlpFd2_c.s"
}
#pragma pop


/* 80252E08-80252E34 002C+00 s=1 e=0 z=0  None .text      dOvlpFd2_Execute__FP10dOvlpFd2_c                             */
//	80252E18: 80362084 (__ptmf_scall)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  dOvlpFd2_c* False
// 	 dOvlpFd2_c False
asm static void dOvlpFd2_Execute(dOvlpFd2_c* param_0) {
	nofralloc
#include "asm/d/ovlp/d_ovlp_fade2/dOvlpFd2_Execute__FP10dOvlpFd2_c.s"
}
#pragma pop


/* 80252E34-80252E3C 0008+00 s=1 e=0 z=0  None .text      dOvlpFd2_IsDelete__FP10dOvlpFd2_c                            */
// True False
//  bool False
//  dOvlpFd2_c* False
// 	 dOvlpFd2_c False
static bool dOvlpFd2_IsDelete(dOvlpFd2_c* param_0) {
	return true;
}


/* 80252E3C-80252E44 0008+00 s=1 e=0 z=0  None .text      dOvlpFd2_Delete__FP10dOvlpFd2_c                              */
// True False
//  bool False
//  dOvlpFd2_c* False
// 	 dOvlpFd2_c False
static bool dOvlpFd2_Delete(dOvlpFd2_c* param_0) {
	return true;
}


/* 80252E44-80252E70 002C+00 s=1 e=0 z=0  None .text      dOvlpFd2_Create__FPv                                         */
//	80252E58: 80252990 (__ct__10dOvlpFd2_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  void* False
// 	 void False
asm static void dOvlpFd2_Create(void* param_0) {
	nofralloc
#include "asm/d/ovlp/d_ovlp_fade2/dOvlpFd2_Create__FPv.s"
}
#pragma pop


/* 80252E70-80252E8C 001C+00 s=3 e=4 z=0  None .text      cLib_calcTimer<Sc>__FPSc                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False True
//  s8* False
// 	 s8 False
asm void cLib_calcTimer__template4(s8* param_0) {
	nofralloc
#include "asm/d/ovlp/d_ovlp_fade2/func_80252E70.s"
}
#pragma pop


/* 80252E8C-80252ED4 0048+00 s=1 e=0 z=0  None .text      __dt__15dOvlpFd2_dlst_cFv                                    */
//	80252EA4: 803C2D5C (__vt__15dOvlpFd2_dlst_c)
//	80252EA8: 803C2D5C (__vt__15dOvlpFd2_dlst_c)
//	80252EB8: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dOvlpFd2_dlst_c::~dOvlpFd2_dlst_c() {
	nofralloc
#include "asm/d/ovlp/d_ovlp_fade2/__dt__15dOvlpFd2_dlst_cFv.s"
}
#pragma pop


