//
// Generated By: dol2asm
// Translation Unit: d/d_timer
//

#include "d/d_timer.h"
#include "dol2asm.h"
#include "dolphin/types.h"

//
// Types:
//

struct request_of_phase_process_class {};

struct msg_class {};

struct cXyz {};

struct dTimer_c {
    /* 8025CA0C */ void _create();
    /* 8025CF04 */ void _execute();
    /* 8025D33C */ void _draw();
    /* 8025D3BC */ void _delete();
    /* 8025D524 */ void deleteCheck();
    /* 8025D618 */ void start(int, s16);
    /* 8025D538 */ void start(int);
    /* 8025D7C0 */ void stock_start(s16);
    /* 8025D708 */ void stock_start();
    /* 8025D7E8 */ void stop(u8);
    /* 8025D86C */ void restart(u8);
    /* 8025D920 */ void end(int);
    /* 8025D9E0 */ void deleteRequest();
    /* 8025D9F0 */ void getTimeMs();
    /* 8025DA54 */ void getLimitTimeMs();
    /* 8025DA9C */ void getRestTimeMs();
    /* 8025DB10 */ void isStart();
    /* 802613DC */ void createGetIn(cXyz);
};

struct dRes_info_c {};

struct dRes_control_c {
    /* 8003C1E4 */ void getResInfo(char const*, dRes_info_c*, int);
};

struct dMsgObject_c {
    /* 8023822C */ void getStatus();
};

struct JMSMesgEntry_c {};

struct dMeter2Info_c {
    /* 8021C250 */ void getString(u32, char*, JMSMesgEntry_c*);
};

struct JUtility {
    struct TColor {};
};

struct dMeter2Draw_c {
    /* 802140DC */ void drawPikari(f32, f32, f32*, f32, JUtility::TColor, JUtility::TColor,
                                   JUtility::TColor, JUtility::TColor, f32, u8);
};

struct dLib_time_c {
    /* 80032804 */ void getTime();
};

struct dDlst_base_c {};

struct dDlst_list_c {
    /* 80056794 */ void set(dDlst_base_c**&, dDlst_base_c**&, dDlst_base_c*);
};

struct J2DPane {
    /* 802F7AFC */ void getParentPane();
    /* 802F7FCC */ void animationTransform();
};

struct JKRArchive {};

struct dDlst_TimerScrnDraw_c {
    /* 8025DB38 */ dDlst_TimerScrnDraw_c();
    /* 8025DBE0 */ void setHIO();
    /* 8025DFBC */ void setScreen(s32, JKRArchive*);
    /* 8025E240 */ void setScreenBase();
    /* 8025E66C */ void setScreenBoatRace();
    /* 8025E8B8 */ void setScreenRider();
    /* 8025EB20 */ void hideDenominator();
    /* 8025EC5C */ void deleteScreen();
    /* 8025EE24 */ void changeNumberTexture(J2DPane*, int);
    /* 8025EECC */ void getNumber(int);
    /* 8025EEF0 */ void setTimer(int);
    /* 8025F180 */ void setCounter(u8, u8);
    /* 8025FA00 */ void setParentPos(f32, f32);
    /* 8025FA2C */ void setTimerPos(f32, f32);
    /* 8025FA6C */ void setCounterPos(f32, f32);
    /* 8025FA98 */ void setImagePos(f32, f32);
    /* 8025FAC4 */ void setShowType(u8);
    /* 8025FB74 */ void anime();
    /* 8025FF98 */ void closeAnime();
    /* 802601E4 */ void createGetIn(cXyz);
    /* 80260574 */ void createStart(u16);
    /* 80260690 */ void draw();
    /* 80260AA8 */ void checkStartAnimeEnd();
    /* 80260AD4 */ void playBckAnimation(f32);
    /* 80260B54 */ void drawPikari(int);
    /* 80261394 */ ~dDlst_TimerScrnDraw_c();
};

struct dComIfG_play_c {
    /* 8002CB94 */ void setTimerNowTimeMs(int);
    /* 8002CB9C */ void getTimerNowTimeMs();
    /* 8002CBA4 */ void setTimerLimitTimeMs(int);
    /* 8002CBAC */ void getTimerLimitTimeMs();
    /* 8002CBB4 */ void setTimerMode(int);
    /* 8002CBBC */ void getTimerMode();
    /* 8002CBC4 */ void setTimerType(u8);
    /* 8002CBCC */ void getTimerType();
    /* 8002CBD4 */ void setTimerPtr(dTimer_c*);
    /* 8002CBDC */ void getTimerPtr();
};

struct Vec {};

struct JAISoundID {};

struct Z2SeMgr {
    /* 802AB984 */ void seStart(JAISoundID, Vec const*, u32, s8, f32, f32, f32, f32, u8);
};

struct JKRHeap {
    /* 802CE784 */ void getTotalFreeSize();
};

struct JKRFileLoader {
    /* 802D4270 */ void getGlbResource(char const*, JKRFileLoader*);
};

struct JKRExpHeap {};

struct J2DTextBox {
    /* 80300658 */ void getStringPtr() const;
};

struct J2DGrafContext {};

struct J2DScreen {
    /* 802F8498 */ J2DScreen();
    /* 802F8648 */ void setPriority(char const*, u32, JKRArchive*);
    /* 802F8ED4 */ void draw(f32, f32, J2DGrafContext const*);
};

struct J2DAnmLoaderDataBase {
    /* 80308A6C */ void load(void const*);
};

struct CPaneMgrAlpha {
    /* 802555C8 */ void show();
    /* 80255608 */ void hide();
    /* 802557D0 */ void setAlphaRate(f32);
};

struct CPaneMgr {
    /* 80253984 */ CPaneMgr(J2DScreen*, u64, u8, JKRExpHeap*);
    /* 802545B0 */ void paneTrans(f32, f32);
    /* 80254EBC */ void getGlobalVtxCenter(J2DPane*, bool, s16);
};

//
// Forward References:
//

static void dTimer_Draw(dTimer_c*);
static void dTimer_Execute(dTimer_c*);
static bool dTimer_IsDelete(dTimer_c*);
static void dTimer_Delete(dTimer_c*);
static void dTimer_Create(msg_class*);
void dTimer_createTimer(s32, u32, u8, u8, f32, f32, f32, f32);
void dTimer_createStockTimer();
void dTimer_createGetIn2D(s32, cXyz);
static void dTimer_createStart2D(s32, u16);
void dTimer_isStart();
void dTimer_getRestTimeMs();
void dTimer_show();
void dTimer_hide();
void dTimer_isReadyFlag();

extern "C" void _create__8dTimer_cFv();
extern "C" void _execute__8dTimer_cFv();
extern "C" void _draw__8dTimer_cFv();
extern "C" void _delete__8dTimer_cFv();
extern "C" void deleteCheck__8dTimer_cFv();
extern "C" void start__8dTimer_cFi();
extern "C" void start__8dTimer_cFis();
extern "C" void stock_start__8dTimer_cFv();
extern "C" void stock_start__8dTimer_cFs();
extern "C" void stop__8dTimer_cFUc();
extern "C" void restart__8dTimer_cFUc();
extern "C" void end__8dTimer_cFi();
extern "C" void deleteRequest__8dTimer_cFv();
extern "C" void getTimeMs__8dTimer_cFv();
extern "C" void getLimitTimeMs__8dTimer_cFv();
extern "C" void getRestTimeMs__8dTimer_cFv();
extern "C" void isStart__8dTimer_cFv();
extern "C" void __ct__21dDlst_TimerScrnDraw_cFv();
extern "C" void setHIO__21dDlst_TimerScrnDraw_cFv();
extern "C" void setScreen__21dDlst_TimerScrnDraw_cFlP10JKRArchive();
extern "C" void setScreenBase__21dDlst_TimerScrnDraw_cFv();
extern "C" void setScreenBoatRace__21dDlst_TimerScrnDraw_cFv();
extern "C" void setScreenRider__21dDlst_TimerScrnDraw_cFv();
extern "C" void hideDenominator__21dDlst_TimerScrnDraw_cFv();
extern "C" void deleteScreen__21dDlst_TimerScrnDraw_cFv();
extern "C" void changeNumberTexture__21dDlst_TimerScrnDraw_cFP7J2DPanei();
extern "C" void getNumber__21dDlst_TimerScrnDraw_cFi();
extern "C" void setTimer__21dDlst_TimerScrnDraw_cFi();
extern "C" void setCounter__21dDlst_TimerScrnDraw_cFUcUc();
extern "C" void setParentPos__21dDlst_TimerScrnDraw_cFff();
extern "C" void setTimerPos__21dDlst_TimerScrnDraw_cFff();
extern "C" void setCounterPos__21dDlst_TimerScrnDraw_cFff();
extern "C" void setImagePos__21dDlst_TimerScrnDraw_cFff();
extern "C" void setShowType__21dDlst_TimerScrnDraw_cFUc();
extern "C" void anime__21dDlst_TimerScrnDraw_cFv();
extern "C" void closeAnime__21dDlst_TimerScrnDraw_cFv();
extern "C" void createGetIn__21dDlst_TimerScrnDraw_cF4cXyz();
extern "C" void createStart__21dDlst_TimerScrnDraw_cFUs();
extern "C" void draw__21dDlst_TimerScrnDraw_cFv();
extern "C" void checkStartAnimeEnd__21dDlst_TimerScrnDraw_cFv();
extern "C" void playBckAnimation__21dDlst_TimerScrnDraw_cFf();
extern "C" void drawPikari__21dDlst_TimerScrnDraw_cFi();
extern "C" static void dTimer_Draw__FP8dTimer_c();
extern "C" static void dTimer_Execute__FP8dTimer_c();
extern "C" static bool dTimer_IsDelete__FP8dTimer_c();
extern "C" static void dTimer_Delete__FP8dTimer_c();
extern "C" static void dTimer_Create__FP9msg_class();
extern "C" void dTimer_createTimer__FlUlUcUcffff();
extern "C" void dTimer_createStockTimer__Fv();
extern "C" void dTimer_createGetIn2D__Fl4cXyz();
extern "C" static void dTimer_createStart2D__FlUs();
extern "C" void dTimer_isStart__Fv();
extern "C" void dTimer_getRestTimeMs__Fv();
extern "C" void dTimer_show__Fv();
extern "C" void dTimer_hide__Fv();
extern "C" void dTimer_isReadyFlag__Fv();
extern "C" void __dt__21dDlst_TimerScrnDraw_cFv();
extern "C" void createGetIn__8dTimer_cF4cXyz();
extern "C" extern char const* const d_d_timer__stringBase0;
extern "C" extern void* g_profile_TIMER[10];
extern "C" extern void* __vt__21dDlst_TimerScrnDraw_c[4];

//
// External References:
//

void mDoExt_setCurrentHeap(JKRHeap*);
void mDoExt_getMesgFont();
void mDoLib_project(Vec*, Vec*);
void fopMsgM_GetAppend(void*);
void fopMsgM_Delete(void*);
void fop_Timer_create(s16, u8, u32, u8, u8, f32, f32, f32, f32, int (*)(void*));
void fopMsgM_createExpHeap(u32, JKRHeap*);
void fopMsgM_destroyExpHeap(JKRExpHeap*);
void dComIfG_resLoad(request_of_phase_process_class*, char const*);
void dComIfG_resDelete(request_of_phase_process_class*, char const*);
void dMeter2Info_getNumberTextureName(int);
void dPaneClass_showNullPane(J2DScreen*);
void cM_rndFX(f32);
void* operator new(u32);
void operator delete(void*);

extern "C" void mDoExt_setCurrentHeap__FP7JKRHeap();
extern "C" void mDoExt_getMesgFont__Fv();
extern "C" void mDoLib_project__FP3VecP3Vec();
extern "C" void fopMsgM_GetAppend__FPv();
extern "C" void fopMsgM_Delete__FPv();
extern "C" void fop_Timer_create__FsUcUlUcUcffffPFPv_i();
extern "C" void fopMsgM_createExpHeap__FUlP7JKRHeap();
extern "C" void fopMsgM_destroyExpHeap__FP10JKRExpHeap();
extern "C" void setTimerNowTimeMs__14dComIfG_play_cFi();
extern "C" void getTimerNowTimeMs__14dComIfG_play_cFv();
extern "C" void setTimerLimitTimeMs__14dComIfG_play_cFi();
extern "C" void getTimerLimitTimeMs__14dComIfG_play_cFv();
extern "C" void setTimerMode__14dComIfG_play_cFi();
extern "C" void getTimerMode__14dComIfG_play_cFv();
extern "C" void setTimerType__14dComIfG_play_cFUc();
extern "C" void getTimerType__14dComIfG_play_cFv();
extern "C" void setTimerPtr__14dComIfG_play_cFP8dTimer_c();
extern "C" void getTimerPtr__14dComIfG_play_cFv();
extern "C" void dComIfG_resLoad__FP30request_of_phase_process_classPCc();
extern "C" void dComIfG_resDelete__FP30request_of_phase_process_classPCc();
extern "C" void getTime__11dLib_time_cFv();
extern "C" void getResInfo__14dRes_control_cFPCcP11dRes_info_ci();
extern "C" void set__12dDlst_list_cFRPP12dDlst_base_cRPP12dDlst_base_cP12dDlst_base_c();
extern "C" void
drawPikari__13dMeter2Draw_cFffPffQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorfUc();
extern "C" void getString__13dMeter2Info_cFUlPcP14JMSMesgEntry_c();
extern "C" void dMeter2Info_getNumberTextureName__Fi();
extern "C" void getStatus__12dMsgObject_cFv();
extern "C" void __ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap();
extern "C" void paneTrans__8CPaneMgrFff();
extern "C" void getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs();
extern "C" void dPaneClass_showNullPane__FP9J2DScreen();
extern "C" void show__13CPaneMgrAlphaFv();
extern "C" void hide__13CPaneMgrAlphaFv();
extern "C" void setAlphaRate__13CPaneMgrAlphaFf();
extern "C" void cM_rndFX__Ff();
extern "C" void seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc();
extern "C" void getTotalFreeSize__7JKRHeapFv();
extern "C" void* __nw__FUl();
extern "C" void __dl__FPv();
extern "C" void getGlbResource__13JKRFileLoaderFPCcP13JKRFileLoader();
extern "C" void getParentPane__7J2DPaneFv();
extern "C" void animationTransform__7J2DPaneFv();
extern "C" void __ct__9J2DScreenFv();
extern "C" void setPriority__9J2DScreenFPCcUlP10JKRArchive();
extern "C" void draw__9J2DScreenFffPC14J2DGrafContext();
extern "C" void getStringPtr__10J2DTextBoxCFv();
extern "C" void load__20J2DAnmLoaderDataBaseFPCv();
extern "C" void _savefpr_28();
extern "C" void _restfpr_28();
extern "C" void _savegpr_21();
extern "C" void _savegpr_22();
extern "C" void _savegpr_24();
extern "C" void _savegpr_26();
extern "C" void _savegpr_28();
extern "C" void _savegpr_29();
extern "C" void _restgpr_21();
extern "C" void _restgpr_22();
extern "C" void _restgpr_24();
extern "C" void _restgpr_26();
extern "C" void _restgpr_28();
extern "C" void _restgpr_29();
extern "C" void __div2i();
extern "C" void strcmp();
extern "C" void strcpy();
extern "C" extern void* g_fopMsg_Method[5 + 1 /* padding */];
extern "C" extern void* g_fpcLf_Method[5 + 1 /* padding */];
extern "C" extern void* __vt__12dDlst_base_c[3];
extern "C" extern u8 g_dComIfG_gameInfo[122384];
extern "C" extern u8 g_drawHIO[3880];
extern "C" extern u8 g_meter2_info[248];
extern "C" extern u8 mAudioMgrPtr__10Z2AudioMgr[4 + 4 /* padding */];

//
// Declarations:
//

/* ############################################################################################## */
/* 8039A3D8-8039A488 00AC+04 s=7 e=0 z=0  None .rodata    @stringBase0 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char const* const stringBase_8039A3D8 = "Timer";
SECTION_DEAD char const* const stringBase_8039A3DE = "zelda_game_image_cow_get_in.blo";
SECTION_DEAD char const* const stringBase_8039A3FE = "zelda_game_image_cow_get_in.bck";
SECTION_DEAD char const* const stringBase_8039A41E = "zelda_game_image_cow_game.blo";
SECTION_DEAD char const* const stringBase_8039A43C = "zelda_game_image_zora_kawakudari.blo";
SECTION_DEAD char const* const stringBase_8039A461 = "zelda_game_image_rider.blo";
SECTION_DEAD char const* const stringBase_8039A47C = "F_SP115";
/* @stringBase0 padding */
SECTION_DEAD static char const* const pad_8039A484 = "\0\0\0";
#pragma pop

/* 80454F40-80454F44 0004+00 s=10 e=0 z=0  None .sdata2    @3919 */
SECTION_SDATA2 static u8 lit_3919[4] = {
    0x00,
    0x00,
    0x00,
    0x00,
};

/* 80454F44-80454F48 0004+00 s=2 e=0 z=0  None .sdata2    @3920 */
SECTION_SDATA2 static f32 lit_3920 = 145.0f;

/* 8025CA0C-8025CF04 04F8+00 s=1 e=0 z=0  None .text      _create__8dTimer_cFv */
//	8025CA1C: 803621D8 (_savegpr_28)
//	8025CA28: 8039A3D8 (d_d_timer__stringBase0)
//	8025CA2C: 8039A3D8 (d_d_timer__stringBase0)
//	8025CA30: 8002CEBC (dComIfG_resLoad__FP30request_of_phase_process_classPCc)
//	8025CA40: 8001FA44 (fopMsgM_GetAppend__FPv)
//	8025CA54: 8039A3D8 (d_d_timer__stringBase0)
//	8025CA58: 8039A3D8 (d_d_timer__stringBase0)
//	8025CA5C: 804061C0 (g_dComIfG_gameInfo)
//	8025CA60: 804061C0 (g_dComIfG_gameInfo)
//	8025CA70: 8003C1E4 (getResInfo__14dRes_control_cFPCcP11dRes_info_ci)
//	8025CA7C: 804061C0 (g_dComIfG_gameInfo)
//	8025CA80: 804061C0 (g_dComIfG_gameInfo)
//	8025CA94: 8002039C (fopMsgM_createExpHeap__FUlP7JKRHeap)
//	8025CAA0: 8000F1CC (mDoExt_setCurrentHeap__FP7JKRHeap)
//	8025CAB4: 802CE784 (getTotalFreeSize__7JKRHeapFv)
//	8025CABC: 802CEC4C (__nw__FUl)
//	8025CAC8: 8025DB38 (__ct__21dDlst_TimerScrnDraw_cFv)
//	8025CAE4: 804061C0 (g_dComIfG_gameInfo)
//	8025CAE8: 804061C0 (g_dComIfG_gameInfo)
//	8025CAF0: 8002CBBC (getTimerMode__14dComIfG_play_cFv)
//	8025CB00: 8025DFBC (setScreen__21dDlst_TimerScrnDraw_cFlP10JKRArchive)
//	8025CB10: 8025DFBC (setScreen__21dDlst_TimerScrnDraw_cFlP10JKRArchive)
//	8025CB18: 8000F1CC (mDoExt_setCurrentHeap__FP7JKRHeap)
//	8025CB34: 8025FAC4 (setShowType__21dDlst_TimerScrnDraw_cFUc)
//	8025CB44: 804061C0 (g_dComIfG_gameInfo)
//	8025CB48: 804061C0 (g_dComIfG_gameInfo)
//	8025CB54: 8002CBBC (getTimerMode__14dComIfG_play_cFv)
//	8025CB60: 8002CBAC (getTimerLimitTimeMs__14dComIfG_play_cFv)
//	8025CBA0: 80032804 (getTime__11dLib_time_cFv)
//	8025CBB8: 8002CB9C (getTimerNowTimeMs__14dComIfG_play_cFv)
//	8025CC10: 8002CBBC (getTimerMode__14dComIfG_play_cFv)
//	8025CC1C: 8025D9F0 (getTimeMs__8dTimer_cFv)
//	8025CC28: 8002CB94 (setTimerNowTimeMs__14dComIfG_play_cFi)
//	8025CC30: 8025DA54 (getLimitTimeMs__8dTimer_cFv)
//	8025CC3C: 8002CBA4 (setTimerLimitTimeMs__14dComIfG_play_cFi)
//	8025CC48: 8002CBB4 (setTimerMode__14dComIfG_play_cFi)
//	8025CC54: 8002CBD4 (setTimerPtr__14dComIfG_play_cFP8dTimer_c)
//	8025CC60: 8025D7C0 (stock_start__8dTimer_cFs)
//	8025CC94: 80454F40 (lit_3919)
//	8025CC9C: 80454F44 (lit_3920)
//	8025CCAC: 80454F40 (lit_3919)
//	8025CCB4: 80454F44 (lit_3920)
//	8025CCC4: 80454F40 (lit_3919)
//	8025CCCC: 80454F44 (lit_3920)
//	8025CCDC: 80454F40 (lit_3919)
//	8025CCE4: 80454F44 (lit_3920)
//	8025CD48: 8025D9F0 (getTimeMs__8dTimer_cFv)
//	8025CD50: 804061C0 (g_dComIfG_gameInfo)
//	8025CD54: 804061C0 (g_dComIfG_gameInfo)
//	8025CD60: 8002CB94 (setTimerNowTimeMs__14dComIfG_play_cFi)
//	8025CD68: 8025DA54 (getLimitTimeMs__8dTimer_cFv)
//	8025CD74: 8002CBA4 (setTimerLimitTimeMs__14dComIfG_play_cFi)
//	8025CD80: 8002CBB4 (setTimerMode__14dComIfG_play_cFi)
//	8025CD8C: 8002CBD4 (setTimerPtr__14dComIfG_play_cFP8dTimer_c)
//	8025CDB8: 8025EB20 (hideDenominator__21dDlst_TimerScrnDraw_cFv)
//	8025CDE0: 8025EB20 (hideDenominator__21dDlst_TimerScrnDraw_cFv)
//	8025CE0C: 8042EBC8 (g_drawHIO)
//	8025CE10: 8042EBC8 (g_drawHIO)
//	8025CE18: 80454F40 (lit_3919)
//	8025CE24: 8025FA6C (setCounterPos__21dDlst_TimerScrnDraw_cFff)
//	8025CE34: 8042EBC8 (g_drawHIO)
//	8025CE38: 8042EBC8 (g_drawHIO)
//	8025CE44: 80454F40 (lit_3919)
//	8025CE50: 8025FA6C (setCounterPos__21dDlst_TimerScrnDraw_cFff)
//	8025CE60: 8042EBC8 (g_drawHIO)
//	8025CE64: 8042EBC8 (g_drawHIO)
//	8025CE70: 80454F40 (lit_3919)
//	8025CE7C: 8025FA98 (setImagePos__21dDlst_TimerScrnDraw_cFff)
//	8025CE8C: 8042EBC8 (g_drawHIO)
//	8025CE90: 8042EBC8 (g_drawHIO)
//	8025CEA0: 8025FA2C (setTimerPos__21dDlst_TimerScrnDraw_cFff)
//	8025CEF0: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_c::_create() {
    nofralloc
#include "asm/d/d_timer/_create__8dTimer_cFv.s"
}
#pragma pop

/* ############################################################################################## */
/* 80454F48-80454F4C 0004+00 s=3 e=0 z=0  None .sdata2    @4050 */
SECTION_SDATA2 static f32 lit_4050 = 25.0f;

/* 8025CF04-8025D33C 0438+00 s=1 e=0 z=0  None .text      _execute__8dTimer_cFv */
//	8025CF28: 804061C0 (g_dComIfG_gameInfo)
//	8025CF2C: 804061C0 (g_dComIfG_gameInfo)
//	8025CF3C: 8001FA4C (fopMsgM_Delete__FPv)
//	8025CF4C: 804061C0 (g_dComIfG_gameInfo)
//	8025CF50: 804061C0 (g_dComIfG_gameInfo)
//	8025CF60: 8023822C (getStatus__12dMsgObject_cFv)
//	8025CF84: 8025D7E8 (stop__8dTimer_cFUc)
//	8025CF8C: 8025DA9C (getRestTimeMs__8dTimer_cFv)
//	8025D00C: 8025D708 (stock_start__8dTimer_cFv)
//	8025D01C: 8025D538 (start__8dTimer_cFi)
//	8025D050: 80260AA8 (checkStartAnimeEnd__21dDlst_TimerScrnDraw_cFv)
//	8025D068: 80032804 (getTime__11dLib_time_cFv)
//	8025D078: 8025D9F0 (getTimeMs__8dTimer_cFv)
//	8025D080: 804061C0 (g_dComIfG_gameInfo)
//	8025D084: 804061C0 (g_dComIfG_gameInfo)
//	8025D090: 8002CB94 (setTimerNowTimeMs__14dComIfG_play_cFi)
//	8025D098: 8025DA54 (getLimitTimeMs__8dTimer_cFv)
//	8025D0A4: 8002CBA4 (setTimerLimitTimeMs__14dComIfG_play_cFi)
//	8025D0AC: 8025DA9C (getRestTimeMs__8dTimer_cFv)
//	8025D0E8: 8025D9F0 (getTimeMs__8dTimer_cFv)
//	8025D0F4: 8002CB94 (setTimerNowTimeMs__14dComIfG_play_cFi)
//	8025D124: 80454F44 (lit_3920)
//	8025D130: 80454F48 (lit_4050)
//	8025D144: 80454F40 (lit_3919)
//	8025D174: 804061C0 (g_dComIfG_gameInfo)
//	8025D178: 804061C0 (g_dComIfG_gameInfo)
//	8025D188: 8023822C (getStatus__12dMsgObject_cFv)
//	8025D1AC: 8025D86C (restart__8dTimer_cFUc)
//	8025D1E4: 8025D86C (restart__8dTimer_cFUc)
//	8025D1EC: 8042EBC8 (g_drawHIO)
//	8025D1F0: 8042EBC8 (g_drawHIO)
//	8025D220: 80260574 (createStart__21dDlst_TimerScrnDraw_cFUs)
//	8025D228: 8025DBE0 (setHIO__21dDlst_TimerScrnDraw_cFv)
//	8025D23C: 8025FF98 (closeAnime__21dDlst_TimerScrnDraw_cFv)
//	8025D24C: 8001FA4C (fopMsgM_Delete__FPv)
//	8025D298: 8025FB74 (anime__21dDlst_TimerScrnDraw_cFv)
//	8025D2E0: 8025D9F0 (getTimeMs__8dTimer_cFv)
//	8025D2EC: 8025EEF0 (setTimer__21dDlst_TimerScrnDraw_cFi)
//	8025D2F8: 8025DA9C (getRestTimeMs__8dTimer_cFv)
//	8025D304: 8025EEF0 (setTimer__21dDlst_TimerScrnDraw_cFi)
//	8025D30C: 80430188 (g_meter2_info)
//	8025D310: 80430188 (g_meter2_info)
//	8025D31C: 8025F180 (setCounter__21dDlst_TimerScrnDraw_cFUcUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_c::_execute() {
    nofralloc
#include "asm/d/d_timer/_execute__8dTimer_cFv.s"
}
#pragma pop

/* 8025D33C-8025D3BC 0080+00 s=1 e=0 z=0  None .text      _draw__8dTimer_cFv */
//	8025D350: 804061C0 (g_dComIfG_gameInfo)
//	8025D354: 804061C0 (g_dComIfG_gameInfo)
//	8025D364: 8023822C (getStatus__12dMsgObject_cFv)
//	8025D388: 804061C0 (g_dComIfG_gameInfo)
//	8025D38C: 804061C0 (g_dComIfG_gameInfo)
//	8025D3A0: 80056794 (set__12dDlst_list_cFRPP12dDlst_base_cRPP12dDlst_base_cP12dDlst_base_c)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_c::_draw() {
    nofralloc
#include "asm/d/d_timer/_draw__8dTimer_cFv.s"
}
#pragma pop

/* 8025D3BC-8025D524 0168+00 s=1 e=0 z=0  None .text      _delete__8dTimer_cFv */
//	8025D3E0: 8000F1CC (mDoExt_setCurrentHeap__FP7JKRHeap)
//	8025D3EC: 802CE784 (getTotalFreeSize__7JKRHeapFv)
//	8025D3F4: 8025EC5C (deleteScreen__21dDlst_TimerScrnDraw_cFv)
//	8025D424: 800203E0 (fopMsgM_destroyExpHeap__FP10JKRExpHeap)
//	8025D434: 8000F1CC (mDoExt_setCurrentHeap__FP7JKRHeap)
//	8025D464: 8025D9F0 (getTimeMs__8dTimer_cFv)
//	8025D46C: 804061C0 (g_dComIfG_gameInfo)
//	8025D470: 804061C0 (g_dComIfG_gameInfo)
//	8025D47C: 8002CB94 (setTimerNowTimeMs__14dComIfG_play_cFi)
//	8025D484: 8025DA54 (getLimitTimeMs__8dTimer_cFv)
//	8025D490: 8002CBA4 (setTimerLimitTimeMs__14dComIfG_play_cFi)
//	8025D49C: 8002CBB4 (setTimerMode__14dComIfG_play_cFi)
//	8025D4A4: 804061C0 (g_dComIfG_gameInfo)
//	8025D4A8: 804061C0 (g_dComIfG_gameInfo)
//	8025D4B8: 8002CB94 (setTimerNowTimeMs__14dComIfG_play_cFi)
//	8025D4C4: 8002CBA4 (setTimerLimitTimeMs__14dComIfG_play_cFi)
//	8025D4D0: 8002CBB4 (setTimerMode__14dComIfG_play_cFi)
//	8025D4D4: 804061C0 (g_dComIfG_gameInfo)
//	8025D4D8: 804061C0 (g_dComIfG_gameInfo)
//	8025D4E4: 8002CBD4 (setTimerPtr__14dComIfG_play_cFP8dTimer_c)
//	8025D4EC: 8039A3D8 (d_d_timer__stringBase0)
//	8025D4F0: 8039A3D8 (d_d_timer__stringBase0)
//	8025D4F4: 8002D008 (dComIfG_resDelete__FP30request_of_phase_process_classPCc)
//	8025D4FC: 804061C0 (g_dComIfG_gameInfo)
//	8025D500: 804061C0 (g_dComIfG_gameInfo)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_c::_delete() {
    nofralloc
#include "asm/d/d_timer/_delete__8dTimer_cFv.s"
}
#pragma pop

/* 8025D524-8025D538 0014+00 s=0 e=1 z=0  None .text      deleteCheck__8dTimer_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_c::deleteCheck() {
    nofralloc
#include "asm/d/d_timer/deleteCheck__8dTimer_cFv.s"
}
#pragma pop

/* 8025D538-8025D618 00E0+00 s=1 e=1 z=0  None .text      start__8dTimer_cFi */
//	8025D570: 80032804 (getTime__11dLib_time_cFv)
//	8025D5A8: 8025D7E8 (stop__8dTimer_cFUc)
//	8025D5BC: 80260574 (createStart__21dDlst_TimerScrnDraw_cFUs)
//	8025D5C0: 8042EBC8 (g_drawHIO)
//	8025D5C4: 8042EBC8 (g_drawHIO)
//	8025D5DC: 8042EBC8 (g_drawHIO)
//	8025D5E0: 8042EBC8 (g_drawHIO)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_c::start(int param_0) {
    nofralloc
#include "asm/d/d_timer/start__8dTimer_cFi.s"
}
#pragma pop

/* 8025D618-8025D708 00F0+00 s=0 e=1 z=0  None .text      start__8dTimer_cFis */
//	8025D65C: 80261188 (dTimer_createStart2D__FlUs)
//	8025D660: 8042EBC8 (g_drawHIO)
//	8025D664: 8042EBC8 (g_drawHIO)
//	8025D678: 80032804 (getTime__11dLib_time_cFv)
//	8025D694: 8025D7E8 (stop__8dTimer_cFUc)
//	8025D6E4: 8025D7E8 (stop__8dTimer_cFUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_c::start(int param_0, s16 param_1) {
    nofralloc
#include "asm/d/d_timer/start__8dTimer_cFis.s"
}
#pragma pop

/* 8025D708-8025D7C0 00B8+00 s=1 e=0 z=0  None .text      stock_start__8dTimer_cFv */
//	8025D730: 80032804 (getTime__11dLib_time_cFv)
//	8025D744: 804061C0 (g_dComIfG_gameInfo)
//	8025D748: 804061C0 (g_dComIfG_gameInfo)
//	8025D750: 8002CB9C (getTimerNowTimeMs__14dComIfG_play_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_c::stock_start() {
    nofralloc
#include "asm/d/d_timer/stock_start__8dTimer_cFv.s"
}
#pragma pop

/* 8025D7C0-8025D7E8 0028+00 s=1 e=0 z=0  None .text      stock_start__8dTimer_cFs */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_c::stock_start(s16 param_0) {
    nofralloc
#include "asm/d/d_timer/stock_start__8dTimer_cFs.s"
}
#pragma pop

/* 8025D7E8-8025D86C 0084+00 s=3 e=1 z=0  None .text      stop__8dTimer_cFUc */
//	8025D838: 80032804 (getTime__11dLib_time_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_c::stop(u8 param_0) {
    nofralloc
#include "asm/d/d_timer/stop__8dTimer_cFUc.s"
}
#pragma pop

/* 8025D86C-8025D920 00B4+00 s=1 e=1 z=0  None .text      restart__8dTimer_cFUc */
//	8025D8C0: 80032804 (getTime__11dLib_time_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_c::restart(u8 param_0) {
    nofralloc
#include "asm/d/d_timer/restart__8dTimer_cFUc.s"
}
#pragma pop

/* 8025D920-8025D9E0 00C0+00 s=0 e=1 z=0  None .text      end__8dTimer_cFi */
//	8025D950: 80032804 (getTime__11dLib_time_cFv)
//	8025D9A4: 80362324 (__div2i)
//	8025D9A8: 804061C0 (g_dComIfG_gameInfo)
//	8025D9AC: 804061C0 (g_dComIfG_gameInfo)
//	8025D9B4: 8002CB94 (setTimerNowTimeMs__14dComIfG_play_cFi)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_c::end(int param_0) {
    nofralloc
#include "asm/d/d_timer/end__8dTimer_cFi.s"
}
#pragma pop

/* 8025D9E0-8025D9F0 0010+00 s=0 e=1 z=0  None .text      deleteRequest__8dTimer_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_c::deleteRequest() {
    nofralloc
#include "asm/d/d_timer/deleteRequest__8dTimer_cFv.s"
}
#pragma pop

/* 8025D9F0-8025DA54 0064+00 s=3 e=0 z=0  None .text      getTimeMs__8dTimer_cFv */
//	8025DA3C: 80362324 (__div2i)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_c::getTimeMs() {
    nofralloc
#include "asm/d/d_timer/getTimeMs__8dTimer_cFv.s"
}
#pragma pop

/* 8025DA54-8025DA9C 0048+00 s=3 e=0 z=0  None .text      getLimitTimeMs__8dTimer_cFv */
//	8025DA84: 80362324 (__div2i)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_c::getLimitTimeMs() {
    nofralloc
#include "asm/d/d_timer/getLimitTimeMs__8dTimer_cFv.s"
}
#pragma pop

/* 8025DA9C-8025DB10 0074+00 s=2 e=0 z=1  None .text      getRestTimeMs__8dTimer_cFv */
//	8025DAF8: 80362324 (__div2i)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_c::getRestTimeMs() {
    nofralloc
#include "asm/d/d_timer/getRestTimeMs__8dTimer_cFv.s"
}
#pragma pop

/* 8025DB10-8025DB38 0028+00 s=1 e=0 z=4  None .text      isStart__8dTimer_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_c::isStart() {
    nofralloc
#include "asm/d/d_timer/isStart__8dTimer_cFv.s"
}
#pragma pop

/* ############################################################################################## */
/* 803C33C0-803C33E4 0024+00 s=1 e=0 z=0  None .data      @5239 */
SECTION_DATA static void* lit_5239[9] = {
    (void*)(((char*)createGetIn__21dDlst_TimerScrnDraw_cF4cXyz) + 0x2B8),
    (void*)(((char*)createGetIn__21dDlst_TimerScrnDraw_cF4cXyz) + 0x250),
    (void*)(((char*)createGetIn__21dDlst_TimerScrnDraw_cF4cXyz) + 0x258),
    (void*)(((char*)createGetIn__21dDlst_TimerScrnDraw_cF4cXyz) + 0x260),
    (void*)(((char*)createGetIn__21dDlst_TimerScrnDraw_cF4cXyz) + 0x268),
    (void*)(((char*)createGetIn__21dDlst_TimerScrnDraw_cF4cXyz) + 0x274),
    (void*)(((char*)createGetIn__21dDlst_TimerScrnDraw_cF4cXyz) + 0x280),
    (void*)(((char*)createGetIn__21dDlst_TimerScrnDraw_cF4cXyz) + 0x288),
    (void*)(((char*)createGetIn__21dDlst_TimerScrnDraw_cF4cXyz) + 0x294),
};

/* 803C33E4-803C33F8 0014+00 s=1 e=0 z=0  None .data      l_dTimer_Method */
SECTION_DATA static void* l_dTimer_Method[5] = {
    (void*)dTimer_Create__FP9msg_class, (void*)dTimer_Delete__FP8dTimer_c,
    (void*)dTimer_Execute__FP8dTimer_c, (void*)dTimer_IsDelete__FP8dTimer_c,
    (void*)dTimer_Draw__FP8dTimer_c,
};

/* 803C33F8-803C3420 0028+00 s=0 e=0 z=1  None .data      g_profile_TIMER */
SECTION_DATA void* g_profile_TIMER[10] = {
    (void*)0xFFFFFFFD, (void*)0x000CFFFD,
    (void*)0x03150000, (void*)&g_fpcLf_Method,
    (void*)0x00000170, (void*)NULL,
    (void*)NULL,       (void*)&g_fopMsg_Method,
    (void*)0x03000000, (void*)&l_dTimer_Method,
};

/* 803C3420-803C3430 0010+00 s=2 e=0 z=0  None .data      __vt__21dDlst_TimerScrnDraw_c */
SECTION_DATA void* __vt__21dDlst_TimerScrnDraw_c[4] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)draw__21dDlst_TimerScrnDraw_cFv,
    (void*)__dt__21dDlst_TimerScrnDraw_cFv,
};

/* 8025DB38-8025DBE0 00A8+00 s=1 e=0 z=0  None .text      __ct__21dDlst_TimerScrnDraw_cFv */
//	8025DB38: 803A6F88 (__vt__12dDlst_base_c)
//	8025DB3C: 803A6F88 (__vt__12dDlst_base_c)
//	8025DB44: 803C3420 (__vt__21dDlst_TimerScrnDraw_c)
//	8025DB48: 803C3420 (__vt__21dDlst_TimerScrnDraw_c)
//	8025DB70: 8042EBC8 (g_drawHIO)
//	8025DB74: 8042EBC8 (g_drawHIO)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dDlst_TimerScrnDraw_c::dDlst_TimerScrnDraw_c() {
    nofralloc
#include "asm/d/d_timer/__ct__21dDlst_TimerScrnDraw_cFv.s"
}
#pragma pop

/* 8025DBE0-8025DFBC 03DC+00 s=1 e=0 z=0  None .text      setHIO__21dDlst_TimerScrnDraw_cFv */
//	8025DBF0: 803621DC (_savegpr_29)
//	8025DC10: 8042EBC8 (g_drawHIO)
//	8025DC14: 8042EBC8 (g_drawHIO)
//	8025DC24: 8025FA00 (setParentPos__21dDlst_TimerScrnDraw_cFff)
//	8025DC28: 8042EBC8 (g_drawHIO)
//	8025DC2C: 8042EBC8 (g_drawHIO)
//	8025DC7C: 8042EBC8 (g_drawHIO)
//	8025DC80: 8042EBC8 (g_drawHIO)
//	8025DCA8: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8025DCE8: 8042EBC8 (g_drawHIO)
//	8025DCEC: 8042EBC8 (g_drawHIO)
//	8025DCF8: 8025FA2C (setTimerPos__21dDlst_TimerScrnDraw_cFff)
//	8025DD0C: 8042EBC8 (g_drawHIO)
//	8025DD10: 8042EBC8 (g_drawHIO)
//	8025DD20: 8025FA2C (setTimerPos__21dDlst_TimerScrnDraw_cFff)
//	8025DD3C: 8042EBC8 (g_drawHIO)
//	8025DD40: 8042EBC8 (g_drawHIO)
//	8025DD70: 8042EBC8 (g_drawHIO)
//	8025DD74: 8042EBC8 (g_drawHIO)
//	8025DDBC: 8042EBC8 (g_drawHIO)
//	8025DDC0: 8042EBC8 (g_drawHIO)
//	8025DDF8: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8025DE24: 8042EBC8 (g_drawHIO)
//	8025DE28: 8042EBC8 (g_drawHIO)
//	8025DE38: 8025FA6C (setCounterPos__21dDlst_TimerScrnDraw_cFff)
//	8025DE3C: 8042EBC8 (g_drawHIO)
//	8025DE40: 8042EBC8 (g_drawHIO)
//	8025DE88: 8042EBC8 (g_drawHIO)
//	8025DE8C: 8042EBC8 (g_drawHIO)
//	8025DEC4: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8025DEF0: 8042EBC8 (g_drawHIO)
//	8025DEF4: 8042EBC8 (g_drawHIO)
//	8025DF04: 8025FA98 (setImagePos__21dDlst_TimerScrnDraw_cFff)
//	8025DF08: 8042EBC8 (g_drawHIO)
//	8025DF0C: 8042EBC8 (g_drawHIO)
//	8025DF54: 8042EBC8 (g_drawHIO)
//	8025DF58: 8042EBC8 (g_drawHIO)
//	8025DF90: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8025DFA8: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dDlst_TimerScrnDraw_c::setHIO() {
    nofralloc
#include "asm/d/d_timer/setHIO__21dDlst_TimerScrnDraw_cFv.s"
}
#pragma pop

/* 8025DFBC-8025E240 0284+00 s=1 e=0 z=0  None .text
 * setScreen__21dDlst_TimerScrnDraw_cFlP10JKRArchive            */
//	8025DFF4: 8025E66C (setScreenBoatRace__21dDlst_TimerScrnDraw_cFv)
//	8025E004: 8025E8B8 (setScreenRider__21dDlst_TimerScrnDraw_cFv)
//	8025E00C: 8025E240 (setScreenBase__21dDlst_TimerScrnDraw_cFv)
//	8025E018: 8025FAC4 (setShowType__21dDlst_TimerScrnDraw_cFUc)
//	8025E020: 802CEC4C (__nw__FUl)
//	8025E02C: 802F8498 (__ct__9J2DScreenFv)
//	8025E03C: 8039A3D8 (d_d_timer__stringBase0)
//	8025E040: 8039A3D8 (d_d_timer__stringBase0)
//	8025E050: 802F8648 (setPriority__9J2DScreenFPCcUlP10JKRArchive)
//	8025E058: 802550E8 (dPaneClass_showNullPane__FP9J2DScreen)
//	8025E08C: 8039A3D8 (d_d_timer__stringBase0)
//	8025E090: 8039A3D8 (d_d_timer__stringBase0)
//	8025E09C: 802D4270 (getGlbResource__13JKRFileLoaderFPCcP13JKRFileLoader)
//	8025E0A0: 80308A6C (load__20J2DAnmLoaderDataBaseFPCv)
//	8025E0AC: 802CEC4C (__nw__FUl)
//	8025E0D4: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	8025E0E4: 802CEC4C (__nw__FUl)
//	8025E108: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	8025E118: 802CEC4C (__nw__FUl)
//	8025E13C: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	8025E148: 800149F0 (mDoExt_getMesgFont__Fv)
//	8025E188: 800149F0 (mDoExt_getMesgFont__Fv)
//	8025E1C8: 80454F40 (lit_3919)
//	8025E214: 80454F40 (lit_3919)
//	8025E218: 80260AD4 (playBckAnimation__21dDlst_TimerScrnDraw_cFf)
//	8025E21C: 80454F40 (lit_3919)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dDlst_TimerScrnDraw_c::setScreen(s32 param_0, JKRArchive* param_1) {
    nofralloc
#include "asm/d/d_timer/setScreen__21dDlst_TimerScrnDraw_cFlP10JKRArchive.s"
}
#pragma pop

/* 8025E240-8025E66C 042C+00 s=1 e=0 z=0  None .text      setScreenBase__21dDlst_TimerScrnDraw_cFv
 */
//	8025E258: 802CEC4C (__nw__FUl)
//	8025E264: 802F8498 (__ct__9J2DScreenFv)
//	8025E274: 8039A3D8 (d_d_timer__stringBase0)
//	8025E278: 8039A3D8 (d_d_timer__stringBase0)
//	8025E288: 802F8648 (setPriority__9J2DScreenFPCcUlP10JKRArchive)
//	8025E290: 802550E8 (dPaneClass_showNullPane__FP9J2DScreen)
//	8025E2A0: 802CEC4C (__nw__FUl)
//	8025E2C4: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	8025E2D4: 80454F40 (lit_3919)
//	8025E2D8: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8025E2E0: 802CEC4C (__nw__FUl)
//	8025E304: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	8025E314: 80454F40 (lit_3919)
//	8025E318: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8025E320: 802CEC4C (__nw__FUl)
//	8025E348: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	8025E358: 80454F40 (lit_3919)
//	8025E35C: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dDlst_TimerScrnDraw_c::setScreenBase() {
    nofralloc
#include "asm/d/d_timer/setScreenBase__21dDlst_TimerScrnDraw_cFv.s"
}
#pragma pop

/* 8025E66C-8025E8B8 024C+00 s=1 e=0 z=0  None .text setScreenBoatRace__21dDlst_TimerScrnDraw_cFv
 */
//	8025E684: 802CEC4C (__nw__FUl)
//	8025E690: 802F8498 (__ct__9J2DScreenFv)
//	8025E6A0: 8039A3D8 (d_d_timer__stringBase0)
//	8025E6A4: 8039A3D8 (d_d_timer__stringBase0)
//	8025E6B4: 802F8648 (setPriority__9J2DScreenFPCcUlP10JKRArchive)
//	8025E6BC: 802550E8 (dPaneClass_showNullPane__FP9J2DScreen)
//	8025E6C4: 802CEC4C (__nw__FUl)
//	8025E6EC: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	8025E6FC: 802CEC4C (__nw__FUl)
//	8025E720: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	8025E730: 80454F40 (lit_3919)
//	8025E734: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8025E744: 802CEC4C (__nw__FUl)
//	8025E76C: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	8025E77C: 80454F40 (lit_3919)
//	8025E780: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dDlst_TimerScrnDraw_c::setScreenBoatRace() {
    nofralloc
#include "asm/d/d_timer/setScreenBoatRace__21dDlst_TimerScrnDraw_cFv.s"
}
#pragma pop

/* 8025E8B8-8025EB20 0268+00 s=1 e=0 z=0  None .text      setScreenRider__21dDlst_TimerScrnDraw_cFv
 */
//	8025E8D0: 802CEC4C (__nw__FUl)
//	8025E8DC: 802F8498 (__ct__9J2DScreenFv)
//	8025E8EC: 8039A3D8 (d_d_timer__stringBase0)
//	8025E8F0: 8039A3D8 (d_d_timer__stringBase0)
//	8025E900: 802F8648 (setPriority__9J2DScreenFPCcUlP10JKRArchive)
//	8025E908: 802550E8 (dPaneClass_showNullPane__FP9J2DScreen)
//	8025E918: 802CEC4C (__nw__FUl)
//	8025E93C: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	8025E94C: 80454F40 (lit_3919)
//	8025E950: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8025E960: 802CEC4C (__nw__FUl)
//	8025E988: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	8025E998: 80454F40 (lit_3919)
//	8025E99C: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dDlst_TimerScrnDraw_c::setScreenRider() {
    nofralloc
#include "asm/d/d_timer/setScreenRider__21dDlst_TimerScrnDraw_cFv.s"
}
#pragma pop

/* 8025EB20-8025EC5C 013C+00 s=1 e=0 z=0  None .text      hideDenominator__21dDlst_TimerScrnDraw_cFv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dDlst_TimerScrnDraw_c::hideDenominator() {
    nofralloc
#include "asm/d/d_timer/hideDenominator__21dDlst_TimerScrnDraw_cFv.s"
}
#pragma pop

/* 8025EC5C-8025EE24 01C8+00 s=1 e=0 z=0  None .text      deleteScreen__21dDlst_TimerScrnDraw_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dDlst_TimerScrnDraw_c::deleteScreen() {
    nofralloc
#include "asm/d/d_timer/deleteScreen__21dDlst_TimerScrnDraw_cFv.s"
}
#pragma pop

/* 8025EE24-8025EECC 00A8+00 s=2 e=0 z=0  None .text
 * changeNumberTexture__21dDlst_TimerScrnDraw_cFP7J2DPanei      */
//	8025EE34: 803621D8 (_savegpr_28)
//	8025EE54: 804061C0 (g_dComIfG_gameInfo)
//	8025EE58: 804061C0 (g_dComIfG_gameInfo)
//	8025EE68: 8025EECC (getNumber__21dDlst_TimerScrnDraw_cFi)
//	8025EE94: 8025EECC (getNumber__21dDlst_TimerScrnDraw_cFi)
//	8025EEB8: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dDlst_TimerScrnDraw_c::changeNumberTexture(J2DPane* param_0, int param_1) {
    nofralloc
#include "asm/d/d_timer/changeNumberTexture__21dDlst_TimerScrnDraw_cFP7J2DPanei.s"
}
#pragma pop

/* 8025EECC-8025EEF0 0024+00 s=1 e=0 z=0  None .text      getNumber__21dDlst_TimerScrnDraw_cFi */
//	8025EEDC: 8021E2C8 (dMeter2Info_getNumberTextureName__Fi)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dDlst_TimerScrnDraw_c::getNumber(int param_0) {
    nofralloc
#include "asm/d/d_timer/getNumber__21dDlst_TimerScrnDraw_cFi.s"
}
#pragma pop

/* ############################################################################################## */
/* 80454F4C-80454F50 0004+00 s=5 e=0 z=0  None .sdata2    @4124 */
SECTION_SDATA2 static f32 lit_4124 = 1.0f;

/* 80454F50-80454F58 0004+04 s=3 e=0 z=0  None .sdata2    @4125 */
SECTION_SDATA2 static f32 lit_4125[1 + 1 /* padding */] = {
    -1.0f,
    /* padding */
    0.0f,
};

/* 80454F58-80454F60 0008+00 s=7 e=0 z=0  None .sdata2    @4627 */
SECTION_SDATA2 static f64 lit_4627 = 4503601774854144.0 /* cast s32 to float */;

/* 8025EEF0-8025F180 0290+00 s=1 e=0 z=0  None .text      setTimer__21dDlst_TimerScrnDraw_cFi */
//	8025EF00: 803621C0 (_savegpr_22)
//	8025EF08: 80430188 (g_meter2_info)
//	8025EF0C: 80430188 (g_meter2_info)
//	8025EF98: 8025EE24 (changeNumberTexture__21dDlst_TimerScrnDraw_cFP7J2DPanei)
//	8025EFB0: 8025EE24 (changeNumberTexture__21dDlst_TimerScrnDraw_cFP7J2DPanei)
//	8025EFC8: 8025EE24 (changeNumberTexture__21dDlst_TimerScrnDraw_cFP7J2DPanei)
//	8025EFE0: 8025EE24 (changeNumberTexture__21dDlst_TimerScrnDraw_cFP7J2DPanei)
//	8025EFF8: 8025EE24 (changeNumberTexture__21dDlst_TimerScrnDraw_cFP7J2DPanei)
//	8025F010: 8025EE24 (changeNumberTexture__21dDlst_TimerScrnDraw_cFP7J2DPanei)
//	8025F030: 804061C0 (g_dComIfG_gameInfo)
//	8025F034: 804061C0 (g_dComIfG_gameInfo)
//	8025F078: 80454F58 (lit_4627)
//	8025F0A8: 80454F48 (lit_4050)
//	8025F0B4: 8042EBC8 (g_drawHIO)
//	8025F0B8: 8042EBC8 (g_drawHIO)
//	8025F0D4: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8025F100: 80454F58 (lit_4627)
//	8025F130: 80454F48 (lit_4050)
//	8025F13C: 8042EBC8 (g_drawHIO)
//	8025F140: 8042EBC8 (g_drawHIO)
//	8025F15C: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8025F16C: 8036220C (_restgpr_22)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dDlst_TimerScrnDraw_c::setTimer(int param_0) {
    nofralloc
#include "asm/d/d_timer/setTimer__21dDlst_TimerScrnDraw_cFi.s"
}
#pragma pop

/* 8025F180-8025FA00 0880+00 s=1 e=0 z=0  None .text      setCounter__21dDlst_TimerScrnDraw_cFUcUc
 */
//	8025F190: 803621C8 (_savegpr_24)
//	8025F298: 8025EE24 (changeNumberTexture__21dDlst_TimerScrnDraw_cFP7J2DPanei)
//	8025F4A0: 8025EE24 (changeNumberTexture__21dDlst_TimerScrnDraw_cFP7J2DPanei)
//	8025F73C: 8025EE24 (changeNumberTexture__21dDlst_TimerScrnDraw_cFP7J2DPanei)
//	8025F754: 8025EE24 (changeNumberTexture__21dDlst_TimerScrnDraw_cFP7J2DPanei)
//	8025F768: 804061C0 (g_dComIfG_gameInfo)
//	8025F76C: 804061C0 (g_dComIfG_gameInfo)
//	8025F7B0: 80454F4C (lit_4124)
//	8025F7BC: 80454F58 (lit_4627)
//	8025F7EC: 80454F48 (lit_4050)
//	8025F7F8: 8042EBC8 (g_drawHIO)
//	8025F7FC: 8042EBC8 (g_drawHIO)
//	8025F818: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8025F844: 80454F4C (lit_4124)
//	8025F850: 80454F58 (lit_4627)
//	8025F880: 80454F48 (lit_4050)
//	8025F88C: 8042EBC8 (g_drawHIO)
//	8025F890: 8042EBC8 (g_drawHIO)
//	8025F8AC: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8025F8DC: 80454F4C (lit_4124)
//	8025F8E8: 80454F58 (lit_4627)
//	8025F918: 80454F48 (lit_4050)
//	8025F924: 8042EBC8 (g_drawHIO)
//	8025F928: 8042EBC8 (g_drawHIO)
//	8025F944: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8025F970: 80454F4C (lit_4124)
//	8025F97C: 80454F58 (lit_4627)
//	8025F9AC: 80454F48 (lit_4050)
//	8025F9B8: 8042EBC8 (g_drawHIO)
//	8025F9BC: 8042EBC8 (g_drawHIO)
//	8025F9D8: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8025F9EC: 80362214 (_restgpr_24)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dDlst_TimerScrnDraw_c::setCounter(u8 param_0, u8 param_1) {
    nofralloc
#include "asm/d/d_timer/setCounter__21dDlst_TimerScrnDraw_cFUcUc.s"
}
#pragma pop

/* 8025FA00-8025FA2C 002C+00 s=1 e=0 z=0  None .text      setParentPos__21dDlst_TimerScrnDraw_cFff
 */
//	8025FA18: 802545B0 (paneTrans__8CPaneMgrFff)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dDlst_TimerScrnDraw_c::setParentPos(f32 param_0, f32 param_1) {
    nofralloc
#include "asm/d/d_timer/setParentPos__21dDlst_TimerScrnDraw_cFff.s"
}
#pragma pop

/* 8025FA2C-8025FA6C 0040+00 s=4 e=0 z=0  None .text      setTimerPos__21dDlst_TimerScrnDraw_cFff */
//	8025FA58: 802545B0 (paneTrans__8CPaneMgrFff)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dDlst_TimerScrnDraw_c::setTimerPos(f32 param_0, f32 param_1) {
    nofralloc
#include "asm/d/d_timer/setTimerPos__21dDlst_TimerScrnDraw_cFff.s"
}
#pragma pop

/* 8025FA6C-8025FA98 002C+00 s=4 e=0 z=0  None .text      setCounterPos__21dDlst_TimerScrnDraw_cFff
 */
//	8025FA84: 802545B0 (paneTrans__8CPaneMgrFff)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dDlst_TimerScrnDraw_c::setCounterPos(f32 param_0, f32 param_1) {
    nofralloc
#include "asm/d/d_timer/setCounterPos__21dDlst_TimerScrnDraw_cFff.s"
}
#pragma pop

/* 8025FA98-8025FAC4 002C+00 s=4 e=0 z=0  None .text      setImagePos__21dDlst_TimerScrnDraw_cFff */
//	8025FAB0: 802545B0 (paneTrans__8CPaneMgrFff)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dDlst_TimerScrnDraw_c::setImagePos(f32 param_0, f32 param_1) {
    nofralloc
#include "asm/d/d_timer/setImagePos__21dDlst_TimerScrnDraw_cFff.s"
}
#pragma pop

/* 8025FAC4-8025FB74 00B0+00 s=2 e=0 z=0  None .text      setShowType__21dDlst_TimerScrnDraw_cFUc */
//	8025FAE0: 804061C0 (g_dComIfG_gameInfo)
//	8025FAE4: 804061C0 (g_dComIfG_gameInfo)
//	8025FAEC: 8002CBC4 (setTimerType__14dComIfG_play_cFUc)
//	8025FB04: 802555C8 (show__13CPaneMgrAlphaFv)
//	8025FB0C: 80255608 (hide__13CPaneMgrAlphaFv)
//	8025FB24: 802555C8 (show__13CPaneMgrAlphaFv)
//	8025FB34: 802555C8 (show__13CPaneMgrAlphaFv)
//	8025FB48: 80255608 (hide__13CPaneMgrAlphaFv)
//	8025FB58: 80255608 (hide__13CPaneMgrAlphaFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dDlst_TimerScrnDraw_c::setShowType(u8 param_0) {
    nofralloc
#include "asm/d/d_timer/setShowType__21dDlst_TimerScrnDraw_cFUc.s"
}
#pragma pop

/* ############################################################################################## */
/* 80454F60-80454F68 0006+02 s=1 e=0 z=0  None .sdata2    animeFrame$5017 */
SECTION_SDATA2 static u8 animeFrame[6 + 2 /* padding */] = {
    0x00,
    0x07,
    0x00,
    0x0F,
    0x00,
    0x16,
    /* padding */
    0x00,
    0x00,
};

/* 80454F68-80454F6C 0004+00 s=3 e=0 z=0  None .sdata2    @5094 */
SECTION_SDATA2 static f32 lit_5094 = -50.0f;

/* 8025FB74-8025FF98 0424+00 s=1 e=0 z=0  None .text      anime__21dDlst_TimerScrnDraw_cFv */
//	8025FB94: 803621DC (_savegpr_29)
//	8025FBAC: 80454F60 (animeFrame)
//	8025FBD4: 80454F60 (animeFrame)
//	8025FBE8: 80454F58 (lit_4627)
//	8025FC44: 80454F68 (lit_5094)
//	8025FC48: 80454F4C (lit_4124)
//	8025FC7C: 8042EBC8 (g_drawHIO)
//	8025FC80: 8042EBC8 (g_drawHIO)
//	8025FC90: 8025FA2C (setTimerPos__21dDlst_TimerScrnDraw_cFff)
//	8025FCA4: 8042EBC8 (g_drawHIO)
//	8025FCA8: 8042EBC8 (g_drawHIO)
//	8025FCBC: 8025FA2C (setTimerPos__21dDlst_TimerScrnDraw_cFff)
//	8025FCC8: 8042EBC8 (g_drawHIO)
//	8025FCCC: 8042EBC8 (g_drawHIO)
//	8025FCE8: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8025FD04: 8042EBC8 (g_drawHIO)
//	8025FD08: 8042EBC8 (g_drawHIO)
//	8025FD38: 8042EBC8 (g_drawHIO)
//	8025FD3C: 8042EBC8 (g_drawHIO)
//	8025FD90: 80454F60 (animeFrame)
//	8025FDB4: 80454F58 (lit_4627)
//	8025FE10: 80454F68 (lit_5094)
//	8025FE14: 80454F4C (lit_4124)
//	8025FE38: 8042EBC8 (g_drawHIO)
//	8025FE3C: 8042EBC8 (g_drawHIO)
//	8025FE50: 8025FA6C (setCounterPos__21dDlst_TimerScrnDraw_cFff)
//	8025FE5C: 8042EBC8 (g_drawHIO)
//	8025FE60: 8042EBC8 (g_drawHIO)
//	8025FE7C: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8025FE80: 8042EBC8 (g_drawHIO)
//	8025FE84: 8042EBC8 (g_drawHIO)
//	8025FED4: 8042EBC8 (g_drawHIO)
//	8025FED8: 8042EBC8 (g_drawHIO)
//	8025FEEC: 8025FA98 (setImagePos__21dDlst_TimerScrnDraw_cFff)
//	8025FEF8: 8042EBC8 (g_drawHIO)
//	8025FEFC: 8042EBC8 (g_drawHIO)
//	8025FF18: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8025FF1C: 8042EBC8 (g_drawHIO)
//	8025FF20: 8042EBC8 (g_drawHIO)
//	8025FF84: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dDlst_TimerScrnDraw_c::anime() {
    nofralloc
#include "asm/d/d_timer/anime__21dDlst_TimerScrnDraw_cFv.s"
}
#pragma pop

/* ############################################################################################## */
/* 80454F6C-80454F70 0004+00 s=1 e=0 z=0  None .sdata2    @5143 */
SECTION_SDATA2 static f32 lit_5143 = 49.0f;

/* 8025FF98-802601E4 024C+00 s=1 e=0 z=0  None .text      closeAnime__21dDlst_TimerScrnDraw_cFv */
//	8025FFE0: 80454F58 (lit_4627)
//	80260010: 80454F6C (lit_5143)
//	8026004C: 80454F68 (lit_5094)
//	80260078: 8042EBC8 (g_drawHIO)
//	8026007C: 8042EBC8 (g_drawHIO)
//	8026008C: 8025FA2C (setTimerPos__21dDlst_TimerScrnDraw_cFff)
//	802600A0: 8042EBC8 (g_drawHIO)
//	802600A4: 8042EBC8 (g_drawHIO)
//	802600B8: 8025FA2C (setTimerPos__21dDlst_TimerScrnDraw_cFff)
//	802600C4: 8042EBC8 (g_drawHIO)
//	802600C8: 8042EBC8 (g_drawHIO)
//	802600E4: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80260100: 8042EBC8 (g_drawHIO)
//	80260104: 8042EBC8 (g_drawHIO)
//	80260118: 8025FA6C (setCounterPos__21dDlst_TimerScrnDraw_cFff)
//	80260124: 8042EBC8 (g_drawHIO)
//	80260128: 8042EBC8 (g_drawHIO)
//	80260144: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80260160: 8042EBC8 (g_drawHIO)
//	80260164: 8042EBC8 (g_drawHIO)
//	80260178: 8025FA98 (setImagePos__21dDlst_TimerScrnDraw_cFff)
//	80260184: 8042EBC8 (g_drawHIO)
//	80260188: 8042EBC8 (g_drawHIO)
//	802601A4: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dDlst_TimerScrnDraw_c::closeAnime() {
    nofralloc
#include "asm/d/d_timer/closeAnime__21dDlst_TimerScrnDraw_cFv.s"
}
#pragma pop

/* ############################################################################################## */
/* 80454F70-80454F74 0004+00 s=3 e=0 z=0  None .sdata2    @5227 */
SECTION_SDATA2 static f32 lit_5227 = 40.0f;

/* 80454F74-80454F78 0004+00 s=2 e=0 z=0  None .sdata2    @5228 */
SECTION_SDATA2 static f32 lit_5228 = 60.0f;

/* 80454F78-80454F7C 0004+00 s=1 e=0 z=0  None .sdata2    @5229 */
SECTION_SDATA2 static f32 lit_5229 = -100.0f;

/* 80454F7C-80454F80 0004+00 s=1 e=0 z=0  None .sdata2    @5230 */
SECTION_SDATA2 static f32 lit_5230 = 100.0f;

/* 80454F80-80454F84 0004+00 s=1 e=0 z=0  None .sdata2    @5231 */
SECTION_SDATA2 static f32 lit_5231 = 75.0f;

/* 80454F84-80454F88 0004+00 s=1 e=0 z=0  None .sdata2    @5232 */
SECTION_SDATA2 static f32 lit_5232 = -75.0f;

/* 80454F88-80454F8C 0004+00 s=1 e=0 z=0  None .sdata2    @5233 */
SECTION_SDATA2 static f32 lit_5233 = 200.0f;

/* 80454F8C-80454F90 0004+00 s=1 e=0 z=0  None .sdata2    @5234 */
SECTION_SDATA2 static f32 lit_5234 = 150.0f;

/* 80454F90-80454F94 0004+00 s=1 e=0 z=0  None .sdata2    @5235 */
SECTION_SDATA2 static f32 lit_5235 = 20.0f;

/* 802601E4-80260574 0390+00 s=2 e=0 z=0  None .text      createGetIn__21dDlst_TimerScrnDraw_cF4cXyz
 */
//	80260210: 80430188 (g_meter2_info)
//	80260214: 80430188 (g_meter2_info)
//	80260224: 8021C250 (getString__13dMeter2Info_cFUlPcP14JMSMesgEntry_c)
//	8026024C: 80300658 (getStringPtr__10J2DTextBoxCFv)
//	80260254: 80368B2C (strcpy)
//	80260278: 80300658 (getStringPtr__10J2DTextBoxCFv)
//	80260280: 80368B2C (strcpy)
//	80260290: 80454F70 (lit_5227)
//	802602A0: 80454F50 (lit_4125)
//	802602B4: 8042EBC8 (g_drawHIO)
//	802602B8: 8042EBC8 (g_drawHIO)
//	80260328: 8042EBC8 (g_drawHIO)
//	8026032C: 8042EBC8 (g_drawHIO)
//	80260334: 80454F58 (lit_4627)
//	80260350: 80454F74 (lit_5228)
//	8026037C: 80454F70 (lit_5227)
//	802603FC: 80454F40 (lit_3919)
//	8026041C: 803C33C0 (lit_5239)
//	80260420: 803C33C0 (lit_5239)
//	80260434: 80454F78 (lit_5229)
//	8026043C: 80454F7C (lit_5230)
//	80260444: 80454F80 (lit_5231)
//	8026044C: 80454F78 (lit_5229)
//	80260450: 80454F80 (lit_5231)
//	80260458: 80454F7C (lit_5230)
//	8026045C: 80454F80 (lit_5231)
//	80260464: 80454F68 (lit_5094)
//	8026046C: 80454F78 (lit_5229)
//	80260470: 80454F84 (lit_5232)
//	80260478: 80454F7C (lit_5230)
//	8026047C: 80454F84 (lit_5232)
//	80260484: 80454F88 (lit_5233)
//	80260488: 8026798C (cM_rndFX__Ff)
//	80260490: 80454F8C (lit_5234)
//	80260494: 8026798C (cM_rndFX__Ff)
//	8026049C: 80454F90 (lit_5235)
//	802604A0: 8026798C (cM_rndFX__Ff)
//	802604C4: 80454F90 (lit_5235)
//	802604C8: 8026798C (cM_rndFX__Ff)
//	80260508: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	8026051C: 80454F4C (lit_4124)
//	80260524: 80454F50 (lit_4125)
//	80260530: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dDlst_TimerScrnDraw_c::createGetIn(cXyz param_0) {
    nofralloc
#include "asm/d/d_timer/createGetIn__21dDlst_TimerScrnDraw_cF4cXyz.s"
}
#pragma pop

/* 80260574-80260690 011C+00 s=3 e=0 z=0  None .text      createStart__21dDlst_TimerScrnDraw_cFUs */
//	80260588: 80430188 (g_meter2_info)
//	8026058C: 80430188 (g_meter2_info)
//	8026059C: 8021C250 (getString__13dMeter2Info_cFUlPcP14JMSMesgEntry_c)
//	802605C4: 80300658 (getStringPtr__10J2DTextBoxCFv)
//	802605CC: 80368B2C (strcpy)
//	802605F0: 80300658 (getStringPtr__10J2DTextBoxCFv)
//	802605F8: 80368B2C (strcpy)
//	80260608: 80454F70 (lit_5227)
//	80260618: 80454F50 (lit_4125)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dDlst_TimerScrnDraw_c::createStart(u16 param_0) {
    nofralloc
#include "asm/d/d_timer/createStart__21dDlst_TimerScrnDraw_cFUs.s"
}
#pragma pop

/* ############################################################################################## */
/* 80454F94-80454F98 0004+00 s=1 e=0 z=0  None .sdata2    @5325 */
SECTION_SDATA2 static f32 lit_5325 = 3.0f / 20.0f;

/* 80454F98-80454F9C 0004+00 s=2 e=0 z=0  None .sdata2    @5326 */
SECTION_SDATA2 static f32 lit_5326 = 0.5f;

/* 80454F9C-80454FA0 0004+00 s=1 e=0 z=0  None .sdata2    @5327 */
SECTION_SDATA2 static f32 lit_5327 = 18.0f;

/* 80260690-80260AA8 0418+00 s=1 e=0 z=0  None .text      draw__21dDlst_TimerScrnDraw_cFv */
//	802606B8: 803621D0 (_savegpr_26)
//	802606C0: 804061C0 (g_dComIfG_gameInfo)
//	802606C4: 804061C0 (g_dComIfG_gameInfo)
//	802606E4: 80454F40 (lit_3919)
//	802606F0: 802F8ED4 (draw__9J2DScreenFffPC14J2DGrafContext)
//	802606F4: 8042EBC8 (g_drawHIO)
//	802606F8: 8042EBC8 (g_drawHIO)
//	80260700: 80454F58 (lit_4627)
//	8026071C: 80454F74 (lit_5228)
//	80260748: 80454F40 (lit_3919)
//	80260764: 80454F4C (lit_4124)
//	80260768: 80454F74 (lit_5228)
//	80260798: 80260AD4 (playBckAnimation__21dDlst_TimerScrnDraw_cFf)
//	802607A4: 80454F58 (lit_4627)
//	802607D8: 80260AD4 (playBckAnimation__21dDlst_TimerScrnDraw_cFf)
//	802607F4: 80260AD4 (playBckAnimation__21dDlst_TimerScrnDraw_cFf)
//	80260814: 80454F58 (lit_4627)
//	8026087C: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80260890: 80454F58 (lit_4627)
//	802608FC: 80454F70 (lit_5227)
//	80260904: 80454F94 (lit_5325)
//	80260908: 80454F98 (lit_5326)
//	80260920: 80454F40 (lit_3919)
//	8026092C: 80454F58 (lit_4627)
//	80260974: 802545B0 (paneTrans__8CPaneMgrFff)
//	802609A4: 80454F40 (lit_3919)
//	802609B0: 802F8ED4 (draw__9J2DScreenFffPC14J2DGrafContext)
//	802609B8: 80454F40 (lit_3919)
//	802609CC: 80260B54 (drawPikari__21dDlst_TimerScrnDraw_cFi)
//	802609D4: 80454F50 (lit_4125)
//	802609F4: 80454F58 (lit_4627)
//	80260A18: 80454F9C (lit_5327)
//	80260A34: 80454F58 (lit_4627)
//	80260A58: 80454F9C (lit_5327)
//	80260A94: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dDlst_TimerScrnDraw_c::draw() {
    nofralloc
#include "asm/d/d_timer/draw__21dDlst_TimerScrnDraw_cFv.s"
}
#pragma pop

/* 80260AA8-80260AD4 002C+00 s=1 e=0 z=0  None .text checkStartAnimeEnd__21dDlst_TimerScrnDraw_cFv
 */
//	80260AB4: 80454F40 (lit_3919)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dDlst_TimerScrnDraw_c::checkStartAnimeEnd() {
    nofralloc
#include "asm/d/d_timer/checkStartAnimeEnd__21dDlst_TimerScrnDraw_cFv.s"
}
#pragma pop

/* 80260AD4-80260B54 0080+00 s=2 e=0 z=0  None .text playBckAnimation__21dDlst_TimerScrnDraw_cFf
 */
//	80260B1C: 802F7FCC (animationTransform__7J2DPaneFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dDlst_TimerScrnDraw_c::playBckAnimation(f32 param_0) {
    nofralloc
#include "asm/d/d_timer/playBckAnimation__21dDlst_TimerScrnDraw_cFf.s"
}
#pragma pop

/* 80260B54-80260F04 03B0+00 s=1 e=0 z=0  None .text      drawPikari__21dDlst_TimerScrnDraw_cFi */
//	80260BA4: 803621BC (_savegpr_21)
//	80260BCC: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	80260BF0: 80300658 (getStringPtr__10J2DTextBoxCFv)
//	80260BFC: 80454F40 (lit_3919)
//	80260C10: 800149F0 (mDoExt_getMesgFont__Fv)
//	80260C18: 80454F4C (lit_4124)
//	80260C30: 802F7AFC (getParentPane__7J2DPaneFv)
//	80260C3C: 80454F58 (lit_4627)
//	80260CE8: 80454F98 (lit_5326)
//	80260CFC: 8042EBC8 (g_drawHIO)
//	80260D00: 8042EBC8 (g_drawHIO)
//	80260D04: 80430188 (g_meter2_info)
//	80260D08: 80430188 (g_meter2_info)
//	80260D10: 80454F58 (lit_4627)
//	80260DF0: 80454F98 (lit_5326)
//	80260E24: 802140DC
//(drawPikari__13dMeter2Draw_cFffPffQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorfUc)
//	80260E54: 80454F98 (lit_5326)
//	80260E88: 802140DC
//(drawPikari__13dMeter2Draw_cFffPffQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorfUc)
//	80260EF0: 80362208 (_restgpr_21)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dDlst_TimerScrnDraw_c::drawPikari(int param_0) {
    nofralloc
#include "asm/d/d_timer/drawPikari__21dDlst_TimerScrnDraw_cFi.s"
}
#pragma pop

/* 80260F04-80260F24 0020+00 s=1 e=0 z=0  None .text      dTimer_Draw__FP8dTimer_c */
//	80260F10: 8025D33C (_draw__8dTimer_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void dTimer_Draw(dTimer_c* param_0) {
    nofralloc
#include "asm/d/d_timer/dTimer_Draw__FP8dTimer_c.s"
}
#pragma pop

/* 80260F24-80260F44 0020+00 s=1 e=0 z=0  None .text      dTimer_Execute__FP8dTimer_c */
//	80260F30: 8025CF04 (_execute__8dTimer_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void dTimer_Execute(dTimer_c* param_0) {
    nofralloc
#include "asm/d/d_timer/dTimer_Execute__FP8dTimer_c.s"
}
#pragma pop

/* 80260F44-80260F4C 0008+00 s=1 e=0 z=0  None .text      dTimer_IsDelete__FP8dTimer_c */
static bool dTimer_IsDelete(dTimer_c* param_0) {
    return true;
}

/* 80260F4C-80260F6C 0020+00 s=1 e=0 z=0  None .text      dTimer_Delete__FP8dTimer_c */
//	80260F58: 8025D3BC (_delete__8dTimer_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void dTimer_Delete(dTimer_c* param_0) {
    nofralloc
#include "asm/d/d_timer/dTimer_Delete__FP8dTimer_c.s"
}
#pragma pop

/* 80260F6C-80260F8C 0020+00 s=1 e=0 z=0  None .text      dTimer_Create__FP9msg_class */
//	80260F78: 8025CA0C (_create__8dTimer_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void dTimer_Create(msg_class* param_0) {
    nofralloc
#include "asm/d/d_timer/dTimer_Create__FP9msg_class.s"
}
#pragma pop

/* 80260F8C-80261034 00A8+00 s=0 e=1 z=9  None .text      dTimer_createTimer__FlUlUcUcffff */
//	80260F9C: 80362140 (_savefpr_28)
//	80260FA4: 803621D8 (_savegpr_28)
//	80260FC8: 804061C0 (g_dComIfG_gameInfo)
//	80260FCC: 804061C0 (g_dComIfG_gameInfo)
//	80260FD4: 8002CBBC (getTimerMode__14dComIfG_play_cFv)
//	80261008: 8001FCC0 (fop_Timer_create__FsUcUlUcUcffffPFPv_i)
//	80261018: 8036218C (_restfpr_28)
//	80261020: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_createTimer(s32 param_0, u32 param_1, u8 param_2, u8 param_3, f32 param_4,
                            f32 param_5, f32 param_6, f32 param_7) {
    nofralloc
#include "asm/d/d_timer/dTimer_createTimer__FlUlUcUcffff.s"
}
#pragma pop

/* ############################################################################################## */
/* 80454FA0-80454FA4 0004+00 s=1 e=0 z=0  None .sdata2    @5544 */
SECTION_SDATA2 static f32 lit_5544 = 221.0f;

/* 80454FA4-80454FA8 0004+00 s=1 e=0 z=0  None .sdata2    @5545 */
SECTION_SDATA2 static f32 lit_5545 = 439.0f;

/* 80454FA8-80454FAC 0004+00 s=1 e=0 z=0  None .sdata2    @5546 */
SECTION_SDATA2 static f32 lit_5546 = 32.0f;

/* 80454FAC-80454FB0 0004+00 s=1 e=0 z=0  None .sdata2    @5547 */
SECTION_SDATA2 static f32 lit_5547 = 419.0f;

/* 80261034-80261100 00CC+00 s=0 e=1 z=0  None .text      dTimer_createStockTimer__Fv */
//	80261044: 804061C0 (g_dComIfG_gameInfo)
//	80261048: 804061C0 (g_dComIfG_gameInfo)
//	80261054: 8002CBBC (getTimerMode__14dComIfG_play_cFv)
//	80261064: 8002CBBC (getTimerMode__14dComIfG_play_cFv)
//	80261074: 8002CBBC (getTimerMode__14dComIfG_play_cFv)
//	80261084: 8039A3D8 (d_d_timer__stringBase0)
//	80261088: 8039A3D8 (d_d_timer__stringBase0)
//	80261090: 80368994 (strcmp)
//	802610A4: 8002CBB4 (setTimerMode__14dComIfG_play_cFi)
//	802610B4: 8002CBCC (getTimerType__14dComIfG_play_cFv)
//	802610CC: 80454FA0 (lit_5544)
//	802610D0: 80454FA4 (lit_5545)
//	802610D4: 80454FA8 (lit_5546)
//	802610D8: 80454FAC (lit_5547)
//	802610E0: 8001FCC0 (fop_Timer_create__FsUcUlUcUcffffPFPv_i)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_createStockTimer() {
    nofralloc
#include "asm/d/d_timer/dTimer_createStockTimer__Fv.s"
}
#pragma pop

/* 80261100-80261188 0088+00 s=0 e=0 z=1  None .text      dTimer_createGetIn2D__Fl4cXyz */
//	80261118: 804061C0 (g_dComIfG_gameInfo)
//	8026111C: 804061C0 (g_dComIfG_gameInfo)
//	80261128: 8002CBDC (getTimerPtr__14dComIfG_play_cFv)
//	8026113C: 80015310 (mDoLib_project__FP3VecP3Vec)
//	8026115C: 8002CBDC (getTimerPtr__14dComIfG_play_cFv)
//	80261164: 802613DC (createGetIn__8dTimer_cF4cXyz)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_createGetIn2D(s32 param_0, cXyz param_1) {
    nofralloc
#include "asm/d/d_timer/dTimer_createGetIn2D__Fl4cXyz.s"
}
#pragma pop

/* 80261188-802611F0 0068+00 s=1 e=0 z=0  None .text      dTimer_createStart2D__FlUs */
//	802611A0: 804061C0 (g_dComIfG_gameInfo)
//	802611A4: 804061C0 (g_dComIfG_gameInfo)
//	802611B0: 8002CBDC (getTimerPtr__14dComIfG_play_cFv)
//	802611C0: 8002CBDC (getTimerPtr__14dComIfG_play_cFv)
//	802611CC: 80260574 (createStart__21dDlst_TimerScrnDraw_cFUs)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void dTimer_createStart2D(s32 param_0, u16 param_1) {
    nofralloc
#include "asm/d/d_timer/dTimer_createStart2D__FlUs.s"
}
#pragma pop

/* 802611F0-80261244 0054+00 s=0 e=0 z=5  None .text      dTimer_isStart__Fv */
//	80261200: 804061C0 (g_dComIfG_gameInfo)
//	80261204: 804061C0 (g_dComIfG_gameInfo)
//	80261210: 8002CBDC (getTimerPtr__14dComIfG_play_cFv)
//	80261220: 8002CBDC (getTimerPtr__14dComIfG_play_cFv)
//	80261224: 8025DB10 (isStart__8dTimer_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_isStart() {
    nofralloc
#include "asm/d/d_timer/dTimer_isStart__Fv.s"
}
#pragma pop

/* 80261244-80261298 0054+00 s=0 e=0 z=2  None .text      dTimer_getRestTimeMs__Fv */
//	80261254: 804061C0 (g_dComIfG_gameInfo)
//	80261258: 804061C0 (g_dComIfG_gameInfo)
//	80261264: 8002CBDC (getTimerPtr__14dComIfG_play_cFv)
//	80261274: 8002CBDC (getTimerPtr__14dComIfG_play_cFv)
//	80261278: 8025DA9C (getRestTimeMs__8dTimer_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_getRestTimeMs() {
    nofralloc
#include "asm/d/d_timer/dTimer_getRestTimeMs__Fv.s"
}
#pragma pop

/* 80261298-802612EC 0054+00 s=0 e=0 z=2  None .text      dTimer_show__Fv */
//	802612A8: 804061C0 (g_dComIfG_gameInfo)
//	802612AC: 804061C0 (g_dComIfG_gameInfo)
//	802612B8: 8002CBDC (getTimerPtr__14dComIfG_play_cFv)
//	802612C8: 8002CBDC (getTimerPtr__14dComIfG_play_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_show() {
    nofralloc
#include "asm/d/d_timer/dTimer_show__Fv.s"
}
#pragma pop

/* 802612EC-80261340 0054+00 s=0 e=0 z=2  None .text      dTimer_hide__Fv */
//	802612FC: 804061C0 (g_dComIfG_gameInfo)
//	80261300: 804061C0 (g_dComIfG_gameInfo)
//	8026130C: 8002CBDC (getTimerPtr__14dComIfG_play_cFv)
//	8026131C: 8002CBDC (getTimerPtr__14dComIfG_play_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_hide() {
    nofralloc
#include "asm/d/d_timer/dTimer_hide__Fv.s"
}
#pragma pop

/* 80261340-80261394 0054+00 s=0 e=0 z=1  None .text      dTimer_isReadyFlag__Fv */
//	80261350: 804061C0 (g_dComIfG_gameInfo)
//	80261354: 804061C0 (g_dComIfG_gameInfo)
//	80261360: 8002CBDC (getTimerPtr__14dComIfG_play_cFv)
//	80261370: 8002CBDC (getTimerPtr__14dComIfG_play_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_isReadyFlag() {
    nofralloc
#include "asm/d/d_timer/dTimer_isReadyFlag__Fv.s"
}
#pragma pop

/* 80261394-802613DC 0048+00 s=1 e=0 z=0  None .text      __dt__21dDlst_TimerScrnDraw_cFv */
//	802613AC: 803C3420 (__vt__21dDlst_TimerScrnDraw_c)
//	802613B0: 803C3420 (__vt__21dDlst_TimerScrnDraw_c)
//	802613C0: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dDlst_TimerScrnDraw_c::~dDlst_TimerScrnDraw_c() {
    nofralloc
#include "asm/d/d_timer/__dt__21dDlst_TimerScrnDraw_cFv.s"
}
#pragma pop

/* 802613DC-8026141C 0040+00 s=1 e=0 z=0  None .text      createGetIn__8dTimer_cF4cXyz */
//	80261408: 802601E4 (createGetIn__21dDlst_TimerScrnDraw_cF4cXyz)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dTimer_c::createGetIn(cXyz param_0) {
    nofralloc
#include "asm/d/d_timer/createGetIn__8dTimer_cF4cXyz.s"
}
#pragma pop
