// 
// Generated By: dol2asm
// Translation Unit: d/cc/d_cc_d
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "d/cc/d_cc_d.h"

// 
// Types:
// 

struct fopAc_ac_c {
};

struct dCcD_SrcTri {
};

struct dCcD_Tri {
	/* 80084884 */ // False False
//  dCcD_SrcTri const& False
// 	 dCcD_SrcTri const False
// 		 dCcD_SrcTri False
void Set(dCcD_SrcTri const&);
	/* 800848A4 */ // True False
void GetShapeAttr();
	/* 80084EF4 */ // True False
~dCcD_Tri();
};

struct dCcD_Stts {
	/* 80083850 */ // True False
void GetGStts();
	/* 80083860 */ // False False
//  int False
//  int False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
void Init(int, int, fopAc_ac_c*);
	/* 800838F4 */ // True False
void Ct();
	/* 80083928 */ // True False
void ClrAt();
	/* 80083934 */ // True False
void ClrTg();
	/* 800851AC */ // True False
~dCcD_Stts();
};

struct dCcD_SrcSph {
};

struct dCcD_SrcGObjTg {
};

struct dCcD_SrcGObjInf {
};

struct dCcD_SrcGObjAt {
};

struct dCcD_SrcGAtTgCoCommonBase {
};

struct dCcD_SrcCyl {
};

struct dCcD_SrcCps {
};

struct Vec {
};

struct cXyz {
	/* 80266B34 */ // False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
void operator-(Vec const&) const;
};

struct dCcD_Sph {
	/* 80084A34 */ // False False
//  dCcD_SrcSph const& False
// 	 dCcD_SrcSph const False
// 		 dCcD_SrcSph False
void Set(dCcD_SrcSph const&);
	/* 80084A78 */ // False False
//  cXyz& False
// 	 cXyz False
void StartCAt(cXyz&);
	/* 80084AC4 */ // False False
//  cXyz& False
// 	 cXyz False
void MoveCAt(cXyz&);
	/* 80084B34 */ // True False
void GetShapeAttr();
	/* 80084BF4 */ // True False
~dCcD_Sph();
};

struct dCcD_GStts {
	/* 80083760 */ // False False
dCcD_GStts();
	/* 800837F8 */ // True False
void Ct();
	/* 80083830 */ // False False
void Move();
	/* 8008523C */ // True False
~dCcD_GStts();
};

struct dCcD_GObjTg {
	/* 800839A0 */ // True False
//  dCcD_SrcGObjTg const& False
// 	 dCcD_SrcGObjTg const False
// 		 dCcD_SrcGObjTg False
void Set(dCcD_SrcGObjTg const&);
	/* 80083BE8 */ // True False
~dCcD_GObjTg();
};

struct dCcD_GObjInf {
	/* 80083A28 */ // False False
dCcD_GObjInf();
	/* 800840E4 */ // False False
~dCcD_GObjInf();
	/* 80084268 */ // True False
//  void False
void GetGObjInf();
	/* 8008426C */ // True False
void ClrAtHit();
	/* 800842C0 */ // False False
void ChkAtHit();
	/* 80084318 */ // False False
void ResetAtHit();
	/* 80084358 */ // False False
void GetAtHitObj();
	/* 800843A8 */ // False False
void GetAtHitGObj();
	/* 800843DC */ // False False
void ChkAtNoGuard();
	/* 800843FC */ // True False
void ClrTgHit();
	/* 80084460 */ // False False
void ChkTgHit();
	/* 800844B8 */ // False False
void ResetTgHit();
	/* 800844F8 */ // False False
void GetTgHitObj();
	/* 80084548 */ // False False
void GetTgHitGObj();
	/* 8008457C */ // False False
void GetTgHitObjSe();
	/* 800845B0 */ // False False
//  u8 False
//  int False
void getHitSeID(u8, int);
	/* 8008460C */ // True False
void ClrCoHit();
	/* 80084658 */ // False False
void ChkCoHit();
	/* 800846B0 */ // False False
void ResetCoHit();
	/* 800846F0 */ // False False
void GetCoHitObj();
	/* 80084740 */ // True False
//  dCcD_SrcGObjInf const& False
// 	 dCcD_SrcGObjInf const False
// 		 dCcD_SrcGObjInf False
void Set(dCcD_SrcGObjInf const&);
};

struct dCcD_GObjCo {
	/* 80083B8C */ // True False
~dCcD_GObjCo();
};

struct dCcD_GObjAt {
	/* 80083944 */ // True False
//  dCcD_SrcGObjAt const& False
// 	 dCcD_SrcGObjAt const False
// 		 dCcD_SrcGObjAt False
void Set(dCcD_SrcGObjAt const&);
	/* 80083C44 */ // True False
~dCcD_GObjAt();
};

struct dCcD_GAtTgCoCommonBase {
	/* 8008364C */ // True False
void ClrActorInfo();
	/* 80083660 */ // True False
void ct();
	/* 80083678 */ // False False
//  unsigned int False
void SetHitApid(unsigned int);
	/* 80083688 */ // False False
void GetAc();
	/* 80083704 */ // True False
//  dCcD_SrcGAtTgCoCommonBase const& False
// 	 dCcD_SrcGAtTgCoCommonBase const False
// 		 dCcD_SrcGAtTgCoCommonBase False
void Set(dCcD_SrcGAtTgCoCommonBase const&);
	/* 80083718 */ // False False
void SetEffCounterTimer();
	/* 80083724 */ // True False
void SubtractEffCounter();
	/* 80083748 */ // False False
void ChkEffCounter();
	/* 80083CA0 */ // True False
~dCcD_GAtTgCoCommonBase();
};

struct dCcD_Cyl {
	/* 800848B4 */ // False False
//  dCcD_SrcCyl const& False
// 	 dCcD_SrcCyl const False
// 		 dCcD_SrcCyl False
void Set(dCcD_SrcCyl const&);
	/* 800848F8 */ // True False
void GetShapeAttr();
	/* 80084908 */ // False False
//  cXyz& False
// 	 cXyz False
void StartCAt(cXyz&);
	/* 80084954 */ // False False
//  cXyz& False
// 	 cXyz False
void MoveCAt(cXyz&);
	/* 800849C4 */ // False False
//  cXyz& False
// 	 cXyz False
void MoveCTg(cXyz&);
	/* 80084D60 */ // False False
~dCcD_Cyl();
};

struct dCcD_Cps {
	/* 800847D0 */ // False False
//  dCcD_SrcCps const& False
// 	 dCcD_SrcCps const False
// 		 dCcD_SrcCps False
void Set(dCcD_SrcCps const&);
	/* 80084814 */ // True False
void GetShapeAttr();
	/* 80084824 */ // False False
void CalcAtVec();
	/* 80084854 */ // False False
void CalcTgVec();
	/* 8008506C */ // False False
~dCcD_Cps();
};

struct cM3dGSphS {
};

struct cM3dGSph {
	/* 8026F648 */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
void SetC(cXyz const&);
	/* 8026F6A8 */ // False False
//  cM3dGSphS const& False
// 	 cM3dGSphS const False
// 		 cM3dGSphS False
void Set(cM3dGSphS const&);
};

struct cM3dGCylS {
};

struct cM3dGCyl {
	/* 8026F114 */ // False False
//  cM3dGCylS const& False
// 	 cM3dGCylS const False
// 		 cM3dGCylS False
void Set(cM3dGCylS const&);
	/* 8026F1DC */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
void SetC(cXyz const&);
};

struct cM3dGCpsS {
};

struct cM3dGCps {
	/* 8026EFA4 */ // False False
~cM3dGCps();
	/* 8026F03C */ // False False
//  cM3dGCpsS const& False
// 	 cM3dGCpsS const False
// 		 cM3dGCpsS False
void Set(cM3dGCpsS const&);
};

struct cCcD_ShapeAttr {
	struct Shape {
	};

	/* 80084E38 */ // False False
void GetCoCP() const;
	/* 80084E2C */ // False False
void GetCoCP();
	/* 80263A64 */ // False False
//  cCcD_ShapeAttr::Shape* False
// 	 cCcD_ShapeAttr::Shape False
void getShapeAccess(cCcD_ShapeAttr::Shape*) const;
};

struct cCcD_SphAttr;
struct cCcD_TriAttr;
struct cCcD_PntAttr {
};

struct cCcD_AabAttr {
};

struct cCcD_CylAttr;
struct cCcD_CpsAttr {
	/* 80263DC0 */ // False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_SphAttr const&, cXyz*) const;
	/* 80084FE4 */ // False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_ShapeAttr const&, cXyz*) const;
	/* 80263E04 */ // False False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_TriAttr const&, cXyz*) const;
	/* 80263D7C */ // False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_CylAttr const&, cXyz*) const;
	/* 80084FD4 */ // False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  cXyz* False
// 	 cXyz False
bool CrossAtTg(cCcD_AabAttr const&, cXyz*) const;
	/* 80263D38 */ // False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_CpsAttr const&, cXyz*) const;
	/* 80084FDC */ // False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  cXyz* False
// 	 cXyz False
bool CrossAtTg(cCcD_PntAttr const&, cXyz*) const;
	/* 80085024 */ // False False
//  bool False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_TriAttr const&, f32*) const;
	/* 80263F24 */ // False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_CylAttr const&, f32*) const;
	/* 8008502C */ // False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_PntAttr const&, f32*) const;
	/* 8008501C */ // False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_AabAttr const&, f32*) const;
	/* 80085034 */ // False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_ShapeAttr const&, f32*) const;
	/* 80263ED4 */ // False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_CpsAttr const&, f32*) const;
	/* 80263F74 */ // False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_SphAttr const&, f32*) const;
	/* 80263FC4 */ // False False
void CalcAabBox();
	/* 80264014 */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  cXyz* False
// 	 cXyz False
void GetNVec(cXyz const&, cXyz*) const;
};

struct cCcD_CylAttr {
	/* 80084CC0 */ // False False
void GetCoCP() const;
	/* 80037A4C */ // False False
void GetCoCP();
	/* 8026420C */ // False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_SphAttr const&, cXyz*) const;
	/* 80084CC8 */ // False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  cXyz* False
// 	 cXyz False
bool CrossAtTg(cCcD_AabAttr const&, cXyz*) const;
	/* 802641C8 */ // False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_CylAttr const&, cXyz*) const;
	/* 80084CD0 */ // False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  cXyz* False
// 	 cXyz False
bool CrossAtTg(cCcD_PntAttr const&, cXyz*) const;
	/* 80264250 */ // False False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_TriAttr const&, cXyz*) const;
	/* 80084CD8 */ // False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_ShapeAttr const&, cXyz*) const;
	/* 8026417C */ // False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_CpsAttr const&, cXyz*) const;
	/* 80264288 */ // False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_CylAttr const&, f32*) const;
	/* 80084D10 */ // False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_AabAttr const&, f32*) const;
	/* 80264310 */ // False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_CpsAttr const&, f32*) const;
	/* 80084D18 */ // False False
//  bool False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_TriAttr const&, f32*) const;
	/* 80084D20 */ // False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_PntAttr const&, f32*) const;
	/* 80084D28 */ // False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_ShapeAttr const&, f32*) const;
	/* 802642CC */ // False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_SphAttr const&, f32*) const;
	/* 80264368 */ // False False
void CalcAabBox();
	/* 802643D0 */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  cXyz* False
// 	 cXyz False
void GetNVec(cXyz const&, cXyz*) const;
	/* 802644B8 */ // False False
//  cCcD_ShapeAttr::Shape* False
// 	 cCcD_ShapeAttr::Shape False
void getShapeAccess(cCcD_ShapeAttr::Shape*) const;
};

struct cCcD_SphAttr {
	/* 80084B44 */ // False False
void GetCoCP() const;
	/* 80037A54 */ // False False
void GetCoCP();
	/* 80264538 */ // False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_CylAttr const&, cXyz*) const;
	/* 802645C0 */ // False False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_TriAttr const&, cXyz*) const;
	/* 80084B4C */ // False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  cXyz* False
// 	 cXyz False
bool CrossAtTg(cCcD_AabAttr const&, cXyz*) const;
	/* 80084B54 */ // False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  cXyz* False
// 	 cXyz False
bool CrossAtTg(cCcD_PntAttr const&, cXyz*) const;
	/* 80084B5C */ // False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_ShapeAttr const&, cXyz*) const;
	/* 802644EC */ // False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_CpsAttr const&, cXyz*) const;
	/* 8026457C */ // False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_SphAttr const&, cXyz*) const;
	/* 80264688 */ // False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_CpsAttr const&, f32*) const;
	/* 80084B94 */ // False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_AabAttr const&, f32*) const;
	/* 80084B9C */ // False False
//  bool False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_TriAttr const&, f32*) const;
	/* 80084BA4 */ // False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_PntAttr const&, f32*) const;
	/* 80084BAC */ // False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_ShapeAttr const&, f32*) const;
	/* 80264644 */ // False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_SphAttr const&, f32*) const;
	/* 802645F8 */ // False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_CylAttr const&, f32*) const;
	/* 802646E0 */ // False False
void CalcAabBox();
	/* 8026476C */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  cXyz* False
// 	 cXyz False
void GetNVec(cXyz const&, cXyz*) const;
	/* 80264808 */ // False False
//  cCcD_ShapeAttr::Shape* False
// 	 cCcD_ShapeAttr::Shape False
void getShapeAccess(cCcD_ShapeAttr::Shape*) const;
};

struct cCcD_TriAttr {
	/* 80084E44 */ // False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  cXyz* False
// 	 cXyz False
bool CrossAtTg(cCcD_AabAttr const&, cXyz*) const;
	/* 80263A88 */ // False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_CpsAttr const&, cXyz*) const;
	/* 80084E4C */ // False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  cXyz* False
// 	 cXyz False
bool CrossAtTg(cCcD_PntAttr const&, cXyz*) const;
	/* 80263BCC */ // False False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_TriAttr const&, cXyz*) const;
	/* 80263B90 */ // False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_SphAttr const&, cXyz*) const;
	/* 80084E54 */ // False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_ShapeAttr const&, cXyz*) const;
	/* 80263B58 */ // False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_CylAttr const&, cXyz*) const;
	/* 80084EBC */ // False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_ShapeAttr const&, f32*) const;
	/* 80084EA4 */ // False False
//  bool False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_TriAttr const&, f32*) const;
	/* 80084E8C */ // False False
//  bool False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_SphAttr const&, f32*) const;
	/* 80084EAC */ // False False
//  bool False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_CpsAttr const&, f32*) const;
	/* 80084E94 */ // False False
//  bool False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_CylAttr const&, f32*) const;
	/* 80084EB4 */ // False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_PntAttr const&, f32*) const;
	/* 80084E9C */ // False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_AabAttr const&, f32*) const;
	/* 80263C04 */ // False False
void CalcAabBox();
	/* 80263C9C */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  cXyz* False
// 	 cXyz False
void GetNVec(cXyz const&, cXyz*) const;
};

struct cCcD_Stts {
	/* 80263894 */ // False False
//  bool False
bool GetGStts() const;
	/* 802638A4 */ // False False
//  int False
//  int False
//  void* False
// 	 void False
//  unsigned int False
void Init(int, int, void*, unsigned int);
	/* 80263904 */ // False False
void Ct();
};

struct cCcD_SrcObj {
};

struct cCcD_ObjTg {
	/* 80083FE4 */ // True False
~cCcD_ObjTg();
	/* 802648B0 */ // False False
void ClrHit();
};

struct cCcD_ObjHitInf {
	/* 80083EC8 */ // True False
~cCcD_ObjHitInf();
};

struct cCcD_ObjCommonBase {
	/* 8008409C */ // True False
~cCcD_ObjCommonBase();
	/* 802639B0 */ // False False
void ct();
};

struct cCcD_ObjCo {
	/* 80083F88 */ // True False
~cCcD_ObjCo();
	/* 802648E8 */ // False False
void ClrHit();
};

struct cCcD_ObjAt {
	/* 80084040 */ // True False
~cCcD_ObjAt();
	/* 80264868 */ // False False
void ClrHit();
};

struct _GXColor {
};

struct cCcD_Obj {
	/* 80083DE0 */ // True False
~cCcD_Obj();
	/* 800851A4 */ // True False
//  bool False
bool GetGObjInf() const;
	/* 800847C8 */ // True False
//  bool False
bool GetGObjInf();
	/* 80084BE8 */ // True False
//  bool False
bool GetShapeAttr() const;
	/* 80085130 */ // True False
//  bool False
bool GetShapeAttr();
	/* 80084BF0 */ // True False
//  void False
//  _GXColor const& False
// 	 _GXColor const False
// 		 _GXColor False
void Draw(_GXColor const&);
	/* 80263A10 */ // False False
void ct();
	/* 80263A1C */ // False False
//  cCcD_SrcObj const& False
// 	 cCcD_SrcObj const False
// 		 cCcD_SrcObj False
void Set(cCcD_SrcObj const&);
};

struct cCcD_GStts {
	/* 800837B0 */ // True False
~cCcD_GStts();
};

struct cCcD_GObjInf {
	/* 80083CE8 */ // True False
~cCcD_GObjInf();
	/* 800851A0 */ // True False
//  void False
void GetGObjInf();
	/* 80084BE4 */ // True False
//  void False
void GetGObjInf() const;
	/* 80085138 */ // True False
void ClrAtHit();
	/* 80085158 */ // True False
void ClrTgHit();
	/* 8008517C */ // True False
void ClrCoHit();
};

// 
// Forward References:
// 

// False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
void dCcD_GetGObjInf(cCcD_Obj*);

// True False
extern "C" void ClrActorInfo__22dCcD_GAtTgCoCommonBaseFv();
// True False
extern "C" void ct__22dCcD_GAtTgCoCommonBaseFv();
// False False
//  unsigned int False
extern "C" void SetHitApid__22dCcD_GAtTgCoCommonBaseFUi();
// False False
extern "C" void GetAc__22dCcD_GAtTgCoCommonBaseFv();
// True False
//  dCcD_SrcGAtTgCoCommonBase const& False
// 	 dCcD_SrcGAtTgCoCommonBase const False
// 		 dCcD_SrcGAtTgCoCommonBase False
extern "C" void Set__22dCcD_GAtTgCoCommonBaseFRC25dCcD_SrcGAtTgCoCommonBase();
// False False
extern "C" void SetEffCounterTimer__22dCcD_GAtTgCoCommonBaseFv();
// True False
extern "C" void SubtractEffCounter__22dCcD_GAtTgCoCommonBaseFv();
// False False
extern "C" void ChkEffCounter__22dCcD_GAtTgCoCommonBaseFv();
// False False
extern "C" void __ct__10dCcD_GSttsFv();
// True False
extern "C" void __dt__10cCcD_GSttsFv();
// True False
extern "C" void Ct__10dCcD_GSttsFv();
// False False
extern "C" void Move__10dCcD_GSttsFv();
// True False
extern "C" void GetGStts__9dCcD_SttsFv();
// False False
//  int False
//  int False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
extern "C" void Init__9dCcD_SttsFiiP10fopAc_ac_c();
// True False
extern "C" void Ct__9dCcD_SttsFv();
// True False
extern "C" void ClrAt__9dCcD_SttsFv();
// True False
extern "C" void ClrTg__9dCcD_SttsFv();
// True False
//  dCcD_SrcGObjAt const& False
// 	 dCcD_SrcGObjAt const False
// 		 dCcD_SrcGObjAt False
extern "C" void Set__11dCcD_GObjAtFRC14dCcD_SrcGObjAt();
// True False
//  dCcD_SrcGObjTg const& False
// 	 dCcD_SrcGObjTg const False
// 		 dCcD_SrcGObjTg False
extern "C" void Set__11dCcD_GObjTgFRC14dCcD_SrcGObjTg();
// False False
extern "C" void __ct__12dCcD_GObjInfFv();
// True False
extern "C" void __dt__11dCcD_GObjCoFv();
// True False
extern "C" void __dt__11dCcD_GObjTgFv();
// True False
extern "C" void __dt__11dCcD_GObjAtFv();
// True False
extern "C" void __dt__22dCcD_GAtTgCoCommonBaseFv();
// True False
extern "C" void __dt__12cCcD_GObjInfFv();
// True False
extern "C" void __dt__8cCcD_ObjFv();
// True False
extern "C" void __dt__14cCcD_ObjHitInfFv();
// True False
extern "C" void __dt__10cCcD_ObjCoFv();
// True False
extern "C" void __dt__10cCcD_ObjTgFv();
// True False
extern "C" void __dt__10cCcD_ObjAtFv();
// True False
extern "C" void __dt__18cCcD_ObjCommonBaseFv();
// False False
extern "C" void __dt__12dCcD_GObjInfFv();
// True False
//  void False
extern "C" void GetGObjInf__12dCcD_GObjInfFv();
// True False
extern "C" void ClrAtHit__12dCcD_GObjInfFv();
// False False
extern "C" void ChkAtHit__12dCcD_GObjInfFv();
// False False
extern "C" void ResetAtHit__12dCcD_GObjInfFv();
// False False
extern "C" void GetAtHitObj__12dCcD_GObjInfFv();
// False False
extern "C" void GetAtHitGObj__12dCcD_GObjInfFv();
// False False
extern "C" void ChkAtNoGuard__12dCcD_GObjInfFv();
// True False
extern "C" void ClrTgHit__12dCcD_GObjInfFv();
// False False
extern "C" void ChkTgHit__12dCcD_GObjInfFv();
// False False
extern "C" void ResetTgHit__12dCcD_GObjInfFv();
// False False
extern "C" void GetTgHitObj__12dCcD_GObjInfFv();
// False False
extern "C" void GetTgHitGObj__12dCcD_GObjInfFv();
// False False
extern "C" void GetTgHitObjSe__12dCcD_GObjInfFv();
// False False
//  u8 False
//  int False
extern "C" void getHitSeID__12dCcD_GObjInfFUci();
// True False
extern "C" void ClrCoHit__12dCcD_GObjInfFv();
// False False
extern "C" void ChkCoHit__12dCcD_GObjInfFv();
// False False
extern "C" void ResetCoHit__12dCcD_GObjInfFv();
// False False
extern "C" void GetCoHitObj__12dCcD_GObjInfFv();
// True False
//  dCcD_SrcGObjInf const& False
// 	 dCcD_SrcGObjInf const False
// 		 dCcD_SrcGObjInf False
extern "C" void Set__12dCcD_GObjInfFRC15dCcD_SrcGObjInf();
// False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
extern "C" void dCcD_GetGObjInf__FP8cCcD_Obj();
// True False
//  bool False
extern "C" bool GetGObjInf__8cCcD_ObjFv();
// False False
//  dCcD_SrcCps const& False
// 	 dCcD_SrcCps const False
// 		 dCcD_SrcCps False
extern "C" void Set__8dCcD_CpsFRC11dCcD_SrcCps();
// True False
extern "C" void GetShapeAttr__8dCcD_CpsFv();
// False False
extern "C" void CalcAtVec__8dCcD_CpsFv();
// False False
extern "C" void CalcTgVec__8dCcD_CpsFv();
// False False
//  dCcD_SrcTri const& False
// 	 dCcD_SrcTri const False
// 		 dCcD_SrcTri False
extern "C" void Set__8dCcD_TriFRC11dCcD_SrcTri();
// True False
extern "C" void GetShapeAttr__8dCcD_TriFv();
// False False
//  dCcD_SrcCyl const& False
// 	 dCcD_SrcCyl const False
// 		 dCcD_SrcCyl False
extern "C" void Set__8dCcD_CylFRC11dCcD_SrcCyl();
// True False
extern "C" void GetShapeAttr__8dCcD_CylFv();
// False False
//  cXyz& False
// 	 cXyz False
extern "C" void StartCAt__8dCcD_CylFR4cXyz();
// False False
//  cXyz& False
// 	 cXyz False
extern "C" void MoveCAt__8dCcD_CylFR4cXyz();
// False False
//  cXyz& False
// 	 cXyz False
extern "C" void MoveCTg__8dCcD_CylFR4cXyz();
// False False
//  dCcD_SrcSph const& False
// 	 dCcD_SrcSph const False
// 		 dCcD_SrcSph False
extern "C" void Set__8dCcD_SphFRC11dCcD_SrcSph();
// False False
//  cXyz& False
// 	 cXyz False
extern "C" void StartCAt__8dCcD_SphFR4cXyz();
// False False
//  cXyz& False
// 	 cXyz False
extern "C" void MoveCAt__8dCcD_SphFR4cXyz();
// True False
extern "C" void GetShapeAttr__8dCcD_SphFv();
// False False
extern "C" void GetCoCP__12cCcD_SphAttrCFv();
// False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  cXyz* False
// 	 cXyz False
extern "C" bool CrossAtTg__12cCcD_SphAttrCFRC12cCcD_AabAttrP4cXyz();
// False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  cXyz* False
// 	 cXyz False
extern "C" bool CrossAtTg__12cCcD_SphAttrCFRC12cCcD_PntAttrP4cXyz();
// False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_SphAttrCFRC14cCcD_ShapeAttrP4cXyz();
// False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_SphAttrCFRC12cCcD_AabAttrPf();
// False False
//  bool False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_SphAttrCFRC12cCcD_TriAttrPf();
// False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_SphAttrCFRC12cCcD_PntAttrPf();
// False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_SphAttrCFRC14cCcD_ShapeAttrPf();
// True False
//  void False
extern "C" void GetGObjInf__12cCcD_GObjInfCFv();
// True False
//  bool False
extern "C" bool GetShapeAttr__8cCcD_ObjCFv();
// True False
//  void False
//  _GXColor const& False
// 	 _GXColor const False
// 		 _GXColor False
extern "C" void Draw__8cCcD_ObjFRC8_GXColor();
// True False
extern "C" void __dt__8dCcD_SphFv();
// False False
extern "C" void GetCoCP__12cCcD_CylAttrCFv();
// False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  cXyz* False
// 	 cXyz False
extern "C" bool CrossAtTg__12cCcD_CylAttrCFRC12cCcD_AabAttrP4cXyz();
// False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  cXyz* False
// 	 cXyz False
extern "C" bool CrossAtTg__12cCcD_CylAttrCFRC12cCcD_PntAttrP4cXyz();
// False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_CylAttrCFRC14cCcD_ShapeAttrP4cXyz();
// False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_CylAttrCFRC12cCcD_AabAttrPf();
// False False
//  bool False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_CylAttrCFRC12cCcD_TriAttrPf();
// False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_CylAttrCFRC12cCcD_PntAttrPf();
// False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_CylAttrCFRC14cCcD_ShapeAttrPf();
// False False
extern "C" void __dt__8dCcD_CylFv();
// False False
extern "C" void GetCoCP__14cCcD_ShapeAttrFv();
// False False
extern "C" void GetCoCP__14cCcD_ShapeAttrCFv();
// False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  cXyz* False
// 	 cXyz False
extern "C" bool CrossAtTg__12cCcD_TriAttrCFRC12cCcD_AabAttrP4cXyz();
// False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  cXyz* False
// 	 cXyz False
extern "C" bool CrossAtTg__12cCcD_TriAttrCFRC12cCcD_PntAttrP4cXyz();
// False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_TriAttrCFRC14cCcD_ShapeAttrP4cXyz();
// False False
//  bool False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_TriAttrCFRC12cCcD_SphAttrPf();
// False False
//  bool False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_TriAttrCFRC12cCcD_CylAttrPf();
// False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_TriAttrCFRC12cCcD_AabAttrPf();
// False False
//  bool False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_TriAttrCFRC12cCcD_TriAttrPf();
// False False
//  bool False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_TriAttrCFRC12cCcD_CpsAttrPf();
// False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_TriAttrCFRC12cCcD_PntAttrPf();
// False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_TriAttrCFRC14cCcD_ShapeAttrPf();
// True False
extern "C" void __dt__8dCcD_TriFv();
// False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  cXyz* False
// 	 cXyz False
extern "C" bool CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_AabAttrP4cXyz();
// False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  cXyz* False
// 	 cXyz False
extern "C" bool CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_PntAttrP4cXyz();
// False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_CpsAttrCFRC14cCcD_ShapeAttrP4cXyz();
// False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_CpsAttrCFRC12cCcD_AabAttrPf();
// False False
//  bool False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_CpsAttrCFRC12cCcD_TriAttrPf();
// False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_CpsAttrCFRC12cCcD_PntAttrPf();
// False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_CpsAttrCFRC14cCcD_ShapeAttrPf();
// False False
extern "C" void __dt__8dCcD_CpsFv();
// True False
//  bool False
extern "C" bool GetShapeAttr__8cCcD_ObjFv();
// True False
extern "C" void ClrAtHit__12cCcD_GObjInfFv();
// True False
extern "C" void ClrTgHit__12cCcD_GObjInfFv();
// True False
extern "C" void ClrCoHit__12cCcD_GObjInfFv();
// True False
//  void False
extern "C" void GetGObjInf__12cCcD_GObjInfFv();
// True False
//  bool False
extern "C" bool GetGObjInf__8cCcD_ObjCFv();
// True False
extern "C" void __dt__9dCcD_SttsFv();
// True False
extern "C" void __dt__10dCcD_GSttsFv();
// True False
extern "C" static void func_80085298();
// True False
extern "C" static void func_800852A0();
// True False
extern "C" static void func_800852A8();
// True False
extern "C" static void func_800852B0();
// True False
extern "C" static void func_800852B8();
// True False
extern "C" static void func_800852C0();
// True False
extern "C" static void func_800852C8();
// True False
extern "C" static void func_800852D0();
// True False
extern "C" static void func_800852D8();
extern "C" extern void* __vt__8dCcD_Sph[36];
extern "C" extern void* __vt__8dCcD_Cyl[36];
extern "C" extern void* __vt__8dCcD_Tri[36];
extern "C" extern void* __vt__8dCcD_Cps[36];
extern "C" extern void* __vt__12dCcD_GObjInf[11];
extern "C" extern void* __vt__11dCcD_GObjCo[3];
extern "C" extern void* __vt__11dCcD_GObjTg[3];
extern "C" extern void* __vt__11dCcD_GObjAt[3];
extern "C" extern void* __vt__22dCcD_GAtTgCoCommonBase[3];
extern "C" extern void* __vt__12cCcD_GObjInf[11];
extern "C" extern void* __vt__8cCcD_Obj[8];
extern "C" extern void* __vt__10cCcD_ObjCo[3];
extern "C" extern void* __vt__10cCcD_ObjTg[3];
extern "C" extern void* __vt__10cCcD_ObjAt[3];
extern "C" extern void* __vt__18cCcD_ObjCommonBase[3];
extern "C" extern void* __vt__14cCcD_ObjHitInf[3];
extern "C" extern void* __vt__9dCcD_Stts[11];
extern "C" extern void* __vt__10dCcD_GStts[3];
extern "C" extern void* __vt__10cCcD_GStts[3];

// 
// External References:
// 

// False False
//  void* (*)(void*, void*) False
// 	 * False
// 		  False
// 	 void* False
// 		 void False
// 	 void* False
// 		 void False
// 	 void* False
// 		 void False
//  void* False
// 	 void False
void fopAcIt_Judge(void* (*)(void*, void*), void*);
// False False
//  void* False
// 	 void False
//  void* False
// 	 void False
void fpcSch_JudgeByID(void*, void*);
// False False
//  void False
//  void* False
// 	 void False
void operator delete(void*);

// False False
//  void* (*)(void*, void*) False
// 	 * False
// 		  False
// 	 void* False
// 		 void False
// 	 void* False
// 		 void False
// 	 void* False
// 		 void False
//  void* False
// 	 void False
extern "C" void fopAcIt_Judge__FPFPvPv_PvPv();
// False False
//  void* False
// 	 void False
//  void* False
// 	 void False
extern "C" void fpcSch_JudgeByID__FPvPv();
// False False
extern "C" void GetCoCP__12cCcD_CylAttrFv();
// False False
extern "C" void GetCoCP__12cCcD_SphAttrFv();
// False False
//  bool False
extern "C" bool GetGStts__9cCcD_SttsCFv();
// False False
//  int False
//  int False
//  void* False
// 	 void False
//  unsigned int False
extern "C" void Init__9cCcD_SttsFiiPvUi();
// False False
extern "C" void Ct__9cCcD_SttsFv();
// False False
extern "C" void ct__18cCcD_ObjCommonBaseFv();
// False False
extern "C" void ct__8cCcD_ObjFv();
// False False
//  cCcD_SrcObj const& False
// 	 cCcD_SrcObj const False
// 		 cCcD_SrcObj False
extern "C" void Set__8cCcD_ObjFRC11cCcD_SrcObj();
// False False
//  cCcD_ShapeAttr::Shape* False
// 	 cCcD_ShapeAttr::Shape False
extern "C" void getShapeAccess__14cCcD_ShapeAttrCFPQ214cCcD_ShapeAttr5Shape();
// False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_TriAttrCFRC12cCcD_CpsAttrP4cXyz();
// False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_TriAttrCFRC12cCcD_CylAttrP4cXyz();
// False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_TriAttrCFRC12cCcD_SphAttrP4cXyz();
// False False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_TriAttrCFRC12cCcD_TriAttrP4cXyz();
// False False
extern "C" void CalcAabBox__12cCcD_TriAttrFv();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  cXyz* False
// 	 cXyz False
extern "C" void GetNVec__12cCcD_TriAttrCFRC4cXyzP4cXyz();
// False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_CpsAttrP4cXyz();
// False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_CylAttrP4cXyz();
// False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_SphAttrP4cXyz();
// False False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_TriAttrP4cXyz();
// False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_CpsAttrCFRC12cCcD_CpsAttrPf();
// False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_CpsAttrCFRC12cCcD_CylAttrPf();
// False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_CpsAttrCFRC12cCcD_SphAttrPf();
// False False
extern "C" void CalcAabBox__12cCcD_CpsAttrFv();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  cXyz* False
// 	 cXyz False
extern "C" void GetNVec__12cCcD_CpsAttrCFRC4cXyzP4cXyz();
// False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_CylAttrCFRC12cCcD_CpsAttrP4cXyz();
// False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_CylAttrCFRC12cCcD_CylAttrP4cXyz();
// False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_CylAttrCFRC12cCcD_SphAttrP4cXyz();
// False False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_CylAttrCFRC12cCcD_TriAttrP4cXyz();
// False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_CylAttrCFRC12cCcD_CylAttrPf();
// False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_CylAttrCFRC12cCcD_SphAttrPf();
// False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_CylAttrCFRC12cCcD_CpsAttrPf();
// False False
extern "C" void CalcAabBox__12cCcD_CylAttrFv();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  cXyz* False
// 	 cXyz False
extern "C" void GetNVec__12cCcD_CylAttrCFRC4cXyzP4cXyz();
// False False
//  cCcD_ShapeAttr::Shape* False
// 	 cCcD_ShapeAttr::Shape False
extern "C" void getShapeAccess__12cCcD_CylAttrCFPQ214cCcD_ShapeAttr5Shape();
// False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_SphAttrCFRC12cCcD_CpsAttrP4cXyz();
// False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_SphAttrCFRC12cCcD_CylAttrP4cXyz();
// False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_SphAttrCFRC12cCcD_SphAttrP4cXyz();
// False False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_SphAttrCFRC12cCcD_TriAttrP4cXyz();
// False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_SphAttrCFRC12cCcD_CylAttrPf();
// False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_SphAttrCFRC12cCcD_SphAttrPf();
// False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_SphAttrCFRC12cCcD_CpsAttrPf();
// False False
extern "C" void CalcAabBox__12cCcD_SphAttrFv();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  cXyz* False
// 	 cXyz False
extern "C" void GetNVec__12cCcD_SphAttrCFRC4cXyzP4cXyz();
// False False
//  cCcD_ShapeAttr::Shape* False
// 	 cCcD_ShapeAttr::Shape False
extern "C" void getShapeAccess__12cCcD_SphAttrCFPQ214cCcD_ShapeAttr5Shape();
// False False
extern "C" void ClrHit__10cCcD_ObjAtFv();
// False False
extern "C" void ClrHit__10cCcD_ObjTgFv();
// False False
extern "C" void ClrHit__10cCcD_ObjCoFv();
// False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
extern "C" void __mi__4cXyzCFRC3Vec();
// False False
extern "C" void __dt__8cM3dGCpsFv();
// False False
//  cM3dGCpsS const& False
// 	 cM3dGCpsS const False
// 		 cM3dGCpsS False
extern "C" void Set__8cM3dGCpsFRC9cM3dGCpsS();
// False False
//  cM3dGCylS const& False
// 	 cM3dGCylS const False
// 		 cM3dGCylS False
extern "C" void Set__8cM3dGCylFRC9cM3dGCylS();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
extern "C" void SetC__8cM3dGCylFRC4cXyz();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
extern "C" void SetC__8cM3dGSphFRC4cXyz();
// False False
//  cM3dGSphS const& False
// 	 cM3dGSphS const False
// 		 cM3dGSphS False
extern "C" void Set__8cM3dGSphFRC9cM3dGSphS();
// False False
//  void False
//  void* False
// 	 void False
extern "C" void __dl__FPv();
// False False
extern "C" void PSVECSubtract();
// False False
extern "C" void _savegpr_29();
// False False
extern "C" void _restgpr_29();
extern "C" extern void* __vt__8cM3dGPla[3];
extern "C" extern void* __vt__8cM3dGCyl[3];
extern "C" extern void* __vt__8cM3dGAab[3];
extern "C" extern void* __vt__15cCcD_DivideInfo[3];
extern "C" extern void* __vt__8cM3dGSph[3];
extern "C" extern void* __vt__8cM3dGTri[3];
extern "C" extern void* __vt__12cCcD_SphAttr[25];
extern "C" extern void* __vt__12cCcD_CylAttr[25];
extern "C" extern void* __vt__12cCcD_CpsAttr[25];
extern "C" extern void* __vt__12cCcD_TriAttr[25];
extern "C" extern void* __vt__14cCcD_ShapeAttr[22];
extern "C" extern void* __vt__9cCcD_Stts[8];
extern "C" extern u8 m_virtual_center__14cCcD_ShapeAttr[12];
extern "C" extern f32 Zero__4cXyz[3];

// 
// Declarations:
// 

/* 8008364C-80083660 0014+00 s=3 e=0 z=0  None .text      ClrActorInfo__22dCcD_GAtTgCoCommonBaseFv                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dCcD_GAtTgCoCommonBase::ClrActorInfo() {
	nofralloc
#include "asm/d/cc/d_cc_d/ClrActorInfo__22dCcD_GAtTgCoCommonBaseFv.s"
}
#pragma pop


/* 80083660-80083678 0018+00 s=1 e=0 z=0  None .text      ct__22dCcD_GAtTgCoCommonBaseFv                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dCcD_GAtTgCoCommonBase::ct() {
	nofralloc
#include "asm/d/cc/d_cc_d/ct__22dCcD_GAtTgCoCommonBaseFv.s"
}
#pragma pop


/* 80083678-80083688 0010+00 s=0 e=2 z=0  None .text      SetHitApid__22dCcD_GAtTgCoCommonBaseFUi                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  unsigned int False
asm void dCcD_GAtTgCoCommonBase::SetHitApid(unsigned int param_0) {
	nofralloc
#include "asm/d/cc/d_cc_d/SetHitApid__22dCcD_GAtTgCoCommonBaseFUi.s"
}
#pragma pop


/* 80083688-80083704 007C+00 s=6 e=17 z=43  None .text      GetAc__22dCcD_GAtTgCoCommonBaseFv                            */
//	800836C4: 80023590 (fpcSch_JudgeByID__FPvPv)
//	800836C8: 80023590 (fpcSch_JudgeByID__FPvPv)
//	800836D0: 800197F8 (fopAcIt_Judge__FPFPvPv_PvPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCcD_GAtTgCoCommonBase::GetAc() {
	nofralloc
#include "asm/d/cc/d_cc_d/GetAc__22dCcD_GAtTgCoCommonBaseFv.s"
}
#pragma pop


/* 80083704-80083718 0014+00 s=3 e=0 z=0  None .text      Set__22dCcD_GAtTgCoCommonBaseFRC25dCcD_SrcGAtTgCoCommonBase  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  dCcD_SrcGAtTgCoCommonBase const& False
// 	 dCcD_SrcGAtTgCoCommonBase const False
// 		 dCcD_SrcGAtTgCoCommonBase False
asm void dCcD_GAtTgCoCommonBase::Set(dCcD_SrcGAtTgCoCommonBase const& param_0) {
	nofralloc
#include "asm/d/cc/d_cc_d/Set__22dCcD_GAtTgCoCommonBaseFRC25dCcD_SrcGAtTgCoCommonBase.s"
}
#pragma pop


/* 80083718-80083724 000C+00 s=0 e=1 z=0  None .text      SetEffCounterTimer__22dCcD_GAtTgCoCommonBaseFv               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCcD_GAtTgCoCommonBase::SetEffCounterTimer() {
	nofralloc
#include "asm/d/cc/d_cc_d/SetEffCounterTimer__22dCcD_GAtTgCoCommonBaseFv.s"
}
#pragma pop


/* 80083724-80083748 0024+00 s=3 e=0 z=0  None .text      SubtractEffCounter__22dCcD_GAtTgCoCommonBaseFv               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dCcD_GAtTgCoCommonBase::SubtractEffCounter() {
	nofralloc
#include "asm/d/cc/d_cc_d/SubtractEffCounter__22dCcD_GAtTgCoCommonBaseFv.s"
}
#pragma pop


/* 80083748-80083760 0018+00 s=0 e=1 z=0  None .text      ChkEffCounter__22dCcD_GAtTgCoCommonBaseFv                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCcD_GAtTgCoCommonBase::ChkEffCounter() {
	nofralloc
#include "asm/d/cc/d_cc_d/ChkEffCounter__22dCcD_GAtTgCoCommonBaseFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 803ABFC0-803AC050 0090+00 s=1 e=2 z=332  None .data      __vt__8dCcD_Sph                                              */
SECTION_DATA void* __vt__8dCcD_Sph[36] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__8dCcD_SphFv,
	(void*)GetGObjInf__12cCcD_GObjInfCFv,
	(void*)GetGObjInf__12dCcD_GObjInfFv,
	(void*)GetShapeAttr__8cCcD_ObjCFv,
	(void*)GetShapeAttr__8dCcD_SphFv,
	(void*)Draw__8cCcD_ObjFRC8_GXColor,
	(void*)ClrAtHit__12dCcD_GObjInfFv,
	(void*)ClrTgHit__12dCcD_GObjInfFv,
	(void*)ClrCoHit__12dCcD_GObjInfFv,
	(void*)NULL,
	(void*)NULL,
	(void*)func_800852D8,
	(void*)CrossAtTg__12cCcD_SphAttrCFRC14cCcD_ShapeAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_SphAttrCFRC12cCcD_PntAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_SphAttrCFRC12cCcD_CpsAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_SphAttrCFRC12cCcD_TriAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_SphAttrCFRC12cCcD_AabAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_SphAttrCFRC12cCcD_CylAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_SphAttrCFRC12cCcD_SphAttrP4cXyz,
	(void*)CrossCo__12cCcD_SphAttrCFRC14cCcD_ShapeAttrPf,
	(void*)CrossCo__12cCcD_SphAttrCFRC12cCcD_PntAttrPf,
	(void*)CrossCo__12cCcD_SphAttrCFRC12cCcD_CpsAttrPf,
	(void*)CrossCo__12cCcD_SphAttrCFRC12cCcD_TriAttrPf,
	(void*)CrossCo__12cCcD_SphAttrCFRC12cCcD_AabAttrPf,
	(void*)CrossCo__12cCcD_SphAttrCFRC12cCcD_CylAttrPf,
	(void*)CrossCo__12cCcD_SphAttrCFRC12cCcD_SphAttrPf,
	(void*)GetCoCP__12cCcD_SphAttrCFv,
	(void*)GetCoCP__12cCcD_SphAttrFv,
	(void*)CalcAabBox__12cCcD_SphAttrFv,
	(void*)GetNVec__12cCcD_SphAttrCFRC4cXyzP4cXyz,
	(void*)getShapeAccess__12cCcD_SphAttrCFPQ214cCcD_ShapeAttr5Shape,
	(void*)NULL,
	(void*)NULL,
	(void*)func_800852D0,
};

/* 803AC050-803AC0E0 0090+00 s=1 e=4 z=448  None .data      __vt__8dCcD_Cyl                                              */
SECTION_DATA void* __vt__8dCcD_Cyl[36] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__8dCcD_CylFv,
	(void*)GetGObjInf__12cCcD_GObjInfCFv,
	(void*)GetGObjInf__12dCcD_GObjInfFv,
	(void*)GetShapeAttr__8cCcD_ObjCFv,
	(void*)GetShapeAttr__8dCcD_CylFv,
	(void*)Draw__8cCcD_ObjFRC8_GXColor,
	(void*)ClrAtHit__12dCcD_GObjInfFv,
	(void*)ClrTgHit__12dCcD_GObjInfFv,
	(void*)ClrCoHit__12dCcD_GObjInfFv,
	(void*)NULL,
	(void*)NULL,
	(void*)func_800852C8,
	(void*)CrossAtTg__12cCcD_CylAttrCFRC14cCcD_ShapeAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_CylAttrCFRC12cCcD_PntAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_CylAttrCFRC12cCcD_CpsAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_CylAttrCFRC12cCcD_TriAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_CylAttrCFRC12cCcD_AabAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_CylAttrCFRC12cCcD_CylAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_CylAttrCFRC12cCcD_SphAttrP4cXyz,
	(void*)CrossCo__12cCcD_CylAttrCFRC14cCcD_ShapeAttrPf,
	(void*)CrossCo__12cCcD_CylAttrCFRC12cCcD_PntAttrPf,
	(void*)CrossCo__12cCcD_CylAttrCFRC12cCcD_CpsAttrPf,
	(void*)CrossCo__12cCcD_CylAttrCFRC12cCcD_TriAttrPf,
	(void*)CrossCo__12cCcD_CylAttrCFRC12cCcD_AabAttrPf,
	(void*)CrossCo__12cCcD_CylAttrCFRC12cCcD_CylAttrPf,
	(void*)CrossCo__12cCcD_CylAttrCFRC12cCcD_SphAttrPf,
	(void*)GetCoCP__12cCcD_CylAttrCFv,
	(void*)GetCoCP__12cCcD_CylAttrFv,
	(void*)CalcAabBox__12cCcD_CylAttrFv,
	(void*)GetNVec__12cCcD_CylAttrCFRC4cXyzP4cXyz,
	(void*)getShapeAccess__12cCcD_CylAttrCFPQ214cCcD_ShapeAttr5Shape,
	(void*)NULL,
	(void*)NULL,
	(void*)func_800852C0,
};

/* 803AC0E0-803AC170 0090+00 s=1 e=0 z=5  None .data      __vt__8dCcD_Tri                                              */
SECTION_DATA void* __vt__8dCcD_Tri[36] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__8dCcD_TriFv,
	(void*)GetGObjInf__12cCcD_GObjInfCFv,
	(void*)GetGObjInf__12dCcD_GObjInfFv,
	(void*)GetShapeAttr__8cCcD_ObjCFv,
	(void*)GetShapeAttr__8dCcD_TriFv,
	(void*)Draw__8cCcD_ObjFRC8_GXColor,
	(void*)ClrAtHit__12dCcD_GObjInfFv,
	(void*)ClrTgHit__12dCcD_GObjInfFv,
	(void*)ClrCoHit__12dCcD_GObjInfFv,
	(void*)NULL,
	(void*)NULL,
	(void*)func_800852B8,
	(void*)CrossAtTg__12cCcD_TriAttrCFRC14cCcD_ShapeAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_TriAttrCFRC12cCcD_PntAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_TriAttrCFRC12cCcD_CpsAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_TriAttrCFRC12cCcD_TriAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_TriAttrCFRC12cCcD_AabAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_TriAttrCFRC12cCcD_CylAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_TriAttrCFRC12cCcD_SphAttrP4cXyz,
	(void*)CrossCo__12cCcD_TriAttrCFRC14cCcD_ShapeAttrPf,
	(void*)CrossCo__12cCcD_TriAttrCFRC12cCcD_PntAttrPf,
	(void*)CrossCo__12cCcD_TriAttrCFRC12cCcD_CpsAttrPf,
	(void*)CrossCo__12cCcD_TriAttrCFRC12cCcD_TriAttrPf,
	(void*)CrossCo__12cCcD_TriAttrCFRC12cCcD_AabAttrPf,
	(void*)CrossCo__12cCcD_TriAttrCFRC12cCcD_CylAttrPf,
	(void*)CrossCo__12cCcD_TriAttrCFRC12cCcD_SphAttrPf,
	(void*)GetCoCP__14cCcD_ShapeAttrCFv,
	(void*)GetCoCP__14cCcD_ShapeAttrFv,
	(void*)CalcAabBox__12cCcD_TriAttrFv,
	(void*)GetNVec__12cCcD_TriAttrCFRC4cXyzP4cXyz,
	(void*)getShapeAccess__14cCcD_ShapeAttrCFPQ214cCcD_ShapeAttr5Shape,
	(void*)NULL,
	(void*)NULL,
	(void*)func_800852B0,
};

/* 803AC170-803AC200 0090+00 s=1 e=3 z=26  None .data      __vt__8dCcD_Cps                                              */
SECTION_DATA void* __vt__8dCcD_Cps[36] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__8dCcD_CpsFv,
	(void*)GetGObjInf__12cCcD_GObjInfCFv,
	(void*)GetGObjInf__12dCcD_GObjInfFv,
	(void*)GetShapeAttr__8cCcD_ObjCFv,
	(void*)GetShapeAttr__8dCcD_CpsFv,
	(void*)Draw__8cCcD_ObjFRC8_GXColor,
	(void*)ClrAtHit__12dCcD_GObjInfFv,
	(void*)ClrTgHit__12dCcD_GObjInfFv,
	(void*)ClrCoHit__12dCcD_GObjInfFv,
	(void*)NULL,
	(void*)NULL,
	(void*)func_800852A8,
	(void*)CrossAtTg__12cCcD_CpsAttrCFRC14cCcD_ShapeAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_PntAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_CpsAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_TriAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_AabAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_CylAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_SphAttrP4cXyz,
	(void*)CrossCo__12cCcD_CpsAttrCFRC14cCcD_ShapeAttrPf,
	(void*)CrossCo__12cCcD_CpsAttrCFRC12cCcD_PntAttrPf,
	(void*)CrossCo__12cCcD_CpsAttrCFRC12cCcD_CpsAttrPf,
	(void*)CrossCo__12cCcD_CpsAttrCFRC12cCcD_TriAttrPf,
	(void*)CrossCo__12cCcD_CpsAttrCFRC12cCcD_AabAttrPf,
	(void*)CrossCo__12cCcD_CpsAttrCFRC12cCcD_CylAttrPf,
	(void*)CrossCo__12cCcD_CpsAttrCFRC12cCcD_SphAttrPf,
	(void*)GetCoCP__14cCcD_ShapeAttrCFv,
	(void*)GetCoCP__14cCcD_ShapeAttrFv,
	(void*)CalcAabBox__12cCcD_CpsAttrFv,
	(void*)GetNVec__12cCcD_CpsAttrCFRC4cXyzP4cXyz,
	(void*)getShapeAccess__14cCcD_ShapeAttrCFPQ214cCcD_ShapeAttr5Shape,
	(void*)NULL,
	(void*)NULL,
	(void*)func_800852A0,
};

/* 803AC200-803AC22C 002C+00 s=2 e=0 z=0  None .data      __vt__12dCcD_GObjInf                                         */
SECTION_DATA void* __vt__12dCcD_GObjInf[11] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__12dCcD_GObjInfFv,
	(void*)GetGObjInf__12cCcD_GObjInfCFv,
	(void*)GetGObjInf__12dCcD_GObjInfFv,
	(void*)GetShapeAttr__8cCcD_ObjCFv,
	(void*)GetShapeAttr__8cCcD_ObjFv,
	(void*)Draw__8cCcD_ObjFRC8_GXColor,
	(void*)ClrAtHit__12dCcD_GObjInfFv,
	(void*)ClrTgHit__12dCcD_GObjInfFv,
	(void*)ClrCoHit__12dCcD_GObjInfFv,
};

/* 803AC22C-803AC238 000C+00 s=3 e=0 z=0  None .data      __vt__11dCcD_GObjCo                                          */
SECTION_DATA void* __vt__11dCcD_GObjCo[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__11dCcD_GObjCoFv,
};

/* 803AC238-803AC244 000C+00 s=3 e=0 z=0  None .data      __vt__11dCcD_GObjTg                                          */
SECTION_DATA void* __vt__11dCcD_GObjTg[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__11dCcD_GObjTgFv,
};

/* 803AC244-803AC250 000C+00 s=3 e=0 z=0  None .data      __vt__11dCcD_GObjAt                                          */
SECTION_DATA void* __vt__11dCcD_GObjAt[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__11dCcD_GObjAtFv,
};

/* 803AC250-803AC25C 000C+00 s=6 e=0 z=0  None .data      __vt__22dCcD_GAtTgCoCommonBase                               */
SECTION_DATA void* __vt__22dCcD_GAtTgCoCommonBase[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__22dCcD_GAtTgCoCommonBaseFv,
};

/* 803AC25C-803AC288 002C+00 s=3 e=0 z=0  None .data      __vt__12cCcD_GObjInf                                         */
SECTION_DATA void* __vt__12cCcD_GObjInf[11] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__12cCcD_GObjInfFv,
	(void*)GetGObjInf__12cCcD_GObjInfCFv,
	(void*)GetGObjInf__12cCcD_GObjInfFv,
	(void*)GetShapeAttr__8cCcD_ObjCFv,
	(void*)GetShapeAttr__8cCcD_ObjFv,
	(void*)Draw__8cCcD_ObjFRC8_GXColor,
	(void*)ClrAtHit__12cCcD_GObjInfFv,
	(void*)ClrTgHit__12cCcD_GObjInfFv,
	(void*)ClrCoHit__12cCcD_GObjInfFv,
};

/* 803AC288-803AC2A8 0020+00 s=4 e=0 z=0  None .data      __vt__8cCcD_Obj                                              */
SECTION_DATA void* __vt__8cCcD_Obj[8] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__8cCcD_ObjFv,
	(void*)GetGObjInf__8cCcD_ObjCFv,
	(void*)GetGObjInf__8cCcD_ObjFv,
	(void*)GetShapeAttr__8cCcD_ObjCFv,
	(void*)GetShapeAttr__8cCcD_ObjFv,
	(void*)Draw__8cCcD_ObjFRC8_GXColor,
};

/* 803AC2A8-803AC2B4 000C+00 s=6 e=0 z=0  None .data      __vt__10cCcD_ObjCo                                           */
SECTION_DATA void* __vt__10cCcD_ObjCo[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__10cCcD_ObjCoFv,
};

/* 803AC2B4-803AC2C0 000C+00 s=6 e=0 z=0  None .data      __vt__10cCcD_ObjTg                                           */
SECTION_DATA void* __vt__10cCcD_ObjTg[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__10cCcD_ObjTgFv,
};

/* 803AC2C0-803AC2CC 000C+00 s=6 e=0 z=0  None .data      __vt__10cCcD_ObjAt                                           */
SECTION_DATA void* __vt__10cCcD_ObjAt[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__10cCcD_ObjAtFv,
};

/* 803AC2CC-803AC2D8 000C+00 s=9 e=0 z=0  None .data      __vt__18cCcD_ObjCommonBase                                   */
SECTION_DATA void* __vt__18cCcD_ObjCommonBase[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__18cCcD_ObjCommonBaseFv,
};

/* 803AC2D8-803AC2E4 000C+00 s=5 e=0 z=0  None .data      __vt__14cCcD_ObjHitInf                                       */
SECTION_DATA void* __vt__14cCcD_ObjHitInf[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__14cCcD_ObjHitInfFv,
};

/* 803AC2E4-803AC310 002C+00 s=1 e=7 z=611  None .data      __vt__9dCcD_Stts                                             */
SECTION_DATA void* __vt__9dCcD_Stts[11] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__9dCcD_SttsFv,
	(void*)GetGStts__9cCcD_SttsCFv,
	(void*)GetGStts__9dCcD_SttsFv,
	(void*)Ct__9dCcD_SttsFv,
	(void*)ClrAt__9dCcD_SttsFv,
	(void*)ClrTg__9dCcD_SttsFv,
	(void*)NULL,
	(void*)NULL,
	(void*)func_80085298,
};

/* 803AC310-803AC31C 000C+00 s=3 e=4 z=0  None .data      __vt__10dCcD_GStts                                           */
SECTION_DATA void* __vt__10dCcD_GStts[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__10dCcD_GSttsFv,
};

/* 803AC31C-803AC328 000C+00 s=4 e=4 z=0  None .data      __vt__10cCcD_GStts                                           */
SECTION_DATA void* __vt__10cCcD_GStts[3] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__10cCcD_GSttsFv,
};

/* 80083760-800837B0 0050+00 s=0 e=3 z=446  None .text      __ct__10dCcD_GSttsFv                                         */
//	80083760: 803AC31C (__vt__10cCcD_GStts)
//	80083764: 803AC31C (__vt__10cCcD_GStts)
//	8008376C: 803AC310 (__vt__10dCcD_GStts)
//	80083770: 803AC310 (__vt__10dCcD_GStts)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm dCcD_GStts::dCcD_GStts() {
	nofralloc
#include "asm/d/cc/d_cc_d/__ct__10dCcD_GSttsFv.s"
}
#pragma pop


/* 800837B0-800837F8 0048+00 s=1 e=0 z=0  None .text      __dt__10cCcD_GSttsFv                                         */
//	800837C8: 803AC31C (__vt__10cCcD_GStts)
//	800837CC: 803AC31C (__vt__10cCcD_GStts)
//	800837DC: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cCcD_GStts::~cCcD_GStts() {
	nofralloc
#include "asm/d/cc/d_cc_d/__dt__10cCcD_GSttsFv.s"
}
#pragma pop


/* 800837F8-80083830 0038+00 s=1 e=0 z=0  None .text      Ct__10dCcD_GSttsFv                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dCcD_GStts::Ct() {
	nofralloc
#include "asm/d/cc/d_cc_d/Ct__10dCcD_GSttsFv.s"
}
#pragma pop


/* 80083830-80083850 0020+00 s=0 e=3 z=160  None .text      Move__10dCcD_GSttsFv                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCcD_GStts::Move() {
	nofralloc
#include "asm/d/cc/d_cc_d/Move__10dCcD_GSttsFv.s"
}
#pragma pop


/* 80083850-80083860 0010+00 s=1 e=0 z=0  None .text      GetGStts__9dCcD_SttsFv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dCcD_Stts::GetGStts() {
	nofralloc
#include "asm/d/cc/d_cc_d/GetGStts__9dCcD_SttsFv.s"
}
#pragma pop


/* 80083860-800838F4 0094+00 s=0 e=3 z=416  None .text      Init__9dCcD_SttsFiiP10fopAc_ac_c                             */
//	80083898: 802638A4 (Init__9cCcD_SttsFiiPvUi)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  int False
//  int False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
asm void dCcD_Stts::Init(int param_0, int param_1, fopAc_ac_c* param_2) {
	nofralloc
#include "asm/d/cc/d_cc_d/Init__9dCcD_SttsFiiP10fopAc_ac_c.s"
}
#pragma pop


/* 800838F4-80083928 0034+00 s=1 e=0 z=0  None .text      Ct__9dCcD_SttsFv                                             */
//	80083908: 80263904 (Ct__9cCcD_SttsFv)
//	80083910: 800837F8 (Ct__10dCcD_GSttsFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dCcD_Stts::Ct() {
	nofralloc
#include "asm/d/cc/d_cc_d/Ct__9dCcD_SttsFv.s"
}
#pragma pop


/* 80083928-80083934 000C+00 s=1 e=0 z=0  None .text      ClrAt__9dCcD_SttsFv                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dCcD_Stts::ClrAt() {
	nofralloc
#include "asm/d/cc/d_cc_d/ClrAt__9dCcD_SttsFv.s"
}
#pragma pop


/* 80083934-80083944 0010+00 s=1 e=0 z=0  None .text      ClrTg__9dCcD_SttsFv                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dCcD_Stts::ClrTg() {
	nofralloc
#include "asm/d/cc/d_cc_d/ClrTg__9dCcD_SttsFv.s"
}
#pragma pop


/* 80083944-800839A0 005C+00 s=1 e=0 z=0  None .text      Set__11dCcD_GObjAtFRC14dCcD_SrcGObjAt                        */
//	80083964: 80083704 (Set__22dCcD_GAtTgCoCommonBaseFRC25dCcD_SrcGAtTgCoCommonBase)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  dCcD_SrcGObjAt const& False
// 	 dCcD_SrcGObjAt const False
// 		 dCcD_SrcGObjAt False
asm void dCcD_GObjAt::Set(dCcD_SrcGObjAt const& param_0) {
	nofralloc
#include "asm/d/cc/d_cc_d/Set__11dCcD_GObjAtFRC14dCcD_SrcGObjAt.s"
}
#pragma pop


/* 800839A0-80083A28 0088+00 s=1 e=0 z=0  None .text      Set__11dCcD_GObjTgFRC14dCcD_SrcGObjTg                        */
//	800839C0: 80083704 (Set__22dCcD_GAtTgCoCommonBaseFRC25dCcD_SrcGAtTgCoCommonBase)
//	800839E4: 80430CF4 (Zero__4cXyz)
//	800839E8: 80430CF4 (Zero__4cXyz)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  dCcD_SrcGObjTg const& False
// 	 dCcD_SrcGObjTg const False
// 		 dCcD_SrcGObjTg False
asm void dCcD_GObjTg::Set(dCcD_SrcGObjTg const& param_0) {
	nofralloc
#include "asm/d/cc/d_cc_d/Set__11dCcD_GObjTgFRC14dCcD_SrcGObjTg.s"
}
#pragma pop


/* 80083A28-80083B8C 0164+00 s=0 e=4 z=496  None .text      __ct__12dCcD_GObjInfFv                                       */
//	80083A38: 803621DC (_savegpr_29)
//	80083A44: 803AC2D8 (__vt__14cCcD_ObjHitInf)
//	80083A48: 803AC2D8 (__vt__14cCcD_ObjHitInf)
//	80083A58: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083A5C: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083A64: 802639B0 (ct__18cCcD_ObjCommonBaseFv)
//	80083A68: 803AC2C0 (__vt__10cCcD_ObjAt)
//	80083A6C: 803AC2C0 (__vt__10cCcD_ObjAt)
//	80083A80: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083A84: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083A90: 802639B0 (ct__18cCcD_ObjCommonBaseFv)
//	80083A94: 803AC2B4 (__vt__10cCcD_ObjTg)
//	80083A98: 803AC2B4 (__vt__10cCcD_ObjTg)
//	80083AA4: 802639B0 (ct__18cCcD_ObjCommonBaseFv)
//	80083AAC: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083AB0: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083ABC: 802639B0 (ct__18cCcD_ObjCommonBaseFv)
//	80083AC0: 803AC2A8 (__vt__10cCcD_ObjCo)
//	80083AC4: 803AC2A8 (__vt__10cCcD_ObjCo)
//	80083ACC: 803AC288 (__vt__8cCcD_Obj)
//	80083AD0: 803AC288 (__vt__8cCcD_Obj)
//	80083AD8: 803A7224 (__vt__15cCcD_DivideInfo)
//	80083ADC: 803A7224 (__vt__15cCcD_DivideInfo)
//	80083AE8: 80263A10 (ct__8cCcD_ObjFv)
//	80083AEC: 803AC25C (__vt__12cCcD_GObjInf)
//	80083AF0: 803AC25C (__vt__12cCcD_GObjInf)
//	80083AF8: 803AC200 (__vt__12dCcD_GObjInf)
//	80083AFC: 803AC200 (__vt__12dCcD_GObjInf)
//	80083B08: 803AC250 (__vt__22dCcD_GAtTgCoCommonBase)
//	80083B0C: 803AC250 (__vt__22dCcD_GAtTgCoCommonBase)
//	80083B18: 80083660 (ct__22dCcD_GAtTgCoCommonBaseFv)
//	80083B1C: 803AC244 (__vt__11dCcD_GObjAt)
//	80083B20: 803AC244 (__vt__11dCcD_GObjAt)
//	80083B2C: 803AC250 (__vt__22dCcD_GAtTgCoCommonBase)
//	80083B30: 803AC250 (__vt__22dCcD_GAtTgCoCommonBase)
//	80083B3C: 80083660 (ct__22dCcD_GAtTgCoCommonBaseFv)
//	80083B40: 803AC238 (__vt__11dCcD_GObjTg)
//	80083B44: 803AC238 (__vt__11dCcD_GObjTg)
//	80083B50: 803AC250 (__vt__22dCcD_GAtTgCoCommonBase)
//	80083B54: 803AC250 (__vt__22dCcD_GAtTgCoCommonBase)
//	80083B60: 80083660 (ct__22dCcD_GAtTgCoCommonBaseFv)
//	80083B64: 803AC22C (__vt__11dCcD_GObjCo)
//	80083B68: 803AC22C (__vt__11dCcD_GObjCo)
//	80083B78: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm dCcD_GObjInf::dCcD_GObjInf() {
	nofralloc
#include "asm/d/cc/d_cc_d/__ct__12dCcD_GObjInfFv.s"
}
#pragma pop


/* 80083B8C-80083BE8 005C+00 s=1 e=0 z=0  None .text      __dt__11dCcD_GObjCoFv                                        */
//	80083BA4: 803AC22C (__vt__11dCcD_GObjCo)
//	80083BA8: 803AC22C (__vt__11dCcD_GObjCo)
//	80083BB4: 803AC250 (__vt__22dCcD_GAtTgCoCommonBase)
//	80083BB8: 803AC250 (__vt__22dCcD_GAtTgCoCommonBase)
//	80083BCC: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dCcD_GObjCo::~dCcD_GObjCo() {
	nofralloc
#include "asm/d/cc/d_cc_d/__dt__11dCcD_GObjCoFv.s"
}
#pragma pop


/* 80083BE8-80083C44 005C+00 s=1 e=0 z=0  None .text      __dt__11dCcD_GObjTgFv                                        */
//	80083C00: 803AC238 (__vt__11dCcD_GObjTg)
//	80083C04: 803AC238 (__vt__11dCcD_GObjTg)
//	80083C10: 803AC250 (__vt__22dCcD_GAtTgCoCommonBase)
//	80083C14: 803AC250 (__vt__22dCcD_GAtTgCoCommonBase)
//	80083C28: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dCcD_GObjTg::~dCcD_GObjTg() {
	nofralloc
#include "asm/d/cc/d_cc_d/__dt__11dCcD_GObjTgFv.s"
}
#pragma pop


/* 80083C44-80083CA0 005C+00 s=1 e=0 z=0  None .text      __dt__11dCcD_GObjAtFv                                        */
//	80083C5C: 803AC244 (__vt__11dCcD_GObjAt)
//	80083C60: 803AC244 (__vt__11dCcD_GObjAt)
//	80083C6C: 803AC250 (__vt__22dCcD_GAtTgCoCommonBase)
//	80083C70: 803AC250 (__vt__22dCcD_GAtTgCoCommonBase)
//	80083C84: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dCcD_GObjAt::~dCcD_GObjAt() {
	nofralloc
#include "asm/d/cc/d_cc_d/__dt__11dCcD_GObjAtFv.s"
}
#pragma pop


/* 80083CA0-80083CE8 0048+00 s=1 e=0 z=0  None .text      __dt__22dCcD_GAtTgCoCommonBaseFv                             */
//	80083CB8: 803AC250 (__vt__22dCcD_GAtTgCoCommonBase)
//	80083CBC: 803AC250 (__vt__22dCcD_GAtTgCoCommonBase)
//	80083CCC: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dCcD_GAtTgCoCommonBase::~dCcD_GAtTgCoCommonBase() {
	nofralloc
#include "asm/d/cc/d_cc_d/__dt__22dCcD_GAtTgCoCommonBaseFv.s"
}
#pragma pop


/* 80083CE8-80083DE0 00F8+00 s=1 e=0 z=0  None .text      __dt__12cCcD_GObjInfFv                                       */
//	80083D00: 803AC25C (__vt__12cCcD_GObjInf)
//	80083D04: 803AC25C (__vt__12cCcD_GObjInf)
//	80083D10: 803AC288 (__vt__8cCcD_Obj)
//	80083D14: 803AC288 (__vt__8cCcD_Obj)
//	80083D24: 803A7224 (__vt__15cCcD_DivideInfo)
//	80083D28: 803A7224 (__vt__15cCcD_DivideInfo)
//	80083D38: 803AC2D8 (__vt__14cCcD_ObjHitInf)
//	80083D3C: 803AC2D8 (__vt__14cCcD_ObjHitInf)
//	80083D4C: 803AC2A8 (__vt__10cCcD_ObjCo)
//	80083D50: 803AC2A8 (__vt__10cCcD_ObjCo)
//	80083D60: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083D64: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083D74: 803AC2B4 (__vt__10cCcD_ObjTg)
//	80083D78: 803AC2B4 (__vt__10cCcD_ObjTg)
//	80083D88: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083D8C: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083D9C: 803AC2C0 (__vt__10cCcD_ObjAt)
//	80083DA0: 803AC2C0 (__vt__10cCcD_ObjAt)
//	80083DAC: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083DB0: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083DC4: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cCcD_GObjInf::~cCcD_GObjInf() {
	nofralloc
#include "asm/d/cc/d_cc_d/__dt__12cCcD_GObjInfFv.s"
}
#pragma pop


/* 80083DE0-80083EC8 00E8+00 s=1 e=0 z=0  None .text      __dt__8cCcD_ObjFv                                            */
//	80083DF8: 803AC288 (__vt__8cCcD_Obj)
//	80083DFC: 803AC288 (__vt__8cCcD_Obj)
//	80083E0C: 803A7224 (__vt__15cCcD_DivideInfo)
//	80083E10: 803A7224 (__vt__15cCcD_DivideInfo)
//	80083E20: 803AC2D8 (__vt__14cCcD_ObjHitInf)
//	80083E24: 803AC2D8 (__vt__14cCcD_ObjHitInf)
//	80083E34: 803AC2A8 (__vt__10cCcD_ObjCo)
//	80083E38: 803AC2A8 (__vt__10cCcD_ObjCo)
//	80083E48: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083E4C: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083E5C: 803AC2B4 (__vt__10cCcD_ObjTg)
//	80083E60: 803AC2B4 (__vt__10cCcD_ObjTg)
//	80083E70: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083E74: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083E84: 803AC2C0 (__vt__10cCcD_ObjAt)
//	80083E88: 803AC2C0 (__vt__10cCcD_ObjAt)
//	80083E94: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083E98: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083EAC: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cCcD_Obj::~cCcD_Obj() {
	nofralloc
#include "asm/d/cc/d_cc_d/__dt__8cCcD_ObjFv.s"
}
#pragma pop


/* 80083EC8-80083F88 00C0+00 s=1 e=0 z=0  None .text      __dt__14cCcD_ObjHitInfFv                                     */
//	80083EE0: 803AC2D8 (__vt__14cCcD_ObjHitInf)
//	80083EE4: 803AC2D8 (__vt__14cCcD_ObjHitInf)
//	80083EF4: 803AC2A8 (__vt__10cCcD_ObjCo)
//	80083EF8: 803AC2A8 (__vt__10cCcD_ObjCo)
//	80083F08: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083F0C: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083F1C: 803AC2B4 (__vt__10cCcD_ObjTg)
//	80083F20: 803AC2B4 (__vt__10cCcD_ObjTg)
//	80083F30: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083F34: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083F44: 803AC2C0 (__vt__10cCcD_ObjAt)
//	80083F48: 803AC2C0 (__vt__10cCcD_ObjAt)
//	80083F54: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083F58: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083F6C: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cCcD_ObjHitInf::~cCcD_ObjHitInf() {
	nofralloc
#include "asm/d/cc/d_cc_d/__dt__14cCcD_ObjHitInfFv.s"
}
#pragma pop


/* 80083F88-80083FE4 005C+00 s=1 e=0 z=0  None .text      __dt__10cCcD_ObjCoFv                                         */
//	80083FA0: 803AC2A8 (__vt__10cCcD_ObjCo)
//	80083FA4: 803AC2A8 (__vt__10cCcD_ObjCo)
//	80083FB0: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083FB4: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80083FC8: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cCcD_ObjCo::~cCcD_ObjCo() {
	nofralloc
#include "asm/d/cc/d_cc_d/__dt__10cCcD_ObjCoFv.s"
}
#pragma pop


/* 80083FE4-80084040 005C+00 s=1 e=0 z=0  None .text      __dt__10cCcD_ObjTgFv                                         */
//	80083FFC: 803AC2B4 (__vt__10cCcD_ObjTg)
//	80084000: 803AC2B4 (__vt__10cCcD_ObjTg)
//	8008400C: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80084010: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80084024: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cCcD_ObjTg::~cCcD_ObjTg() {
	nofralloc
#include "asm/d/cc/d_cc_d/__dt__10cCcD_ObjTgFv.s"
}
#pragma pop


/* 80084040-8008409C 005C+00 s=1 e=0 z=0  None .text      __dt__10cCcD_ObjAtFv                                         */
//	80084058: 803AC2C0 (__vt__10cCcD_ObjAt)
//	8008405C: 803AC2C0 (__vt__10cCcD_ObjAt)
//	80084068: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	8008406C: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80084080: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cCcD_ObjAt::~cCcD_ObjAt() {
	nofralloc
#include "asm/d/cc/d_cc_d/__dt__10cCcD_ObjAtFv.s"
}
#pragma pop


/* 8008409C-800840E4 0048+00 s=1 e=0 z=0  None .text      __dt__18cCcD_ObjCommonBaseFv                                 */
//	800840B4: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	800840B8: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	800840C8: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cCcD_ObjCommonBase::~cCcD_ObjCommonBase() {
	nofralloc
#include "asm/d/cc/d_cc_d/__dt__18cCcD_ObjCommonBaseFv.s"
}
#pragma pop


/* 800840E4-80084268 0184+00 s=5 e=1 z=268  None .text      __dt__12dCcD_GObjInfFv                                       */
//	800840FC: 803AC200 (__vt__12dCcD_GObjInf)
//	80084100: 803AC200 (__vt__12dCcD_GObjInf)
//	80084110: 803AC22C (__vt__11dCcD_GObjCo)
//	80084114: 803AC22C (__vt__11dCcD_GObjCo)
//	80084124: 803AC250 (__vt__22dCcD_GAtTgCoCommonBase)
//	80084128: 803AC250 (__vt__22dCcD_GAtTgCoCommonBase)
//	80084138: 803AC238 (__vt__11dCcD_GObjTg)
//	8008413C: 803AC238 (__vt__11dCcD_GObjTg)
//	8008414C: 803AC250 (__vt__22dCcD_GAtTgCoCommonBase)
//	80084150: 803AC250 (__vt__22dCcD_GAtTgCoCommonBase)
//	80084160: 803AC244 (__vt__11dCcD_GObjAt)
//	80084164: 803AC244 (__vt__11dCcD_GObjAt)
//	80084174: 803AC250 (__vt__22dCcD_GAtTgCoCommonBase)
//	80084178: 803AC250 (__vt__22dCcD_GAtTgCoCommonBase)
//	80084188: 803AC25C (__vt__12cCcD_GObjInf)
//	8008418C: 803AC25C (__vt__12cCcD_GObjInf)
//	80084198: 803AC288 (__vt__8cCcD_Obj)
//	8008419C: 803AC288 (__vt__8cCcD_Obj)
//	800841AC: 803A7224 (__vt__15cCcD_DivideInfo)
//	800841B0: 803A7224 (__vt__15cCcD_DivideInfo)
//	800841C0: 803AC2D8 (__vt__14cCcD_ObjHitInf)
//	800841C4: 803AC2D8 (__vt__14cCcD_ObjHitInf)
//	800841D4: 803AC2A8 (__vt__10cCcD_ObjCo)
//	800841D8: 803AC2A8 (__vt__10cCcD_ObjCo)
//	800841E8: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	800841EC: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	800841FC: 803AC2B4 (__vt__10cCcD_ObjTg)
//	80084200: 803AC2B4 (__vt__10cCcD_ObjTg)
//	80084210: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80084214: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80084224: 803AC2C0 (__vt__10cCcD_ObjAt)
//	80084228: 803AC2C0 (__vt__10cCcD_ObjAt)
//	80084234: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	80084238: 803AC2CC (__vt__18cCcD_ObjCommonBase)
//	8008424C: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm dCcD_GObjInf::~dCcD_GObjInf() {
	nofralloc
#include "asm/d/cc/d_cc_d/__dt__12dCcD_GObjInfFv.s"
}
#pragma pop


/* 80084268-8008426C 0004+00 s=5 e=0 z=0  None .text      GetGObjInf__12dCcD_GObjInfFv                                 */
// True False
//  void False
void dCcD_GObjInf::GetGObjInf() {
	/* empty function */
}


/* 8008426C-800842C0 0054+00 s=5 e=0 z=0  None .text      ClrAtHit__12dCcD_GObjInfFv                                   */
//	80084280: 80264868 (ClrHit__10cCcD_ObjAtFv)
//	80084288: 8008364C (ClrActorInfo__22dCcD_GAtTgCoCommonBaseFv)
//	800842A8: 80083724 (SubtractEffCounter__22dCcD_GAtTgCoCommonBaseFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dCcD_GObjInf::ClrAtHit() {
	nofralloc
#include "asm/d/cc/d_cc_d/ClrAtHit__12dCcD_GObjInfFv.s"
}
#pragma pop


/* 800842C0-80084318 0058+00 s=0 e=12 z=78  None .text      ChkAtHit__12dCcD_GObjInfFv                                   */
//	800842F0: 80083688 (GetAc__22dCcD_GAtTgCoCommonBaseFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCcD_GObjInf::ChkAtHit() {
	nofralloc
#include "asm/d/cc/d_cc_d/ChkAtHit__12dCcD_GObjInfFv.s"
}
#pragma pop


/* 80084318-80084358 0040+00 s=0 e=10 z=7  None .text      ResetAtHit__12dCcD_GObjInfFv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCcD_GObjInf::ResetAtHit() {
	nofralloc
#include "asm/d/cc/d_cc_d/ResetAtHit__12dCcD_GObjInfFv.s"
}
#pragma pop


/* 80084358-800843A8 0050+00 s=1 e=0 z=31  None .text      GetAtHitObj__12dCcD_GObjInfFv                                */
//	8008437C: 80083688 (GetAc__22dCcD_GAtTgCoCommonBaseFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCcD_GObjInf::GetAtHitObj() {
	nofralloc
#include "asm/d/cc/d_cc_d/GetAtHitObj__12dCcD_GObjInfFv.s"
}
#pragma pop


/* 800843A8-800843DC 0034+00 s=0 e=2 z=3  None .text      GetAtHitGObj__12dCcD_GObjInfFv                               */
//	800843B4: 80084358 (GetAtHitObj__12dCcD_GObjInfFv)
//	800843C8: 8008479C (dCcD_GetGObjInf__FP8cCcD_Obj)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCcD_GObjInf::GetAtHitGObj() {
	nofralloc
#include "asm/d/cc/d_cc_d/GetAtHitGObj__12dCcD_GObjInfFv.s"
}
#pragma pop


/* 800843DC-800843FC 0020+00 s=0 e=1 z=0  None .text      ChkAtNoGuard__12dCcD_GObjInfFv                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCcD_GObjInf::ChkAtNoGuard() {
	nofralloc
#include "asm/d/cc/d_cc_d/ChkAtNoGuard__12dCcD_GObjInfFv.s"
}
#pragma pop


/* 800843FC-80084460 0064+00 s=5 e=0 z=0  None .text      ClrTgHit__12dCcD_GObjInfFv                                   */
//	80084414: 802648B0 (ClrHit__10cCcD_ObjTgFv)
//	8008441C: 8008364C (ClrActorInfo__22dCcD_GAtTgCoCommonBaseFv)
//	80084448: 80083724 (SubtractEffCounter__22dCcD_GAtTgCoCommonBaseFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dCcD_GObjInf::ClrTgHit() {
	nofralloc
#include "asm/d/cc/d_cc_d/ClrTgHit__12dCcD_GObjInfFv.s"
}
#pragma pop


/* 80084460-800844B8 0058+00 s=0 e=6 z=305  None .text      ChkTgHit__12dCcD_GObjInfFv                                   */
//	80084490: 80083688 (GetAc__22dCcD_GAtTgCoCommonBaseFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCcD_GObjInf::ChkTgHit() {
	nofralloc
#include "asm/d/cc/d_cc_d/ChkTgHit__12dCcD_GObjInfFv.s"
}
#pragma pop


/* 800844B8-800844F8 0040+00 s=0 e=1 z=5  None .text      ResetTgHit__12dCcD_GObjInfFv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCcD_GObjInf::ResetTgHit() {
	nofralloc
#include "asm/d/cc/d_cc_d/ResetTgHit__12dCcD_GObjInfFv.s"
}
#pragma pop


/* 800844F8-80084548 0050+00 s=1 e=3 z=228  None .text      GetTgHitObj__12dCcD_GObjInfFv                                */
//	8008451C: 80083688 (GetAc__22dCcD_GAtTgCoCommonBaseFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCcD_GObjInf::GetTgHitObj() {
	nofralloc
#include "asm/d/cc/d_cc_d/GetTgHitObj__12dCcD_GObjInfFv.s"
}
#pragma pop


/* 80084548-8008457C 0034+00 s=1 e=5 z=63  None .text      GetTgHitGObj__12dCcD_GObjInfFv                               */
//	80084554: 800844F8 (GetTgHitObj__12dCcD_GObjInfFv)
//	80084568: 8008479C (dCcD_GetGObjInf__FP8cCcD_Obj)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCcD_GObjInf::GetTgHitGObj() {
	nofralloc
#include "asm/d/cc/d_cc_d/GetTgHitGObj__12dCcD_GObjInfFv.s"
}
#pragma pop


/* 8008457C-800845B0 0034+00 s=0 e=2 z=18  None .text      GetTgHitObjSe__12dCcD_GObjInfFv                              */
//	80084588: 80084548 (GetTgHitGObj__12dCcD_GObjInfFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCcD_GObjInf::GetTgHitObjSe() {
	nofralloc
#include "asm/d/cc/d_cc_d/GetTgHitObjSe__12dCcD_GObjInfFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 8037A780-8037A7E0 0060+00 s=1 e=0 z=0  None .rodata    m_hitSeID__12dCcD_GObjInf                                    */
SECTION_RODATA static u8 const m_hitSeID__12dCcD_GObjInf[96] = {
	0x00, 0x04, 0x00, 0x0F, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x04, 0x00, 0x04,
	0x00, 0x04, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00, 0x04, 0x00, 0x06, 0x00, 0x04, 0x00, 0x07,
	0x00, 0x04, 0x00, 0x09, 0x00, 0x04, 0x00, 0x0B, 0x00, 0x04, 0x00, 0x0C, 0x00, 0x04, 0x00, 0x0D,
	0x00, 0x04, 0x00, 0x0E, 0x00, 0x04, 0x00, 0x0F, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04, 0x00, 0x04,
	0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00, 0x11, 0x00, 0x04, 0x00, 0x12, 0x00, 0x04, 0x00, 0x13,
	0x00, 0x04, 0x00, 0x14, 0x00, 0x04, 0x00, 0x15, 0x00, 0x04, 0x00, 0x18, 0x00, 0x04, 0x00, 0x16,
};

/* 800845B0-8008460C 005C+00 s=0 e=3 z=32  None .text      getHitSeID__12dCcD_GObjInfFUci                               */
//	800845FC: 8037A780 (m_hitSeID__12dCcD_GObjInf)
//	80084600: 8037A780 (m_hitSeID__12dCcD_GObjInf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  u8 False
//  int False
asm void dCcD_GObjInf::getHitSeID(u8 param_0, int param_1) {
	nofralloc
#include "asm/d/cc/d_cc_d/getHitSeID__12dCcD_GObjInfFUci.s"
}
#pragma pop


/* 8008460C-80084658 004C+00 s=5 e=0 z=0  None .text      ClrCoHit__12dCcD_GObjInfFv                                   */
//	80084624: 802648E8 (ClrHit__10cCcD_ObjCoFv)
//	8008462C: 8008364C (ClrActorInfo__22dCcD_GAtTgCoCommonBaseFv)
//	80084640: 80083724 (SubtractEffCounter__22dCcD_GAtTgCoCommonBaseFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dCcD_GObjInf::ClrCoHit() {
	nofralloc
#include "asm/d/cc/d_cc_d/ClrCoHit__12dCcD_GObjInfFv.s"
}
#pragma pop


/* 80084658-800846B0 0058+00 s=0 e=5 z=74  None .text      ChkCoHit__12dCcD_GObjInfFv                                   */
//	80084688: 80083688 (GetAc__22dCcD_GAtTgCoCommonBaseFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCcD_GObjInf::ChkCoHit() {
	nofralloc
#include "asm/d/cc/d_cc_d/ChkCoHit__12dCcD_GObjInfFv.s"
}
#pragma pop


/* 800846B0-800846F0 0040+00 s=0 e=1 z=2  None .text      ResetCoHit__12dCcD_GObjInfFv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCcD_GObjInf::ResetCoHit() {
	nofralloc
#include "asm/d/cc/d_cc_d/ResetCoHit__12dCcD_GObjInfFv.s"
}
#pragma pop


/* 800846F0-80084740 0050+00 s=0 e=0 z=36  None .text      GetCoHitObj__12dCcD_GObjInfFv                                */
//	80084714: 80083688 (GetAc__22dCcD_GAtTgCoCommonBaseFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCcD_GObjInf::GetCoHitObj() {
	nofralloc
#include "asm/d/cc/d_cc_d/GetCoHitObj__12dCcD_GObjInfFv.s"
}
#pragma pop


/* 80084740-8008479C 005C+00 s=4 e=0 z=0  None .text      Set__12dCcD_GObjInfFRC15dCcD_SrcGObjInf                      */
//	8008475C: 80263A1C (Set__8cCcD_ObjFRC11cCcD_SrcObj)
//	80084768: 80083944 (Set__11dCcD_GObjAtFRC14dCcD_SrcGObjAt)
//	80084774: 800839A0 (Set__11dCcD_GObjTgFRC14dCcD_SrcGObjTg)
//	80084780: 80083704 (Set__22dCcD_GAtTgCoCommonBaseFRC25dCcD_SrcGAtTgCoCommonBase)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  dCcD_SrcGObjInf const& False
// 	 dCcD_SrcGObjInf const False
// 		 dCcD_SrcGObjInf False
asm void dCcD_GObjInf::Set(dCcD_SrcGObjInf const& param_0) {
	nofralloc
#include "asm/d/cc/d_cc_d/Set__12dCcD_GObjInfFRC15dCcD_SrcGObjInf.s"
}
#pragma pop


/* 8008479C-800847C8 002C+00 s=2 e=1 z=3  None .text      dCcD_GetGObjInf__FP8cCcD_Obj                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
asm void dCcD_GetGObjInf(cCcD_Obj* param_0) {
	nofralloc
#include "asm/d/cc/d_cc_d/dCcD_GetGObjInf__FP8cCcD_Obj.s"
}
#pragma pop


/* 800847C8-800847D0 0008+00 s=1 e=0 z=0  None .text      GetGObjInf__8cCcD_ObjFv                                      */
// True False
//  bool False
bool cCcD_Obj::GetGObjInf() {
	return false;
}


/* 800847D0-80084814 0044+00 s=0 e=1 z=20  None .text      Set__8dCcD_CpsFRC11dCcD_SrcCps                               */
//	800847EC: 80084740 (Set__12dCcD_GObjInfFRC15dCcD_SrcGObjInf)
//	800847F8: 8026F03C (Set__8cM3dGCpsFRC9cM3dGCpsS)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  dCcD_SrcCps const& False
// 	 dCcD_SrcCps const False
// 		 dCcD_SrcCps False
asm void dCcD_Cps::Set(dCcD_SrcCps const& param_0) {
	nofralloc
#include "asm/d/cc/d_cc_d/Set__8dCcD_CpsFRC11dCcD_SrcCps.s"
}
#pragma pop


/* 80084814-80084824 0010+00 s=1 e=0 z=0  None .text      GetShapeAttr__8dCcD_CpsFv                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dCcD_Cps::GetShapeAttr() {
	nofralloc
#include "asm/d/cc/d_cc_d/GetShapeAttr__8dCcD_CpsFv.s"
}
#pragma pop


/* 80084824-80084854 0030+00 s=0 e=0 z=6  None .text      CalcAtVec__8dCcD_CpsFv                                       */
//	80084840: 803470B4 (PSVECSubtract)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCcD_Cps::CalcAtVec() {
	nofralloc
#include "asm/d/cc/d_cc_d/CalcAtVec__8dCcD_CpsFv.s"
}
#pragma pop


/* 80084854-80084884 0030+00 s=0 e=0 z=2  None .text      CalcTgVec__8dCcD_CpsFv                                       */
//	80084870: 803470B4 (PSVECSubtract)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCcD_Cps::CalcTgVec() {
	nofralloc
#include "asm/d/cc/d_cc_d/CalcTgVec__8dCcD_CpsFv.s"
}
#pragma pop


/* 80084884-800848A4 0020+00 s=0 e=0 z=5  None .text      Set__8dCcD_TriFRC11dCcD_SrcTri                               */
//	80084890: 80084740 (Set__12dCcD_GObjInfFRC15dCcD_SrcGObjInf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  dCcD_SrcTri const& False
// 	 dCcD_SrcTri const False
// 		 dCcD_SrcTri False
asm void dCcD_Tri::Set(dCcD_SrcTri const& param_0) {
	nofralloc
#include "asm/d/cc/d_cc_d/Set__8dCcD_TriFRC11dCcD_SrcTri.s"
}
#pragma pop


/* 800848A4-800848B4 0010+00 s=1 e=0 z=0  None .text      GetShapeAttr__8dCcD_TriFv                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dCcD_Tri::GetShapeAttr() {
	nofralloc
#include "asm/d/cc/d_cc_d/GetShapeAttr__8dCcD_TriFv.s"
}
#pragma pop


/* 800848B4-800848F8 0044+00 s=0 e=2 z=245  None .text      Set__8dCcD_CylFRC11dCcD_SrcCyl                               */
//	800848D0: 80084740 (Set__12dCcD_GObjInfFRC15dCcD_SrcGObjInf)
//	800848DC: 8026F114 (Set__8cM3dGCylFRC9cM3dGCylS)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  dCcD_SrcCyl const& False
// 	 dCcD_SrcCyl const False
// 		 dCcD_SrcCyl False
asm void dCcD_Cyl::Set(dCcD_SrcCyl const& param_0) {
	nofralloc
#include "asm/d/cc/d_cc_d/Set__8dCcD_CylFRC11dCcD_SrcCyl.s"
}
#pragma pop


/* 800848F8-80084908 0010+00 s=1 e=0 z=0  None .text      GetShapeAttr__8dCcD_CylFv                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dCcD_Cyl::GetShapeAttr() {
	nofralloc
#include "asm/d/cc/d_cc_d/GetShapeAttr__8dCcD_CylFv.s"
}
#pragma pop


/* 80084908-80084954 004C+00 s=0 e=3 z=3  None .text      StartCAt__8dCcD_CylFR4cXyz                                   */
//	80084914: 80430CF4 (Zero__4cXyz)
//	80084918: 80430CF4 (Zero__4cXyz)
//	80084940: 8026F1DC (SetC__8cM3dGCylFRC4cXyz)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cXyz& False
// 	 cXyz False
asm void dCcD_Cyl::StartCAt(cXyz& param_0) {
	nofralloc
#include "asm/d/cc/d_cc_d/StartCAt__8dCcD_CylFR4cXyz.s"
}
#pragma pop


/* 80084954-800849C4 0070+00 s=0 e=3 z=4  None .text      MoveCAt__8dCcD_CylFR4cXyz                                    */
//	80084978: 80266B34 (__mi__4cXyzCFRC3Vec)
//	800849A8: 8026F1DC (SetC__8cM3dGCylFRC4cXyz)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cXyz& False
// 	 cXyz False
asm void dCcD_Cyl::MoveCAt(cXyz& param_0) {
	nofralloc
#include "asm/d/cc/d_cc_d/MoveCAt__8dCcD_CylFR4cXyz.s"
}
#pragma pop


/* 800849C4-80084A34 0070+00 s=0 e=0 z=1  None .text      MoveCTg__8dCcD_CylFR4cXyz                                    */
//	800849E8: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80084A18: 8026F1DC (SetC__8cM3dGCylFRC4cXyz)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cXyz& False
// 	 cXyz False
asm void dCcD_Cyl::MoveCTg(cXyz& param_0) {
	nofralloc
#include "asm/d/cc/d_cc_d/MoveCTg__8dCcD_CylFR4cXyz.s"
}
#pragma pop


/* 80084A34-80084A78 0044+00 s=0 e=2 z=196  None .text      Set__8dCcD_SphFRC11dCcD_SrcSph                               */
//	80084A50: 80084740 (Set__12dCcD_GObjInfFRC15dCcD_SrcGObjInf)
//	80084A5C: 8026F6A8 (Set__8cM3dGSphFRC9cM3dGSphS)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  dCcD_SrcSph const& False
// 	 dCcD_SrcSph const False
// 		 dCcD_SrcSph False
asm void dCcD_Sph::Set(dCcD_SrcSph const& param_0) {
	nofralloc
#include "asm/d/cc/d_cc_d/Set__8dCcD_SphFRC11dCcD_SrcSph.s"
}
#pragma pop


/* 80084A78-80084AC4 004C+00 s=0 e=3 z=25  None .text      StartCAt__8dCcD_SphFR4cXyz                                   */
//	80084A84: 80430CF4 (Zero__4cXyz)
//	80084A88: 80430CF4 (Zero__4cXyz)
//	80084AB0: 8026F648 (SetC__8cM3dGSphFRC4cXyz)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cXyz& False
// 	 cXyz False
asm void dCcD_Sph::StartCAt(cXyz& param_0) {
	nofralloc
#include "asm/d/cc/d_cc_d/StartCAt__8dCcD_SphFR4cXyz.s"
}
#pragma pop


/* 80084AC4-80084B34 0070+00 s=0 e=2 z=23  None .text      MoveCAt__8dCcD_SphFR4cXyz                                    */
//	80084AE8: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80084B18: 8026F648 (SetC__8cM3dGSphFRC4cXyz)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cXyz& False
// 	 cXyz False
asm void dCcD_Sph::MoveCAt(cXyz& param_0) {
	nofralloc
#include "asm/d/cc/d_cc_d/MoveCAt__8dCcD_SphFR4cXyz.s"
}
#pragma pop


/* 80084B34-80084B44 0010+00 s=1 e=0 z=0  None .text      GetShapeAttr__8dCcD_SphFv                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dCcD_Sph::GetShapeAttr() {
	nofralloc
#include "asm/d/cc/d_cc_d/GetShapeAttr__8dCcD_SphFv.s"
}
#pragma pop


/* 80084B44-80084B4C 0008+00 s=1 e=1 z=0  None .text      GetCoCP__12cCcD_SphAttrCFv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void cCcD_SphAttr::GetCoCP() const {
	nofralloc
#include "asm/d/cc/d_cc_d/GetCoCP__12cCcD_SphAttrCFv.s"
}
#pragma pop


/* 80084B4C-80084B54 0008+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_SphAttrCFRC12cCcD_AabAttrP4cXyz            */
// False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  cXyz* False
// 	 cXyz False
bool cCcD_SphAttr::CrossAtTg(cCcD_AabAttr const& param_0, cXyz* param_1) const {
	return false;
}


/* 80084B54-80084B5C 0008+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_SphAttrCFRC12cCcD_PntAttrP4cXyz            */
// False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  cXyz* False
// 	 cXyz False
bool cCcD_SphAttr::CrossAtTg(cCcD_PntAttr const& param_0, cXyz* param_1) const {
	return false;
}


/* 80084B5C-80084B94 0038+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_SphAttrCFRC14cCcD_ShapeAttrP4cXyz          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  cXyz* False
// 	 cXyz False
asm void cCcD_SphAttr::CrossAtTg(cCcD_ShapeAttr const& param_0, cXyz* param_1) const {
	nofralloc
#include "asm/d/cc/d_cc_d/CrossAtTg__12cCcD_SphAttrCFRC14cCcD_ShapeAttrP4cXyz.s"
}
#pragma pop


/* 80084B94-80084B9C 0008+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_SphAttrCFRC12cCcD_AabAttrPf                  */
// False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  f32* False
// 	 f32 False
bool cCcD_SphAttr::CrossCo(cCcD_AabAttr const& param_0, f32* param_1) const {
	return false;
}


/* 80084B9C-80084BA4 0008+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_SphAttrCFRC12cCcD_TriAttrPf                  */
// False False
//  bool False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  f32* False
// 	 f32 False
bool cCcD_SphAttr::CrossCo(cCcD_TriAttr const& param_0, f32* param_1) const {
	return false;
}


/* 80084BA4-80084BAC 0008+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_SphAttrCFRC12cCcD_PntAttrPf                  */
// False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  f32* False
// 	 f32 False
bool cCcD_SphAttr::CrossCo(cCcD_PntAttr const& param_0, f32* param_1) const {
	return false;
}


/* 80084BAC-80084BE4 0038+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_SphAttrCFRC14cCcD_ShapeAttrPf                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  f32* False
// 	 f32 False
asm void cCcD_SphAttr::CrossCo(cCcD_ShapeAttr const& param_0, f32* param_1) const {
	nofralloc
#include "asm/d/cc/d_cc_d/CrossCo__12cCcD_SphAttrCFRC14cCcD_ShapeAttrPf.s"
}
#pragma pop


/* 80084BE4-80084BE8 0004+00 s=6 e=0 z=0  None .text      GetGObjInf__12cCcD_GObjInfCFv                                */
// True False
//  void False
void cCcD_GObjInf::GetGObjInf() const {
	/* empty function */
}


/* 80084BE8-80084BF0 0008+00 s=7 e=0 z=0  None .text      GetShapeAttr__8cCcD_ObjCFv                                   */
// True False
//  bool False
bool cCcD_Obj::GetShapeAttr() const {
	return false;
}


/* 80084BF0-80084BF4 0004+00 s=7 e=0 z=0  None .text      Draw__8cCcD_ObjFRC8_GXColor                                  */
// True False
//  void False
//  _GXColor const& False
// 	 _GXColor const False
// 		 _GXColor False
void cCcD_Obj::Draw(_GXColor const& param_0) {
	/* empty function */
}


/* 80084BF4-80084CC0 00CC+00 s=3 e=0 z=0  None .text      __dt__8dCcD_SphFv                                            */
//	80084C14: 803ABFC0 (__vt__8dCcD_Sph)
//	80084C18: 803ABFC0 (__vt__8dCcD_Sph)
//	80084C38: 803C3540 (__vt__12cCcD_SphAttr)
//	80084C3C: 803C3540 (__vt__12cCcD_SphAttr)
//	80084C54: 803A7904 (__vt__8cM3dGSph)
//	80084C58: 803A7904 (__vt__8cM3dGSph)
//	80084C68: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	80084C6C: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	80084C7C: 803A7218 (__vt__8cM3dGAab)
//	80084C80: 803A7218 (__vt__8cM3dGAab)
//	80084C90: 800840E4 (__dt__12dCcD_GObjInfFv)
//	80084CA0: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dCcD_Sph::~dCcD_Sph() {
	nofralloc
#include "asm/d/cc/d_cc_d/__dt__8dCcD_SphFv.s"
}
#pragma pop


/* 80084CC0-80084CC8 0008+00 s=1 e=1 z=0  None .text      GetCoCP__12cCcD_CylAttrCFv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void cCcD_CylAttr::GetCoCP() const {
	nofralloc
#include "asm/d/cc/d_cc_d/GetCoCP__12cCcD_CylAttrCFv.s"
}
#pragma pop


/* 80084CC8-80084CD0 0008+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_CylAttrCFRC12cCcD_AabAttrP4cXyz            */
// False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  cXyz* False
// 	 cXyz False
bool cCcD_CylAttr::CrossAtTg(cCcD_AabAttr const& param_0, cXyz* param_1) const {
	return false;
}


/* 80084CD0-80084CD8 0008+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_CylAttrCFRC12cCcD_PntAttrP4cXyz            */
// False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  cXyz* False
// 	 cXyz False
bool cCcD_CylAttr::CrossAtTg(cCcD_PntAttr const& param_0, cXyz* param_1) const {
	return false;
}


/* 80084CD8-80084D10 0038+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_CylAttrCFRC14cCcD_ShapeAttrP4cXyz          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  cXyz* False
// 	 cXyz False
asm void cCcD_CylAttr::CrossAtTg(cCcD_ShapeAttr const& param_0, cXyz* param_1) const {
	nofralloc
#include "asm/d/cc/d_cc_d/CrossAtTg__12cCcD_CylAttrCFRC14cCcD_ShapeAttrP4cXyz.s"
}
#pragma pop


/* 80084D10-80084D18 0008+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_CylAttrCFRC12cCcD_AabAttrPf                  */
// False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  f32* False
// 	 f32 False
bool cCcD_CylAttr::CrossCo(cCcD_AabAttr const& param_0, f32* param_1) const {
	return false;
}


/* 80084D18-80084D20 0008+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_CylAttrCFRC12cCcD_TriAttrPf                  */
// False False
//  bool False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  f32* False
// 	 f32 False
bool cCcD_CylAttr::CrossCo(cCcD_TriAttr const& param_0, f32* param_1) const {
	return false;
}


/* 80084D20-80084D28 0008+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_CylAttrCFRC12cCcD_PntAttrPf                  */
// False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  f32* False
// 	 f32 False
bool cCcD_CylAttr::CrossCo(cCcD_PntAttr const& param_0, f32* param_1) const {
	return false;
}


/* 80084D28-80084D60 0038+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_CylAttrCFRC14cCcD_ShapeAttrPf                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  f32* False
// 	 f32 False
asm void cCcD_CylAttr::CrossCo(cCcD_ShapeAttr const& param_0, f32* param_1) const {
	nofralloc
#include "asm/d/cc/d_cc_d/CrossCo__12cCcD_CylAttrCFRC14cCcD_ShapeAttrPf.s"
}
#pragma pop


/* 80084D60-80084E2C 00CC+00 s=3 e=2 z=0  None .text      __dt__8dCcD_CylFv                                            */
//	80084D80: 803AC050 (__vt__8dCcD_Cyl)
//	80084D84: 803AC050 (__vt__8dCcD_Cyl)
//	80084DA4: 803C35A4 (__vt__12cCcD_CylAttr)
//	80084DA8: 803C35A4 (__vt__12cCcD_CylAttr)
//	80084DC0: 803A720C (__vt__8cM3dGCyl)
//	80084DC4: 803A720C (__vt__8cM3dGCyl)
//	80084DD4: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	80084DD8: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	80084DE8: 803A7218 (__vt__8cM3dGAab)
//	80084DEC: 803A7218 (__vt__8cM3dGAab)
//	80084DFC: 800840E4 (__dt__12dCcD_GObjInfFv)
//	80084E0C: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm dCcD_Cyl::~dCcD_Cyl() {
	nofralloc
#include "asm/d/cc/d_cc_d/__dt__8dCcD_CylFv.s"
}
#pragma pop


/* 80084E2C-80084E38 000C+00 s=2 e=3 z=0  None .text      GetCoCP__14cCcD_ShapeAttrFv                                  */
//	80084E2C: 80430CB4 (m_virtual_center__14cCcD_ShapeAttr)
//	80084E30: 80430CB4 (m_virtual_center__14cCcD_ShapeAttr)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void cCcD_ShapeAttr::GetCoCP() {
	nofralloc
#include "asm/d/cc/d_cc_d/GetCoCP__14cCcD_ShapeAttrFv.s"
}
#pragma pop


/* 80084E38-80084E44 000C+00 s=2 e=3 z=0  None .text      GetCoCP__14cCcD_ShapeAttrCFv                                 */
//	80084E38: 80430CB4 (m_virtual_center__14cCcD_ShapeAttr)
//	80084E3C: 80430CB4 (m_virtual_center__14cCcD_ShapeAttr)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void cCcD_ShapeAttr::GetCoCP() const {
	nofralloc
#include "asm/d/cc/d_cc_d/GetCoCP__14cCcD_ShapeAttrCFv.s"
}
#pragma pop


/* 80084E44-80084E4C 0008+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_TriAttrCFRC12cCcD_AabAttrP4cXyz            */
// False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  cXyz* False
// 	 cXyz False
bool cCcD_TriAttr::CrossAtTg(cCcD_AabAttr const& param_0, cXyz* param_1) const {
	return false;
}


/* 80084E4C-80084E54 0008+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_TriAttrCFRC12cCcD_PntAttrP4cXyz            */
// False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  cXyz* False
// 	 cXyz False
bool cCcD_TriAttr::CrossAtTg(cCcD_PntAttr const& param_0, cXyz* param_1) const {
	return false;
}


/* 80084E54-80084E8C 0038+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_TriAttrCFRC14cCcD_ShapeAttrP4cXyz          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  cXyz* False
// 	 cXyz False
asm void cCcD_TriAttr::CrossAtTg(cCcD_ShapeAttr const& param_0, cXyz* param_1) const {
	nofralloc
#include "asm/d/cc/d_cc_d/CrossAtTg__12cCcD_TriAttrCFRC14cCcD_ShapeAttrP4cXyz.s"
}
#pragma pop


/* 80084E8C-80084E94 0008+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_TriAttrCFRC12cCcD_SphAttrPf                  */
// False False
//  bool False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  f32* False
// 	 f32 False
bool cCcD_TriAttr::CrossCo(cCcD_SphAttr const& param_0, f32* param_1) const {
	return false;
}


/* 80084E94-80084E9C 0008+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_TriAttrCFRC12cCcD_CylAttrPf                  */
// False False
//  bool False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  f32* False
// 	 f32 False
bool cCcD_TriAttr::CrossCo(cCcD_CylAttr const& param_0, f32* param_1) const {
	return false;
}


/* 80084E9C-80084EA4 0008+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_TriAttrCFRC12cCcD_AabAttrPf                  */
// False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  f32* False
// 	 f32 False
bool cCcD_TriAttr::CrossCo(cCcD_AabAttr const& param_0, f32* param_1) const {
	return false;
}


/* 80084EA4-80084EAC 0008+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_TriAttrCFRC12cCcD_TriAttrPf                  */
// False False
//  bool False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  f32* False
// 	 f32 False
bool cCcD_TriAttr::CrossCo(cCcD_TriAttr const& param_0, f32* param_1) const {
	return false;
}


/* 80084EAC-80084EB4 0008+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_TriAttrCFRC12cCcD_CpsAttrPf                  */
// False False
//  bool False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  f32* False
// 	 f32 False
bool cCcD_TriAttr::CrossCo(cCcD_CpsAttr const& param_0, f32* param_1) const {
	return false;
}


/* 80084EB4-80084EBC 0008+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_TriAttrCFRC12cCcD_PntAttrPf                  */
// False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  f32* False
// 	 f32 False
bool cCcD_TriAttr::CrossCo(cCcD_PntAttr const& param_0, f32* param_1) const {
	return false;
}


/* 80084EBC-80084EF4 0038+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_TriAttrCFRC14cCcD_ShapeAttrPf                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  f32* False
// 	 f32 False
asm void cCcD_TriAttr::CrossCo(cCcD_ShapeAttr const& param_0, f32* param_1) const {
	nofralloc
#include "asm/d/cc/d_cc_d/CrossCo__12cCcD_TriAttrCFRC14cCcD_ShapeAttrPf.s"
}
#pragma pop


/* 80084EF4-80084FD4 00E0+00 s=3 e=0 z=0  None .text      __dt__8dCcD_TriFv                                            */
//	80084F14: 803AC0E0 (__vt__8dCcD_Tri)
//	80084F18: 803AC0E0 (__vt__8dCcD_Tri)
//	80084F38: 803C366C (__vt__12cCcD_TriAttr)
//	80084F3C: 803C366C (__vt__12cCcD_TriAttr)
//	80084F54: 803ABB84 (__vt__8cM3dGTri)
//	80084F58: 803ABB84 (__vt__8cM3dGTri)
//	80084F68: 803A37C0 (__vt__8cM3dGPla)
//	80084F6C: 803A37C0 (__vt__8cM3dGPla)
//	80084F7C: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	80084F80: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	80084F90: 803A7218 (__vt__8cM3dGAab)
//	80084F94: 803A7218 (__vt__8cM3dGAab)
//	80084FA4: 800840E4 (__dt__12dCcD_GObjInfFv)
//	80084FB4: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dCcD_Tri::~dCcD_Tri() {
	nofralloc
#include "asm/d/cc/d_cc_d/__dt__8dCcD_TriFv.s"
}
#pragma pop


/* 80084FD4-80084FDC 0008+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_AabAttrP4cXyz            */
// False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  cXyz* False
// 	 cXyz False
bool cCcD_CpsAttr::CrossAtTg(cCcD_AabAttr const& param_0, cXyz* param_1) const {
	return false;
}


/* 80084FDC-80084FE4 0008+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_PntAttrP4cXyz            */
// False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  cXyz* False
// 	 cXyz False
bool cCcD_CpsAttr::CrossAtTg(cCcD_PntAttr const& param_0, cXyz* param_1) const {
	return false;
}


/* 80084FE4-8008501C 0038+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_CpsAttrCFRC14cCcD_ShapeAttrP4cXyz          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  cXyz* False
// 	 cXyz False
asm void cCcD_CpsAttr::CrossAtTg(cCcD_ShapeAttr const& param_0, cXyz* param_1) const {
	nofralloc
#include "asm/d/cc/d_cc_d/CrossAtTg__12cCcD_CpsAttrCFRC14cCcD_ShapeAttrP4cXyz.s"
}
#pragma pop


/* 8008501C-80085024 0008+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_CpsAttrCFRC12cCcD_AabAttrPf                  */
// False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  f32* False
// 	 f32 False
bool cCcD_CpsAttr::CrossCo(cCcD_AabAttr const& param_0, f32* param_1) const {
	return false;
}


/* 80085024-8008502C 0008+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_CpsAttrCFRC12cCcD_TriAttrPf                  */
// False False
//  bool False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  f32* False
// 	 f32 False
bool cCcD_CpsAttr::CrossCo(cCcD_TriAttr const& param_0, f32* param_1) const {
	return false;
}


/* 8008502C-80085034 0008+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_CpsAttrCFRC12cCcD_PntAttrPf                  */
// False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  f32* False
// 	 f32 False
bool cCcD_CpsAttr::CrossCo(cCcD_PntAttr const& param_0, f32* param_1) const {
	return false;
}


/* 80085034-8008506C 0038+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_CpsAttrCFRC14cCcD_ShapeAttrPf                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  f32* False
// 	 f32 False
asm void cCcD_CpsAttr::CrossCo(cCcD_ShapeAttr const& param_0, f32* param_1) const {
	nofralloc
#include "asm/d/cc/d_cc_d/CrossCo__12cCcD_CpsAttrCFRC14cCcD_ShapeAttrPf.s"
}
#pragma pop


/* 8008506C-80085130 00C4+00 s=3 e=2 z=0  None .text      __dt__8dCcD_CpsFv                                            */
//	8008508C: 803AC170 (__vt__8dCcD_Cps)
//	80085090: 803AC170 (__vt__8dCcD_Cps)
//	800850B0: 803C3608 (__vt__12cCcD_CpsAttr)
//	800850B4: 803C3608 (__vt__12cCcD_CpsAttr)
//	800850CC: 8026EFA4 (__dt__8cM3dGCpsFv)
//	800850D8: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	800850DC: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	800850EC: 803A7218 (__vt__8cM3dGAab)
//	800850F0: 803A7218 (__vt__8cM3dGAab)
//	80085100: 800840E4 (__dt__12dCcD_GObjInfFv)
//	80085110: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm dCcD_Cps::~dCcD_Cps() {
	nofralloc
#include "asm/d/cc/d_cc_d/__dt__8dCcD_CpsFv.s"
}
#pragma pop


/* 80085130-80085138 0008+00 s=3 e=0 z=0  None .text      GetShapeAttr__8cCcD_ObjFv                                    */
// True False
//  bool False
bool cCcD_Obj::GetShapeAttr() {
	return false;
}


/* 80085138-80085158 0020+00 s=1 e=0 z=0  None .text      ClrAtHit__12cCcD_GObjInfFv                                   */
//	80085144: 80264868 (ClrHit__10cCcD_ObjAtFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void cCcD_GObjInf::ClrAtHit() {
	nofralloc
#include "asm/d/cc/d_cc_d/ClrAtHit__12cCcD_GObjInfFv.s"
}
#pragma pop


/* 80085158-8008517C 0024+00 s=1 e=0 z=0  None .text      ClrTgHit__12cCcD_GObjInfFv                                   */
//	80085168: 802648B0 (ClrHit__10cCcD_ObjTgFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void cCcD_GObjInf::ClrTgHit() {
	nofralloc
#include "asm/d/cc/d_cc_d/ClrTgHit__12cCcD_GObjInfFv.s"
}
#pragma pop


/* 8008517C-800851A0 0024+00 s=1 e=0 z=0  None .text      ClrCoHit__12cCcD_GObjInfFv                                   */
//	8008518C: 802648E8 (ClrHit__10cCcD_ObjCoFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void cCcD_GObjInf::ClrCoHit() {
	nofralloc
#include "asm/d/cc/d_cc_d/ClrCoHit__12cCcD_GObjInfFv.s"
}
#pragma pop


/* 800851A0-800851A4 0004+00 s=1 e=0 z=0  None .text      GetGObjInf__12cCcD_GObjInfFv                                 */
// True False
//  void False
void cCcD_GObjInf::GetGObjInf() {
	/* empty function */
}


/* 800851A4-800851AC 0008+00 s=1 e=0 z=0  None .text      GetGObjInf__8cCcD_ObjCFv                                     */
// True False
//  bool False
bool cCcD_Obj::GetGObjInf() const {
	return false;
}


/* 800851AC-8008523C 0090+00 s=2 e=0 z=0  None .text      __dt__9dCcD_SttsFv                                           */
//	800851C4: 803AC2E4 (__vt__9dCcD_Stts)
//	800851C8: 803AC2E4 (__vt__9dCcD_Stts)
//	800851E0: 803AC310 (__vt__10dCcD_GStts)
//	800851E4: 803AC310 (__vt__10dCcD_GStts)
//	800851F4: 803AC31C (__vt__10cCcD_GStts)
//	800851F8: 803AC31C (__vt__10cCcD_GStts)
//	80085208: 803C3728 (__vt__9cCcD_Stts)
//	8008520C: 803C3728 (__vt__9cCcD_Stts)
//	80085220: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dCcD_Stts::~dCcD_Stts() {
	nofralloc
#include "asm/d/cc/d_cc_d/__dt__9dCcD_SttsFv.s"
}
#pragma pop


/* 8008523C-80085298 005C+00 s=1 e=0 z=0  None .text      __dt__10dCcD_GSttsFv                                         */
//	80085254: 803AC310 (__vt__10dCcD_GStts)
//	80085258: 803AC310 (__vt__10dCcD_GStts)
//	80085264: 803AC31C (__vt__10cCcD_GStts)
//	80085268: 803AC31C (__vt__10cCcD_GStts)
//	8008527C: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dCcD_GStts::~dCcD_GStts() {
	nofralloc
#include "asm/d/cc/d_cc_d/__dt__10dCcD_GSttsFv.s"
}
#pragma pop


/* 80085298-800852A0 0008+00 s=1 e=0 z=0  None .text      @28@__dt__9dCcD_SttsFv                                       */
//	8008529C: 800851AC (__dt__9dCcD_SttsFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_80085298() {
	nofralloc
#include "asm/d/cc/d_cc_d/func_80085298.s"
}
#pragma pop


/* 800852A0-800852A8 0008+00 s=1 e=0 z=0  None .text      @292@__dt__8dCcD_CpsFv                                       */
//	800852A4: 8008506C (__dt__8dCcD_CpsFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_800852A0() {
	nofralloc
#include "asm/d/cc/d_cc_d/func_800852A0.s"
}
#pragma pop


/* 800852A8-800852B0 0008+00 s=1 e=0 z=0  None .text      @260@__dt__8dCcD_CpsFv                                       */
//	800852AC: 8008506C (__dt__8dCcD_CpsFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_800852A8() {
	nofralloc
#include "asm/d/cc/d_cc_d/func_800852A8.s"
}
#pragma pop


/* 800852B0-800852B8 0008+00 s=1 e=0 z=0  None .text      @292@__dt__8dCcD_TriFv                                       */
//	800852B4: 80084EF4 (__dt__8dCcD_TriFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_800852B0() {
	nofralloc
#include "asm/d/cc/d_cc_d/func_800852B0.s"
}
#pragma pop


/* 800852B8-800852C0 0008+00 s=1 e=0 z=0  None .text      @260@__dt__8dCcD_TriFv                                       */
//	800852BC: 80084EF4 (__dt__8dCcD_TriFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_800852B8() {
	nofralloc
#include "asm/d/cc/d_cc_d/func_800852B8.s"
}
#pragma pop


/* 800852C0-800852C8 0008+00 s=1 e=0 z=0  None .text      @292@__dt__8dCcD_CylFv                                       */
//	800852C4: 80084D60 (__dt__8dCcD_CylFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_800852C0() {
	nofralloc
#include "asm/d/cc/d_cc_d/func_800852C0.s"
}
#pragma pop


/* 800852C8-800852D0 0008+00 s=1 e=0 z=0  None .text      @260@__dt__8dCcD_CylFv                                       */
//	800852CC: 80084D60 (__dt__8dCcD_CylFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_800852C8() {
	nofralloc
#include "asm/d/cc/d_cc_d/func_800852C8.s"
}
#pragma pop


/* 800852D0-800852D8 0008+00 s=1 e=0 z=0  None .text      @292@__dt__8dCcD_SphFv                                       */
//	800852D4: 80084BF4 (__dt__8dCcD_SphFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_800852D0() {
	nofralloc
#include "asm/d/cc/d_cc_d/func_800852D0.s"
}
#pragma pop


/* 800852D8-800852E0 0008+00 s=1 e=0 z=0  None .text      @260@__dt__8dCcD_SphFv                                       */
//	800852DC: 80084BF4 (__dt__8dCcD_SphFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_800852D8() {
	nofralloc
#include "asm/d/cc/d_cc_d/func_800852D8.s"
}
#pragma pop


