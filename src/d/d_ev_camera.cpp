// 
// Generated By: dol2asm
// Translation Unit: d/d_ev_camera
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "d/d_ev_camera.h"

// 
// Types:
// 

struct fopAc_ac_c {
};

struct daPy_py_c {
	/* 800977B4 */ // False False
void checkMidnaRide() const;
	/* 80097850 */ // False False
//  bool False
bool checkCanoeRide() const;
	/* 80097858 */ // False False
//  bool False
bool checkBoardRide() const;
	/* 80097860 */ // False False
//  bool False
bool checkSpinnerRide() const;
	/* 80097868 */ // False False
//  bool False
bool checkBoarRide() const;
};

struct daMidna_c {
	/* 800977A8 */ // True False
void checkNoDraw() const;
};

struct daAlink_c {
	/* 80097870 */ // False False
void getShadowTalkAtnPos();
};

struct dEvt_control_c {
	/* 800432EC */ // False False
//  unsigned int False
void convPId(unsigned int);
	/* 800434D8 */ // False False
//  u8 False
void searchMapEventData(u8);
};

struct Vec {
};

struct cXyz {
	/* 80009184 */ // False False
~cXyz();
	/* 8008E790 */ // False False
void abs() const;
	/* 8008E8D0 */ // False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
void operator-=(Vec const&);
	/* 8008E904 */ // False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
void operator+=(Vec const&);
	/* 800977D8 */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
void operator=(cXyz const&);
	/* 800977F4 */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
cXyz(cXyz const&);
	/* 80266AE4 */ // False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
void operator+(Vec const&) const;
	/* 80266B34 */ // False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
void operator-(Vec const&) const;
	/* 80266B84 */ // False False
//  f32 False
void operator*(f32) const;
	/* 80266CE4 */ // False False
void norm() const;
	/* 80266EF4 */ // False False
void normalize();
};

struct dEvent_manager_c {
	/* 800480EC */ // False False
//  int False
//  char const* False
// 	 char const False
// 		 char False
//  int False
void getMySubstanceP(int, char const*, int);
	/* 80048144 */ // False False
//  int False
//  char const* False
// 	 char const False
// 		 char False
void getMySubstanceNum(int, char const*);
	/* 800483C4 */ // False False
//  cXyz* False
// 	 cXyz False
void setGoal(cXyz*);
};

struct dDemo_object_c {
	/* 80039128 */ // False False
void getActiveCamera();
};

struct dCcS {
	/* 80086D8C */ // False False
//  cXyz& False
// 	 cXyz False
//  cXyz& False
// 	 cXyz False
//  f32 False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
void ChkCamera(cXyz&, cXyz&, f32, fopAc_ac_c*, fopAc_ac_c*, fopAc_ac_c*);
};

struct dCamera_c {
	struct dCamInfo_c {
	};

	/* 80088A7C */ // False False
//  int False
//  int False
//  ... False
void StartEventCamera(int, int, ...);
	/* 80088BBC */ // False False
//  int False
void EndEventCamera(int);
	/* 80088C24 */ // True False
//  char* False
// 	 char False
void searchEventArgData(char*);
	/* 8008908C */ // False False
//  int* False
// 	 int False
//  char* False
// 	 char False
//  int False
void getEvIntData(int*, char*, int);
	/* 80088CB0 */ // False False
//  int* False
// 	 int False
//  char* False
// 	 char False
void getEvIntData(int*, char*);
	/* 80088D90 */ // False False
//  f32* False
// 	 f32 False
//  char* False
// 	 char False
void getEvFloatData(f32*, char*);
	/* 80089154 */ // False False
//  f32* False
// 	 f32 False
//  char* False
// 	 char False
//  f32 False
void getEvFloatData(f32*, char*, f32);
	/* 80088E58 */ // True False
//  f32** False
// 	 f32* False
// 		 f32 False
//  char* False
// 	 char False
void getEvFloatListData(f32**, char*);
	/* 80088F1C */ // True False
//  cXyz** False
// 	 cXyz* False
// 		 cXyz False
//  char* False
// 	 char False
void getEvXyzListData(cXyz**, char*);
	/* 8008941C */ // True False
//  char* False
// 	 char False
//  char* False
// 	 char False
void getEvStringPntData(char*, char*);
	/* 80088FE0 */ // True False
//  char* False
// 	 char False
void getEvStringPntData(char*);
	/* 8008922C */ // True False
//  cXyz* False
// 	 cXyz False
//  char* False
// 	 char False
//  cXyz False
void getEvXyzData(cXyz*, char*, cXyz);
	/* 8008933C */ // False False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
void getEvStringData(char*, char*, char*);
	/* 800894C4 */ // False False
//  char* False
// 	 char False
void getEvActor(char*);
	/* 800895F4 */ // False False
//  char* False
// 	 char False
//  char* False
// 	 char False
void getEvActor(char*, char*);
	/* 80089730 */ // False False
void pauseEvCamera();
	/* 800897E8 */ // False False
void fixedFrameEvCamera();
	/* 8008A510 */ // False False
void stokerEvCamera();
	/* 8008A974 */ // False False
void rollingEvCamera();
	/* 8008B9B0 */ // False False
void fixedPositionEvCamera();
	/* 8008BE2C */ // False False
void uniformTransEvCamera();
	/* 8008BE50 */ // False False
void uniformBrakeEvCamera();
	/* 8008BE74 */ // False False
void uniformAcceleEvCamera();
	/* 8008BE98 */ // True False
//  int False
void transEvCamera(int);
	/* 8008E938 */ // False False
void watchActorEvCamera();
	/* 8008FAE8 */ // False False
void restorePosEvCamera();
	/* 80090174 */ // False False
void talktoEvCamera();
	/* 80090230 */ // False False
void maptoolIdEvCamera();
	/* 80090478 */ // False False
void styleEvCamera();
	/* 80090514 */ // False False
void gameOverEvCamera();
	/* 80091468 */ // False False
void tactEvCamera();
	/* 800923B8 */ // False False
//  bool False
bool turnToActorEvCamera();
	/* 800923C0 */ // False False
void stbWaitEvCamera();
	/* 800924D0 */ // False False
void saveEvCamera();
	/* 8009258C */ // False False
void loadEvCamera();
	/* 800929AC */ // False False
void useItem0EvCamera();
	/* 800937AC */ // False False
void useItem1EvCamera();
	/* 80094240 */ // False False
void getItemEvCamera();
	/* 80094A70 */ // False False
void possessedEvCamera();
	/* 80095010 */ // False False
void fixedFramesEvCamera();
	/* 8009544C */ // False False
void bSplineEvCamera();
	/* 800956E4 */ // False False
void twoActor0EvCamera();
	/* 80095E7C */ // False False
void peepHoleEvCamera();
	/* 80095FD0 */ // False False
void digHoleEvCamera();
	/* 800965AC */ // False False
void hintTalkEvCamera();
	/* 80096EDC */ // False False
void bspTransEvCamera();
	/* 80097694 */ // False False
//  bool False
bool portalWarpEvCamera();
	/* 8009771C */ // False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
void attentionPos(fopAc_ac_c*);
	/* 80097738 */ // False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
void directionOf(fopAc_ac_c*);
	/* 8009775C */ // False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
void positionOf(fopAc_ac_c*);
	/* 80097778 */ // False False
//  u32 False
void setFlag(u32);
	/* 8009778C */ // False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
void eyePos(fopAc_ac_c*);
	/* 80164944 */ // False False
//  s32 False
//  s32 False
void GetCameraTypeFromMapToolID(s32, s32);
	/* 80164C64 */ // False False
//  dCamera_c::dCamInfo_c* False
// 	 dCamera_c::dCamInfo_c False
//  s16 False
void pushInfo(dCamera_c::dCamInfo_c*, s16);
	/* 80164E20 */ // False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  cXyz* False
// 	 cXyz False
//  f32 False
void relationalPos(fopAc_ac_c*, fopAc_ac_c*, cXyz*, f32);
	/* 80164D6C */ // False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  cXyz* False
// 	 cXyz False
void relationalPos(fopAc_ac_c*, cXyz*);
	/* 8016517C */ // False False
//  cXyz* False
// 	 cXyz False
void pointInSight(cXyz*);
	/* 80165AF0 */ // False False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
//  u32 False
void lineBGCheck(cXyz*, cXyz*, u32);
	/* 801659F4 */ // False False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
//  u32 False
void lineBGCheck(cXyz*, cXyz*, cXyz*, u32);
	/* 80180C68 */ // False False
void Reset();
	/* 80181170 */ // False False
//  int False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  f32 False
//  f32 False
void StartBlure(int, fopAc_ac_c*, f32, f32);
	/* 80181208 */ // False False
//  f32 False
void SetBlureAlpha(f32);
	/* 80181210 */ // False False
//  f32 False
//  f32 False
//  f32 False
void SetBlureScale(f32, f32, f32);
	/* 80181220 */ // False False
//  f32 False
//  f32 False
//  f32 False
void SetBlurePosition(f32, f32, f32);
};

struct dCamParam_c {
	/* 80088620 */ // False False
//  u32 False
void SearchStyle(u32);
};

struct cSAngle {
	/* 80030510 */ // False False
~cSAngle();
	/* 80270F68 */ // False False
//  cSAngle const& False
// 	 cSAngle const False
// 		 cSAngle False
cSAngle(cSAngle const&);
	/* 80270FC8 */ // False False
//  f32 False
cSAngle(f32);
	/* 80270F98 */ // False False
//  s16 False
cSAngle(s16);
	/* 8027100C */ // False False
//  f32 False
void Val(f32);
	/* 80271030 */ // False False
void Degree() const;
	/* 802710CC */ // False False
void Abs() const;
	/* 802710E8 */ // False False
void Inv() const;
	/* 80271120 */ // False False
void Cos() const;
	/* 802711A4 */ // False False
//  cSAngle const& False
// 	 cSAngle const False
// 		 cSAngle False
void operator-(cSAngle const&) const;
	/* 80271148 */ // False False
void operator-() const;
	/* 80271174 */ // False False
//  cSAngle const& False
// 	 cSAngle const False
// 		 cSAngle False
void operator+(cSAngle const&) const;
	/* 802711FC */ // False False
//  s16 False
void operator+(s16) const;
	/* 802711D4 */ // False False
//  cSAngle const& False
// 	 cSAngle const False
// 		 cSAngle False
void operator+=(cSAngle const&);
	/* 80271264 */ // False False
//  f32 False
void operator*(f32) const;
	/* 802712B4 */ // False False
//  f32 False
void operator*=(f32);
};

struct dCamMath {
	/* 8008813C */ // False False
//  f32 False
//  f32 False
void rationalBezierRatio(f32, f32);
	/* 80088384 */ // False False
//  cXyz& False
// 	 cXyz False
//  cSAngle False
void xyzRotateY(cXyz&, cSAngle);
	/* 800883EC */ // False False
//  cXyz& False
// 	 cXyz False
//  cXyz& False
// 	 cXyz False
void xyzHorizontalDistance(cXyz&, cXyz&);
};

struct d2DBSplinePath {
	/* 80097878 */ // False False
//  s32 False
//  s32 False
void Init(s32, s32);
	/* 80097904 */ // False False
void Step();
	/* 80097B20 */ // False False
//  f32* False
// 	 f32 False
void Calc(f32*);
	/* 80097A6C */ // False False
//  cXyz* False
// 	 cXyz False
void Calc(cXyz*);
};

struct camera_class {
};

struct cSGlobe {
	/* 8007167C */ // False False
~cSGlobe();
	/* 8008E774 */ // False False
//  cSGlobe const& False
// 	 cSGlobe const False
// 		 cSGlobe False
void operator=(cSGlobe const&);
	/* 8008E894 */ // False False
//  cSAngle const& False
// 	 cSAngle const False
// 		 cSAngle False
void U(cSAngle const&);
	/* 8008FA58 */ // False False
//  cSAngle const& False
// 	 cSAngle const False
// 		 cSAngle False
void V(cSAngle const&);
	/* 80271880 */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
cSGlobe(cXyz const&);
	/* 802717F0 */ // False False
//  cSGlobe const& False
// 	 cSGlobe const False
// 		 cSGlobe False
cSGlobe(cSGlobe const&);
	/* 80271850 */ // False False
//  f32 False
//  cSAngle const& False
// 	 cSAngle const False
// 		 cSAngle False
//  cSAngle const& False
// 	 cSAngle const False
// 		 cSAngle False
cSGlobe(f32, cSAngle const&, cSAngle const&);
	/* 80271A08 */ // False False
//  f32 False
//  cSAngle const& False
// 	 cSAngle const False
// 		 cSAngle False
//  cSAngle const& False
// 	 cSAngle const False
// 		 cSAngle False
void Val(f32, cSAngle const&, cSAngle const&);
	/* 80271A70 */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
void Val(cXyz const&);
	/* 80271AB4 */ // False False
void Xyz() const;
	/* 80271B30 */ // False False
void Norm() const;
	/* 80271B7C */ // False False
void Invert();
};

struct cM3dGPla {
	/* 8001DB90 */ // False False
~cM3dGPla();
};

struct cM3dGLin {
	/* 80036A5C */ // False False
~cM3dGLin();
	/* 8026F2A8 */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
cM3dGLin(cXyz const&, cXyz const&);
};

struct cBgS_PolyInfo {
};

struct cBgS {
	/* 80074744 */ // False False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
//  cM3dGPla* False
// 	 cM3dGPla False
void GetTriPla(cBgS_PolyInfo const&, cM3dGPla*) const;
};

// 
// Forward References:
// 

// True False
//  int False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  s16 False
static void dComIfGp_saveCameraPosition(int, cXyz*, cXyz*, f32, s16);
// False False
//  void const* False
// 	 void const False
// 		 void False
void fopAcM_GetID(void const*);

// True False
extern "C" static void func_800889F8();
// False False
//  int False
//  int False
//  ... False
extern "C" void StartEventCamera__9dCamera_cFiie();
// False False
//  int False
extern "C" void EndEventCamera__9dCamera_cFi();
// True False
//  char* False
// 	 char False
extern "C" void searchEventArgData__9dCamera_cFPc();
// False False
//  int* False
// 	 int False
//  char* False
// 	 char False
extern "C" void getEvIntData__9dCamera_cFPiPc();
// False False
//  f32* False
// 	 f32 False
//  char* False
// 	 char False
extern "C" void getEvFloatData__9dCamera_cFPfPc();
// True False
//  f32** False
// 	 f32* False
// 		 f32 False
//  char* False
// 	 char False
extern "C" void getEvFloatListData__9dCamera_cFPPfPc();
// True False
//  cXyz** False
// 	 cXyz* False
// 		 cXyz False
//  char* False
// 	 char False
extern "C" void getEvXyzListData__9dCamera_cFPP4cXyzPc();
// True False
//  char* False
// 	 char False
extern "C" void getEvStringPntData__9dCamera_cFPc();
// False False
//  int* False
// 	 int False
//  char* False
// 	 char False
//  int False
extern "C" void getEvIntData__9dCamera_cFPiPci();
// False False
//  f32* False
// 	 f32 False
//  char* False
// 	 char False
//  f32 False
extern "C" void getEvFloatData__9dCamera_cFPfPcf();
// True False
//  cXyz* False
// 	 cXyz False
//  char* False
// 	 char False
//  cXyz False
extern "C" void getEvXyzData__9dCamera_cFP4cXyzPc4cXyz();
// False False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
extern "C" void getEvStringData__9dCamera_cFPcPcPc();
// True False
//  char* False
// 	 char False
//  char* False
// 	 char False
extern "C" void getEvStringPntData__9dCamera_cFPcPc();
// False False
//  char* False
// 	 char False
extern "C" void getEvActor__9dCamera_cFPc();
// False False
//  char* False
// 	 char False
//  char* False
// 	 char False
extern "C" void getEvActor__9dCamera_cFPcPc();
// False False
extern "C" void pauseEvCamera__9dCamera_cFv();
// False False
extern "C" void fixedFrameEvCamera__9dCamera_cFv();
// False False
extern "C" void stokerEvCamera__9dCamera_cFv();
// False False
extern "C" void rollingEvCamera__9dCamera_cFv();
// False False
extern "C" void fixedPositionEvCamera__9dCamera_cFv();
// False False
extern "C" void uniformTransEvCamera__9dCamera_cFv();
// False False
extern "C" void uniformBrakeEvCamera__9dCamera_cFv();
// False False
extern "C" void uniformAcceleEvCamera__9dCamera_cFv();
// True False
//  int False
extern "C" void transEvCamera__9dCamera_cFi();
// True False
extern "C" static void func_8008E750();
// False False
//  cSGlobe const& False
// 	 cSGlobe const False
// 		 cSGlobe False
extern "C" void __as__7cSGlobeFRC7cSGlobe();
// False False
extern "C" void abs__4cXyzCFv();
// False False
//  cSAngle const& False
// 	 cSAngle const False
// 		 cSAngle False
extern "C" void U__7cSGlobeFRC7cSAngle();
// False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
extern "C" void __ami__4cXyzFRC3Vec();
// False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
extern "C" void __apl__4cXyzFRC3Vec();
// False False
extern "C" void watchActorEvCamera__9dCamera_cFv();
// False False
//  cSAngle const& False
// 	 cSAngle const False
// 		 cSAngle False
extern "C" void V__7cSGlobeFRC7cSAngle();
// True False
extern "C" static void func_8008FA94();
// False False
extern "C" void restorePosEvCamera__9dCamera_cFv();
// False False
extern "C" void talktoEvCamera__9dCamera_cFv();
// False False
extern "C" void maptoolIdEvCamera__9dCamera_cFv();
// False False
extern "C" void styleEvCamera__9dCamera_cFv();
// False False
extern "C" void gameOverEvCamera__9dCamera_cFv();
// False False
extern "C" void tactEvCamera__9dCamera_cFv();
// True False
//  int False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  s16 False
extern "C" static void dComIfGp_saveCameraPosition__FiP4cXyzP4cXyzfs();
// False False
//  bool False
extern "C" bool turnToActorEvCamera__9dCamera_cFv();
// False False
extern "C" void stbWaitEvCamera__9dCamera_cFv();
// False False
extern "C" void saveEvCamera__9dCamera_cFv();
// False False
extern "C" void loadEvCamera__9dCamera_cFv();
// False False
extern "C" void useItem0EvCamera__9dCamera_cFv();
// False False
extern "C" void useItem1EvCamera__9dCamera_cFv();
// False False
extern "C" void getItemEvCamera__9dCamera_cFv();
// False False
extern "C" void possessedEvCamera__9dCamera_cFv();
// False False
extern "C" void fixedFramesEvCamera__9dCamera_cFv();
// False False
extern "C" void bSplineEvCamera__9dCamera_cFv();
// False False
extern "C" void twoActor0EvCamera__9dCamera_cFv();
// False False
extern "C" void peepHoleEvCamera__9dCamera_cFv();
// False False
extern "C" void digHoleEvCamera__9dCamera_cFv();
// False False
extern "C" void hintTalkEvCamera__9dCamera_cFv();
// False False
extern "C" void bspTransEvCamera__9dCamera_cFv();
// False False
//  bool False
extern "C" bool portalWarpEvCamera__9dCamera_cFv();
// False False
extern "C" void __sinit_d_ev_camera_cpp();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
extern "C" void attentionPos__9dCamera_cFP10fopAc_ac_c();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
extern "C" void directionOf__9dCamera_cFP10fopAc_ac_c();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
extern "C" void positionOf__9dCamera_cFP10fopAc_ac_c();
// False False
//  u32 False
extern "C" void setFlag__9dCamera_cFUl();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
extern "C" void eyePos__9dCamera_cFP10fopAc_ac_c();
// True False
extern "C" void checkNoDraw__9daMidna_cCFv();
// False False
extern "C" void checkMidnaRide__9daPy_py_cCFv();
// False False
//  void const* False
// 	 void const False
// 		 void False
extern "C" void fopAcM_GetID__FPCv();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
extern "C" void __as__4cXyzFRC4cXyz();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
extern "C" void __ct__4cXyzFRC4cXyz();
// True False
extern "C" static void func_80097810();
// True False
//  void False
extern "C" static void func_8009784C();
// False False
//  bool False
extern "C" bool checkCanoeRide__9daPy_py_cCFv();
// False False
//  bool False
extern "C" bool checkBoardRide__9daPy_py_cCFv();
// False False
//  bool False
extern "C" bool checkSpinnerRide__9daPy_py_cCFv();
// False False
//  bool False
extern "C" bool checkBoarRide__9daPy_py_cCFv();
// False False
extern "C" void getShadowTalkAtnPos__9daAlink_cFv();
extern "C" extern u8 const d_d_ev_camera__lit_5984[16];
extern "C" extern u8 const d_d_ev_camera__lit_5985[28];
extern "C" extern u8 const d_d_ev_camera__lit_5986[28];
extern "C" extern u8 const lit_5987[20];
extern "C" extern u8 const lit_5988[20];
extern "C" extern char const* const d_d_ev_camera__stringBase0;
extern "C" extern u8 d_d_ev_camera__lit_4203[12];

// 
// External References:
// 

// False False
//  Vec* False
// 	 Vec False
//  Vec* False
// 	 Vec False
void mDoLib_project(Vec*, Vec*);
// False False
//  void* (*)(void*, void*) False
// 	 * False
// 		  False
// 	 void* False
// 		 void False
// 	 void* False
// 		 void False
// 	 void* False
// 		 void False
//  void* False
// 	 void False
void fopAcIt_Judge(void* (*)(void*, void*), void*);
// False False
//  char const* False
// 	 char const False
// 		 char False
//  s16 False
void fopAcM_searchFromName4Event(char const*, s16);
// False False
//  camera_class* False
// 	 camera_class False
void fopCamM_GetParam(camera_class*);
// False False
//  void* False
// 	 void False
//  void* False
// 	 void False
void fpcSch_JudgeForPName(void*, void*);
// False False
//  void* False
// 	 void False
//  void* False
// 	 void False
void fpcSch_JudgeByID(void*, void*);
// False False
//  f32 False
//  f32 False
void cM_atan2s(f32, f32);
// False False
//  f32 False
void cM_rndFX(f32);
// False False
//  cM3dGLin const* False
// 	 cM3dGLin const False
// 		 cM3dGLin False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  Vec* False
// 	 Vec False
//  f32* False
// 	 f32 False
void cM3d_Len3dSqPntAndSegLine(cM3dGLin const*, Vec const*, Vec*, f32*);
// False False
//  s16 False
//  cSAngle const& False
// 	 cSAngle const False
// 		 cSAngle False
void operator+(s16, cSAngle const&);
// False False
//  void False
//  void* False
// 	 void False
void operator delete(void*);

// False False
extern "C" void __dt__4cXyzFv();
// False False
//  Vec* False
// 	 Vec False
//  Vec* False
// 	 Vec False
extern "C" void mDoLib_project__FP3VecP3Vec();
// False False
//  void* (*)(void*, void*) False
// 	 * False
// 		  False
// 	 void* False
// 		 void False
// 	 void* False
// 		 void False
// 	 void* False
// 		 void False
//  void* False
// 	 void False
extern "C" void fopAcIt_Judge__FPFPvPv_PvPv();
// False False
//  char const* False
// 	 char const False
// 		 char False
//  s16 False
extern "C" void fopAcM_searchFromName4Event__FPCcs();
// False False
extern "C" void __dt__8cM3dGPlaFv();
// False False
//  camera_class* False
// 	 camera_class False
extern "C" void fopCamM_GetParam__FP12camera_class();
// False False
//  void* False
// 	 void False
//  void* False
// 	 void False
extern "C" void fpcSch_JudgeForPName__FPvPv();
// False False
//  void* False
// 	 void False
//  void* False
// 	 void False
extern "C" void fpcSch_JudgeByID__FPvPv();
// False False
extern "C" void __dt__7cSAngleFv();
// False False
extern "C" void __dt__8cM3dGLinFv();
// False False
extern "C" void getActiveCamera__14dDemo_object_cFv();
// False False
//  unsigned int False
extern "C" void convPId__14dEvt_control_cFUi();
// False False
//  u8 False
extern "C" void searchMapEventData__14dEvt_control_cFUc();
// False False
//  int False
//  char const* False
// 	 char const False
// 		 char False
//  int False
extern "C" void getMySubstanceP__16dEvent_manager_cFiPCci();
// False False
//  int False
//  char const* False
// 	 char const False
// 		 char False
extern "C" void getMySubstanceNum__16dEvent_manager_cFiPCc();
// False False
//  cXyz* False
// 	 cXyz False
extern "C" void setGoal__16dEvent_manager_cFP4cXyz();
// False False
extern "C" void __dt__7cSGlobeFv();
// False False
//  cBgS_PolyInfo const& False
// 	 cBgS_PolyInfo const False
// 		 cBgS_PolyInfo False
//  cM3dGPla* False
// 	 cM3dGPla False
extern "C" void GetTriPla__4cBgSCFRC13cBgS_PolyInfoP8cM3dGPla();
// False False
//  cXyz& False
// 	 cXyz False
//  cXyz& False
// 	 cXyz False
//  f32 False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
extern "C" void ChkCamera__4dCcSFR4cXyzR4cXyzfP10fopAc_ac_cP10fopAc_ac_cP10fopAc_ac_c();
// False False
//  f32 False
//  f32 False
extern "C" void rationalBezierRatio__8dCamMathFff();
// False False
//  cXyz& False
// 	 cXyz False
//  cSAngle False
extern "C" void xyzRotateY__8dCamMathFR4cXyz7cSAngle();
// False False
//  cXyz& False
// 	 cXyz False
//  cXyz& False
// 	 cXyz False
extern "C" void xyzHorizontalDistance__8dCamMathFR4cXyzR4cXyz();
// False False
//  u32 False
extern "C" void SearchStyle__11dCamParam_cFUl();
// False False
//  s32 False
//  s32 False
extern "C" void Init__14d2DBSplinePathFll();
// False False
extern "C" void Step__14d2DBSplinePathFv();
// False False
//  cXyz* False
// 	 cXyz False
extern "C" void Calc__14d2DBSplinePathFP4cXyz();
// False False
//  f32* False
// 	 f32 False
extern "C" void Calc__14d2DBSplinePathFPf();
// False False
//  s32 False
//  s32 False
extern "C" void GetCameraTypeFromMapToolID__9dCamera_cFll();
// False False
//  dCamera_c::dCamInfo_c* False
// 	 dCamera_c::dCamInfo_c False
//  s16 False
extern "C" void pushInfo__9dCamera_cFPQ29dCamera_c10dCamInfo_cs();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  cXyz* False
// 	 cXyz False
extern "C" void relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz();
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  cXyz* False
// 	 cXyz False
//  f32 False
extern "C" void relationalPos__9dCamera_cFP10fopAc_ac_cP10fopAc_ac_cP4cXyzf();
// False False
//  cXyz* False
// 	 cXyz False
extern "C" void pointInSight__9dCamera_cFP4cXyz();
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
//  u32 False
extern "C" void lineBGCheck__9dCamera_cFP4cXyzP4cXyzP4cXyzUl();
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
//  u32 False
extern "C" void lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl();
// False False
extern "C" void Reset__9dCamera_cFv();
// False False
//  int False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
//  f32 False
//  f32 False
extern "C" void StartBlure__9dCamera_cFiP10fopAc_ac_cff();
// False False
//  f32 False
extern "C" void SetBlureAlpha__9dCamera_cFf();
// False False
//  f32 False
//  f32 False
//  f32 False
extern "C" void SetBlureScale__9dCamera_cFfff();
// False False
//  f32 False
//  f32 False
//  f32 False
extern "C" void SetBlurePosition__9dCamera_cFfff();
// False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
extern "C" void __pl__4cXyzCFRC3Vec();
// False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
extern "C" void __mi__4cXyzCFRC3Vec();
// False False
//  f32 False
extern "C" void __ml__4cXyzCFf();
// False False
extern "C" void norm__4cXyzCFv();
// False False
extern "C" void normalize__4cXyzFv();
// False False
//  f32 False
//  f32 False
extern "C" void cM_atan2s__Fff();
// False False
//  f32 False
extern "C" void cM_rndFX__Ff();
// False False
//  cM3dGLin const* False
// 	 cM3dGLin const False
// 		 cM3dGLin False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  Vec* False
// 	 Vec False
//  f32* False
// 	 f32 False
extern "C" void cM3d_Len3dSqPntAndSegLine__FPC8cM3dGLinPC3VecP3VecPf();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
extern "C" void __ct__8cM3dGLinFRC4cXyzRC4cXyz();
// False False
//  cSAngle const& False
// 	 cSAngle const False
// 		 cSAngle False
extern "C" void __ct__7cSAngleFRC7cSAngle();
// False False
//  s16 False
extern "C" void __ct__7cSAngleFs();
// False False
//  f32 False
extern "C" void __ct__7cSAngleFf();
// False False
//  f32 False
extern "C" void Val__7cSAngleFf();
// False False
extern "C" void Degree__7cSAngleCFv();
// False False
extern "C" void Abs__7cSAngleCFv();
// False False
extern "C" void Inv__7cSAngleCFv();
// False False
extern "C" void Cos__7cSAngleCFv();
// False False
extern "C" void __mi__7cSAngleCFv();
// False False
//  cSAngle const& False
// 	 cSAngle const False
// 		 cSAngle False
extern "C" void __pl__7cSAngleCFRC7cSAngle();
// False False
//  cSAngle const& False
// 	 cSAngle const False
// 		 cSAngle False
extern "C" void __mi__7cSAngleCFRC7cSAngle();
// False False
//  cSAngle const& False
// 	 cSAngle const False
// 		 cSAngle False
extern "C" void __apl__7cSAngleFRC7cSAngle();
// False False
//  s16 False
extern "C" void __pl__7cSAngleCFs();
// False False
//  f32 False
extern "C" void __ml__7cSAngleCFf();
// False False
//  f32 False
extern "C" void __amu__7cSAngleFf();
// False False
//  s16 False
//  cSAngle const& False
// 	 cSAngle const False
// 		 cSAngle False
extern "C" void __pl__FsRC7cSAngle();
// False False
//  cSGlobe const& False
// 	 cSGlobe const False
// 		 cSGlobe False
extern "C" void __ct__7cSGlobeFRC7cSGlobe();
// False False
//  f32 False
//  cSAngle const& False
// 	 cSAngle const False
// 		 cSAngle False
//  cSAngle const& False
// 	 cSAngle const False
// 		 cSAngle False
extern "C" void __ct__7cSGlobeFfRC7cSAngleRC7cSAngle();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
extern "C" void __ct__7cSGlobeFRC4cXyz();
// False False
//  f32 False
//  cSAngle const& False
// 	 cSAngle const False
// 		 cSAngle False
//  cSAngle const& False
// 	 cSAngle const False
// 		 cSAngle False
extern "C" void Val__7cSGlobeFfRC7cSAngleRC7cSAngle();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
extern "C" void Val__7cSGlobeFRC4cXyz();
// False False
extern "C" void Xyz__7cSGlobeCFv();
// False False
extern "C" void Norm__7cSGlobeCFv();
// False False
extern "C" void Invert__7cSGlobeFv();
// False False
//  void False
//  void* False
// 	 void False
extern "C" void __dl__FPv();
// False False
extern "C" void PSVECAdd();
// False False
extern "C" void PSVECSubtract();
// False False
extern "C" void PSVECSquareMag();
// False False
extern "C" void __va_arg();
// False False
extern "C" void __register_global_object();
// False False
extern "C" void __ptmf_scall();
// False False
extern "C" void _savegpr_24();
// False False
extern "C" void _savegpr_25();
// False False
extern "C" void _savegpr_26();
// False False
extern "C" void _savegpr_27();
// False False
extern "C" void _savegpr_28();
// False False
extern "C" void _savegpr_29();
// False False
extern "C" void _restgpr_24();
// False False
extern "C" void _restgpr_25();
// False False
extern "C" void _restgpr_26();
// False False
extern "C" void _restgpr_27();
// False False
extern "C" void _restgpr_28();
// False False
extern "C" void _restgpr_29();
// False False
extern "C" void strcmp();
// False False
extern "C" void strcpy();
extern "C" extern void* __vt__8cM3dGPla[3];
extern "C" extern u8 engine_tbl__9dCamera_c[240];
extern "C" extern u8 m_cpadInfo__8mDoCPd_c[256];
extern "C" extern u8 g_dComIfG_gameInfo[122384];
extern "C" extern f32 Zero__4cXyz[3];
extern "C" extern u32 __float_nan;
extern "C" extern u8 struct_80450D64[4];
extern "C" extern u8 m_object__7dDemo_c[4];
extern "C" extern u8 struct_80450F88[8];
extern "C" extern u8 m_midnaActor__9daPy_py_c[4];
extern "C" extern u8 _0__7cSAngle[2 + 2 /* padding */];
extern "C" extern u8 _90__7cSAngle[2 + 2 /* padding */];

// 
// Declarations:
// 

/* 800889F8-80088A7C 0084+00 s=1 e=0 z=0  None .text      isStageEvent__25@unnamed@d_ev_camera_cpp@Fi                  */
//	80088A0C: 804061C0 (g_dComIfG_gameInfo)
//	80088A10: 804061C0 (g_dComIfG_gameInfo)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_800889F8() {
	nofralloc
#include "asm/d/d_ev_camera/func_800889F8.s"
}
#pragma pop


/* 80088A7C-80088BBC 0140+00 s=0 e=15 z=2  None .text      StartEventCamera__9dCamera_cFiie                             */
//	80088A8C: 803621D8 (_savegpr_28)
//	80088B1C: 80361B14 (__va_arg)
//	80088B34: 80368B2C (strcpy)
//	80088B40: 80361B14 (__va_arg)
//	80088B54: 80361B14 (__va_arg)
//	80088BA8: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  int False
//  int False
//  ... False
asm void dCamera_c::StartEventCamera(int param_0, int param_1, ...) {
	nofralloc
#include "asm/d/d_ev_camera/StartEventCamera__9dCamera_cFiie.s"
}
#pragma pop


/* 80088BBC-80088C24 0068+00 s=0 e=3 z=4  None .text      EndEventCamera__9dCamera_cFi                                 */
//	80088BF8: 804061C0 (g_dComIfG_gameInfo)
//	80088BFC: 804061C0 (g_dComIfG_gameInfo)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  int False
asm void dCamera_c::EndEventCamera(int param_0) {
	nofralloc
#include "asm/d/d_ev_camera/EndEventCamera__9dCamera_cFi.s"
}
#pragma pop


/* 80088C24-80088CB0 008C+00 s=10 e=0 z=0  None .text      searchEventArgData__9dCamera_cFPc                            */
//	80088C34: 803621D4 (_savegpr_27)
//	80088C64: 80368994 (strcmp)
//	80088C9C: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  char* False
// 	 char False
asm void dCamera_c::searchEventArgData(char* param_0) {
	nofralloc
#include "asm/d/d_ev_camera/searchEventArgData__9dCamera_cFPc.s"
}
#pragma pop


/* 80088CB0-80088D90 00E0+00 s=3 e=1 z=0  None .text      getEvIntData__9dCamera_cFPiPc                                */
//	80088CC0: 803621D8 (_savegpr_28)
//	80088CE0: 80088C24 (searchEventArgData__9dCamera_cFPc)
//	80088D24: 804061C0 (g_dComIfG_gameInfo)
//	80088D28: 804061C0 (g_dComIfG_gameInfo)
//	80088D38: 80048144 (getMySubstanceNum__16dEvent_manager_cFiPCc)
//	80088D54: 800480EC (getMySubstanceP__16dEvent_manager_cFiPCci)
//	80088D7C: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  int* False
// 	 int False
//  char* False
// 	 char False
asm void dCamera_c::getEvIntData(int* param_0, char* param_1) {
	nofralloc
#include "asm/d/d_ev_camera/getEvIntData__9dCamera_cFPiPc.s"
}
#pragma pop


/* 80088D90-80088E58 00C8+00 s=0 e=1 z=0  None .text      getEvFloatData__9dCamera_cFPfPc                              */
//	80088DA0: 803621D8 (_savegpr_28)
//	80088DC0: 80088C24 (searchEventArgData__9dCamera_cFPc)
//	80088DEC: 804061C0 (g_dComIfG_gameInfo)
//	80088DF0: 804061C0 (g_dComIfG_gameInfo)
//	80088E00: 80048144 (getMySubstanceNum__16dEvent_manager_cFiPCc)
//	80088E1C: 800480EC (getMySubstanceP__16dEvent_manager_cFiPCci)
//	80088E44: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  f32* False
// 	 f32 False
//  char* False
// 	 char False
asm void dCamera_c::getEvFloatData(f32* param_0, char* param_1) {
	nofralloc
#include "asm/d/d_ev_camera/getEvFloatData__9dCamera_cFPfPc.s"
}
#pragma pop


/* 80088E58-80088F1C 00C4+00 s=4 e=0 z=0  None .text      getEvFloatListData__9dCamera_cFPPfPc                         */
//	80088E68: 803621D4 (_savegpr_27)
//	80088E88: 80088C24 (searchEventArgData__9dCamera_cFPc)
//	80088EB4: 804061C0 (g_dComIfG_gameInfo)
//	80088EB8: 804061C0 (g_dComIfG_gameInfo)
//	80088EC8: 80048144 (getMySubstanceNum__16dEvent_manager_cFiPCc)
//	80088EE4: 800480EC (getMySubstanceP__16dEvent_manager_cFiPCci)
//	80088F08: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32** False
// 	 f32* False
// 		 f32 False
//  char* False
// 	 char False
asm void dCamera_c::getEvFloatListData(f32** param_0, char* param_1) {
	nofralloc
#include "asm/d/d_ev_camera/getEvFloatListData__9dCamera_cFPPfPc.s"
}
#pragma pop


/* 80088F1C-80088FE0 00C4+00 s=1 e=0 z=0  None .text      getEvXyzListData__9dCamera_cFPP4cXyzPc                       */
//	80088F2C: 803621D4 (_savegpr_27)
//	80088F4C: 80088C24 (searchEventArgData__9dCamera_cFPc)
//	80088F78: 804061C0 (g_dComIfG_gameInfo)
//	80088F7C: 804061C0 (g_dComIfG_gameInfo)
//	80088F8C: 80048144 (getMySubstanceNum__16dEvent_manager_cFiPCc)
//	80088FA8: 800480EC (getMySubstanceP__16dEvent_manager_cFiPCci)
//	80088FCC: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cXyz** False
// 	 cXyz* False
// 		 cXyz False
//  char* False
// 	 char False
asm void dCamera_c::getEvXyzListData(cXyz** param_0, char* param_1) {
	nofralloc
#include "asm/d/d_ev_camera/getEvXyzListData__9dCamera_cFPP4cXyzPc.s"
}
#pragma pop


/* 80088FE0-8008908C 00AC+00 s=1 e=0 z=0  None .text      getEvStringPntData__9dCamera_cFPc                            */
//	80088FF0: 803621DC (_savegpr_29)
//	80089008: 80088C24 (searchEventArgData__9dCamera_cFPc)
//	8008902C: 804061C0 (g_dComIfG_gameInfo)
//	80089030: 804061C0 (g_dComIfG_gameInfo)
//	80089044: 80048144 (getMySubstanceNum__16dEvent_manager_cFiPCc)
//	80089060: 800480EC (getMySubstanceP__16dEvent_manager_cFiPCci)
//	80089078: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  char* False
// 	 char False
asm void dCamera_c::getEvStringPntData(char* param_0) {
	nofralloc
#include "asm/d/d_ev_camera/getEvStringPntData__9dCamera_cFPc.s"
}
#pragma pop


/* 8008908C-80089154 00C8+00 s=20 e=5 z=0  None .text      getEvIntData__9dCamera_cFPiPci                               */
//	8008909C: 803621D4 (_savegpr_27)
//	800890C0: 80088C24 (searchEventArgData__9dCamera_cFPc)
//	800890EC: 804061C0 (g_dComIfG_gameInfo)
//	800890F0: 804061C0 (g_dComIfG_gameInfo)
//	80089100: 80048144 (getMySubstanceNum__16dEvent_manager_cFiPCc)
//	8008911C: 800480EC (getMySubstanceP__16dEvent_manager_cFiPCci)
//	80089140: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  int* False
// 	 int False
//  char* False
// 	 char False
//  int False
asm void dCamera_c::getEvIntData(int* param_0, char* param_1, int param_2) {
	nofralloc
#include "asm/d/d_ev_camera/getEvIntData__9dCamera_cFPiPci.s"
}
#pragma pop


/* 80089154-8008922C 00D8+00 s=11 e=1 z=0  None .text      getEvFloatData__9dCamera_cFPfPcf                             */
//	8008916C: 803621D8 (_savegpr_28)
//	80089190: 80088C24 (searchEventArgData__9dCamera_cFPc)
//	800891BC: 804061C0 (g_dComIfG_gameInfo)
//	800891C0: 804061C0 (g_dComIfG_gameInfo)
//	800891D0: 80048144 (getMySubstanceNum__16dEvent_manager_cFiPCc)
//	800891EC: 800480EC (getMySubstanceP__16dEvent_manager_cFiPCci)
//	80089218: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  f32* False
// 	 f32 False
//  char* False
// 	 char False
//  f32 False
asm void dCamera_c::getEvFloatData(f32* param_0, char* param_1, f32 param_2) {
	nofralloc
#include "asm/d/d_ev_camera/getEvFloatData__9dCamera_cFPfPcf.s"
}
#pragma pop


/* 8008922C-8008933C 0110+00 s=10 e=0 z=0  None .text      getEvXyzData__9dCamera_cFP4cXyzPc4cXyz                       */
//	8008923C: 803621D4 (_savegpr_27)
//	80089260: 80088C24 (searchEventArgData__9dCamera_cFPc)
//	800892B0: 804061C0 (g_dComIfG_gameInfo)
//	800892B4: 804061C0 (g_dComIfG_gameInfo)
//	800892C4: 80048144 (getMySubstanceNum__16dEvent_manager_cFiPCc)
//	800892E0: 800480EC (getMySubstanceP__16dEvent_manager_cFiPCci)
//	80089328: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cXyz* False
// 	 cXyz False
//  char* False
// 	 char False
//  cXyz False
asm void dCamera_c::getEvXyzData(cXyz* param_0, char* param_1, cXyz param_2) {
	nofralloc
#include "asm/d/d_ev_camera/getEvXyzData__9dCamera_cFP4cXyzPc4cXyz.s"
}
#pragma pop


/* 8008933C-8008941C 00E0+00 s=7 e=1 z=0  None .text      getEvStringData__9dCamera_cFPcPcPc                           */
//	8008934C: 803621D4 (_savegpr_27)
//	80089370: 80088C24 (searchEventArgData__9dCamera_cFPc)
//	80089388: 80368B2C (strcpy)
//	800893A0: 80368B2C (strcpy)
//	800893A8: 804061C0 (g_dComIfG_gameInfo)
//	800893AC: 804061C0 (g_dComIfG_gameInfo)
//	800893BC: 80048144 (getMySubstanceNum__16dEvent_manager_cFiPCc)
//	800893D8: 800480EC (getMySubstanceP__16dEvent_manager_cFiPCci)
//	800893E4: 80368B2C (strcpy)
//	800893F4: 80368B2C (strcpy)
//	80089408: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
asm void dCamera_c::getEvStringData(char* param_0, char* param_1, char* param_2) {
	nofralloc
#include "asm/d/d_ev_camera/getEvStringData__9dCamera_cFPcPcPc.s"
}
#pragma pop


/* 8008941C-800894C4 00A8+00 s=1 e=0 z=0  None .text      getEvStringPntData__9dCamera_cFPcPc                          */
//	8008942C: 803621D8 (_savegpr_28)
//	80089448: 80088C24 (searchEventArgData__9dCamera_cFPc)
//	8008946C: 804061C0 (g_dComIfG_gameInfo)
//	80089470: 804061C0 (g_dComIfG_gameInfo)
//	80089484: 80048144 (getMySubstanceNum__16dEvent_manager_cFiPCc)
//	800894A0: 800480EC (getMySubstanceP__16dEvent_manager_cFiPCci)
//	800894B0: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  char* False
// 	 char False
//  char* False
// 	 char False
asm void dCamera_c::getEvStringPntData(char* param_0, char* param_1) {
	nofralloc
#include "asm/d/d_ev_camera/getEvStringPntData__9dCamera_cFPcPc.s"
}
#pragma pop


/* 800894C4-800895F4 0130+00 s=7 e=1 z=0  None .text      getEvActor__9dCamera_cFPc                                    */
//	800894D8: 80088FE0 (getEvStringPntData__9dCamera_cFPc)
//	80089510: 804061C0 (g_dComIfG_gameInfo)
//	80089514: 804061C0 (g_dComIfG_gameInfo)
//	80089520: 800432EC (convPId__14dEvt_control_cFUi)
//	80089530: 804061C0 (g_dComIfG_gameInfo)
//	80089534: 804061C0 (g_dComIfG_gameInfo)
//	80089540: 800432EC (convPId__14dEvt_control_cFUi)
//	80089554: 804061C0 (g_dComIfG_gameInfo)
//	80089558: 804061C0 (g_dComIfG_gameInfo)
//	80089564: 800432EC (convPId__14dEvt_control_cFUi)
//	80089578: 804061C0 (g_dComIfG_gameInfo)
//	8008957C: 804061C0 (g_dComIfG_gameInfo)
//	80089588: 800432EC (convPId__14dEvt_control_cFUi)
//	800895A4: 804061C0 (g_dComIfG_gameInfo)
//	800895A8: 804061C0 (g_dComIfG_gameInfo)
//	800895B4: 800432EC (convPId__14dEvt_control_cFUi)
//	800895C8: 804061C0 (g_dComIfG_gameInfo)
//	800895CC: 804061C0 (g_dComIfG_gameInfo)
//	800895DC: 8001D7A0 (fopAcM_searchFromName4Event__FPCcs)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  char* False
// 	 char False
asm void dCamera_c::getEvActor(char* param_0) {
	nofralloc
#include "asm/d/d_ev_camera/getEvActor__9dCamera_cFPc.s"
}
#pragma pop


/* 800895F4-80089730 013C+00 s=8 e=1 z=0  None .text      getEvActor__9dCamera_cFPcPc                                  */
//	80089620: 8008933C (getEvStringData__9dCamera_cFPcPcPc)
//	8008964C: 804061C0 (g_dComIfG_gameInfo)
//	80089650: 804061C0 (g_dComIfG_gameInfo)
//	8008965C: 800432EC (convPId__14dEvt_control_cFUi)
//	8008966C: 804061C0 (g_dComIfG_gameInfo)
//	80089670: 804061C0 (g_dComIfG_gameInfo)
//	8008967C: 800432EC (convPId__14dEvt_control_cFUi)
//	80089690: 804061C0 (g_dComIfG_gameInfo)
//	80089694: 804061C0 (g_dComIfG_gameInfo)
//	800896A0: 800432EC (convPId__14dEvt_control_cFUi)
//	800896B4: 804061C0 (g_dComIfG_gameInfo)
//	800896B8: 804061C0 (g_dComIfG_gameInfo)
//	800896C4: 800432EC (convPId__14dEvt_control_cFUi)
//	800896E0: 804061C0 (g_dComIfG_gameInfo)
//	800896E4: 804061C0 (g_dComIfG_gameInfo)
//	800896F0: 800432EC (convPId__14dEvt_control_cFUi)
//	80089704: 804061C0 (g_dComIfG_gameInfo)
//	80089708: 804061C0 (g_dComIfG_gameInfo)
//	80089718: 8001D7A0 (fopAcM_searchFromName4Event__FPCcs)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  char* False
// 	 char False
//  char* False
// 	 char False
asm void dCamera_c::getEvActor(char* param_0, char* param_1) {
	nofralloc
#include "asm/d/d_ev_camera/getEvActor__9dCamera_cFPcPc.s"
}
#pragma pop


/* ############################################################################################## */
/* 8037A7F0-8037A7FC 000C+00 s=1 e=0 z=0  None .rodata    @3871                                                        */
SECTION_RODATA static u8 const lit_3871[12] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 8037A7FC-8037A80C 0010+00 s=0 e=0 z=0  None .rodata    @5984                                                        */
SECTION_RODATA u8 const d_d_ev_camera__lit_5984[16] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
};

/* 8037A80C-8037A828 001C+00 s=0 e=0 z=0  None .rodata    @5985                                                        */
SECTION_RODATA u8 const d_d_ev_camera__lit_5985[28] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xCC, 0xCC, 0xCD, 0x3F, 0x33, 0x33, 0x33,
	0x3F, 0x66, 0x66, 0x66, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
};

/* 8037A828-8037A844 001C+00 s=0 e=0 z=0  None .rodata    @5986                                                        */
SECTION_RODATA u8 const d_d_ev_camera__lit_5986[28] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D, 0xCC, 0xCC, 0xCD, 0x3E, 0x99, 0x99, 0x9A,
	0x3F, 0x19, 0x99, 0x9A, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
};

/* 8037A844-8037A858 0014+00 s=0 e=0 z=0  None .rodata    @5987                                                        */
SECTION_RODATA u8 const lit_5987[20] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
};

/* 8037A858-8037A86C 0014+00 s=0 e=0 z=0  None .rodata    @5988                                                        */
SECTION_RODATA u8 const lit_5988[20] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07,
	0x00, 0x00, 0x00, 0x00,
};

/* 8037A86C-8037A884 0018+00 s=1 e=0 z=0  None .rodata    @8236                                                        */
SECTION_RODATA static u8 const lit_8236[24] = {
	0x3F, 0x40, 0x00, 0x00, 0x3E, 0xB3, 0x33, 0x33, 0x3F, 0x4C, 0xCC, 0xCD, 0x3F, 0x4C, 0xCC, 0xCD,
	0x3F, 0x4C, 0xCC, 0xCD, 0x3F, 0x4C, 0xCC, 0xCD,
};

/* 8037A884-8037A89C 0018+00 s=1 e=0 z=0  None .rodata    @8840                                                        */
SECTION_RODATA static u8 const lit_8840[24] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 8037A89C-8037AA08 016C+00 s=1 e=0 z=0  None .rodata    @8969                                                        */
SECTION_RODATA static u8 const lit_8969[364] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x82, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28,
	0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x42, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x42, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x82, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x49, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2D,
	0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x42, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00,
	0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x42, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x34, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x0A, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28,
	0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x42, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00,
	0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x42, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3C, 0xFF, 0xFF, 0xFF, 0xFF,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x82, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
};

/* 8037AA08-8037AA40 0038+00 s=1 e=0 z=0  None .rodata    @9468                                                        */
SECTION_RODATA static u8 const lit_9468[56] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x82, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x41, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,
	0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
};

/* 8037AA40-8037AAA4 0064+00 s=1 e=0 z=0  None .rodata    @9811                                                        */
SECTION_RODATA static u8 const lit_9811[100] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x48, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x42, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x42, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xFF, 0xFF,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
	0x00, 0x00, 0x00, 0x00,
};

/* 8037AAA4-8037AABC 0018+00 s=1 e=0 z=0  None .rodata    @9812                                                        */
SECTION_RODATA static u8 const lit_9812[24] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D, 0xCC, 0xCC, 0xCD, 0x3F, 0x33, 0x33, 0x33,
	0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
};

/* 8037AABC-8037AAE4 0028+00 s=1 e=0 z=0  None .rodata    @11087                                                       */
SECTION_RODATA static u8 const lit_11087[40] = {
	0x42, 0x20, 0x00, 0x00, 0x42, 0x70, 0x00, 0x00, 0x41, 0xC8, 0x00, 0x00, 0x42, 0x48, 0x00, 0x00,
	0x42, 0x96, 0x00, 0x00, 0x42, 0x0C, 0x00, 0x00, 0x41, 0x70, 0x00, 0x00, 0x42, 0xB4, 0x00, 0x00,
	0x42, 0xDC, 0x00, 0x00, 0x43, 0x0C, 0x00, 0x00,
};

/* 8037AAE4-8037AAF4 0010+00 s=1 e=0 z=0  None .rodata    @11437                                                       */
SECTION_RODATA static u8 const lit_11437[16] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
};

/* 8037AAF4-8037AD68 0273+01 s=23 e=0 z=0  None .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char const* const stringBase_8037AAF4 = "Timer";
SECTION_DEAD char const* const stringBase_8037AAFA = "Stay";
SECTION_DEAD char const* const stringBase_8037AAFF = "Eye";
SECTION_DEAD char const* const stringBase_8037AB03 = "Center";
SECTION_DEAD char const* const stringBase_8037AB0A = "BasePos";
SECTION_DEAD char const* const stringBase_8037AB12 = "Fovy";
SECTION_DEAD char const* const stringBase_8037AB17 = "Bank";
SECTION_DEAD char const* const stringBase_8037AB1C = "RelUseMask";
SECTION_DEAD char const* const stringBase_8037AB27 = "oo";
SECTION_DEAD char const* const stringBase_8037AB2A = "RelActor";
SECTION_DEAD char const* const stringBase_8037AB33 = "EyeGap";
SECTION_DEAD char const* const stringBase_8037AB3A = "CtrGap";
SECTION_DEAD char const* const stringBase_8037AB41 = "EyeCus";
SECTION_DEAD char const* const stringBase_8037AB48 = "CtrCus";
SECTION_DEAD char const* const stringBase_8037AB4F = "Stoker";
SECTION_DEAD char const* const stringBase_8037AB56 = "@STARTER";
SECTION_DEAD char const* const stringBase_8037AB5F = "Target";
SECTION_DEAD char const* const stringBase_8037AB66 = "@PLAYER";
SECTION_DEAD char const* const stringBase_8037AB6E = "TransType";
SECTION_DEAD char const* const stringBase_8037AB78 = "Roll";
SECTION_DEAD char const* const stringBase_8037AB7D = "RadiusAdd";
SECTION_DEAD char const* const stringBase_8037AB87 = "Latitude";
SECTION_DEAD char const* const stringBase_8037AB90 = "Radius";
SECTION_DEAD char const* const stringBase_8037AB97 = "StartRadius";
SECTION_DEAD char const* const stringBase_8037ABA3 = "o";
SECTION_DEAD char const* const stringBase_8037ABA5 = "BSpCurve";
SECTION_DEAD char const* const stringBase_8037ABAE = "BSpPoints";
SECTION_DEAD char const* const stringBase_8037ABB8 = "EndSlot";
SECTION_DEAD char const* const stringBase_8037ABC0 = "StartSlot";
SECTION_DEAD char const* const stringBase_8037ABCA = "StartEye";
SECTION_DEAD char const* const stringBase_8037ABD3 = "StartCenter";
SECTION_DEAD char const* const stringBase_8037ABDF = "StartFovy";
SECTION_DEAD char const* const stringBase_8037ABE9 = "StartBank";
SECTION_DEAD char const* const stringBase_8037ABF3 = "--oo";
SECTION_DEAD char const* const stringBase_8037ABF8 = "Cushion";
SECTION_DEAD char const* const stringBase_8037AC00 = "NearDist";
SECTION_DEAD char const* const stringBase_8037AC09 = "ZoomDist";
SECTION_DEAD char const* const stringBase_8037AC12 = "ZoomVAngle";
SECTION_DEAD char const* const stringBase_8037AC1D = "FarDist";
SECTION_DEAD char const* const stringBase_8037AC25 = "NearTimer";
SECTION_DEAD char const* const stringBase_8037AC2F = "FarTimer";
SECTION_DEAD char const* const stringBase_8037AC38 = "FrontAngle";
SECTION_DEAD char const* const stringBase_8037AC43 = "Blure";
SECTION_DEAD char const* const stringBase_8037AC49 = "Dest";
SECTION_DEAD char const* const stringBase_8037AC4E = "TargetType";
SECTION_DEAD char const* const stringBase_8037AC59 = "ID";
SECTION_DEAD char const* const stringBase_8037AC5C = "CameraID";
SECTION_DEAD char const* const stringBase_8037AC65 = "Name";
SECTION_DEAD char const* const stringBase_8037AC6A = "FN01";
SECTION_DEAD char const* const stringBase_8037AC6F = "Type";
SECTION_DEAD char const* const stringBase_8037AC74 = "Slot";
SECTION_DEAD char const* const stringBase_8037AC79 = "CurvePoints";
SECTION_DEAD char const* const stringBase_8037AC85 = "Longitude";
SECTION_DEAD char const* const stringBase_8037AC8F = "Centers";
SECTION_DEAD char const* const stringBase_8037AC97 = "Eyes";
SECTION_DEAD char const* const stringBase_8037AC9C = "Fovys";
SECTION_DEAD char const* const stringBase_8037ACA2 = "Choice";
SECTION_DEAD char const* const stringBase_8037ACA9 = "Actor1";
SECTION_DEAD char const* const stringBase_8037ACB0 = "Actor2";
SECTION_DEAD char const* const stringBase_8037ACB7 = "CtrRatio";
SECTION_DEAD char const* const stringBase_8037ACC0 = "RadiusMin";
SECTION_DEAD char const* const stringBase_8037ACCA = "RadiusMax";
SECTION_DEAD char const* const stringBase_8037ACD4 = "LatitudeMin";
SECTION_DEAD char const* const stringBase_8037ACE0 = "LatitudeMax";
SECTION_DEAD char const* const stringBase_8037ACEC = "LongitudeMin";
SECTION_DEAD char const* const stringBase_8037ACF9 = "LongitudeMax";
SECTION_DEAD char const* const stringBase_8037AD06 = "LongitudeType";
SECTION_DEAD char const* const stringBase_8037AD14 = "R_SP01";
SECTION_DEAD char const* const stringBase_8037AD1B = "Teacher";
SECTION_DEAD char const* const stringBase_8037AD23 = "Midna";
SECTION_DEAD char const* const stringBase_8037AD29 = "Student";
SECTION_DEAD char const* const stringBase_8037AD31 = "CtrGapY";
SECTION_DEAD char const* const stringBase_8037AD39 = "Base";
SECTION_DEAD char const* const stringBase_8037AD3E = "xxxxxx";
SECTION_DEAD char const* const stringBase_8037AD45 = "Set1";
SECTION_DEAD char const* const stringBase_8037AD4A = "Use1";
SECTION_DEAD char const* const stringBase_8037AD4F = "ooxxxx";
SECTION_DEAD char const* const stringBase_8037AD56 = "Set2";
SECTION_DEAD char const* const stringBase_8037AD5B = "Use2";
SECTION_DEAD char const* const stringBase_8037AD60 = "xxooox";
/* @stringBase0 padding */
SECTION_DEAD static char const* const pad_8037AD67 = "";
#pragma pop

/* 80089730-800897E8 00B8+00 s=0 e=3 z=0  None .text      pauseEvCamera__9dCamera_cFv                                  */
//	80089750: 80180C68 (Reset__9dCamera_cFv)
//	80089764: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80089768: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80089770: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	80089780: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80089784: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80089790: 8008908C (getEvIntData__9dCamera_cFPiPci)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::pauseEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/pauseEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 804253A8-804253B4 000C+00 s=1 e=0 z=0  None .bss       @4202                                                        */
static u8 lit_4202[12];

/* 804253B4-804253C0 000C+00 s=2 e=0 z=0  None .bss       WolfAdditionVec__25@unnamed@d_ev_camera_cpp@                 */
static u8 data_804253B4[12];

/* 804528B8-804528C0 0004+04 s=16 e=0 z=0  None .sdata2    @5141                                                        */
SECTION_SDATA2 static f32 lit_5141[1 + 1 /* padding */] = {
	0.0f,
	/* padding */
	0.0f,
};

/* 804528C0-804528C8 0008+00 s=3 e=0 z=0  None .sdata2    @5142                                                        */
SECTION_SDATA2 static f64 lit_5142 = 0.5;

/* 804528C8-804528D0 0008+00 s=3 e=0 z=0  None .sdata2    @5143                                                        */
SECTION_SDATA2 static f64 lit_5143 = 3.0;

/* 804528D0-804528D8 0008+00 s=3 e=0 z=0  None .sdata2    @5144                                                        */
SECTION_SDATA2 static u8 lit_5144[8] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 804528D8-804528DC 0004+00 s=5 e=0 z=0  None .sdata2    @5145                                                        */
SECTION_SDATA2 static f32 lit_5145 = 182.04444885253906f;

/* 800897E8-8008A510 0D28+00 s=0 e=1 z=0  None .text      fixedFrameEvCamera__9dCamera_cFv                             */
//	8008982C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80089830: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008983C: 8008922C (getEvXyzData__9dCamera_cFP4cXyzPc4cXyz)
//	80089860: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80089864: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80089870: 8008922C (getEvXyzData__9dCamera_cFP4cXyzPc4cXyz)
//	80089874: 80430CF4 (Zero__4cXyz)
//	80089878: 80430CF4 (Zero__4cXyz)
//	80089898: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008989C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800898A8: 8008922C (getEvXyzData__9dCamera_cFP4cXyzPc4cXyz)
//	800898B4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800898B8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800898C4: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	800898D0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800898D4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800898DC: 804528B8 (lit_5141)
//	800898E0: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	800898F0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800898F4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800898FC: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	8008990C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80089910: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008991C: 8008933C (getEvStringData__9dCamera_cFPcPcPc)
//	80089924: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80089928: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80089930: 800894C4 (getEvActor__9dCamera_cFPc)
//	8008995C: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	800899A0: 804253B4 (data_804253B4)
//	800899A4: 804253B4 (data_804253B4)
//	800899AC: 80347090 (PSVECAdd)
//	800899C0: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80089A04: 804253B4 (data_804253B4)
//	80089A08: 804253B4 (data_804253B4)
//	80089A10: 803470B4 (PSVECSubtract)
//	80089A24: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80089A5C: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	80089A6C: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80089A78: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	80089A88: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	80089A98: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	80089AA4: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	80089AAC: 80451188 (_0__7cSAngle)
//	80089AD4: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80089B08: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80089B30: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	80089B40: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80089B60: 80347138 (PSVECSquareMag)
//	80089B64: 804528B8 (lit_5141)
//	80089B74: 804528C0 (lit_5142)
//	80089B7C: 804528C8 (lit_5143)
//	80089BC4: 804528D0 (lit_5144)
//	80089BD0: 80450AE0 (__float_nan)
//	80089BD4: 80450AE0 (__float_nan)
//	80089C40: 80450AE0 (__float_nan)
//	80089C44: 80450AE0 (__float_nan)
//	80089C6C: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80089C94: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	80089CA4: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80089CC4: 80347138 (PSVECSquareMag)
//	80089CC8: 804528B8 (lit_5141)
//	80089CD8: 804528C0 (lit_5142)
//	80089CE0: 804528C8 (lit_5143)
//	80089D28: 804528D0 (lit_5144)
//	80089D34: 80450AE0 (__float_nan)
//	80089D38: 80450AE0 (__float_nan)
//	80089DA4: 80450AE0 (__float_nan)
//	80089DA8: 80450AE0 (__float_nan)
//	80089DD0: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80089E00: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	80089E10: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	80089E6C: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80089EB0: 804253B4 (data_804253B4)
//	80089EB4: 804253B4 (data_804253B4)
//	80089EBC: 80347090 (PSVECAdd)
//	80089ED0: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80089F14: 804253B4 (data_804253B4)
//	80089F18: 804253B4 (data_804253B4)
//	80089F20: 803470B4 (PSVECSubtract)
//	80089F34: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80089F90: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80089FBC: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	80089FE4: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008A01C: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	8008A02C: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008A038: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008A048: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008A058: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008A064: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	8008A06C: 80451188 (_0__7cSAngle)
//	8008A094: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008A0C0: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	8008A0F0: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008A118: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	8008A128: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008A148: 80347138 (PSVECSquareMag)
//	8008A14C: 804528B8 (lit_5141)
//	8008A15C: 804528C0 (lit_5142)
//	8008A164: 804528C8 (lit_5143)
//	8008A1AC: 804528D0 (lit_5144)
//	8008A1B8: 80450AE0 (__float_nan)
//	8008A1BC: 80450AE0 (__float_nan)
//	8008A228: 80450AE0 (__float_nan)
//	8008A22C: 80450AE0 (__float_nan)
//	8008A254: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008A27C: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	8008A28C: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008A2AC: 80347138 (PSVECSquareMag)
//	8008A2B0: 804528B8 (lit_5141)
//	8008A2C0: 804528C0 (lit_5142)
//	8008A2C8: 804528C8 (lit_5143)
//	8008A310: 804528D0 (lit_5144)
//	8008A31C: 80450AE0 (__float_nan)
//	8008A320: 80450AE0 (__float_nan)
//	8008A38C: 80450AE0 (__float_nan)
//	8008A390: 80450AE0 (__float_nan)
//	8008A3B8: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008A3E8: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	8008A3F8: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008A474: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008A480: 80271A70 (Val__7cSGlobeFRC4cXyz)
//	8008A498: 804528D8 (lit_5145)
//	8008A4B4: 80270F98 (__ct__7cSAngleFs)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::fixedFrameEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/fixedFrameEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 804528DC-804528E0 0004+00 s=10 e=0 z=0  None .sdata2    @5346                                                        */
SECTION_SDATA2 static f32 lit_5346 = 1.0f;

/* 8008A510-8008A974 0464+00 s=0 e=1 z=0  None .text      stokerEvCamera__9dCamera_cFv                                 */
//	8008A534: 80430CF4 (Zero__4cXyz)
//	8008A538: 80430CF4 (Zero__4cXyz)
//	8008A558: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008A55C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008A568: 8008922C (getEvXyzData__9dCamera_cFP4cXyzPc4cXyz)
//	8008A56C: 80430CF4 (Zero__4cXyz)
//	8008A570: 80430CF4 (Zero__4cXyz)
//	8008A590: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008A594: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008A5A0: 8008922C (getEvXyzData__9dCamera_cFP4cXyzPc4cXyz)
//	8008A5AC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008A5B0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008A5B8: 804528DC (lit_5346)
//	8008A5BC: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008A5C8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008A5CC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008A5D4: 804528DC (lit_5346)
//	8008A5D8: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008A5E4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008A5E8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008A5F4: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008A600: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008A604: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008A60C: 804528B8 (lit_5141)
//	8008A610: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008A620: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008A624: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008A62C: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	8008A638: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008A63C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008A648: 800895F4 (getEvActor__9dCamera_cFPcPc)
//	8008A654: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008A658: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008A664: 800895F4 (getEvActor__9dCamera_cFPcPc)
//	8008A6DC: 80023590 (fpcSch_JudgeByID__FPvPv)
//	8008A6E0: 80023590 (fpcSch_JudgeByID__FPvPv)
//	8008A6E8: 800197F8 (fopAcIt_Judge__FPFPvPv_PvPv)
//	8008A704: 80271A70 (Val__7cSGlobeFRC4cXyz)
//	8008A718: 802711FC (__pl__7cSAngleCFs)
//	8008A724: 80270F98 (__ct__7cSAngleFs)
//	8008A740: 802711FC (__pl__7cSAngleCFs)
//	8008A74C: 80270F98 (__ct__7cSAngleFs)
//	8008A764: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	8008A770: 80271AB4 (Xyz__7cSGlobeCFv)
//	8008A780: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008A7A8: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008A7B8: 80266B84 (__ml__4cXyzCFf)
//	8008A7C8: 80347090 (PSVECAdd)
//	8008A7E0: 80023590 (fpcSch_JudgeByID__FPvPv)
//	8008A7E4: 80023590 (fpcSch_JudgeByID__FPvPv)
//	8008A7EC: 800197F8 (fopAcIt_Judge__FPFPvPv_PvPv)
//	8008A808: 80271A70 (Val__7cSGlobeFRC4cXyz)
//	8008A81C: 802711FC (__pl__7cSAngleCFs)
//	8008A828: 80270F98 (__ct__7cSAngleFs)
//	8008A844: 802711FC (__pl__7cSAngleCFs)
//	8008A850: 80270F98 (__ct__7cSAngleFs)
//	8008A868: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	8008A874: 80271AB4 (Xyz__7cSGlobeCFv)
//	8008A884: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008A8AC: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008A8BC: 80266B84 (__ml__4cXyzCFf)
//	8008A8CC: 80347090 (PSVECAdd)
//	8008A8DC: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008A8E8: 80271A70 (Val__7cSGlobeFRC4cXyz)
//	8008A900: 804528D8 (lit_5145)
//	8008A91C: 80270F98 (__ct__7cSAngleFs)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::stokerEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/stokerEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 804528E0-804528E8 0004+04 s=1 e=0 z=0  None .sdata2    @5844                                                        */
SECTION_SDATA2 static f32 lit_5844[1 + 1 /* padding */] = {
	2.0f,
	/* padding */
	0.0f,
};

/* 804528E8-804528F0 0008+00 s=7 e=0 z=0  None .sdata2    @5846                                                        */
SECTION_SDATA2 static f64 lit_5846 = 4503599627370496.0 /* cast u32 to float */;

/* 8008A974-8008B9B0 103C+00 s=0 e=1 z=0  None .text      rollingEvCamera__9dCamera_cFv                                */
//	8008A9B8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008A9BC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008A9C8: 8008922C (getEvXyzData__9dCamera_cFP4cXyzPc4cXyz)
//	8008A9EC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008A9F0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008A9FC: 8008922C (getEvXyzData__9dCamera_cFP4cXyzPc4cXyz)
//	8008AA08: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008AA0C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008AA14: 804528DC (lit_5346)
//	8008AA18: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008AA24: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008AA28: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008AA34: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	8008AA40: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008AA44: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008AA50: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008AA5C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008AA60: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008AA68: 804528B8 (lit_5141)
//	8008AA6C: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008AA7C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008AA80: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008AA88: 804528E0 (lit_5844)
//	8008AA8C: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008AA98: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008AA9C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008AAA4: 804528B8 (lit_5141)
//	8008AAA8: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008AAB8: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008AAC4: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008AACC: 80271030 (Degree__7cSAngleCFv)
//	8008AAD8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008AADC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008AAE4: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008AAF0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008AAF4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008AAFC: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	8008AB0C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008AB10: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008AB1C: 8008933C (getEvStringData__9dCamera_cFPcPcPc)
//	8008AB24: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008AB28: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008AB30: 800894C4 (getEvActor__9dCamera_cFPc)
//	8008AB60: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008AB90: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	8008ABA0: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008ABAC: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008ABBC: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008ABCC: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008ABD8: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	8008ABE0: 80451188 (_0__7cSAngle)
//	8008AC08: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008AC3C: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008AC64: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	8008AC74: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008AC94: 80347138 (PSVECSquareMag)
//	8008AC98: 804528B8 (lit_5141)
//	8008ACA8: 804528C0 (lit_5142)
//	8008ACB0: 804528C8 (lit_5143)
//	8008ACF8: 804528D0 (lit_5144)
//	8008AD04: 80450AE0 (__float_nan)
//	8008AD08: 80450AE0 (__float_nan)
//	8008AD74: 80450AE0 (__float_nan)
//	8008AD78: 80450AE0 (__float_nan)
//	8008ADA0: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008ADC8: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	8008ADD8: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008ADF8: 80347138 (PSVECSquareMag)
//	8008ADFC: 804528B8 (lit_5141)
//	8008AE0C: 804528C0 (lit_5142)
//	8008AE14: 804528C8 (lit_5143)
//	8008AE5C: 804528D0 (lit_5144)
//	8008AE68: 80450AE0 (__float_nan)
//	8008AE6C: 80450AE0 (__float_nan)
//	8008AED8: 80450AE0 (__float_nan)
//	8008AEDC: 80450AE0 (__float_nan)
//	8008AF04: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008AF60: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008AFBC: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008AFE8: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	8008B010: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008B048: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	8008B058: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008B064: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008B074: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008B084: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008B090: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	8008B098: 80451188 (_0__7cSAngle)
//	8008B0C0: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008B0F4: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008B11C: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	8008B12C: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008B14C: 80347138 (PSVECSquareMag)
//	8008B150: 804528B8 (lit_5141)
//	8008B160: 804528C0 (lit_5142)
//	8008B168: 804528C8 (lit_5143)
//	8008B1B0: 804528D0 (lit_5144)
//	8008B1BC: 80450AE0 (__float_nan)
//	8008B1C0: 80450AE0 (__float_nan)
//	8008B22C: 80450AE0 (__float_nan)
//	8008B230: 80450AE0 (__float_nan)
//	8008B258: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008B280: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	8008B290: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008B2B0: 80347138 (PSVECSquareMag)
//	8008B2B4: 804528B8 (lit_5141)
//	8008B2C4: 804528C0 (lit_5142)
//	8008B2CC: 804528C8 (lit_5143)
//	8008B314: 804528D0 (lit_5144)
//	8008B320: 80450AE0 (__float_nan)
//	8008B324: 80450AE0 (__float_nan)
//	8008B390: 80450AE0 (__float_nan)
//	8008B394: 80450AE0 (__float_nan)
//	8008B3BC: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008B438: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008B468: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	8008B478: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008B484: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008B494: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008B4A4: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008B4B0: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	8008B4B8: 80451188 (_0__7cSAngle)
//	8008B4E0: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008B514: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008B53C: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	8008B54C: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008B56C: 80347138 (PSVECSquareMag)
//	8008B570: 804528B8 (lit_5141)
//	8008B580: 804528C0 (lit_5142)
//	8008B588: 804528C8 (lit_5143)
//	8008B5D0: 804528D0 (lit_5144)
//	8008B5DC: 80450AE0 (__float_nan)
//	8008B5E0: 80450AE0 (__float_nan)
//	8008B64C: 80450AE0 (__float_nan)
//	8008B650: 80450AE0 (__float_nan)
//	8008B678: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008B6A0: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	8008B6B0: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008B6D0: 80347138 (PSVECSquareMag)
//	8008B6D4: 804528B8 (lit_5141)
//	8008B6E4: 804528C0 (lit_5142)
//	8008B6EC: 804528C8 (lit_5143)
//	8008B734: 804528D0 (lit_5144)
//	8008B740: 80450AE0 (__float_nan)
//	8008B744: 80450AE0 (__float_nan)
//	8008B7B0: 80450AE0 (__float_nan)
//	8008B7B4: 80450AE0 (__float_nan)
//	8008B7DC: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008B804: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008B814: 80266B84 (__ml__4cXyzCFf)
//	8008B824: 80347090 (PSVECAdd)
//	8008B834: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008B840: 80271A70 (Val__7cSGlobeFRC4cXyz)
//	8008B858: 80270FC8 (__ct__7cSAngleFf)
//	8008B864: 80270F98 (__ct__7cSAngleFs)
//	8008B878: 804528E8 (lit_5846)
//	8008B898: 80270FC8 (__ct__7cSAngleFf)
//	8008B8A8: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008B8B4: 80270F98 (__ct__7cSAngleFs)
//	8008B8C4: 804528E8 (lit_5846)
//	8008B8F8: 80271AB4 (Xyz__7cSGlobeCFv)
//	8008B908: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008B938: 804528D8 (lit_5145)
//	8008B954: 80270F98 (__ct__7cSAngleFs)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::rollingEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/rollingEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 804253C0-804253CC 000C+00 s=0 e=0 z=0  None .bss       @4203                                                        */
u8 d_d_ev_camera__lit_4203[12];

/* 804253CC-804253D8 000C+00 s=1 e=0 z=0  None .bss       MidnaAdditionVec__25@unnamed@d_ev_camera_cpp@                */
static u8 data_804253CC[12];

/* 804253D8-804253E4 000C+00 s=1 e=0 z=0  None .bss       @5852                                                        */
static u8 lit_5852[12];

/* 804253E4-804253F0 000C+00 s=1 e=0 z=0  None .bss       DefaultGap$5851                                              */
static f32 DefaultGap_5851[3];

/* 804528F0-804528F8 0004+04 s=1 e=0 z=0  None .sdata2    @5959                                                        */
SECTION_SDATA2 static f32 lit_5959[1 + 1 /* padding */] = {
	100000.0f,
	/* padding */
	0.0f,
};

/* 804528F8-80452900 0008+00 s=10 e=0 z=0  None .sdata2    @5962                                                        */
SECTION_SDATA2 static f64 lit_5962 = 4503601774854144.0 /* cast s32 to float */;

/* 8008B9B0-8008BE2C 047C+00 s=0 e=1 z=0  None .text      fixedPositionEvCamera__9dCamera_cFv                          */
//	8008B9C8: 80450F88 (struct_80450F88)
//	8008B9D4: 80430CF4 (Zero__4cXyz)
//	8008B9D8: 80430CF4 (Zero__4cXyz)
//	8008B9E0: 804253E4 (DefaultGap_5851)
//	8008B9E4: 804253E4 (DefaultGap_5851)
//	8008B9F8: 80009184 (__dt__4cXyzFv)
//	8008B9FC: 80009184 (__dt__4cXyzFv)
//	8008BA00: 804253D8 (lit_5852)
//	8008BA04: 804253D8 (lit_5852)
//	8008BA08: 80361C24 (__register_global_object)
//	8008BA10: 80450F88 (struct_80450F88)
//	8008BA24: 804253E4 (DefaultGap_5851)
//	8008BA28: 804253E4 (DefaultGap_5851)
//	8008BA48: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008BA4C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008BA58: 8008922C (getEvXyzData__9dCamera_cFP4cXyzPc4cXyz)
//	8008BA7C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008BA80: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008BA8C: 8008922C (getEvXyzData__9dCamera_cFP4cXyzPc4cXyz)
//	8008BA98: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008BA9C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008BAA8: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008BAB4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008BAB8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008BAC0: 804528DC (lit_5346)
//	8008BAC4: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008BAD0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008BAD4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008BADC: 804528F0 (lit_5959)
//	8008BAE0: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008BAEC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008BAF0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008BAFC: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008BB08: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008BB0C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008BB14: 804528B8 (lit_5141)
//	8008BB18: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008BB28: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008BB2C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008BB38: 8008933C (getEvStringData__9dCamera_cFPcPcPc)
//	8008BB44: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008BB48: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008BB50: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	8008BB5C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008BB60: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008BB6C: 800895F4 (getEvActor__9dCamera_cFPcPc)
//	8008BBA4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008BBA8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008BBB0: 800894C4 (getEvActor__9dCamera_cFPc)
//	8008BBF8: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008BC58: 80023590 (fpcSch_JudgeByID__FPvPv)
//	8008BC5C: 80023590 (fpcSch_JudgeByID__FPvPv)
//	8008BC64: 800197F8 (fopAcIt_Judge__FPFPvPv_PvPv)
//	8008BC88: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008BCB0: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008BCC0: 80266B84 (__ml__4cXyzCFf)
//	8008BCD0: 80347090 (PSVECAdd)
//	8008BCF8: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008BD04: 80271A70 (Val__7cSGlobeFRC4cXyz)
//	8008BD34: 804528E8 (lit_5846)
//	8008BD4C: 804528F8 (lit_5962)
//	8008BD8C: 80271AB4 (Xyz__7cSGlobeCFv)
//	8008BD9C: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008BDCC: 804528D8 (lit_5145)
//	8008BDE8: 80270F98 (__ct__7cSAngleFs)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::fixedPositionEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/fixedPositionEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* 8008BE2C-8008BE50 0024+00 s=0 e=1 z=0  None .text      uniformTransEvCamera__9dCamera_cFv                           */
//	8008BE3C: 8008BE98 (transEvCamera__9dCamera_cFi)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::uniformTransEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/uniformTransEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* 8008BE50-8008BE74 0024+00 s=0 e=1 z=0  None .text      uniformBrakeEvCamera__9dCamera_cFv                           */
//	8008BE60: 8008BE98 (transEvCamera__9dCamera_cFi)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::uniformBrakeEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/uniformBrakeEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* 8008BE74-8008BE98 0024+00 s=0 e=1 z=0  None .text      uniformAcceleEvCamera__9dCamera_cFv                          */
//	8008BE84: 8008BE98 (transEvCamera__9dCamera_cFi)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::uniformAcceleEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/uniformAcceleEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80452900-80452904 0004+00 s=1 e=0 z=0  None .sdata2    @6682                                                        */
SECTION_SDATA2 static f32 lit_6682 = 360.0f;

/* 80452904-80452908 0004+00 s=1 e=0 z=0  None .sdata2    @6683                                                        */
SECTION_SDATA2 static f32 lit_6683 = -360.0f;

/* 8008BE98-8008E750 28B8+00 s=3 e=0 z=0  None .text      transEvCamera__9dCamera_cFi                                  */
//	8008BEB8: 803621D4 (_savegpr_27)
//	8008BEC4: 8037A7F0 (lit_3871)
//	8008BEC8: 8037A7F0 (lit_3871)
//	8008BED4: 8009784C (func_8009784C)
//	8008BEDC: 8009784C (func_8009784C)
//	8008BFE0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008BFE4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008BFE8: 80088CB0 (getEvIntData__9dCamera_cFPiPc)
//	8008BFFC: 80009184 (__dt__4cXyzFv)
//	8008C008: 80009184 (__dt__4cXyzFv)
//	8008C014: 80097810 (func_80097810)
//	8008C020: 80097810 (func_80097810)
//	8008C034: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C038: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C044: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	8008C06C: 80097878 (Init__14d2DBSplinePathFll)
//	8008C074: 80097904 (Step__14d2DBSplinePathFv)
//	8008C084: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C088: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C090: 80088E58 (getEvFloatListData__9dCamera_cFPPfPc)
//	8008C0A8: 80097878 (Init__14d2DBSplinePathFll)
//	8008C0B0: 80097904 (Step__14d2DBSplinePathFv)
//	8008C0C4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C0C8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C0D0: 80088CB0 (getEvIntData__9dCamera_cFPiPc)
//	8008C0E4: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8008C0F0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C0F4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C100: 8008922C (getEvXyzData__9dCamera_cFP4cXyzPc4cXyz)
//	8008C10C: 80009184 (__dt__4cXyzFv)
//	8008C118: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8008C124: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C128: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C134: 8008922C (getEvXyzData__9dCamera_cFP4cXyzPc4cXyz)
//	8008C140: 80009184 (__dt__4cXyzFv)
//	8008C14C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C150: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C15C: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008C164: 80271030 (Degree__7cSAngleCFv)
//	8008C170: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C174: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C17C: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008C1A0: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008C1AC: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008C1BC: 804528F8 (lit_5962)
//	8008C1DC: 804528B8 (lit_5141)
//	8008C210: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C214: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C21C: 80088CB0 (getEvIntData__9dCamera_cFPiPc)
//	8008C230: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8008C23C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C240: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C24C: 8008922C (getEvXyzData__9dCamera_cFP4cXyzPc4cXyz)
//	8008C258: 80009184 (__dt__4cXyzFv)
//	8008C264: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8008C270: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C274: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C280: 8008922C (getEvXyzData__9dCamera_cFP4cXyzPc4cXyz)
//	8008C28C: 80009184 (__dt__4cXyzFv)
//	8008C298: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C29C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C2A8: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008C2B0: 80271030 (Degree__7cSAngleCFv)
//	8008C2BC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C2C0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C2C8: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008C2F4: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008C300: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008C310: 804528F8 (lit_5962)
//	8008C330: 804528B8 (lit_5141)
//	8008C364: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C368: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C374: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	8008C37C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C380: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C388: 800894C4 (getEvActor__9dCamera_cFPc)
//	8008C398: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C39C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C3A8: 8008933C (getEvStringData__9dCamera_cFPcPcPc)
//	8008C3B4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C3B8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008C3C0: 804528DC (lit_5346)
//	8008C3C4: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008C3D4: 800977C0 (fopAcM_GetID__FPCv)
//	8008C3FC: 80451018 (m_midnaActor__9daPy_py_c)
//	8008C404: 804253B4 (data_804253B4)
//	8008C408: 804253B4 (data_804253B4)
//	8008C40C: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8008C414: 800977B4 (checkMidnaRide__9daPy_py_cCFv)
//	8008C424: 800977A8 (checkNoDraw__9daMidna_cCFv)
//	8008C434: 804253CC (data_804253CC)
//	8008C438: 804253CC (data_804253CC)
//	8008C43C: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008C454: 8008E904 (__apl__4cXyzFRC3Vec)
//	8008C46C: 8008E8D0 (__ami__4cXyzFRC3Vec)
//	8008C484: 8008E904 (__apl__4cXyzFRC3Vec)
//	8008C49C: 8008E8D0 (__ami__4cXyzFRC3Vec)
//	8008C4B4: 8008E904 (__apl__4cXyzFRC3Vec)
//	8008C4CC: 8008E8D0 (__ami__4cXyzFRC3Vec)
//	8008C4E4: 8008E904 (__apl__4cXyzFRC3Vec)
//	8008C4FC: 8008E8D0 (__ami__4cXyzFRC3Vec)
//	8008C508: 80009184 (__dt__4cXyzFv)
//	8008C528: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008C534: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008C540: 80009184 (__dt__4cXyzFv)
//	8008C56C: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008C578: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008C584: 80009184 (__dt__4cXyzFv)
//	8008C598: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	8008C5D4: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	8008C5E4: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008C5F0: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008C5FC: 80009184 (__dt__4cXyzFv)
//	8008C608: 80009184 (__dt__4cXyzFv)
//	8008C618: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008C628: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008C634: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	8008C640: 80030510 (__dt__7cSAngleFv)
//	8008C64C: 80030510 (__dt__7cSAngleFv)
//	8008C654: 80451188 (_0__7cSAngle)
//	8008C6A0: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008C6AC: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008C6B8: 80009184 (__dt__4cXyzFv)
//	8008C6CC: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008C6D8: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008C6E4: 80009184 (__dt__4cXyzFv)
//	8008C6F8: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	8008C718: 80030510 (__dt__7cSAngleFv)
//	8008C724: 8007167C (__dt__7cSGlobeFv)
//	8008C74C: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	8008C75C: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008C768: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008C774: 80009184 (__dt__4cXyzFv)
//	8008C780: 80009184 (__dt__4cXyzFv)
//	8008C790: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008C7A0: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008C7AC: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	8008C7B8: 80030510 (__dt__7cSAngleFv)
//	8008C7C4: 80030510 (__dt__7cSAngleFv)
//	8008C7CC: 80451188 (_0__7cSAngle)
//	8008C818: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008C824: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008C830: 80009184 (__dt__4cXyzFv)
//	8008C844: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008C850: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008C85C: 80009184 (__dt__4cXyzFv)
//	8008C870: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	8008C890: 80030510 (__dt__7cSAngleFv)
//	8008C89C: 8007167C (__dt__7cSGlobeFv)
//	8008C8C4: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	8008C8D4: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008C8E0: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008C8EC: 80009184 (__dt__4cXyzFv)
//	8008C8F8: 80009184 (__dt__4cXyzFv)
//	8008C908: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008C918: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008C924: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	8008C930: 80030510 (__dt__7cSAngleFv)
//	8008C93C: 80030510 (__dt__7cSAngleFv)
//	8008C944: 80451188 (_0__7cSAngle)
//	8008C990: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008C99C: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008C9A8: 80009184 (__dt__4cXyzFv)
//	8008C9BC: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008C9C8: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008C9D4: 80009184 (__dt__4cXyzFv)
//	8008C9E8: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	8008CA08: 80030510 (__dt__7cSAngleFv)
//	8008CA14: 8007167C (__dt__7cSGlobeFv)
//	8008CA3C: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	8008CA4C: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008CA58: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008CA64: 80009184 (__dt__4cXyzFv)
//	8008CA70: 80009184 (__dt__4cXyzFv)
//	8008CA80: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008CA90: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008CA9C: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	8008CAA8: 80030510 (__dt__7cSAngleFv)
//	8008CAB4: 80030510 (__dt__7cSAngleFv)
//	8008CABC: 80451188 (_0__7cSAngle)
//	8008CB08: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008CB14: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008CB20: 80009184 (__dt__4cXyzFv)
//	8008CB34: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008CB40: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008CB4C: 80009184 (__dt__4cXyzFv)
//	8008CB60: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	8008CB80: 80030510 (__dt__7cSAngleFv)
//	8008CB8C: 8007167C (__dt__7cSGlobeFv)
//	8008CBA4: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008CBB4: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008CBC4: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008CBD0: 8008E894 (U__7cSGlobeFRC7cSAngle)
//	8008CBDC: 80030510 (__dt__7cSAngleFv)
//	8008CBE8: 80030510 (__dt__7cSAngleFv)
//	8008CBF8: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	8008CC04: 80271AB4 (Xyz__7cSGlobeCFv)
//	8008CC14: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008CC20: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008CC2C: 80009184 (__dt__4cXyzFv)
//	8008CC38: 80009184 (__dt__4cXyzFv)
//	8008CC44: 80009184 (__dt__4cXyzFv)
//	8008CC58: 8007167C (__dt__7cSGlobeFv)
//	8008CC70: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008CC80: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008CC90: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008CC9C: 8008E894 (U__7cSGlobeFRC7cSAngle)
//	8008CCA8: 80030510 (__dt__7cSAngleFv)
//	8008CCB4: 80030510 (__dt__7cSAngleFv)
//	8008CCC4: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	8008CCD0: 80271AB4 (Xyz__7cSGlobeCFv)
//	8008CCE0: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008CCEC: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008CCF8: 80009184 (__dt__4cXyzFv)
//	8008CD04: 80009184 (__dt__4cXyzFv)
//	8008CD10: 80009184 (__dt__4cXyzFv)
//	8008CD24: 8007167C (__dt__7cSGlobeFv)
//	8008CD40: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8008CD54: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008CD60: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8008CD6C: 80009184 (__dt__4cXyzFv)
//	8008CD7C: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	8008CD8C: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008CD98: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8008CDA0: 8008E790 (abs__4cXyzCFv)
//	8008CDB0: 80009184 (__dt__4cXyzFv)
//	8008CDBC: 80009184 (__dt__4cXyzFv)
//	8008CDC8: 80009184 (__dt__4cXyzFv)
//	8008CDE8: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008CDF4: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008CE00: 80009184 (__dt__4cXyzFv)
//	8008CE10: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	8008CE20: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008CE2C: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8008CE34: 8008E790 (abs__4cXyzCFv)
//	8008CE44: 80009184 (__dt__4cXyzFv)
//	8008CE50: 80009184 (__dt__4cXyzFv)
//	8008CE5C: 80009184 (__dt__4cXyzFv)
//	8008CE7C: 80009184 (__dt__4cXyzFv)
//	8008CE88: 80009184 (__dt__4cXyzFv)
//	8008CEA0: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008CEB0: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008CEC0: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008CECC: 8008E894 (U__7cSGlobeFRC7cSAngle)
//	8008CED8: 80030510 (__dt__7cSAngleFv)
//	8008CEE4: 80030510 (__dt__7cSAngleFv)
//	8008CEF4: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	8008CF00: 80271AB4 (Xyz__7cSGlobeCFv)
//	8008CF10: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008CF1C: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008CF28: 80009184 (__dt__4cXyzFv)
//	8008CF34: 80009184 (__dt__4cXyzFv)
//	8008CF40: 80009184 (__dt__4cXyzFv)
//	8008CF54: 8007167C (__dt__7cSGlobeFv)
//	8008CF70: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8008CF84: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008CF90: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8008CF9C: 80009184 (__dt__4cXyzFv)
//	8008CFAC: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	8008CFBC: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008CFC8: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8008CFD0: 8008E790 (abs__4cXyzCFv)
//	8008CFE0: 80009184 (__dt__4cXyzFv)
//	8008CFEC: 80009184 (__dt__4cXyzFv)
//	8008CFF8: 80009184 (__dt__4cXyzFv)
//	8008D018: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008D024: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008D030: 80009184 (__dt__4cXyzFv)
//	8008D040: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	8008D050: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008D05C: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8008D064: 8008E790 (abs__4cXyzCFv)
//	8008D074: 80009184 (__dt__4cXyzFv)
//	8008D080: 80009184 (__dt__4cXyzFv)
//	8008D08C: 80009184 (__dt__4cXyzFv)
//	8008D0AC: 80009184 (__dt__4cXyzFv)
//	8008D0B8: 80009184 (__dt__4cXyzFv)
//	8008D0D8: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008D0E4: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008D0F0: 80009184 (__dt__4cXyzFv)
//	8008D11C: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008D128: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008D134: 80009184 (__dt__4cXyzFv)
//	8008D148: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	8008D174: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008D184: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008D194: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008D1A0: 8008E894 (U__7cSGlobeFRC7cSAngle)
//	8008D1AC: 80030510 (__dt__7cSAngleFv)
//	8008D1B8: 80030510 (__dt__7cSAngleFv)
//	8008D1C8: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	8008D1D4: 80271AB4 (Xyz__7cSGlobeCFv)
//	8008D1E4: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008D1F0: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008D1FC: 80009184 (__dt__4cXyzFv)
//	8008D208: 80009184 (__dt__4cXyzFv)
//	8008D214: 80009184 (__dt__4cXyzFv)
//	8008D228: 8007167C (__dt__7cSGlobeFv)
//	8008D240: 802710E8 (Inv__7cSAngleCFv)
//	8008D24C: 80270F98 (__ct__7cSAngleFs)
//	8008D25C: 80088384 (xyzRotateY__8dCamMathFR4cXyz7cSAngle)
//	8008D268: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8008D274: 80009184 (__dt__4cXyzFv)
//	8008D280: 80030510 (__dt__7cSAngleFv)
//	8008D290: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008D29C: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008D2A8: 80009184 (__dt__4cXyzFv)
//	8008D2B4: 80009184 (__dt__4cXyzFv)
//	8008D2C8: 802710E8 (Inv__7cSAngleCFv)
//	8008D2D4: 80270F98 (__ct__7cSAngleFs)
//	8008D2E4: 80088384 (xyzRotateY__8dCamMathFR4cXyz7cSAngle)
//	8008D2F0: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8008D2FC: 80009184 (__dt__4cXyzFv)
//	8008D308: 80030510 (__dt__7cSAngleFv)
//	8008D318: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008D324: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008D330: 80009184 (__dt__4cXyzFv)
//	8008D33C: 80009184 (__dt__4cXyzFv)
//	8008D344: 80271B7C (Invert__7cSGlobeFv)
//	8008D350: 8008E774 (__as__7cSGlobeFRC7cSGlobe)
//	8008D370: 80023590 (fpcSch_JudgeByID__FPvPv)
//	8008D374: 80023590 (fpcSch_JudgeByID__FPvPv)
//	8008D37C: 800197F8 (fopAcIt_Judge__FPFPvPv_PvPv)
//	8008D390: 80009184 (__dt__4cXyzFv)
//	8008D39C: 80009184 (__dt__4cXyzFv)
//	8008D3A8: 80097810 (func_80097810)
//	8008D3B4: 80097810 (func_80097810)
//	8008D3D4: 804528DC (lit_5346)
//	8008D3EC: 80097904 (Step__14d2DBSplinePathFv)
//	8008D3F8: 80097B20 (Calc__14d2DBSplinePathFPf)
//	8008D410: 80097904 (Step__14d2DBSplinePathFv)
//	8008D428: 80097B20 (Calc__14d2DBSplinePathFPf)
//	8008D438: 804528E8 (lit_5846)
//	8008D450: 804528F8 (lit_5962)
//	8008D490: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	8008D4A0: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008D4AC: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008D4B8: 80009184 (__dt__4cXyzFv)
//	8008D4C4: 80009184 (__dt__4cXyzFv)
//	8008D4DC: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008D4EC: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008D4F8: 8008E894 (U__7cSGlobeFRC7cSAngle)
//	8008D504: 80030510 (__dt__7cSAngleFv)
//	8008D514: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	8008D520: 80271AB4 (Xyz__7cSGlobeCFv)
//	8008D530: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008D53C: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008D548: 80009184 (__dt__4cXyzFv)
//	8008D554: 80009184 (__dt__4cXyzFv)
//	8008D560: 80009184 (__dt__4cXyzFv)
//	8008D56C: 8007167C (__dt__7cSGlobeFv)
//	8008D590: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008D59C: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008D5A8: 80009184 (__dt__4cXyzFv)
//	8008D5B0: 8008E750 (func_8008E750)
//	8008D5CC: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008D5D8: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008D5E4: 80009184 (__dt__4cXyzFv)
//	8008D5F4: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008D614: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	8008D624: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008D630: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008D63C: 80009184 (__dt__4cXyzFv)
//	8008D648: 80009184 (__dt__4cXyzFv)
//	8008D660: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008D670: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008D67C: 8008E894 (U__7cSGlobeFRC7cSAngle)
//	8008D688: 80030510 (__dt__7cSAngleFv)
//	8008D698: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	8008D6A4: 80271AB4 (Xyz__7cSGlobeCFv)
//	8008D6B4: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008D6C0: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008D6CC: 80009184 (__dt__4cXyzFv)
//	8008D6D8: 80009184 (__dt__4cXyzFv)
//	8008D6E4: 80009184 (__dt__4cXyzFv)
//	8008D6F0: 8007167C (__dt__7cSGlobeFv)
//	8008D718: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008D724: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008D730: 80009184 (__dt__4cXyzFv)
//	8008D738: 8008E750 (func_8008E750)
//	8008D754: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008D760: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008D76C: 80009184 (__dt__4cXyzFv)
//	8008D77C: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008D79C: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	8008D7AC: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008D7B8: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008D7C4: 80009184 (__dt__4cXyzFv)
//	8008D7D0: 80009184 (__dt__4cXyzFv)
//	8008D7E8: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008D7F8: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008D804: 8008E894 (U__7cSGlobeFRC7cSAngle)
//	8008D810: 80030510 (__dt__7cSAngleFv)
//	8008D820: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	8008D82C: 80271AB4 (Xyz__7cSGlobeCFv)
//	8008D83C: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008D848: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008D854: 80009184 (__dt__4cXyzFv)
//	8008D860: 80009184 (__dt__4cXyzFv)
//	8008D86C: 80009184 (__dt__4cXyzFv)
//	8008D878: 8007167C (__dt__7cSGlobeFv)
//	8008D8A0: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008D8AC: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008D8B8: 80009184 (__dt__4cXyzFv)
//	8008D8C0: 8008E750 (func_8008E750)
//	8008D8DC: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008D8E8: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008D8F4: 80009184 (__dt__4cXyzFv)
//	8008D914: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008D924: 80088384 (xyzRotateY__8dCamMathFR4cXyz7cSAngle)
//	8008D930: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008D93C: 80009184 (__dt__4cXyzFv)
//	8008D948: 80030510 (__dt__7cSAngleFv)
//	8008D958: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008D978: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	8008D988: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008D994: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008D9A0: 80009184 (__dt__4cXyzFv)
//	8008D9AC: 80009184 (__dt__4cXyzFv)
//	8008D9C4: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008D9D4: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008D9E0: 8008E894 (U__7cSGlobeFRC7cSAngle)
//	8008D9EC: 80030510 (__dt__7cSAngleFv)
//	8008D9FC: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	8008DA08: 80271AB4 (Xyz__7cSGlobeCFv)
//	8008DA18: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008DA24: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008DA30: 80009184 (__dt__4cXyzFv)
//	8008DA3C: 80009184 (__dt__4cXyzFv)
//	8008DA48: 80009184 (__dt__4cXyzFv)
//	8008DA54: 8007167C (__dt__7cSGlobeFv)
//	8008DA7C: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008DA88: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008DA94: 80009184 (__dt__4cXyzFv)
//	8008DA9C: 8008E750 (func_8008E750)
//	8008DAB8: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008DAC4: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008DAD0: 80009184 (__dt__4cXyzFv)
//	8008DAF0: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008DB00: 80088384 (xyzRotateY__8dCamMathFR4cXyz7cSAngle)
//	8008DB0C: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008DB18: 80009184 (__dt__4cXyzFv)
//	8008DB24: 80030510 (__dt__7cSAngleFv)
//	8008DB34: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008DB44: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008DB50: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008DB5C: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008DB68: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008DB8C: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008DB9C: 80266B84 (__ml__4cXyzCFf)
//	8008DBAC: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008DBB8: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008DBC4: 80009184 (__dt__4cXyzFv)
//	8008DBD0: 80009184 (__dt__4cXyzFv)
//	8008DBDC: 80009184 (__dt__4cXyzFv)
//	8008DBEC: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008DBFC: 80266B84 (__ml__4cXyzCFf)
//	8008DC08: 8008E904 (__apl__4cXyzFRC3Vec)
//	8008DC14: 80009184 (__dt__4cXyzFv)
//	8008DC20: 80009184 (__dt__4cXyzFv)
//	8008DC30: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008DC3C: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008DC48: 80009184 (__dt__4cXyzFv)
//	8008DC58: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008DC64: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008DC70: 80009184 (__dt__4cXyzFv)
//	8008DC84: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008DC94: 80271264 (__ml__7cSAngleCFf)
//	8008DCA4: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008DCB8: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008DCC8: 80271264 (__ml__7cSAngleCFf)
//	8008DCD8: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008DCFC: 80271850 (__ct__7cSGlobeFfRC7cSAngleRC7cSAngle)
//	8008DD08: 80030510 (__dt__7cSAngleFv)
//	8008DD14: 80030510 (__dt__7cSAngleFv)
//	8008DD20: 80030510 (__dt__7cSAngleFv)
//	8008DD2C: 80030510 (__dt__7cSAngleFv)
//	8008DD38: 80030510 (__dt__7cSAngleFv)
//	8008DD44: 80030510 (__dt__7cSAngleFv)
//	8008DD50: 80271AB4 (Xyz__7cSGlobeCFv)
//	8008DD60: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008DD6C: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008DD78: 80009184 (__dt__4cXyzFv)
//	8008DD84: 80009184 (__dt__4cXyzFv)
//	8008DD94: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008DDA4: 80266B84 (__ml__4cXyzCFf)
//	8008DDB0: 8008E904 (__apl__4cXyzFRC3Vec)
//	8008DDBC: 80009184 (__dt__4cXyzFv)
//	8008DDC8: 80009184 (__dt__4cXyzFv)
//	8008DDD4: 8007167C (__dt__7cSGlobeFv)
//	8008DDE0: 8007167C (__dt__7cSGlobeFv)
//	8008DDEC: 8007167C (__dt__7cSGlobeFv)
//	8008DE10: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008DE20: 80266B84 (__ml__4cXyzCFf)
//	8008DE30: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008DE3C: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008DE48: 80009184 (__dt__4cXyzFv)
//	8008DE54: 80009184 (__dt__4cXyzFv)
//	8008DE60: 80009184 (__dt__4cXyzFv)
//	8008DE70: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008DE80: 80266B84 (__ml__4cXyzCFf)
//	8008DE8C: 8008E904 (__apl__4cXyzFRC3Vec)
//	8008DE98: 80009184 (__dt__4cXyzFv)
//	8008DEA4: 80009184 (__dt__4cXyzFv)
//	8008DEB4: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008DEC0: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008DECC: 80009184 (__dt__4cXyzFv)
//	8008DEDC: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008DEE8: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008DEF4: 80009184 (__dt__4cXyzFv)
//	8008DF08: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008DF14: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	8008DF20: 80030510 (__dt__7cSAngleFv)
//	8008DF28: 80451188 (_0__7cSAngle)
//	8008DF38: 80452900 (lit_6682)
//	8008DF40: 8027100C (Val__7cSAngleFf)
//	8008DF54: 802712B4 (__amu__7cSAngleFf)
//	8008DF60: 80271030 (Degree__7cSAngleCFv)
//	8008DF64: 80452900 (lit_6682)
//	8008DF74: 8027100C (Val__7cSAngleFf)
//	8008DF88: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008DF98: 80271264 (__ml__7cSAngleCFf)
//	8008DFA8: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008DFB8: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008DFDC: 80271850 (__ct__7cSGlobeFfRC7cSAngleRC7cSAngle)
//	8008DFE8: 80030510 (__dt__7cSAngleFv)
//	8008DFF4: 80030510 (__dt__7cSAngleFv)
//	8008E000: 80030510 (__dt__7cSAngleFv)
//	8008E00C: 80030510 (__dt__7cSAngleFv)
//	8008E018: 80271AB4 (Xyz__7cSGlobeCFv)
//	8008E028: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008E034: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008E040: 80009184 (__dt__4cXyzFv)
//	8008E04C: 80009184 (__dt__4cXyzFv)
//	8008E05C: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008E06C: 80266B84 (__ml__4cXyzCFf)
//	8008E078: 8008E904 (__apl__4cXyzFRC3Vec)
//	8008E084: 80009184 (__dt__4cXyzFv)
//	8008E090: 80009184 (__dt__4cXyzFv)
//	8008E09C: 8007167C (__dt__7cSGlobeFv)
//	8008E0A8: 80030510 (__dt__7cSAngleFv)
//	8008E0B4: 8007167C (__dt__7cSGlobeFv)
//	8008E0C0: 8007167C (__dt__7cSGlobeFv)
//	8008E0E4: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008E0F4: 80266B84 (__ml__4cXyzCFf)
//	8008E104: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008E110: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008E11C: 80009184 (__dt__4cXyzFv)
//	8008E128: 80009184 (__dt__4cXyzFv)
//	8008E134: 80009184 (__dt__4cXyzFv)
//	8008E144: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008E154: 80266B84 (__ml__4cXyzCFf)
//	8008E160: 8008E904 (__apl__4cXyzFRC3Vec)
//	8008E16C: 80009184 (__dt__4cXyzFv)
//	8008E178: 80009184 (__dt__4cXyzFv)
//	8008E188: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008E194: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008E1A0: 80009184 (__dt__4cXyzFv)
//	8008E1B0: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008E1BC: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008E1C8: 80009184 (__dt__4cXyzFv)
//	8008E1DC: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008E1E8: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	8008E1F4: 80030510 (__dt__7cSAngleFv)
//	8008E1FC: 80451188 (_0__7cSAngle)
//	8008E20C: 80452904 (lit_6683)
//	8008E214: 8027100C (Val__7cSAngleFf)
//	8008E228: 802712B4 (__amu__7cSAngleFf)
//	8008E234: 80271030 (Degree__7cSAngleCFv)
//	8008E238: 80452904 (lit_6683)
//	8008E248: 8027100C (Val__7cSAngleFf)
//	8008E25C: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008E26C: 80271264 (__ml__7cSAngleCFf)
//	8008E27C: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008E28C: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008E2B0: 80271850 (__ct__7cSGlobeFfRC7cSAngleRC7cSAngle)
//	8008E2BC: 80030510 (__dt__7cSAngleFv)
//	8008E2C8: 80030510 (__dt__7cSAngleFv)
//	8008E2D4: 80030510 (__dt__7cSAngleFv)
//	8008E2E0: 80030510 (__dt__7cSAngleFv)
//	8008E2EC: 80271AB4 (Xyz__7cSGlobeCFv)
//	8008E2FC: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008E308: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008E314: 80009184 (__dt__4cXyzFv)
//	8008E320: 80009184 (__dt__4cXyzFv)
//	8008E330: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008E340: 80266B84 (__ml__4cXyzCFf)
//	8008E34C: 8008E904 (__apl__4cXyzFRC3Vec)
//	8008E358: 80009184 (__dt__4cXyzFv)
//	8008E364: 80009184 (__dt__4cXyzFv)
//	8008E370: 8007167C (__dt__7cSGlobeFv)
//	8008E37C: 80030510 (__dt__7cSAngleFv)
//	8008E388: 8007167C (__dt__7cSGlobeFv)
//	8008E394: 8007167C (__dt__7cSGlobeFv)
//	8008E3B0: 80266B84 (__ml__4cXyzCFf)
//	8008E3C0: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008E3CC: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008E3D8: 80009184 (__dt__4cXyzFv)
//	8008E3E4: 80009184 (__dt__4cXyzFv)
//	8008E3F4: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008E404: 80266B84 (__ml__4cXyzCFf)
//	8008E410: 8008E904 (__apl__4cXyzFRC3Vec)
//	8008E41C: 80009184 (__dt__4cXyzFv)
//	8008E428: 80009184 (__dt__4cXyzFv)
//	8008E438: 80266B84 (__ml__4cXyzCFf)
//	8008E448: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008E454: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008E460: 80009184 (__dt__4cXyzFv)
//	8008E46C: 80009184 (__dt__4cXyzFv)
//	8008E47C: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008E48C: 80266B84 (__ml__4cXyzCFf)
//	8008E498: 8008E904 (__apl__4cXyzFRC3Vec)
//	8008E4A4: 80009184 (__dt__4cXyzFv)
//	8008E4B0: 80009184 (__dt__4cXyzFv)
//	8008E4C8: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008E4D8: 80266B84 (__ml__4cXyzCFf)
//	8008E4E8: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008E4F4: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008E500: 80009184 (__dt__4cXyzFv)
//	8008E50C: 80009184 (__dt__4cXyzFv)
//	8008E518: 80009184 (__dt__4cXyzFv)
//	8008E528: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008E538: 80266B84 (__ml__4cXyzCFf)
//	8008E544: 8008E904 (__apl__4cXyzFRC3Vec)
//	8008E550: 80009184 (__dt__4cXyzFv)
//	8008E55C: 80009184 (__dt__4cXyzFv)
//	8008E56C: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008E57C: 80266B84 (__ml__4cXyzCFf)
//	8008E58C: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008E598: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008E5A4: 80009184 (__dt__4cXyzFv)
//	8008E5B0: 80009184 (__dt__4cXyzFv)
//	8008E5BC: 80009184 (__dt__4cXyzFv)
//	8008E5CC: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008E5DC: 80266B84 (__ml__4cXyzCFf)
//	8008E5E8: 8008E904 (__apl__4cXyzFRC3Vec)
//	8008E5F4: 80009184 (__dt__4cXyzFv)
//	8008E600: 80009184 (__dt__4cXyzFv)
//	8008E654: 80270FC8 (__ct__7cSAngleFf)
//	8008E664: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008E674: 80271264 (__ml__7cSAngleCFf)
//	8008E680: 802711D4 (__apl__7cSAngleFRC7cSAngle)
//	8008E68C: 80030510 (__dt__7cSAngleFv)
//	8008E698: 80030510 (__dt__7cSAngleFv)
//	8008E6A4: 80030510 (__dt__7cSAngleFv)
//	8008E6B0: 80097778 (setFlag__9dCamera_cFUl)
//	8008E6C0: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008E6CC: 80271A70 (Val__7cSGlobeFRC4cXyz)
//	8008E6D8: 80009184 (__dt__4cXyzFv)
//	8008E6E4: 80009184 (__dt__4cXyzFv)
//	8008E6F0: 80009184 (__dt__4cXyzFv)
//	8008E6FC: 80009184 (__dt__4cXyzFv)
//	8008E708: 80009184 (__dt__4cXyzFv)
//	8008E714: 80097810 (func_80097810)
//	8008E720: 80097810 (func_80097810)
//	8008E73C: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
asm void dCamera_c::transEvCamera(int param_0) {
	nofralloc
#include "asm/d/d_ev_camera/transEvCamera__9dCamera_cFi.s"
}
#pragma pop


/* 8008E750-8008E774 0024+00 s=1 e=0 z=0  None .text      isRelChar__25@unnamed@d_ev_camera_cpp@Fc                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_8008E750() {
	nofralloc
#include "asm/d/d_ev_camera/func_8008E750.s"
}
#pragma pop


/* 8008E774-8008E790 001C+00 s=3 e=6 z=0  None .text      __as__7cSGlobeFRC7cSGlobe                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cSGlobe const& False
// 	 cSGlobe const False
// 		 cSGlobe False
asm void cSGlobe::operator=(cSGlobe const& param_0) {
	nofralloc
#include "asm/d/d_ev_camera/__as__7cSGlobeFRC7cSGlobe.s"
}
#pragma pop


/* 8008E790-8008E894 0104+00 s=1 e=7 z=0  None .text      abs__4cXyzCFv                                                */
//	8008E79C: 80347138 (PSVECSquareMag)
//	8008E7A0: 804528B8 (lit_5141)
//	8008E7B0: 804528C0 (lit_5142)
//	8008E7B8: 804528C8 (lit_5143)
//	8008E800: 804528D0 (lit_5144)
//	8008E80C: 80450AE0 (__float_nan)
//	8008E810: 80450AE0 (__float_nan)
//	8008E87C: 80450AE0 (__float_nan)
//	8008E880: 80450AE0 (__float_nan)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void cXyz::abs() const {
	nofralloc
#include "asm/d/d_ev_camera/abs__4cXyzCFv.s"
}
#pragma pop


/* 8008E894-8008E8D0 003C+00 s=2 e=6 z=0  None .text      U__7cSGlobeFRC7cSAngle                                       */
//	8008E8B0: 80270F98 (__ct__7cSAngleFs)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cSAngle const& False
// 	 cSAngle const False
// 		 cSAngle False
asm void cSGlobe::U(cSAngle const& param_0) {
	nofralloc
#include "asm/d/d_ev_camera/U__7cSGlobeFRC7cSAngle.s"
}
#pragma pop


/* 8008E8D0-8008E904 0034+00 s=1 e=1 z=0  None .text      __ami__4cXyzFRC3Vec                                          */
//	8008E8E8: 803470B4 (PSVECSubtract)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
asm void cXyz::operator-=(Vec const& param_0) {
	nofralloc
#include "asm/d/d_ev_camera/__ami__4cXyzFRC3Vec.s"
}
#pragma pop


/* 8008E904-8008E938 0034+00 s=1 e=5 z=0  None .text      __apl__4cXyzFRC3Vec                                          */
//	8008E91C: 80347090 (PSVECAdd)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
asm void cXyz::operator+=(Vec const& param_0) {
	nofralloc
#include "asm/d/d_ev_camera/__apl__4cXyzFRC3Vec.s"
}
#pragma pop


/* ############################################################################################## */
/* 804253F0-804253FC 000C+00 s=1 e=0 z=0  None .bss       @6756                                                        */
static u8 lit_6756[12];

/* 804253FC-80425408 000C+00 s=1 e=0 z=0  None .bss       DefaultGap$6755                                              */
static u8 DefaultGap_6755[12];

/* 80452908-8045290C 0004+00 s=2 e=0 z=0  None .sdata2    @7334                                                        */
SECTION_SDATA2 static f32 lit_7334 = 750.0f;

/* 8045290C-80452910 0004+00 s=1 e=0 z=0  None .sdata2    @7335                                                        */
SECTION_SDATA2 static f32 lit_7335 = 400.0f;

/* 80452910-80452914 0004+00 s=2 e=0 z=0  None .sdata2    @7336                                                        */
SECTION_SDATA2 static f32 lit_7336 = 1500.0f;

/* 80452914-80452918 0004+00 s=1 e=0 z=0  None .sdata2    @7337                                                        */
SECTION_SDATA2 static f32 lit_7337 = 62.0f;

/* 80452918-8045291C 0004+00 s=1 e=0 z=0  None .sdata2    @7338                                                        */
SECTION_SDATA2 static f32 lit_7338 = 179.0f;

/* 8045291C-80452920 0004+00 s=6 e=0 z=0  None .sdata2    @7339                                                        */
SECTION_SDATA2 static f32 lit_7339 = 10.0f;

/* 80452920-80452924 0004+00 s=4 e=0 z=0  None .sdata2    @7340                                                        */
SECTION_SDATA2 static f32 lit_7340 = 5.0f;

/* 80452924-80452928 0004+00 s=4 e=0 z=0  None .sdata2    @7341                                                        */
SECTION_SDATA2 static f32 lit_7341 = -5.0f;

/* 80452928-8045292C 0004+00 s=5 e=0 z=0  None .sdata2    @7342                                                        */
SECTION_SDATA2 static f32 lit_7342 = 120.0f;

/* 8045292C-80452930 0004+00 s=2 e=0 z=0  None .sdata2    @7343                                                        */
SECTION_SDATA2 static f32 lit_7343 = -8.0f;

/* 80452930-80452934 0004+00 s=2 e=0 z=0  None .sdata2    @7344                                                        */
SECTION_SDATA2 static f32 lit_7344 = 8.0f;

/* 80452934-80452938 0004+00 s=6 e=0 z=0  None .sdata2    @7345                                                        */
SECTION_SDATA2 static f32 lit_7345 = 70.0f;

/* 80452938-8045293C 0004+00 s=1 e=0 z=0  None .sdata2    @7346                                                        */
SECTION_SDATA2 static f32 lit_7346 = 1.0f / 10.0f;

/* 8045293C-80452940 0004+00 s=6 e=0 z=0  None .sdata2    @7347                                                        */
SECTION_SDATA2 static f32 lit_7347 = 30.0f;

/* 8008E938-8008FA58 1120+00 s=0 e=1 z=0  None .text      watchActorEvCamera__9dCamera_cFv                             */
//	8008E950: 803621CC (_savegpr_25)
//	8008E958: 80450F89 (struct_80450F88)
//	8008E964: 804253FC (DefaultGap_6755)
//	8008E968: 804253FC (DefaultGap_6755)
//	8008E96C: 80430CF4 (Zero__4cXyz)
//	8008E970: 80430CF4 (Zero__4cXyz)
//	8008E974: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8008E978: 80009184 (__dt__4cXyzFv)
//	8008E97C: 80009184 (__dt__4cXyzFv)
//	8008E980: 804253F0 (lit_6756)
//	8008E984: 804253F0 (lit_6756)
//	8008E988: 80361C24 (__register_global_object)
//	8008E990: 80450F89 (struct_80450F88)
//	8008E9A8: 804253FC (DefaultGap_6755)
//	8008E9AC: 804253FC (DefaultGap_6755)
//	8008E9B0: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8008E9BC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008E9C0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008E9CC: 8008922C (getEvXyzData__9dCamera_cFP4cXyzPc4cXyz)
//	8008E9D8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008E9DC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008E9E4: 804528DC (lit_5346)
//	8008E9E8: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008E9F4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008E9F8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008EA00: 80452908 (lit_7334)
//	8008EA04: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008EA10: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008EA14: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008EA1C: 8045290C (lit_7335)
//	8008EA20: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008EA2C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008EA30: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008EA38: 804528B8 (lit_5141)
//	8008EA3C: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008EA48: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008EA4C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008EA54: 80452910 (lit_7336)
//	8008EA58: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008EA64: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008EA68: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008EA70: 80452914 (lit_7337)
//	8008EA74: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008EA80: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008EA84: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008EA90: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	8008EA9C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008EAA0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008EAAC: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	8008EAB8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008EABC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008EAC4: 80452918 (lit_7338)
//	8008EAC8: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008EAD4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008EAD8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008EAE4: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	8008EAEC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008EAF0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008EAFC: 800895F4 (getEvActor__9dCamera_cFPcPc)
//	8008EB40: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008EB4C: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008EB5C: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008EB68: 80271A70 (Val__7cSGlobeFRC4cXyz)
//	8008EB84: 8016517C (pointInSight__9dCamera_cFP4cXyz)
//	8008EBD8: 80023590 (fpcSch_JudgeByID__FPvPv)
//	8008EBDC: 80023590 (fpcSch_JudgeByID__FPvPv)
//	8008EBE4: 800197F8 (fopAcIt_Judge__FPFPvPv_PvPv)
//	8008EC50: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008EC5C: 8008E774 (__as__7cSGlobeFRC7cSGlobe)
//	8008EC7C: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	8008EC88: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8008EC90: 8045291C (lit_7339)
//	8008ECA8: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008ECB4: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008ECC4: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	8008ECD4: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008ECE0: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008ECF0: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008ED00: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008ED0C: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	8008ED14: 80451188 (_0__7cSAngle)
//	8008ED24: 80452920 (lit_7340)
//	8008ED28: 80270FC8 (__ct__7cSAngleFf)
//	8008ED38: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008ED44: 8008E894 (U__7cSGlobeFRC7cSAngle)
//	8008ED50: 80452924 (lit_7341)
//	8008ED54: 80270FC8 (__ct__7cSAngleFf)
//	8008ED64: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008ED70: 8008E894 (U__7cSGlobeFRC7cSAngle)
//	8008ED80: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008ED94: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008EDA0: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	8008EDB0: 80270FC8 (__ct__7cSAngleFf)
//	8008EDE0: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008EDF0: 80270FC8 (__ct__7cSAngleFf)
//	8008EE00: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008EE0C: 8008E894 (U__7cSGlobeFRC7cSAngle)
//	8008EE1C: 80270FC8 (__ct__7cSAngleFf)
//	8008EE4C: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008EE58: 80270FC8 (__ct__7cSAngleFf)
//	8008EE68: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008EE74: 8008E894 (U__7cSGlobeFRC7cSAngle)
//	8008EE7C: 80452928 (lit_7342)
//	8008EE90: 80271A08 (Val__7cSGlobeFfRC7cSAngleRC7cSAngle)
//	8008EE98: 80451188 (_0__7cSAngle)
//	8008EEA8: 8045292C (lit_7343)
//	8008EEAC: 8027100C (Val__7cSAngleFf)
//	8008EEB8: 80452930 (lit_7344)
//	8008EEBC: 8027100C (Val__7cSAngleFf)
//	8008EEC8: 802717F0 (__ct__7cSGlobeFRC7cSGlobe)
//	8008EEE4: 80271AB4 (Xyz__7cSGlobeCFv)
//	8008EEF4: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008EF00: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008EF1C: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	8008EF30: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8008EF3C: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8008EF54: 8008FA94 (func_8008FA94)
//	8008EF68: 8008E774 (__as__7cSGlobeFRC7cSGlobe)
//	8008EF7C: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008EF88: 8008E894 (U__7cSGlobeFRC7cSAngle)
//	8008EFA0: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008EFB0: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008EFBC: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	8008EFC4: 80271030 (Degree__7cSAngleCFv)
//	8008EFD0: 80452934 (lit_7345)
//	8008EFF4: 80452924 (lit_7341)
//	8008EFFC: 80452920 (lit_7340)
//	8008F000: 80270FC8 (__ct__7cSAngleFf)
//	8008F010: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008F01C: 80452938 (lit_7346)
//	8008F020: 80271264 (__ml__7cSAngleCFf)
//	8008F030: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008F03C: 8008FA58 (V__7cSGlobeFRC7cSAngle)
//	8008F054: 8007167C (__dt__7cSGlobeFv)
//	8008F060: 8007167C (__dt__7cSGlobeFv)
//	8008F06C: 8007167C (__dt__7cSGlobeFv)
//	8008F080: 804528E8 (lit_5846)
//	8008F098: 804528F8 (lit_5962)
//	8008F0C0: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008F0D0: 80266B84 (__ml__4cXyzCFf)
//	8008F0E0: 80347090 (PSVECAdd)
//	8008F10C: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008F11C: 80271264 (__ml__7cSAngleCFf)
//	8008F12C: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008F138: 8008E894 (U__7cSGlobeFRC7cSAngle)
//	8008F148: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008F158: 80271264 (__ml__7cSAngleCFf)
//	8008F168: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008F174: 8008FA58 (V__7cSGlobeFRC7cSAngle)
//	8008F180: 80271AB4 (Xyz__7cSGlobeCFv)
//	8008F190: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008F19C: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008F1DC: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	8008F1EC: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008F1F8: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008F1FC: 804528B8 (lit_5141)
//	8008F210: 80270FC8 (__ct__7cSAngleFf)
//	8008F21C: 8008FA58 (V__7cSGlobeFRC7cSAngle)
//	8008F22C: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008F240: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008F24C: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	8008F25C: 80270FC8 (__ct__7cSAngleFf)
//	8008F28C: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008F29C: 80270FC8 (__ct__7cSAngleFf)
//	8008F2AC: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008F2B8: 8008E894 (U__7cSGlobeFRC7cSAngle)
//	8008F2C8: 80270FC8 (__ct__7cSAngleFf)
//	8008F2F8: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008F304: 80270FC8 (__ct__7cSAngleFf)
//	8008F314: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008F320: 8008E894 (U__7cSGlobeFRC7cSAngle)
//	8008F338: 8045293C (lit_7347)
//	8008F350: 802711FC (__pl__7cSAngleCFs)
//	8008F35C: 8008E894 (U__7cSGlobeFRC7cSAngle)
//	8008F370: 80271A08 (Val__7cSGlobeFfRC7cSAngleRC7cSAngle)
//	8008F378: 80451188 (_0__7cSAngle)
//	8008F388: 8045292C (lit_7343)
//	8008F38C: 8027100C (Val__7cSAngleFf)
//	8008F398: 80452930 (lit_7344)
//	8008F39C: 8027100C (Val__7cSAngleFf)
//	8008F3A8: 802717F0 (__ct__7cSGlobeFRC7cSGlobe)
//	8008F3C4: 80271AB4 (Xyz__7cSGlobeCFv)
//	8008F3D4: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008F3E0: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008F3FC: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	8008F410: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8008F41C: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8008F434: 8008FA94 (func_8008FA94)
//	8008F448: 8008E774 (__as__7cSGlobeFRC7cSGlobe)
//	8008F45C: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008F468: 8008E894 (U__7cSGlobeFRC7cSAngle)
//	8008F480: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008F490: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008F49C: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	8008F4A4: 80271030 (Degree__7cSAngleCFv)
//	8008F4B0: 80452934 (lit_7345)
//	8008F4D4: 80452924 (lit_7341)
//	8008F4DC: 80452920 (lit_7340)
//	8008F4E0: 80270FC8 (__ct__7cSAngleFf)
//	8008F4F0: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008F4FC: 80452938 (lit_7346)
//	8008F500: 80271264 (__ml__7cSAngleCFf)
//	8008F510: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008F51C: 8008FA58 (V__7cSGlobeFRC7cSAngle)
//	8008F534: 8007167C (__dt__7cSGlobeFv)
//	8008F540: 8007167C (__dt__7cSGlobeFv)
//	8008F554: 804528E8 (lit_5846)
//	8008F56C: 804528F8 (lit_5962)
//	8008F594: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008F5A4: 80266B84 (__ml__4cXyzCFf)
//	8008F5B4: 80347090 (PSVECAdd)
//	8008F5E0: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008F5F0: 80271264 (__ml__7cSAngleCFf)
//	8008F600: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008F60C: 8008E894 (U__7cSGlobeFRC7cSAngle)
//	8008F61C: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008F62C: 80271264 (__ml__7cSAngleCFf)
//	8008F63C: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008F648: 8008FA58 (V__7cSGlobeFRC7cSAngle)
//	8008F654: 80271AB4 (Xyz__7cSGlobeCFv)
//	8008F664: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008F670: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008F6AC: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008F6BC: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	8008F6CC: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008F6D8: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008F6F0: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008F704: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008F710: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	8008F720: 80270FC8 (__ct__7cSAngleFf)
//	8008F750: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008F760: 80270FC8 (__ct__7cSAngleFf)
//	8008F770: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008F77C: 8008E894 (U__7cSGlobeFRC7cSAngle)
//	8008F78C: 80270FC8 (__ct__7cSAngleFf)
//	8008F7BC: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008F7C8: 80270FC8 (__ct__7cSAngleFf)
//	8008F7D8: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008F7E4: 8008E894 (U__7cSGlobeFRC7cSAngle)
//	8008F7E8: 804528B8 (lit_5141)
//	8008F7FC: 80270FC8 (__ct__7cSAngleFf)
//	8008F808: 8008FA58 (V__7cSGlobeFRC7cSAngle)
//	8008F81C: 80271A08 (Val__7cSGlobeFfRC7cSAngleRC7cSAngle)
//	8008F824: 80451188 (_0__7cSAngle)
//	8008F834: 8045292C (lit_7343)
//	8008F838: 8027100C (Val__7cSAngleFf)
//	8008F844: 80452930 (lit_7344)
//	8008F848: 8027100C (Val__7cSAngleFf)
//	8008F854: 802717F0 (__ct__7cSGlobeFRC7cSGlobe)
//	8008F870: 80271AB4 (Xyz__7cSGlobeCFv)
//	8008F880: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008F88C: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008F8A8: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	8008F8BC: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8008F8C8: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8008F8E0: 8008FA94 (func_8008FA94)
//	8008F8F4: 8008E774 (__as__7cSGlobeFRC7cSGlobe)
//	8008F908: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008F914: 8008E894 (U__7cSGlobeFRC7cSAngle)
//	8008F92C: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	8008F93C: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008F948: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	8008F950: 80271030 (Degree__7cSAngleCFv)
//	8008F95C: 80452934 (lit_7345)
//	8008F980: 80452924 (lit_7341)
//	8008F988: 80452920 (lit_7340)
//	8008F98C: 80270FC8 (__ct__7cSAngleFf)
//	8008F99C: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008F9A8: 80452938 (lit_7346)
//	8008F9AC: 80271264 (__ml__7cSAngleCFf)
//	8008F9BC: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008F9C8: 8008FA58 (V__7cSGlobeFRC7cSAngle)
//	8008F9E0: 8007167C (__dt__7cSGlobeFv)
//	8008F9EC: 8007167C (__dt__7cSGlobeFv)
//	8008F9F8: 8008E774 (__as__7cSGlobeFRC7cSGlobe)
//	8008FA04: 80271AB4 (Xyz__7cSGlobeCFv)
//	8008FA14: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8008FA20: 800977D8 (__as__4cXyzFRC4cXyz)
//	8008FA44: 80362218 (_restgpr_25)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::watchActorEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/watchActorEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* 8008FA58-8008FA94 003C+00 s=2 e=7 z=0  None .text      V__7cSGlobeFRC7cSAngle                                       */
//	8008FA74: 80270F98 (__ct__7cSAngleFs)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cSAngle const& False
// 	 cSAngle const False
// 		 cSAngle False
asm void cSGlobe::V(cSAngle const& param_0) {
	nofralloc
#include "asm/d/d_ev_camera/V__7cSGlobeFRC7cSAngle.s"
}
#pragma pop


/* ############################################################################################## */
/* 80452940-80452944 0004+00 s=5 e=0 z=0  None .sdata2    @7357                                                        */
SECTION_SDATA2 static f32 lit_7357 = 15.0f;

/* 8008FA94-8008FAE8 0054+00 s=7 e=0 z=0  None .text      lineCollisionCheck__25@unnamed@d_ev_camera_cpp@F4cXyz4cXyzP10fopAc_ac_cP10fopAc_ac_cP10fopAc_ac_c */
//	8008FAB4: 804061C0 (g_dComIfG_gameInfo)
//	8008FAB8: 804061C0 (g_dComIfG_gameInfo)
//	8008FAC8: 80452940 (lit_7357)
//	8008FAD4: 80086D8C (ChkCamera__4dCcSFR4cXyzR4cXyzfP10fopAc_ac_cP10fopAc_ac_cP10fopAc_ac_c)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_8008FA94() {
	nofralloc
#include "asm/d/d_ev_camera/func_8008FA94.s"
}
#pragma pop


/* ############################################################################################## */
/* 80425408-80425414 000C+00 s=1 e=0 z=0  None .bss       @7364                                                        */
static u8 lit_7364[12];

/* 80425414-80425420 000C+00 s=1 e=0 z=0  None .bss       DefaultGap$7363                                              */
static f32 DefaultGap_7363[3];

/* 8008FAE8-80090174 068C+00 s=0 e=1 z=0  None .text      restorePosEvCamera__9dCamera_cFv                             */
//	8008FB00: 803621DC (_savegpr_29)
//	8008FB08: 80450F8A (struct_80450F88)
//	8008FB14: 80430CF4 (Zero__4cXyz)
//	8008FB18: 80430CF4 (Zero__4cXyz)
//	8008FB20: 80425414 (DefaultGap_7363)
//	8008FB24: 80425414 (DefaultGap_7363)
//	8008FB38: 80009184 (__dt__4cXyzFv)
//	8008FB3C: 80009184 (__dt__4cXyzFv)
//	8008FB40: 80425408 (lit_7364)
//	8008FB44: 80425408 (lit_7364)
//	8008FB48: 80361C24 (__register_global_object)
//	8008FB50: 80450F8A (struct_80450F88)
//	8008FB64: 80425414 (DefaultGap_7363)
//	8008FB68: 80425414 (DefaultGap_7363)
//	8008FB88: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008FB8C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008FB98: 8008922C (getEvXyzData__9dCamera_cFP4cXyzPc4cXyz)
//	8008FBA4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008FBA8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008FBB0: 804528DC (lit_5346)
//	8008FBB4: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008FBC0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008FBC4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008FBCC: 80452908 (lit_7334)
//	8008FBD0: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008FBDC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008FBE0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008FBE8: 80452910 (lit_7336)
//	8008FBEC: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8008FBF8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008FBFC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008FC08: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	8008FC14: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008FC18: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008FC24: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	8008FC30: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008FC34: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008FC40: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	8008FC4C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008FC50: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008FC5C: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	8008FD20: 804061C0 (g_dComIfG_gameInfo)
//	8008FD24: 804061C0 (g_dComIfG_gameInfo)
//	8008FDB0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008FDB4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8008FDC0: 800895F4 (getEvActor__9dCamera_cFPcPc)
//	8008FDE8: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8008FE10: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008FE1C: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8008FE38: 8016517C (pointInSight__9dCamera_cFP4cXyz)
//	8008FE78: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	8008FEE4: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008FEF0: 80271A70 (Val__7cSGlobeFRC4cXyz)
//	8008FF04: 804528E8 (lit_5846)
//	8008FF1C: 804528F8 (lit_5962)
//	8008FF50: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008FF60: 80266B84 (__ml__4cXyzCFf)
//	8008FF70: 80347090 (PSVECAdd)
//	8008FF84: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8008FF94: 80266B84 (__ml__4cXyzCFf)
//	8008FFA4: 80347090 (PSVECAdd)
//	8008FFD0: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8008FFE0: 80271264 (__ml__7cSAngleCFf)
//	8008FFF0: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	8008FFFC: 80270F98 (__ct__7cSAngleFs)
//	80090018: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	80090028: 80271264 (__ml__7cSAngleCFf)
//	80090038: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	80090044: 80270F98 (__ct__7cSAngleFs)
//	80090058: 80271AB4 (Xyz__7cSGlobeCFv)
//	80090068: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	800900FC: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80090108: 80271A70 (Val__7cSGlobeFRC4cXyz)
//	80090114: 80271AB4 (Xyz__7cSGlobeCFv)
//	80090124: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	80090160: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::restorePosEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/restorePosEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* 80090174-80090230 00BC+00 s=0 e=1 z=0  None .text      talktoEvCamera__9dCamera_cFv                                 */
//	80090188: 804061C0 (g_dComIfG_gameInfo)
//	8009018C: 804061C0 (g_dComIfG_gameInfo)
//	80090198: 800432EC (convPId__14dEvt_control_cFUi)
//	800901E8: 80088620 (SearchStyle__11dCamParam_cFUl)
//	80090208: 803BA25C (engine_tbl__9dCamera_c)
//	8009020C: 803BA25C (engine_tbl__9dCamera_c)
//	80090214: 80362084 (__ptmf_scall)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::talktoEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/talktoEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* 80090230-80090478 0248+00 s=0 e=1 z=0  None .text      maptoolIdEvCamera__9dCamera_cFv                              */
//	80090240: 803621DC (_savegpr_29)
//	80090258: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8009025C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80090264: 804061C0 (g_dComIfG_gameInfo)
//	80090268: 804061C0 (g_dComIfG_gameInfo)
//	80090270: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	8009028C: 800434D8 (searchMapEventData__14dEvt_control_cFUc)
//	800902BC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800902C0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800902C8: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	800902EC: 80450D64 (struct_80450D64)
//	800902F8: 800889F8 (func_800889F8)
//	8009035C: 80164944 (GetCameraTypeFromMapToolID__9dCamera_cFll)
//	800903A8: 803BA25C (engine_tbl__9dCamera_c)
//	800903AC: 803BA25C (engine_tbl__9dCamera_c)
//	800903B4: 80362084 (__ptmf_scall)
//	8009042C: 803DD2E8 (m_cpadInfo__8mDoCPd_c)
//	80090430: 803DD2E8 (m_cpadInfo__8mDoCPd_c)
//	80090464: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::maptoolIdEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/maptoolIdEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* 80090478-80090514 009C+00 s=0 e=1 z=0  None .text      styleEvCamera__9dCamera_cFv                                  */
//	800904A8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800904AC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800904B8: 8008941C (getEvStringPntData__9dCamera_cFPcPc)
//	800904C8: 80088620 (SearchStyle__11dCamParam_cFUl)
//	800904E8: 803BA25C (engine_tbl__9dCamera_c)
//	800904EC: 803BA25C (engine_tbl__9dCamera_c)
//	800904F4: 80362084 (__ptmf_scall)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::styleEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/styleEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80452944-80452948 0004+00 s=4 e=0 z=0  None .sdata2    @8178                                                        */
SECTION_SDATA2 static f32 lit_8178 = -45.0f;

/* 80452948-8045294C 0004+00 s=2 e=0 z=0  None .sdata2    @8179                                                        */
SECTION_SDATA2 static f32 lit_8179 = 85.0f;

/* 8045294C-80452950 0004+00 s=4 e=0 z=0  None .sdata2    @8180                                                        */
SECTION_SDATA2 static f32 lit_8180 = -50.0f;

/* 80452950-80452954 0004+00 s=4 e=0 z=0  None .sdata2    @8181                                                        */
SECTION_SDATA2 static f32 lit_8181 = 165.0f;

/* 80452954-80452958 0004+00 s=1 e=0 z=0  None .sdata2    @8182                                                        */
SECTION_SDATA2 static f32 lit_8182 = 72.0f;

/* 80452958-8045295C 0004+00 s=1 e=0 z=0  None .sdata2    @8183                                                        */
SECTION_SDATA2 static f32 lit_8183 = -64.0f;

/* 8045295C-80452960 0004+00 s=6 e=0 z=0  None .sdata2    @8184                                                        */
SECTION_SDATA2 static f32 lit_8184 = 60.0f;

/* 80452960-80452964 0004+00 s=4 e=0 z=0  None .sdata2    @8185                                                        */
SECTION_SDATA2 static f32 lit_8185 = -20.0f;

/* 80452964-80452968 0004+00 s=4 e=0 z=0  None .sdata2    @8186                                                        */
SECTION_SDATA2 static f32 lit_8186 = 45.0f;

/* 80452968-8045296C 0004+00 s=6 e=0 z=0  None .sdata2    @8187                                                        */
SECTION_SDATA2 static f32 lit_8187 = 40.0f;

/* 8045296C-80452970 0004+00 s=6 e=0 z=0  None .sdata2    @8188                                                        */
SECTION_SDATA2 static f32 lit_8188 = -70.0f;

/* 80452970-80452974 0004+00 s=3 e=0 z=0  None .sdata2    @8189                                                        */
SECTION_SDATA2 static f32 lit_8189 = 110.0f;

/* 80452974-80452978 0004+00 s=4 e=0 z=0  None .sdata2    @8190                                                        */
SECTION_SDATA2 static f32 lit_8190 = -10.0f;

/* 80452978-8045297C 0004+00 s=2 e=0 z=0  None .sdata2    @8191                                                        */
SECTION_SDATA2 static f32 lit_8191 = -120.0f;

/* 8045297C-80452980 0004+00 s=3 e=0 z=0  None .sdata2    @8192                                                        */
SECTION_SDATA2 static f32 lit_8192 = 130.0f;

/* 80452980-80452984 0004+00 s=2 e=0 z=0  None .sdata2    @8193                                                        */
SECTION_SDATA2 static f32 lit_8193 = 35.0f;

/* 80452984-80452988 0004+00 s=5 e=0 z=0  None .sdata2    @8194                                                        */
SECTION_SDATA2 static f32 lit_8194 = 160.0f;

/* 80452988-8045298C 0004+00 s=3 e=0 z=0  None .sdata2    @8195                                                        */
SECTION_SDATA2 static f32 lit_8195 = 105.0f;

/* 8045298C-80452990 0004+00 s=2 e=0 z=0  None .sdata2    @8196                                                        */
SECTION_SDATA2 static f32 lit_8196 = -65.0f;

/* 80452990-80452994 0004+00 s=1 e=0 z=0  None .sdata2    @8197                                                        */
SECTION_SDATA2 static f32 lit_8197 = 200.0f;

/* 80452994-80452998 0004+00 s=3 e=0 z=0  None .sdata2    @8198                                                        */
SECTION_SDATA2 static f32 lit_8198 = 100.0f;

/* 80452998-8045299C 0004+00 s=4 e=0 z=0  None .sdata2    @8199                                                        */
SECTION_SDATA2 static f32 lit_8199 = -60.0f;

/* 8045299C-804529A0 0004+00 s=3 e=0 z=0  None .sdata2    @8200                                                        */
SECTION_SDATA2 static f32 lit_8200 = -80.0f;

/* 804529A0-804529A4 0004+00 s=2 e=0 z=0  None .sdata2    @8201                                                        */
SECTION_SDATA2 static f32 lit_8201 = 25.0f;

/* 804529A4-804529A8 0004+00 s=1 e=0 z=0  None .sdata2    @8202                                                        */
SECTION_SDATA2 static f32 lit_8202 = 12.0f;

/* 804529A8-804529AC 0004+00 s=1 e=0 z=0  None .sdata2    @8203                                                        */
SECTION_SDATA2 static f32 lit_8203 = -140.0f;

/* 804529AC-804529B0 0004+00 s=2 e=0 z=0  None .sdata2    @8204                                                        */
SECTION_SDATA2 static f32 lit_8204 = 190.0f;

/* 804529B0-804529B4 0004+00 s=2 e=0 z=0  None .sdata2    @8205                                                        */
SECTION_SDATA2 static f32 lit_8205 = -150.0f;

/* 804529B4-804529B8 0004+00 s=5 e=0 z=0  None .sdata2    @8206                                                        */
SECTION_SDATA2 static f32 lit_8206 = 20.0f;

/* 804529B8-804529BC 0004+00 s=2 e=0 z=0  None .sdata2    @8207                                                        */
SECTION_SDATA2 static f32 lit_8207 = -75.0f;

/* 804529BC-804529C0 0004+00 s=3 e=0 z=0  None .sdata2    @8208                                                        */
SECTION_SDATA2 static f32 lit_8208 = 115.0f;

/* 804529C0-804529C4 0004+00 s=3 e=0 z=0  None .sdata2    @8209                                                        */
SECTION_SDATA2 static f32 lit_8209 = -40.0f;

/* 804529C4-804529C8 0004+00 s=1 e=0 z=0  None .sdata2    @8210                                                        */
SECTION_SDATA2 static f32 lit_8210 = 135.0f;

/* 804529C8-804529CC 0004+00 s=3 e=0 z=0  None .sdata2    @8211                                                        */
SECTION_SDATA2 static f32 lit_8211 = 140.0f;

/* 804529CC-804529D0 0004+00 s=3 e=0 z=0  None .sdata2    @8212                                                        */
SECTION_SDATA2 static f32 lit_8212 = -100.0f;

/* 804529D0-804529D4 0004+00 s=1 e=0 z=0  None .sdata2    @8213                                                        */
SECTION_SDATA2 static f32 lit_8213 = 112.0f;

/* 804529D4-804529D8 0004+00 s=3 e=0 z=0  None .sdata2    @8214                                                        */
SECTION_SDATA2 static f32 lit_8214 = 150.0f;

/* 804529D8-804529DC 0004+00 s=3 e=0 z=0  None .sdata2    @8215                                                        */
SECTION_SDATA2 static f32 lit_8215 = 65.0f;

/* 804529DC-804529E0 0004+00 s=2 e=0 z=0  None .sdata2    @8216                                                        */
SECTION_SDATA2 static f32 lit_8216 = 180.0f;

/* 804529E0-804529E4 0004+00 s=2 e=0 z=0  None .sdata2    @8217                                                        */
SECTION_SDATA2 static f32 lit_8217 = -200.0f;

/* 804529E4-804529E8 0004+00 s=7 e=0 z=0  None .sdata2    @8218                                                        */
SECTION_SDATA2 static f32 lit_8218 = 50.0f;

/* 804529E8-804529EC 0004+00 s=1 e=0 z=0  None .sdata2    @8219                                                        */
SECTION_SDATA2 static f32 lit_8219 = 230.0f;

/* 804529EC-804529F0 0004+00 s=1 e=0 z=0  None .sdata2    @8220                                                        */
SECTION_SDATA2 static f32 lit_8220 = 9.0f / 10.0f;

/* 804529F0-804529F4 0004+00 s=2 e=0 z=0  None .sdata2    @8221                                                        */
SECTION_SDATA2 static f32 lit_8221 = 75.0f;

/* 804529F4-804529F8 0004+00 s=1 e=0 z=0  None .sdata2    @8222                                                        */
SECTION_SDATA2 static f32 lit_8222 = 0.004999999888241291f;

/* 804529F8-804529FC 0004+00 s=4 e=0 z=0  None .sdata2    @8223                                                        */
SECTION_SDATA2 static f32 lit_8223 = 55.0f;

/* 804529FC-80452A00 0004+00 s=1 e=0 z=0  None .sdata2    @8224                                                        */
SECTION_SDATA2 static f32 lit_8224 = 1.0f / 50.0f;

/* 80452A00-80452A04 0004+00 s=3 e=0 z=0  None .sdata2    @8225                                                        */
SECTION_SDATA2 static f32 lit_8225 = 350.0f;

/* 80452A04-80452A08 0004+00 s=2 e=0 z=0  None .sdata2    @8226                                                        */
SECTION_SDATA2 static f32 lit_8226 = 49.0f / 50.0f;

/* 80090514-80091468 0F54+00 s=0 e=1 z=0  None .text      gameOverEvCamera__9dCamera_cFv                               */
//	8009052C: 803621D0 (_savegpr_26)
//	80090538: 80451018 (m_midnaActor__9daPy_py_c)
//	8009056C: 804528B8 (lit_5141)
//	80090574: 80452944 (lit_8178)
//	80090580: 80452948 (lit_8179)
//	80090588: 8045294C (lit_8180)
//	80090590: 80452950 (lit_8181)
//	800905A0: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800905A4: 80452954 (lit_8182)
//	800905AC: 80452958 (lit_8183)
//	800905B4: 8045295C (lit_8184)
//	800905C4: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800905C8: 80452950 (lit_8181)
//	800905D0: 80452960 (lit_8185)
//	800905D8: 80452964 (lit_8186)
//	800905E8: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800905EC: 80452948 (lit_8179)
//	800905F4: 80452950 (lit_8181)
//	800905FC: 80452968 (lit_8187)
//	8009060C: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80090610: 8045291C (lit_7339)
//	80090618: 8045296C (lit_8188)
//	80090620: 80452970 (lit_8189)
//	80090630: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80090634: 804528B8 (lit_5141)
//	8009064C: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8009065C: 80452974 (lit_8190)
//	80090664: 804528B8 (lit_5141)
//	8009066C: 80452978 (lit_8191)
//	80090674: 8045297C (lit_8192)
//	80090680: 80452980 (lit_8193)
//	80090688: 80452984 (lit_8194)
//	80090698: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8009069C: 80452988 (lit_8195)
//	800906A4: 8045298C (lit_8196)
//	800906AC: 80452990 (lit_8197)
//	800906BC: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800906C0: 8045295C (lit_8184)
//	800906C8: 8045291C (lit_7339)
//	800906D0: 80452994 (lit_8198)
//	800906E0: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800906E4: 804528B8 (lit_5141)
//	800906FC: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80090700: 804528B8 (lit_5141)
//	80090708: 80452998 (lit_8199)
//	80090710: 80452944 (lit_8178)
//	8009071C: 80452948 (lit_8179)
//	80090724: 80452920 (lit_7340)
//	80090734: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80090738: 8045299C (lit_8200)
//	80090740: 804529A0 (lit_8201)
//	80090748: 804529A4 (lit_8202)
//	80090758: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8009075C: 80452928 (lit_7342)
//	80090764: 8045291C (lit_7339)
//	8009076C: 8045294C (lit_8180)
//	8009077C: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80090780: 804528B8 (lit_5141)
//	80090798: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8009079C: 804528B8 (lit_5141)
//	800907A4: 80452924 (lit_7341)
//	800907AC: 80452998 (lit_8199)
//	800907B4: 804529A8 (lit_8203)
//	800907BC: 80452974 (lit_8190)
//	800907C4: 80452994 (lit_8198)
//	800907D4: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800907D8: 80452960 (lit_8185)
//	800907E0: 804529AC (lit_8204)
//	800907E8: 804529B0 (lit_8205)
//	800907F8: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800907FC: 804529B4 (lit_8206)
//	80090804: 804529B8 (lit_8207)
//	8009080C: 804529BC (lit_8208)
//	8009081C: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80090820: 804528B8 (lit_5141)
//	80090838: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80090868: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80090894: 804528B8 (lit_5141)
//	8009089C: 804529C0 (lit_8209)
//	800908AC: 804529C4 (lit_8210)
//	800908B4: 804529C8 (lit_8211)
//	800908C4: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800908C8: 804529CC (lit_8212)
//	800908D0: 804529D0 (lit_8213)
//	800908D8: 804529D4 (lit_8214)
//	800908E8: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800908EC: 804529D8 (lit_8215)
//	800908F4: 80452994 (lit_8198)
//	800908FC: 80452934 (lit_7345)
//	8009090C: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80090910: 804528B8 (lit_5141)
//	80090928: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8009092C: 804528B8 (lit_5141)
//	80090934: 80452944 (lit_8178)
//	8009093C: 8045294C (lit_8180)
//	80090948: 804529D4 (lit_8214)
//	80090950: 804529BC (lit_8208)
//	80090960: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80090964: 80452978 (lit_8191)
//	8009096C: 804529DC (lit_8216)
//	80090974: 804529C0 (lit_8209)
//	80090984: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80090988: 80452968 (lit_8187)
//	80090990: 80452994 (lit_8198)
//	80090998: 80452920 (lit_7340)
//	800909A8: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800909AC: 804528B8 (lit_5141)
//	800909C4: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800909C8: 804528B8 (lit_5141)
//	800909D0: 80452940 (lit_7357)
//	800909D8: 804529CC (lit_8212)
//	800909E0: 80452968 (lit_8187)
//	800909E8: 804529D8 (lit_8215)
//	800909F0: 80452950 (lit_8181)
//	80090A00: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80090A04: 804529E0 (lit_8217)
//	80090A0C: 804529C8 (lit_8211)
//	80090A14: 804529E4 (lit_8218)
//	80090A24: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80090A28: 804529E4 (lit_8218)
//	80090A30: 804529E8 (lit_8219)
//	80090A38: 804528B8 (lit_5141)
//	80090A48: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80090A4C: 804528B8 (lit_5141)
//	80090A64: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80090A94: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80090AC4: 804061C0 (g_dComIfG_gameInfo)
//	80090AC8: 804061C0 (g_dComIfG_gameInfo)
//	80090AFC: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	80090B04: 80452968 (lit_8187)
//	80090B84: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	80090B94: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80090BA0: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80090BB0: 80270F98 (__ct__7cSAngleFs)
//	80090BBC: 80271148 (__mi__7cSAngleCFv)
//	80090BCC: 80088384 (xyzRotateY__8dCamMathFR4cXyz7cSAngle)
//	80090BD8: 800977D8 (__as__4cXyzFRC4cXyz)
//	80090BE4: 800977D8 (__as__4cXyzFRC4cXyz)
//	80090BF0: 800977D8 (__as__4cXyzFRC4cXyz)
//	80090BFC: 800977D8 (__as__4cXyzFRC4cXyz)
//	80090C0C: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	80090C18: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80090C8C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80090C90: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80090C9C: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	80090CAC: 803A37C0 (__vt__8cM3dGPla)
//	80090CB0: 803A37C0 (__vt__8cM3dGPla)
//	80090CB8: 804061C0 (g_dComIfG_gameInfo)
//	80090CBC: 804061C0 (g_dComIfG_gameInfo)
//	80090CCC: 80074744 (GetTriPla__4cBgSCFRC13cBgS_PolyInfoP8cM3dGPla)
//	80090CD4: 804529EC (lit_8220)
//	80090D00: 800977D8 (__as__4cXyzFRC4cXyz)
//	80090D0C: 8008E774 (__as__7cSGlobeFRC7cSGlobe)
//	80090D18: 8001DB90 (__dt__8cM3dGPlaFv)
//	80090D38: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80090D44: 800977D8 (__as__4cXyzFRC4cXyz)
//	80090D84: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80090D90: 800977D8 (__as__4cXyzFRC4cXyz)
//	80090DA0: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	80090DC8: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	80090DEC: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	80090E14: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80090E20: 800977D8 (__as__4cXyzFRC4cXyz)
//	80090E30: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	80090E58: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	80090E7C: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	80090EAC: 800977D8 (__as__4cXyzFRC4cXyz)
//	80090EB8: 800977D8 (__as__4cXyzFRC4cXyz)
//	80090ED8: 804061C0 (g_dComIfG_gameInfo)
//	80090EDC: 804061C0 (g_dComIfG_gameInfo)
//	80090F10: 8045295C (lit_8184)
//	80090F28: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80090F34: 800977D8 (__as__4cXyzFRC4cXyz)
//	80090F4C: 801659F4 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzP4cXyzUl)
//	80090F60: 80271B30 (Norm__7cSGlobeCFv)
//	80090F70: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	80090F7C: 800977D8 (__as__4cXyzFRC4cXyz)
//	80090FB4: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80090FC0: 800977D8 (__as__4cXyzFRC4cXyz)
//	80090FD0: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	80090FF8: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	8009101C: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	80091044: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80091050: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091060: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	80091088: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	800910AC: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	800910DC: 800977D8 (__as__4cXyzFRC4cXyz)
//	800910E8: 800977D8 (__as__4cXyzFRC4cXyz)
//	800910F8: 804529F0 (lit_8221)
//	80091140: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8009114C: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091164: 801659F4 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzP4cXyzUl)
//	80091178: 80271B30 (Norm__7cSGlobeCFv)
//	80091188: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	80091194: 800977D8 (__as__4cXyzFRC4cXyz)
//	800911CC: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	800911D8: 800977D8 (__as__4cXyzFRC4cXyz)
//	800911EC: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	80091214: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80091220: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091234: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	80091264: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091270: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091278: 8045295C (lit_8184)
//	800912B8: 80452974 (lit_8190)
//	800912C0: 804529C0 (lit_8209)
//	800912D0: 80452968 (lit_8187)
//	800912E0: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	800912E8: 804529F4 (lit_8222)
//	8009130C: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091318: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	8009132C: 8045293C (lit_7347)
//	80091334: 804529F8 (lit_8223)
//	80091338: 80270FC8 (__ct__7cSAngleFf)
//	80091348: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	80091354: 804529FC (lit_8224)
//	80091358: 80271264 (__ml__7cSAngleCFf)
//	80091364: 802711D4 (__apl__7cSAngleFRC7cSAngle)
//	80091370: 8008FA58 (V__7cSGlobeFRC7cSAngle)
//	80091378: 804529FC (lit_8224)
//	8009137C: 80452A00 (lit_8225)
//	80091394: 804529F4 (lit_8222)
//	80091398: 80452968 (lit_8187)
//	800913B4: 80271AB4 (Xyz__7cSGlobeCFv)
//	800913C4: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	800913D0: 800977D8 (__as__4cXyzFRC4cXyz)
//	800913F0: 80347090 (PSVECAdd)
//	800913FC: 80452A04 (lit_8226)
//	80091400: 80266B84 (__ml__4cXyzCFf)
//	80091410: 80347090 (PSVECAdd)
//	80091420: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8009142C: 80271A70 (Val__7cSGlobeFRC4cXyz)
//	80091454: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::gameOverEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/gameOverEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 803AC528-803AC5A0 0078+00 s=1 e=0 z=0  None .data      @8754                                                        */
SECTION_DATA static void* lit_8754[30] = {
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xC68),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xC68),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xC68),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xC68),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xC68),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xC68),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xC68),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xC68),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xC68),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xE68),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xC68),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xC68),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xC68),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xC68),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xC68),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xC68),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xC68),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xC68),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xC68),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xC68),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0x808),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0x8E4),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xA20),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xEC0),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xC68),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xC68),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xC68),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xC68),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xC68),
	(void*)(((char*)tactEvCamera__9dCamera_cFv)+0xE68),
};

/* 80452A08-80452A0C 0004+00 s=1 e=0 z=0  None .sdata2    @8722                                                        */
SECTION_SDATA2 static f32 lit_8722 = 215.0f;

/* 80452A0C-80452A10 0004+00 s=1 e=0 z=0  None .sdata2    @8723                                                        */
SECTION_SDATA2 static f32 lit_8723 = -26.0f;

/* 80452A10-80452A14 0004+00 s=2 e=0 z=0  None .sdata2    @8724                                                        */
SECTION_SDATA2 static f32 lit_8724 = 80.0f;

/* 80452A14-80452A18 0004+00 s=1 e=0 z=0  None .sdata2    @8725                                                        */
SECTION_SDATA2 static f32 lit_8725 = -4.0f;

/* 80452A18-80452A1C 0004+00 s=1 e=0 z=0  None .sdata2    @8726                                                        */
SECTION_SDATA2 static f32 lit_8726 = 28.0f;

/* 80452A1C-80452A20 0004+00 s=1 e=0 z=0  None .sdata2    @8727                                                        */
SECTION_SDATA2 static f32 lit_8727 = 220.0f;

/* 80452A20-80452A24 0004+00 s=2 e=0 z=0  None .sdata2    @8728                                                        */
SECTION_SDATA2 static f32 lit_8728 = -15.0f;

/* 80452A24-80452A28 0004+00 s=2 e=0 z=0  None .sdata2    @8729                                                        */
SECTION_SDATA2 static f32 lit_8729 = 240.0f;

/* 80452A28-80452A2C 0004+00 s=1 e=0 z=0  None .sdata2    @8730                                                        */
SECTION_SDATA2 static f32 lit_8730 = 380.0f;

/* 80452A2C-80452A30 0004+00 s=1 e=0 z=0  None .sdata2    @8731                                                        */
SECTION_SDATA2 static f32 lit_8731 = 450.0f;

/* 80452A30-80452A34 0004+00 s=1 e=0 z=0  None .sdata2    @8732                                                        */
SECTION_SDATA2 static f32 lit_8732 = -235.0f;

/* 80452A34-80452A38 0004+00 s=1 e=0 z=0  None .sdata2    @8733                                                        */
SECTION_SDATA2 static f32 lit_8733 = -142.0f;

/* 80452A38-80452A3C 0004+00 s=1 e=0 z=0  None .sdata2    @8734                                                        */
SECTION_SDATA2 static f32 lit_8734 = 470.0f;

/* 80452A3C-80452A40 0004+00 s=3 e=0 z=0  None .sdata2    @8735                                                        */
SECTION_SDATA2 static f32 lit_8735 = -260.0f;

/* 80452A40-80452A44 0004+00 s=1 e=0 z=0  None .sdata2    @8736                                                        */
SECTION_SDATA2 static f32 lit_8736 = -66.0f;

/* 80452A44-80452A48 0004+00 s=1 e=0 z=0  None .sdata2    @8737                                                        */
SECTION_SDATA2 static f32 lit_8737 = 390.0f;

/* 80452A48-80452A4C 0004+00 s=1 e=0 z=0  None .sdata2    @8738                                                        */
SECTION_SDATA2 static f32 lit_8738 = 56.0f;

/* 80452A4C-80452A50 0004+00 s=1 e=0 z=0  None .sdata2    @8739                                                        */
SECTION_SDATA2 static f32 lit_8739 = -16.0f;

/* 80452A50-80452A54 0004+00 s=1 e=0 z=0  None .sdata2    @8740                                                        */
SECTION_SDATA2 static f32 lit_8740 = 14.0f;

/* 80452A54-80452A58 0004+00 s=2 e=0 z=0  None .sdata2    @8741                                                        */
SECTION_SDATA2 static f32 lit_8741 = -18.0f;

/* 80452A58-80452A5C 0004+00 s=3 e=0 z=0  None .sdata2    @8742                                                        */
SECTION_SDATA2 static f32 lit_8742 = -12.0f;

/* 80452A5C-80452A60 0004+00 s=1 e=0 z=0  None .sdata2    @8743                                                        */
SECTION_SDATA2 static f32 lit_8743 = -128.0f;

/* 80452A60-80452A64 0004+00 s=2 e=0 z=0  None .sdata2    @8744                                                        */
SECTION_SDATA2 static f32 lit_8744 = -28.0f;

/* 80452A64-80452A68 0004+00 s=1 e=0 z=0  None .sdata2    @8745                                                        */
SECTION_SDATA2 static f32 lit_8745 = 172.0f;

/* 80452A68-80452A6C 0004+00 s=1 e=0 z=0  None .sdata2    @8746                                                        */
SECTION_SDATA2 static f32 lit_8746 = 58.0f;

/* 80452A6C-80452A70 0004+00 s=2 e=0 z=0  None .sdata2    @8747                                                        */
SECTION_SDATA2 static f32 lit_8747 = -25.0f;

/* 80452A70-80452A74 0004+00 s=1 e=0 z=0  None .sdata2    @8748                                                        */
SECTION_SDATA2 static f32 lit_8748 = -56.0f;

/* 80452A74-80452A78 0004+00 s=1 e=0 z=0  None .sdata2    @8749                                                        */
SECTION_SDATA2 static f32 lit_8749 = -54.0f;

/* 80452A78-80452A7C 0004+00 s=2 e=0 z=0  None .sdata2    @8750                                                        */
SECTION_SDATA2 static f32 lit_8750 = 108.0f;

/* 80452A7C-80452A80 0004+00 s=1 e=0 z=0  None .sdata2    @8751                                                        */
SECTION_SDATA2 static f32 lit_8751 = -78.0f;

/* 80452A80-80452A84 0004+00 s=3 e=0 z=0  None .sdata2    @8752                                                        */
SECTION_SDATA2 static f32 lit_8752 = -30.0f;

/* 80452A84-80452A88 0004+00 s=1 e=0 z=0  None .sdata2    @8753                                                        */
SECTION_SDATA2 static f32 lit_8753 = -160.0f;

/* 80091468-8009236C 0F04+00 s=1 e=1 z=0  None .text      tactEvCamera__9dCamera_cFv                                   */
//	80091478: 803621D8 (_savegpr_28)
//	80091480: 804528B8 (lit_5141)
//	80091488: 80452920 (lit_7340)
//	80091490: 804529AC (lit_8204)
//	800914A0: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800914A4: 804528B8 (lit_5141)
//	800914B0: 80452A08 (lit_8722)
//	800914C0: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800914C4: 804528B8 (lit_5141)
//	800914CC: 80452A0C (lit_8723)
//	800914D4: 80452A10 (lit_8724)
//	800914E4: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800914E8: 804528B8 (lit_5141)
//	800914F0: 80452A0C (lit_8723)
//	800914F8: 80452964 (lit_8186)
//	80091508: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8009150C: 804528B8 (lit_5141)
//	80091514: 804529C0 (lit_8209)
//	8009151C: 80452960 (lit_8185)
//	8009152C: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80091530: 804528B8 (lit_5141)
//	80091538: 80452A14 (lit_8725)
//	80091540: 80452A18 (lit_8726)
//	80091550: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80091554: 804529C8 (lit_8211)
//	8009155C: 80452980 (lit_8193)
//	80091564: 80452A1C (lit_8727)
//	80091574: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80091578: 804529E0 (lit_8217)
//	80091580: 80452A20 (lit_8728)
//	80091588: 80452A24 (lit_8729)
//	80091598: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8009159C: 80452A28 (lit_8730)
//	800915A4: 80452978 (lit_8191)
//	800915AC: 80452A2C (lit_8731)
//	800915BC: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800915C0: 80452A30 (lit_8732)
//	800915C8: 80452A34 (lit_8733)
//	800915D0: 80452A38 (lit_8734)
//	800915E0: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800915E4: 8045293C (lit_7347)
//	800915EC: 80452988 (lit_8195)
//	800915F4: 80452A3C (lit_8735)
//	80091604: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80091608: 80452A40 (lit_8736)
//	80091610: 80452A44 (lit_8737)
//	80091618: 80452A48 (lit_8738)
//	80091628: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80091630: 8037A86C (lit_8236)
//	80091634: 8037A86C (lit_8236)
//	80091658: 804528B8 (lit_5141)
//	80091660: 80452A4C (lit_8739)
//	80091668: 80452A50 (lit_8740)
//	80091678: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8009167C: 804528B8 (lit_5141)
//	80091684: 80452A0C (lit_8723)
//	8009168C: 80452A50 (lit_8740)
//	8009169C: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800916A0: 804528B8 (lit_5141)
//	800916A8: 80452A0C (lit_8723)
//	800916B0: 80452A50 (lit_8740)
//	800916C0: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800916C4: 804528B8 (lit_5141)
//	800916CC: 80452974 (lit_8190)
//	800916D4: 80452940 (lit_7357)
//	800916E4: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800916E8: 80452924 (lit_7341)
//	800916F0: 80452A4C (lit_8739)
//	800916F8: 80452974 (lit_8190)
//	80091708: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8009170C: 804528B8 (lit_5141)
//	80091714: 80452A54 (lit_8741)
//	8009171C: 80452980 (lit_8193)
//	8009172C: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80091730: 804528B8 (lit_5141)
//	80091738: 80452A58 (lit_8742)
//	80091740: 80452930 (lit_7344)
//	80091750: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80091754: 80452A5C (lit_8743)
//	8009175C: 80452924 (lit_7341)
//	80091764: 80452928 (lit_7342)
//	80091774: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80091778: 8045299C (lit_8200)
//	80091780: 80452A60 (lit_8744)
//	80091788: 80452984 (lit_8194)
//	80091798: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8009179C: 804529E4 (lit_8218)
//	800917A4: 80452A54 (lit_8741)
//	800917AC: 80452A64 (lit_8745)
//	800917BC: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800917C0: 80452970 (lit_8189)
//	800917C8: 80452920 (lit_7340)
//	800917D0: 80452A68 (lit_8746)
//	800917E0: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800917E4: 8045294C (lit_8180)
//	800917EC: 80452968 (lit_8187)
//	800917F4: 80452948 (lit_8179)
//	80091804: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80091808: 8045296C (lit_8188)
//	80091810: 8045295C (lit_8184)
//	80091818: 80452944 (lit_8178)
//	80091828: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8009182C: 80452920 (lit_7340)
//	80091834: 80452934 (lit_7345)
//	8009183C: 80452A6C (lit_8747)
//	8009184C: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80091850: 804528B8 (lit_5141)
//	80091858: 80452974 (lit_8190)
//	80091860: 80452A70 (lit_8748)
//	80091870: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80091874: 80452920 (lit_7340)
//	8009187C: 80452974 (lit_8190)
//	80091884: 80452A74 (lit_8749)
//	80091894: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80091898: 804528B8 (lit_5141)
//	800918A4: 80452A20 (lit_8728)
//	800918B4: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800918B8: 804528B8 (lit_5141)
//	800918C4: 80452960 (lit_8185)
//	800918D4: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800918D8: 804529BC (lit_8208)
//	800918E0: 80452A6C (lit_8747)
//	800918E8: 80452A78 (lit_8750)
//	800918F8: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800918FC: 80452A7C (lit_8751)
//	80091904: 80452A80 (lit_8752)
//	8009190C: 8045297C (lit_8192)
//	8009191C: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80091920: 80452948 (lit_8179)
//	80091928: 804528B8 (lit_5141)
//	80091930: 804529C0 (lit_8209)
//	80091940: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80091944: 80452A6C (lit_8747)
//	8009194C: 80452934 (lit_7345)
//	80091954: 804529B8 (lit_8207)
//	80091964: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800919D4: 804529F8 (lit_8223)
//	800919F0: 8009236C (dComIfGp_saveCameraPosition__FiP4cXyzP4cXyzfs)
//	80091A48: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091A58: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091A64: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091A74: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091A84: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091A90: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091ACC: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091AD8: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091AE4: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091AF4: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091B00: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091B0C: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091B40: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091B4C: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091B58: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091B68: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091B74: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091B80: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091BC0: 804529D8 (lit_8215)
//	80091C14: 804529D8 (lit_8215)
//	80091C38: 804529F8 (lit_8223)
//	80091C40: 804061C0 (g_dComIfG_gameInfo)
//	80091C44: 804061C0 (g_dComIfG_gameInfo)
//	80091C58: 803AC528 (lit_8754)
//	80091C5C: 803AC528 (lit_8754)
//	80091C98: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80091CA4: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091CBC: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80091CC8: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091CDC: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	80091CF0: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80091CFC: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80091D14: 8008FA94 (func_8008FA94)
//	80091D70: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80091D7C: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80091D9C: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80091DA8: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80091DBC: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	80091DD0: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80091DDC: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80091DF4: 8008FA94 (func_8008FA94)
//	80091E0C: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80091E28: 80266B84 (__ml__4cXyzCFf)
//	80091E38: 80347090 (PSVECAdd)
//	80091E48: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80091E64: 80266B84 (__ml__4cXyzCFf)
//	80091E74: 80347090 (PSVECAdd)
//	80091EAC: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80091EB8: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80091EC8: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	80091ED4: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80091ED8: 804529E4 (lit_8218)
//	80091EE0: 80452974 (lit_8190)
//	80091EE8: 80452A84 (lit_8753)
//	80091EFC: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	80091F0C: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80091F18: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80091F24: 80267674 (cM_atan2s__Fff)
//	80091F30: 80270F98 (__ct__7cSAngleFs)
//	80091F40: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	80091F50: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	80091F58: 80451188 (_0__7cSAngle)
//	80091F88: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	80091F98: 80088384 (xyzRotateY__8dCamMathFR4cXyz7cSAngle)
//	80091FA4: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091FB4: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	80091FC4: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	80091FD0: 800977D8 (__as__4cXyzFRC4cXyz)
//	80091FE0: 8026F2A8 (__ct__8cM3dGLinFRC4cXyzRC4cXyz)
//	80091FF4: 80268710 (cM3d_Len3dSqPntAndSegLine__FPC8cM3dGLinPC3VecP3VecPf)
//	80092008: 800977D8 (__as__4cXyzFRC4cXyz)
//	8009201C: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	80092038: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	8009204C: 800977D8 (__as__4cXyzFRC4cXyz)
//	80092058: 800977D8 (__as__4cXyzFRC4cXyz)
//	8009206C: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	8009207C: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	80092088: 800977D8 (__as__4cXyzFRC4cXyz)
//	80092098: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	800920A8: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	800920B4: 800977D8 (__as__4cXyzFRC4cXyz)
//	800920C8: 80036A5C (__dt__8cM3dGLinFv)
//	800920DC: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	800920E8: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8009210C: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80092118: 800977D8 (__as__4cXyzFRC4cXyz)
//	80092138: 801659F4 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzP4cXyzUl)
//	80092150: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8009215C: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092168: 80266CE4 (norm__4cXyzCFv)
//	80092174: 80452920 (lit_7340)
//	80092178: 80266B84 (__ml__4cXyzCFf)
//	80092188: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80092194: 800977D8 (__as__4cXyzFRC4cXyz)
//	800921AC: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	800921B8: 800977D8 (__as__4cXyzFRC4cXyz)
//	800921C8: 80266B34 (__mi__4cXyzCFRC3Vec)
//	800921D4: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800921E0: 80266CE4 (norm__4cXyzCFv)
//	800921EC: 80452920 (lit_7340)
//	800921F0: 80266B84 (__ml__4cXyzCFf)
//	80092200: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8009220C: 800977D8 (__as__4cXyzFRC4cXyz)
//	80092220: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	80092234: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092240: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092258: 8008FA94 (func_8008FA94)
//	80092290: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8009229C: 800977D8 (__as__4cXyzFRC4cXyz)
//	800922AC: 80266B34 (__mi__4cXyzCFRC3Vec)
//	800922B8: 800977D8 (__as__4cXyzFRC4cXyz)
//	800922DC: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	800922EC: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	800922F8: 800977D8 (__as__4cXyzFRC4cXyz)
//	80092308: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	80092318: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	80092324: 800977D8 (__as__4cXyzFRC4cXyz)
//	80092334: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80092340: 80271A70 (Val__7cSGlobeFRC4cXyz)
//	80092358: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::tactEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/tactEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* 8009236C-800923B8 004C+00 s=1 e=0 z=0  None .text      dComIfGp_saveCameraPosition__FiP4cXyzP4cXyzfs                */
//	80092370: 804061C0 (g_dComIfG_gameInfo)
//	80092374: 804061C0 (g_dComIfG_gameInfo)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
//  f32 False
//  s16 False
asm static void dComIfGp_saveCameraPosition(int param_0, cXyz* param_1, cXyz* param_2, f32 param_3, s16 param_4) {
	nofralloc
#include "asm/d/d_ev_camera/dComIfGp_saveCameraPosition__FiP4cXyzP4cXyzfs.s"
}
#pragma pop


/* 800923B8-800923C0 0008+00 s=0 e=1 z=0  None .text      turnToActorEvCamera__9dCamera_cFv                            */
// False False
//  bool False
bool dCamera_c::turnToActorEvCamera() {
	return true;
}


/* 800923C0-800924D0 0110+00 s=0 e=1 z=0  None .text      stbWaitEvCamera__9dCamera_cFv                                */
//	800923D4: 80450E20 (m_object__7dDemo_c)
//	800923D8: 80039128 (getActiveCamera__14dDemo_object_cFv)
//	80092470: 804528D8 (lit_5145)
//	80092490: 80270F98 (__ct__7cSAngleFs)
//	800924A8: 80266B34 (__mi__4cXyzCFRC3Vec)
//	800924B4: 80271A70 (Val__7cSGlobeFRC4cXyz)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::stbWaitEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/stbWaitEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* 800924D0-8009258C 00BC+00 s=0 e=1 z=0  None .text      saveEvCamera__9dCamera_cFv                                   */
//	800924E8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800924EC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800924F8: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	80092514: 804061C0 (g_dComIfG_gameInfo)
//	80092518: 804061C0 (g_dComIfG_gameInfo)
//	80092568: 80164C64 (pushInfo__9dCamera_cFPQ29dCamera_c10dCamInfo_cs)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::saveEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/saveEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* 8009258C-800929AC 0420+00 s=0 e=1 z=0  None .text      loadEvCamera__9dCamera_cFv                                   */
//	800925A4: 803621DC (_savegpr_29)
//	800925B4: 8037A884 (lit_8840)
//	800925B8: 8037A884 (lit_8840)
//	800925F0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800925F4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80092600: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	8009260C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80092610: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80092618: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	80092624: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80092628: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80092648: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	8009267C: 80097878 (Init__14d2DBSplinePathFll)
//	80092684: 80097904 (Step__14d2DBSplinePathFv)
//	80092694: 804061C0 (g_dComIfG_gameInfo)
//	80092698: 804061C0 (g_dComIfG_gameInfo)
//	800926DC: 80270F98 (__ct__7cSAngleFs)
//	80092774: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80092780: 80271A70 (Val__7cSGlobeFRC4cXyz)
//	800927B4: 80097904 (Step__14d2DBSplinePathFv)
//	800927C0: 80097B20 (Calc__14d2DBSplinePathFPf)
//	800927D0: 804528E8 (lit_5846)
//	800927E8: 804528F8 (lit_5962)
//	80092810: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80092820: 80266B84 (__ml__4cXyzCFf)
//	80092830: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	80092874: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	80092884: 80271264 (__ml__7cSAngleCFf)
//	80092894: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	800928A0: 80270F98 (__ct__7cSAngleFs)
//	800928BC: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	800928CC: 80271264 (__ml__7cSAngleCFf)
//	800928DC: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	800928E8: 80270F98 (__ct__7cSAngleFs)
//	800928FC: 80271AB4 (Xyz__7cSGlobeCFv)
//	8009290C: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8009294C: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8009295C: 80271264 (__ml__7cSAngleCFf)
//	8009296C: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	80092998: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::loadEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/loadEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80452A88-80452A8C 0004+00 s=1 e=0 z=0  None .sdata2    @9395                                                        */
SECTION_SDATA2 static f32 lit_9395 = 64.0f;

/* 80452A8C-80452A90 0004+00 s=1 e=0 z=0  None .sdata2    @9396                                                        */
SECTION_SDATA2 static f32 lit_9396 = 118.0f;

/* 80452A90-80452A94 0004+00 s=1 e=0 z=0  None .sdata2    @9397                                                        */
SECTION_SDATA2 static f32 lit_9397 = -32.0f;

/* 80452A94-80452A98 0004+00 s=1 e=0 z=0  None .sdata2    @9398                                                        */
SECTION_SDATA2 static f32 lit_9398 = -52.0f;

/* 80452A98-80452A9C 0004+00 s=1 e=0 z=0  None .sdata2    @9399                                                        */
SECTION_SDATA2 static f32 lit_9399 = 34.0f;

/* 80452A9C-80452AA0 0004+00 s=1 e=0 z=0  None .sdata2    @9400                                                        */
SECTION_SDATA2 static f32 lit_9400 = 116.0f;

/* 80452AA0-80452AA4 0004+00 s=1 e=0 z=0  None .sdata2    @9401                                                        */
SECTION_SDATA2 static f32 lit_9401 = 88.0f;

/* 80452AA4-80452AA8 0004+00 s=1 e=0 z=0  None .sdata2    @9402                                                        */
SECTION_SDATA2 static f32 lit_9402 = -33.0f;

/* 80452AA8-80452AAC 0004+00 s=1 e=0 z=0  None .sdata2    @9403                                                        */
SECTION_SDATA2 static f32 lit_9403 = -55.0f;

/* 80452AAC-80452AB0 0004+00 s=1 e=0 z=0  None .sdata2    @9404                                                        */
SECTION_SDATA2 static f32 lit_9404 = 16.0f;

/* 80452AB0-80452AB4 0004+00 s=1 e=0 z=0  None .sdata2    @9405                                                        */
SECTION_SDATA2 static f32 lit_9405 = 52.0f;

/* 80452AB4-80452AB8 0004+00 s=3 e=0 z=0  None .sdata2    @9406                                                        */
SECTION_SDATA2 static f32 lit_9406 = -85.0f;

/* 80452AB8-80452ABC 0004+00 s=1 e=0 z=0  None .sdata2    @9407                                                        */
SECTION_SDATA2 static f32 lit_9407 = -95.0f;

/* 80452ABC-80452AC0 0004+00 s=1 e=0 z=0  None .sdata2    @9408                                                        */
SECTION_SDATA2 static f32 lit_9408 = 92.0f;

/* 80452AC0-80452AC4 0004+00 s=1 e=0 z=0  None .sdata2    @9409                                                        */
SECTION_SDATA2 static f32 lit_9409 = 155.0f;

/* 80452AC4-80452AC8 0004+00 s=2 e=0 z=0  None .sdata2    @9410                                                        */
SECTION_SDATA2 static f32 lit_9410 = -27.0f;

/* 80452AC8-80452ACC 0004+00 s=1 e=0 z=0  None .sdata2    @9411                                                        */
SECTION_SDATA2 static f32 lit_9411 = -90.0f;

/* 80452ACC-80452AD0 0004+00 s=1 e=0 z=0  None .sdata2    @9412                                                        */
SECTION_SDATA2 static f32 lit_9412 = -68.0f;

/* 80452AD0-80452AD4 0004+00 s=1 e=0 z=0  None .sdata2    @9413                                                        */
SECTION_SDATA2 static f32 lit_9413 = 114.0f;

/* 80452AD4-80452AD8 0004+00 s=1 e=0 z=0  None .sdata2    @9414                                                        */
SECTION_SDATA2 static f32 lit_9414 = -110.0f;

/* 80452AD8-80452ADC 0004+00 s=1 e=0 z=0  None .sdata2    @9415                                                        */
SECTION_SDATA2 static f32 lit_9415 = 30.240999221801758f;

/* 80452ADC-80452AE0 0004+00 s=1 e=0 z=0  None .sdata2    @9416                                                        */
SECTION_SDATA2 static f32 lit_9416 = 12.652999877929688f;

/* 80452AE0-80452AE4 0004+00 s=1 e=0 z=0  None .sdata2    @9417                                                        */
SECTION_SDATA2 static f32 lit_9417 = 13.949999809265137f;

/* 80452AE4-80452AE8 0004+00 s=1 e=0 z=0  None .sdata2    @9418                                                        */
SECTION_SDATA2 static f32 lit_9418 = 23.638999938964844f;

/* 80452AE8-80452AEC 0004+00 s=1 e=0 z=0  None .sdata2    @9419                                                        */
SECTION_SDATA2 static f32 lit_9419 = 96.63600158691406f;

/* 80452AEC-80452AF0 0004+00 s=1 e=0 z=0  None .sdata2    @9420                                                        */
SECTION_SDATA2 static f32 lit_9420 = 57.31800079345703f;

/* 80452AF0-80452AF4 0004+00 s=1 e=0 z=0  None .sdata2    @9421                                                        */
SECTION_SDATA2 static f32 lit_9421 = -2.8489999771118164f;

/* 80452AF4-80452AF8 0004+00 s=1 e=0 z=0  None .sdata2    @9422                                                        */
SECTION_SDATA2 static f32 lit_9422 = 96.63899993896484f;

/* 80452AF8-80452AFC 0004+00 s=1 e=0 z=0  None .sdata2    @9423                                                        */
SECTION_SDATA2 static f32 lit_9423 = 42.75299835205078f;

/* 80452AFC-80452B00 0004+00 s=2 e=0 z=0  None .sdata2    @9424                                                        */
SECTION_SDATA2 static f32 lit_9424 = -130.0f;

/* 80452B00-80452B04 0004+00 s=1 e=0 z=0  None .sdata2    @9425                                                        */
SECTION_SDATA2 static f32 lit_9425 = -420.0f;

/* 80452B04-80452B08 0004+00 s=1 e=0 z=0  None .sdata2    @9426                                                        */
SECTION_SDATA2 static f32 lit_9426 = -400.0f;

/* 80452B08-80452B0C 0004+00 s=1 e=0 z=0  None .sdata2    @9427                                                        */
SECTION_SDATA2 static f32 lit_9427 = 95.0f;

/* 80452B0C-80452B10 0004+00 s=1 e=0 z=0  None .sdata2    @9428                                                        */
SECTION_SDATA2 static f32 lit_9428 = -245.0f;

/* 80452B10-80452B14 0004+00 s=1 e=0 z=0  None .sdata2    @9429                                                        */
SECTION_SDATA2 static f32 lit_9429 = -58.0f;

/* 80452B14-80452B18 0004+00 s=1 e=0 z=0  None .sdata2    @9430                                                        */
SECTION_SDATA2 static f32 lit_9430 = -250.0f;

/* 80452B18-80452B1C 0004+00 s=1 e=0 z=0  None .sdata2    @9431                                                        */
SECTION_SDATA2 static f32 lit_9431 = -105.0f;

/* 80452B1C-80452B20 0004+00 s=1 e=0 z=0  None .sdata2    @9432                                                        */
SECTION_SDATA2 static f32 lit_9432 = 1.5f;

/* 80452B20-80452B24 0004+00 s=1 e=0 z=0  None .sdata2    @9433                                                        */
SECTION_SDATA2 static f32 lit_9433 = 47.0f;

/* 80452B24-80452B28 0004+00 s=1 e=0 z=0  None .sdata2    @9434                                                        */
SECTION_SDATA2 static f32 lit_9434 = 113.0f;

/* 80452B28-80452B2C 0004+00 s=1 e=0 z=0  None .sdata2    @9435                                                        */
SECTION_SDATA2 static f32 lit_9435 = 96.0f;

/* 80452B2C-80452B30 0004+00 s=1 e=0 z=0  None .sdata2    @9436                                                        */
SECTION_SDATA2 static f32 lit_9436 = 38.0f;

/* 80452B30-80452B34 0004+00 s=1 e=0 z=0  None .sdata2    @9437                                                        */
SECTION_SDATA2 static f32 lit_9437 = 82.0f;

/* 80452B34-80452B38 0004+00 s=1 e=0 z=0  None .sdata2    @9438                                                        */
SECTION_SDATA2 static f32 lit_9438 = 340.0f;

/* 80452B38-80452B3C 0004+00 s=1 e=0 z=0  None .sdata2    @9439                                                        */
SECTION_SDATA2 static f32 lit_9439 = -115.0f;

/* 80452B3C-80452B40 0004+00 s=1 e=0 z=0  None .sdata2    @9440                                                        */
SECTION_SDATA2 static f32 lit_9440 = 270.0f;

/* 80452B40-80452B44 0004+00 s=2 e=0 z=0  None .sdata2    @9441                                                        */
SECTION_SDATA2 static f32 lit_9441 = 300.0f;

/* 800929AC-800937AC 0E00+00 s=0 e=1 z=0  None .text      useItem0EvCamera__9dCamera_cFv                               */
//	800929CC: 803621D0 (_savegpr_26)
//	800929D4: 8045291C (lit_7339)
//	800929DC: 80452A20 (lit_8728)
//	800929E4: 804529B4 (lit_8206)
//	800929EC: 8045293C (lit_7347)
//	800929F4: 804529BC (lit_8208)
//	800929FC: 80452934 (lit_7345)
//	80092A0C: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092A10: 804528B8 (lit_5141)
//	80092A18: 80452928 (lit_7342)
//	80092A20: 80452A88 (lit_9395)
//	80092A30: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092A34: 804529D8 (lit_8215)
//	80092A3C: 80452928 (lit_7342)
//	80092A44: 80452974 (lit_8190)
//	80092A54: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092A58: 80452968 (lit_8187)
//	80092A60: 80452A8C (lit_9396)
//	80092A68: 804528B8 (lit_5141)
//	80092A78: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092A7C: 804528B8 (lit_5141)
//	80092A84: 80452A90 (lit_9397)
//	80092A8C: 80452940 (lit_7357)
//	80092A94: 80452A10 (lit_8724)
//	80092A9C: 8045294C (lit_8180)
//	80092AA4: 804529C8 (lit_8211)
//	80092AB4: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092AB8: 80452A94 (lit_9398)
//	80092AC0: 80452A98 (lit_9399)
//	80092AC8: 80452A10 (lit_8724)
//	80092AD8: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092ADC: 80452A10 (lit_8724)
//	80092AE4: 80452A9C (lit_9400)
//	80092AEC: 80452AA0 (lit_9401)
//	80092AFC: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092B00: 804529F8 (lit_8223)
//	80092B08: 80452AA4 (lit_9402)
//	80092B10: 80452994 (lit_8198)
//	80092B20: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092B24: 80452988 (lit_8195)
//	80092B2C: 80452AA8 (lit_9403)
//	80092B34: 80452934 (lit_7345)
//	80092B44: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092B48: 80452AAC (lit_9404)
//	80092B50: 80452AB0 (lit_9405)
//	80092B58: 8045292C (lit_7343)
//	80092B68: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092B6C: 804528B8 (lit_5141)
//	80092B74: 8045299C (lit_8200)
//	80092B7C: 804529A0 (lit_8201)
//	80092B84: 80452AB4 (lit_9406)
//	80092B8C: 80452A20 (lit_8728)
//	80092B94: 80452A24 (lit_8729)
//	80092BA4: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092BA8: 80452AB8 (lit_9407)
//	80092BB0: 80452ABC (lit_9408)
//	80092BB8: 80452950 (lit_8181)
//	80092BC8: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092BCC: 80452AC0 (lit_9409)
//	80092BD4: 80452A10 (lit_8724)
//	80092BDC: 80452928 (lit_7342)
//	80092BEC: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092BF0: 80452920 (lit_7340)
//	80092BF8: 80452A78 (lit_8750)
//	80092C00: 80452AC0 (lit_9409)
//	80092C10: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092C14: 804528B8 (lit_5141)
//	80092C1C: 80452AC4 (lit_9410)
//	80092C24: 804529A0 (lit_8201)
//	80092C2C: 80452AC8 (lit_9411)
//	80092C34: 8045296C (lit_8188)
//	80092C3C: 804529D4 (lit_8214)
//	80092C4C: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092C50: 8045297C (lit_8192)
//	80092C58: 80452ACC (lit_9412)
//	80092C60: 80452AD0 (lit_9413)
//	80092C70: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092C74: 80452920 (lit_7340)
//	80092C7C: 8045297C (lit_8192)
//	80092C84: 80452970 (lit_8189)
//	80092C94: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092C98: 80452944 (lit_8178)
//	80092CA0: 8045294C (lit_8180)
//	80092CA8: 80452AD4 (lit_9414)
//	80092CB8: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092CBC: 80452AD8 (lit_9415)
//	80092CC4: 80452ADC (lit_9416)
//	80092CCC: 80452AE0 (lit_9417)
//	80092CD4: 80452AE4 (lit_9418)
//	80092CDC: 80452AE8 (lit_9419)
//	80092CE4: 80452AEC (lit_9420)
//	80092CF4: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092CF8: 80452AF0 (lit_9421)
//	80092D00: 80452AF4 (lit_9422)
//	80092D08: 80452AF8 (lit_9423)
//	80092D18: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092D1C: 80452AE4 (lit_9418)
//	80092D24: 80452AE8 (lit_9419)
//	80092D2C: 80452AEC (lit_9420)
//	80092D3C: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092D40: 804528B8 (lit_5141)
//	80092D48: 80452998 (lit_8199)
//	80092D50: 80452A20 (lit_8728)
//	80092D58: 80452AC8 (lit_9411)
//	80092D60: 804529BC (lit_8208)
//	80092D68: 80452928 (lit_7342)
//	80092D78: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092D7C: 804529F0 (lit_8221)
//	80092D84: 80452988 (lit_8195)
//	80092D8C: 804529D8 (lit_8215)
//	80092D9C: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092DA0: 80452A10 (lit_8724)
//	80092DA8: 80452970 (lit_8189)
//	80092DB0: 80452AFC (lit_9424)
//	80092DC0: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092DC4: 804528B8 (lit_5141)
//	80092DCC: 80452A20 (lit_8728)
//	80092DD4: 804529CC (lit_8212)
//	80092DE0: 80452998 (lit_8199)
//	80092DE8: 80452B00 (lit_9425)
//	80092DF8: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092DFC: 80452970 (lit_8189)
//	80092E04: 80452AA8 (lit_9403)
//	80092E0C: 80452B04 (lit_9426)
//	80092E1C: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092E20: 804528B8 (lit_5141)
//	80092E28: 8045291C (lit_7339)
//	80092E30: 80452A80 (lit_8752)
//	80092E38: 80452B08 (lit_9427)
//	80092E40: 80452AA8 (lit_9403)
//	80092E48: 80452B0C (lit_9428)
//	80092E58: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092E5C: 80452B10 (lit_9429)
//	80092E64: 8045298C (lit_8196)
//	80092E6C: 80452B14 (lit_9430)
//	80092E7C: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092E80: 804528B8 (lit_5141)
//	80092E88: 80452A20 (lit_8728)
//	80092E90: 804529B4 (lit_8206)
//	80092E98: 80452B18 (lit_9431)
//	80092EA0: 80452B1C (lit_9432)
//	80092EA8: 80452B20 (lit_9433)
//	80092EB8: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092EBC: 80452B24 (lit_9434)
//	80092EC4: 80452A60 (lit_8744)
//	80092ECC: 80452A58 (lit_8742)
//	80092EDC: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092EE0: 80452B28 (lit_9435)
//	80092EE8: 804529E4 (lit_8218)
//	80092EF0: 80452B2C (lit_9436)
//	80092F00: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092F04: 80452ACC (lit_9412)
//	80092F0C: 80452934 (lit_7345)
//	80092F14: 80452B30 (lit_9437)
//	80092F24: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092F28: 804528B8 (lit_5141)
//	80092F30: 80452940 (lit_7357)
//	80092F38: 804529C0 (lit_8209)
//	80092F40: 804529D8 (lit_8215)
//	80092F48: 80452A00 (lit_8225)
//	80092F50: 80452AB4 (lit_9406)
//	80092F60: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092F64: 80452AD4 (lit_9414)
//	80092F6C: 80452B34 (lit_9438)
//	80092F74: 80452B38 (lit_9439)
//	80092F84: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092F88: 80452994 (lit_8198)
//	80092F90: 8045293C (lit_7347)
//	80092F98: 80452B3C (lit_9440)
//	80092FA8: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092FAC: 804528B8 (lit_5141)
//	80092FB4: 80452960 (lit_8185)
//	80092FBC: 8045293C (lit_7347)
//	80092FC4: 80452AB4 (lit_9406)
//	80092FCC: 80452974 (lit_8190)
//	80092FD4: 80452B40 (lit_9441)
//	80092FE4: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80092FE8: 804529E4 (lit_8218)
//	80092FF0: 80452950 (lit_8181)
//	80092FF8: 80452984 (lit_8194)
//	80093008: 800977F4 (__ct__4cXyzFRC4cXyz)
//	8009300C: 80452A3C (lit_8735)
//	80093014: 8045294C (lit_8180)
//	8009301C: 8045293C (lit_7347)
//	8009302C: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80093034: 8037A89C (lit_8969)
//	80093038: 8037A89C (lit_8969)
//	80093180: 800977D8 (__as__4cXyzFRC4cXyz)
//	8009318C: 800977D8 (__as__4cXyzFRC4cXyz)
//	800931A4: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	800931B0: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80093204: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80093208: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80093214: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	80093280: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80093294: 800977D8 (__as__4cXyzFRC4cXyz)
//	800932AC: 800977D8 (__as__4cXyzFRC4cXyz)
//	800932CC: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	800932D8: 800977D8 (__as__4cXyzFRC4cXyz)
//	80093318: 801659F4 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzP4cXyzUl)
//	8009332C: 80271B30 (Norm__7cSGlobeCFv)
//	8009333C: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	80093348: 800977D8 (__as__4cXyzFRC4cXyz)
//	80093354: 804061C0 (g_dComIfG_gameInfo)
//	80093358: 804061C0 (g_dComIfG_gameInfo)
//	80093374: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80093380: 800977D8 (__as__4cXyzFRC4cXyz)
//	80093390: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	800933B8: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	80093434: 80023578 (fpcSch_JudgeForPName__FPvPv)
//	80093438: 80023578 (fpcSch_JudgeForPName__FPvPv)
//	80093440: 800197F8 (fopAcIt_Judge__FPFPvPv_PvPv)
//	80093458: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	80093474: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	80093488: 800977F4 (__ct__4cXyzFRC4cXyz)
//	80093494: 800977F4 (__ct__4cXyzFRC4cXyz)
//	800934AC: 8008FA94 (func_8008FA94)
//	800934FC: 800977D8 (__as__4cXyzFRC4cXyz)
//	80093510: 800977D8 (__as__4cXyzFRC4cXyz)
//	80093520: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8009352C: 80271A70 (Val__7cSGlobeFRC4cXyz)
//	80093540: 804528F8 (lit_5962)
//	8009359C: 80266B34 (__mi__4cXyzCFRC3Vec)
//	800935AC: 80266B84 (__ml__4cXyzCFf)
//	800935BC: 80347090 (PSVECAdd)
//	800935F0: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	80093600: 80271264 (__ml__7cSAngleCFf)
//	8009360C: 802711D4 (__apl__7cSAngleFRC7cSAngle)
//	8009361C: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8009362C: 80271264 (__ml__7cSAngleCFf)
//	80093638: 802711D4 (__apl__7cSAngleFRC7cSAngle)
//	8009364C: 80271A08 (Val__7cSGlobeFfRC7cSAngleRC7cSAngle)
//	80093658: 80271AB4 (Xyz__7cSGlobeCFv)
//	80093668: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	80093674: 800977D8 (__as__4cXyzFRC4cXyz)
//	80093698: 800977D8 (__as__4cXyzFRC4cXyz)
//	800936A4: 80271AB4 (Xyz__7cSGlobeCFv)
//	800936B4: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	800936C0: 800977D8 (__as__4cXyzFRC4cXyz)
//	80093744: 800977D8 (__as__4cXyzFRC4cXyz)
//	80093750: 80271AB4 (Xyz__7cSGlobeCFv)
//	80093760: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8009376C: 800977D8 (__as__4cXyzFRC4cXyz)
//	80093798: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::useItem0EvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/useItem0EvCamera__9dCamera_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80452B44-80452B48 0004+00 s=2 e=0 z=0  None .sdata2    @9798                                                        */
SECTION_SDATA2 static f32 lit_9798 = 1.0f / 20.0f;

/* 80452B48-80452B4C 0004+00 s=1 e=0 z=0  None .sdata2    @9799                                                        */
SECTION_SDATA2 static f32 lit_9799 = 90.0f;

/* 80452B4C-80452B50 0004+00 s=1 e=0 z=0  None .sdata2    @9800                                                        */
SECTION_SDATA2 static f32 lit_9800 = -180.0f;

/* 80452B50-80452B54 0004+00 s=1 e=0 z=0  None .sdata2    @9801                                                        */
SECTION_SDATA2 static f32 lit_9801 = 170.0f;

/* 800937AC-80094240 0A94+00 s=0 e=1 z=0  None .text      useItem1EvCamera__9dCamera_cFv                               */
//	800937CC: 803621CC (_savegpr_25)
//	800937E4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800937E8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800937F4: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	80093810: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	80093820: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80093848: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	80093858: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80093884: 804529B4 (lit_8206)
//	8009388C: 80452B44 (lit_9798)
//	800938D4: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	800938E4: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8009390C: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80093918: 80271A70 (Val__7cSGlobeFRC4cXyz)
//	80093924: 80452934 (lit_7345)
//	80093928: 80270FC8 (__ct__7cSAngleFf)
//	80093950: 80452934 (lit_7345)
//	80093954: 80270FC8 (__ct__7cSAngleFf)
//	80093960: 80270F98 (__ct__7cSAngleFs)
//	80093970: 804528B8 (lit_5141)
//	80093974: 80270FC8 (__ct__7cSAngleFf)
//	8009399C: 804528B8 (lit_5141)
//	800939A0: 80270FC8 (__ct__7cSAngleFf)
//	800939AC: 80270F98 (__ct__7cSAngleFs)
//	800939C0: 80271AB4 (Xyz__7cSGlobeCFv)
//	800939D0: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	800939F0: 804529B4 (lit_8206)
//	800939F8: 80452B44 (lit_9798)
//	80093A10: 804528B8 (lit_5141)
//	80093A24: 8045296C (lit_8188)
//	80093A2C: 80452934 (lit_7345)
//	80093A38: 80452A80 (lit_8752)
//	80093A48: 804061C0 (g_dComIfG_gameInfo)
//	80093A4C: 804061C0 (g_dComIfG_gameInfo)
//	80093A54: 80451018 (m_midnaActor__9daPy_py_c)
//	80093A88: 8045291C (lit_7339)
//	80093A90: 80452998 (lit_8199)
//	80093A98: 804528B8 (lit_5141)
//	80093AA0: 80452B48 (lit_9799)
//	80093AA8: 804529B4 (lit_8206)
//	80093AB0: 804529DC (lit_8216)
//	80093AC4: 804529CC (lit_8212)
//	80093ACC: 804529E4 (lit_8218)
//	80093AD4: 80452B4C (lit_9800)
//	80093AE8: 8045295C (lit_8184)
//	80093AF0: 804529D4 (lit_8214)
//	80093AF8: 80452950 (lit_8181)
//	80093B0C: 804529B0 (lit_8205)
//	80093B14: 8045293C (lit_7347)
//	80093B1C: 80452B50 (lit_9801)
//	80093B34: 80452960 (lit_8185)
//	80093B4C: 80452968 (lit_8187)
//	80093B58: 80452AB4 (lit_9406)
//	80093B70: 8037AA08 (lit_9468)
//	80093B74: 8037AA08 (lit_9468)
//	80093C0C: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	80093CD0: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	80093CFC: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80093DB0: 801659F4 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzP4cXyzUl)
//	80093DC4: 80271B30 (Norm__7cSGlobeCFv)
//	80093DD4: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	80093E34: 804061C0 (g_dComIfG_gameInfo)
//	80093E38: 804061C0 (g_dComIfG_gameInfo)
//	80093E58: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80093E88: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	80093EA4: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	80093EF4: 8008FA94 (func_8008FA94)
//	80093F74: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80093F80: 80271A70 (Val__7cSGlobeFRC4cXyz)
//	80093FC4: 804528F8 (lit_5962)
//	8009401C: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8009402C: 80266B84 (__ml__4cXyzCFf)
//	8009403C: 80347090 (PSVECAdd)
//	80094070: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	80094080: 80271264 (__ml__7cSAngleCFf)
//	8009408C: 802711D4 (__apl__7cSAngleFRC7cSAngle)
//	8009409C: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	800940AC: 80271264 (__ml__7cSAngleCFf)
//	800940B8: 802711D4 (__apl__7cSAngleFRC7cSAngle)
//	800940CC: 80271A08 (Val__7cSGlobeFfRC7cSAngleRC7cSAngle)
//	800940D8: 80271AB4 (Xyz__7cSGlobeCFv)
//	800940E8: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	80094164: 80271AB4 (Xyz__7cSGlobeCFv)
//	80094174: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8009422C: 80362218 (_restgpr_25)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::useItem1EvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/useItem1EvCamera__9dCamera_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80452B54-80452B58 0004+00 s=1 e=0 z=0  None .sdata2    @10118                                                       */
SECTION_SDATA2 static f32 lit_10118 = 32.0f;

/* 80452B58-80452B5C 0004+00 s=1 e=0 z=0  None .sdata2    @10119                                                       */
SECTION_SDATA2 static f32 lit_10119 = 84.0f;

/* 80452B5C-80452B60 0004+00 s=1 e=0 z=0  None .sdata2    @10120                                                       */
SECTION_SDATA2 static f32 lit_10120 = 134.0f;

/* 80452B60-80452B64 0004+00 s=1 e=0 z=0  None .sdata2    @10121                                                       */
SECTION_SDATA2 static f32 lit_10121 = 17.0f;

/* 80452B64-80452B68 0004+00 s=1 e=0 z=0  None .sdata2    @10122                                                       */
SECTION_SDATA2 static f32 lit_10122 = 128.0f;

/* 80452B68-80452B6C 0004+00 s=1 e=0 z=0  None .sdata2    @10123                                                       */
SECTION_SDATA2 static f32 lit_10123 = -62.0f;

/* 80452B6C-80452B70 0004+00 s=1 e=0 z=0  None .sdata2    @10124                                                       */
SECTION_SDATA2 static f32 lit_10124 = -84.0f;

/* 80452B70-80452B74 0004+00 s=1 e=0 z=0  None .sdata2    @10125                                                       */
SECTION_SDATA2 static f32 lit_10125 = -164.0f;

/* 80452B74-80452B78 0004+00 s=1 e=0 z=0  None .sdata2    @10126                                                       */
SECTION_SDATA2 static f32 lit_10126 = -220.0f;

/* 80094240-80094A70 0830+00 s=0 e=1 z=0  None .text      getItemEvCamera__9dCamera_cFv                                */
//	80094260: 804528B8 (lit_5141)
//	80094268: 80452AC4 (lit_9410)
//	80094270: 80452B54 (lit_10118)
//	80094284: 80452B58 (lit_10119)
//	8009428C: 80452A54 (lit_8741)
//	80094294: 80452B5C (lit_10120)
//	800942A8: 80452B60 (lit_10121)
//	800942B0: 8045291C (lit_7339)
//	800942B8: 80452944 (lit_8178)
//	800942D0: 80452B64 (lit_10122)
//	800942D8: 80452964 (lit_8186)
//	800942F4: 80452B68 (lit_10123)
//	80094308: 80452B6C (lit_10124)
//	80094314: 80452B70 (lit_10125)
//	80094328: 80452A58 (lit_8742)
//	80094334: 80452AFC (lit_9424)
//	80094348: 804529E4 (lit_8218)
//	80094354: 80452B74 (lit_10126)
//	8009436C: 8037AA40 (lit_9811)
//	80094370: 8037AA40 (lit_9811)
//	800943E8: 8037AAA4 (lit_9812)
//	800943EC: 8037AAA4 (lit_9812)
//	80094424: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80094428: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80094440: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	80094478: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8009447C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80094490: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	8009449C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800944A0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800944A8: 80088E58 (getEvFloatListData__9dCamera_cFPPfPc)
//	800944E8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800944EC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800944F8: 8008922C (getEvXyzData__9dCamera_cFP4cXyzPc4cXyz)
//	8009451C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80094520: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8009452C: 8008922C (getEvXyzData__9dCamera_cFP4cXyzPc4cXyz)
//	80094534: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80094538: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80094544: 800895F4 (getEvActor__9dCamera_cFPcPc)
//	80094598: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8009459C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800945A8: 8008922C (getEvXyzData__9dCamera_cFP4cXyzPc4cXyz)
//	800945BC: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	800945FC: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	8009460C: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80094618: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	80094628: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	80094638: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	80094644: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	8009464C: 80451188 (_0__7cSAngle)
//	80094690: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	800946BC: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	800946F8: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	80094708: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80094714: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	80094724: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	80094734: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	80094740: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	80094748: 80451188 (_0__7cSAngle)
//	8009478C: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	800947B8: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	8009480C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80094810: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8009481C: 8008922C (getEvXyzData__9dCamera_cFP4cXyzPc4cXyz)
//	80094830: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80094858: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80094864: 80271A70 (Val__7cSGlobeFRC4cXyz)
//	80094874: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80094880: 80271A70 (Val__7cSGlobeFRC4cXyz)
//	80094894: 80097878 (Init__14d2DBSplinePathFll)
//	8009489C: 80097904 (Step__14d2DBSplinePathFv)
//	800948B4: 80023590 (fpcSch_JudgeByID__FPvPv)
//	800948B8: 80023590 (fpcSch_JudgeByID__FPvPv)
//	800948C0: 800197F8 (fopAcIt_Judge__FPFPvPv_PvPv)
//	800948E8: 80097904 (Step__14d2DBSplinePathFv)
//	800948F4: 80097B20 (Calc__14d2DBSplinePathFPf)
//	80094908: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80094918: 80266B84 (__ml__4cXyzCFf)
//	80094928: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8009496C: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8009497C: 80271264 (__ml__7cSAngleCFf)
//	8009498C: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	80094998: 80270F98 (__ct__7cSAngleFs)
//	800949B4: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	800949C4: 80271264 (__ml__7cSAngleCFf)
//	800949D4: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	800949E0: 80270F98 (__ct__7cSAngleFs)
//	800949F4: 80271AB4 (Xyz__7cSGlobeCFv)
//	80094A04: 80266AE4 (__pl__4cXyzCFRC3Vec)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::getItemEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/getItemEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80452B78-80452B7C 0004+00 s=1 e=0 z=0  None .sdata2    @10278                                                       */
SECTION_SDATA2 static f32 lit_10278 = 0.5f;

/* 80452B7C-80452B80 0004+00 s=1 e=0 z=0  None .sdata2    @10279                                                       */
SECTION_SDATA2 static f32 lit_10279 = 99.0f / 100.0f;

/* 80452B80-80452B84 0004+00 s=1 e=0 z=0  None .sdata2    @10280                                                       */
SECTION_SDATA2 static f32 lit_10280 = 63.0f / 100.0f;

/* 80452B84-80452B88 0004+00 s=1 e=0 z=0  None .sdata2    @10281                                                       */
SECTION_SDATA2 static f32 lit_10281 = 7.0f / 10.0f;

/* 80452B88-80452B8C 0004+00 s=1 e=0 z=0  None .sdata2    @10282                                                       */
SECTION_SDATA2 static f32 lit_10282 = 11.0f / 10.0f;

/* 80452B8C-80452B90 0004+00 s=1 e=0 z=0  None .sdata2    @10283                                                       */
SECTION_SDATA2 static f32 lit_10283 = 9.0f / 100.0f;

/* 80452B90-80452B94 0004+00 s=1 e=0 z=0  None .sdata2    @10284                                                       */
SECTION_SDATA2 static f32 lit_10284 = 9.0f / 50.0f;

/* 80094A70-80095010 05A0+00 s=0 e=1 z=0  None .text      possessedEvCamera__9dCamera_cFv                              */
//	80094A88: 803621DC (_savegpr_29)
//	80094AC8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80094ACC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80094AD8: 800895F4 (getEvActor__9dCamera_cFPcPc)
//	80094AF8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80094AFC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80094B08: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	80094B14: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80094B18: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80094B20: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	80094B2C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80094B30: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80094B38: 8045295C (lit_8184)
//	80094B3C: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	80094B48: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80094B4C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80094B54: 804528DC (lit_5346)
//	80094B58: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	80094B64: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80094B68: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80094B70: 80452924 (lit_7341)
//	80094B74: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	80094B80: 8027100C (Val__7cSAngleFf)
//	80094B8C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80094B90: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80094B98: 804528B8 (lit_5141)
//	80094B9C: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	80094BA8: 8027100C (Val__7cSAngleFf)
//	80094BB4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80094BB8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80094BC0: 80452964 (lit_8186)
//	80094BC4: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	80094BD0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80094BD4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80094BE0: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	80094BFC: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	80094C0C: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	80094C20: 80271A08 (Val__7cSGlobeFfRC7cSAngleRC7cSAngle)
//	80094C30: 80164C64 (pushInfo__9dCamera_cFPQ29dCamera_c10dCamInfo_cs)
//	80094C4C: 8009778C (eyePos__9dCamera_cFP10fopAc_ac_c)
//	80094C74: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80094C80: 80271A70 (Val__7cSGlobeFRC4cXyz)
//	80094C90: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	80094CA0: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	80094CB4: 80271A08 (Val__7cSGlobeFfRC7cSAngleRC7cSAngle)
//	80094CC0: 80271AB4 (Xyz__7cSGlobeCFv)
//	80094CD0: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	80094D2C: 80452B78 (lit_10278)
//	80094D30: 80452B7C (lit_10279)
//	80094D34: 80181170 (StartBlure__9dCamera_cFiP10fopAc_ac_cff)
//	80094D48: 80452B80 (lit_10280)
//	80094D4C: 80452B7C (lit_10279)
//	80094D50: 80181170 (StartBlure__9dCamera_cFiP10fopAc_ac_cff)
//	80094D58: 804528DC (lit_5346)
//	80094D60: 804528F8 (lit_5962)
//	80094D8C: 8009778C (eyePos__9dCamera_cFP10fopAc_ac_c)
//	80094D9C: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80094DAC: 80266B84 (__ml__4cXyzCFf)
//	80094DBC: 80347090 (PSVECAdd)
//	80094DE8: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	80094DF8: 80271264 (__ml__7cSAngleCFf)
//	80094E08: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	80094E14: 80270F98 (__ct__7cSAngleFs)
//	80094E30: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	80094E40: 80271264 (__ml__7cSAngleCFf)
//	80094E50: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	80094E5C: 80270F98 (__ct__7cSAngleFs)
//	80094E70: 80271AB4 (Xyz__7cSGlobeCFv)
//	80094E80: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	80094EA8: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80094EB8: 80266B84 (__ml__4cXyzCFf)
//	80094EC8: 80347090 (PSVECAdd)
//	80094EF8: 8001E308 (fopCamM_GetParam__FP12camera_class)
//	80094EFC: 804061C0 (g_dComIfG_gameInfo)
//	80094F00: 804061C0 (g_dComIfG_gameInfo)
//	80094F2C: 8009778C (eyePos__9dCamera_cFP10fopAc_ac_c)
//	80094F50: 80015310 (mDoLib_project__FP3VecP3Vec)
//	80094F70: 804528B8 (lit_5141)
//	80094F74: 80181220 (SetBlurePosition__9dCamera_cFfff)
//	80094F7C: 80452B78 (lit_10278)
//	80094F80: 80452B84 (lit_10281)
//	80094F8C: 80181208 (SetBlureAlpha__9dCamera_cFf)
//	80094F94: 80452B88 (lit_10282)
//	80094F98: 80452B8C (lit_10283)
//	80094FA4: 80452A04 (lit_8226)
//	80094FA8: 80452B90 (lit_10284)
//	80094FB4: 804528B8 (lit_5141)
//	80094FB8: 80181210 (SetBlureScale__9dCamera_cFfff)
//	80094FFC: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::possessedEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/possessedEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80452B94-80452B98 0004+00 s=1 e=0 z=0  None .sdata2    @10437                                                       */
SECTION_SDATA2 static f32 lit_10437 = 1.0f / 100.0f;

/* 80095010-8009544C 043C+00 s=0 e=1 z=0  None .text      fixedFramesEvCamera__9dCamera_cFv                            */
//	80095020: 803621D8 (_savegpr_28)
//	8009503C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095040: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095048: 804061C0 (g_dComIfG_gameInfo)
//	8009504C: 804061C0 (g_dComIfG_gameInfo)
//	80095060: 80048144 (getMySubstanceNum__16dEvent_manager_cFiPCc)
//	8009507C: 800480EC (getMySubstanceP__16dEvent_manager_cFiPCci)
//	800950A0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800950A4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800950B8: 80048144 (getMySubstanceNum__16dEvent_manager_cFiPCc)
//	800950D4: 800480EC (getMySubstanceP__16dEvent_manager_cFiPCci)
//	800950F8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800950FC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095110: 80048144 (getMySubstanceNum__16dEvent_manager_cFiPCc)
//	8009512C: 800480EC (getMySubstanceP__16dEvent_manager_cFiPCci)
//	80095158: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8009515C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095164: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	80095174: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095178: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095184: 8008933C (getEvStringData__9dCamera_cFPcPcPc)
//	8009518C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095190: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095198: 800894C4 (getEvActor__9dCamera_cFPc)
//	800951AC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800951B0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800951BC: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	800951D0: 804528F8 (lit_5962)
//	800951EC: 80452B94 (lit_10437)
//	800951F4: 8026798C (cM_rndFX__Ff)
//	8009527C: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	800952D8: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80095330: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	80095380: 8008FA94 (func_8008FA94)
//	800953FC: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80095408: 80271A70 (Val__7cSGlobeFRC4cXyz)
//	80095438: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::fixedFramesEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/fixedFramesEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* 8009544C-800956E4 0298+00 s=0 e=1 z=0  None .text      bSplineEvCamera__9dCamera_cFv                                */
//	80095484: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095488: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095494: 80088F1C (getEvXyzListData__9dCamera_cFPP4cXyzPc)
//	800954BC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800954C0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800954D0: 80088F1C (getEvXyzListData__9dCamera_cFPP4cXyzPc)
//	800954F8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800954FC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8009550C: 80088E58 (getEvFloatListData__9dCamera_cFPPfPc)
//	8009553C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095540: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095544: 80088CB0 (getEvIntData__9dCamera_cFPiPc)
//	8009555C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095560: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095568: 800894C4 (getEvActor__9dCamera_cFPc)
//	8009557C: 80097878 (Init__14d2DBSplinePathFll)
//	80095598: 80097904 (Step__14d2DBSplinePathFv)
//	800955B0: 80097A6C (Calc__14d2DBSplinePathFP4cXyz)
//	800955D8: 80097A6C (Calc__14d2DBSplinePathFP4cXyz)
//	8009560C: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80095638: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80095694: 80266B34 (__mi__4cXyzCFRC3Vec)
//	800956A0: 80271A70 (Val__7cSGlobeFRC4cXyz)
//	800956AC: 80097B20 (Calc__14d2DBSplinePathFPf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::bSplineEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/bSplineEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80425420-8042542C 000C+00 s=1 e=0 z=0  None .bss       @10516                                                       */
static u8 lit_10516[12];

/* 8042542C-80425438 000C+00 s=1 e=0 z=0  None .bss       DefaultGap$10515                                             */
static f32 DefaultGap_10515[3];

/* 80452B98-80452B9C 0004+00 s=1 e=0 z=0  None .sdata2    @10780                                                       */
SECTION_SDATA2 static f32 lit_10780 = -1.0f / 10.0f;

/* 80452B9C-80452BA0 0004+00 s=1 e=0 z=0  None .sdata2    @10781                                                       */
SECTION_SDATA2 static f32 lit_10781 = 10000.0f;

/* 80452BA0-80452BA4 0004+00 s=1 e=0 z=0  None .sdata2    @10782                                                       */
SECTION_SDATA2 static f32 lit_10782 = 0.25f;

/* 800956E4-80095E7C 0798+00 s=0 e=1 z=0  None .text      twoActor0EvCamera__9dCamera_cFv                              */
//	800956F4: 803621DC (_savegpr_29)
//	800956FC: 80450F8B (struct_80450F88)
//	80095708: 804528B8 (lit_5141)
//	8009570C: 8042542C (DefaultGap_10515)
//	80095710: 8042542C (DefaultGap_10515)
//	8009571C: 80009184 (__dt__4cXyzFv)
//	80095720: 80009184 (__dt__4cXyzFv)
//	80095724: 80425420 (lit_10516)
//	80095728: 80425420 (lit_10516)
//	8009572C: 80361C24 (__register_global_object)
//	80095734: 80450F8B (struct_80450F88)
//	80095748: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8009574C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095758: 800895F4 (getEvActor__9dCamera_cFPcPc)
//	80095764: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095768: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095774: 800895F4 (getEvActor__9dCamera_cFPcPc)
//	800957D0: 8042542C (DefaultGap_10515)
//	800957D4: 8042542C (DefaultGap_10515)
//	800957F4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800957F8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095804: 8008922C (getEvXyzData__9dCamera_cFP4cXyzPc4cXyz)
//	80095810: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095814: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8009581C: 80452B98 (lit_10780)
//	80095820: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8009582C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095830: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095838: 804528DC (lit_5346)
//	8009583C: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	80095848: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8009584C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095854: 804528DC (lit_5346)
//	80095858: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	80095864: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095868: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095870: 80452994 (lit_8198)
//	80095874: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	80095880: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095884: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8009588C: 80452B9C (lit_10781)
//	80095890: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8009589C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800958A0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800958A8: 80452998 (lit_8199)
//	800958AC: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	800958B8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800958BC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800958C4: 8045295C (lit_8184)
//	800958C8: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	800958D4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800958D8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800958E0: 804529B4 (lit_8206)
//	800958E4: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	800958F0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800958F4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800958FC: 80452984 (lit_8194)
//	80095900: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8009590C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095910: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8009591C: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	80095928: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8009592C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80095934: 8045295C (lit_8184)
//	80095938: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	80095948: 80271030 (Degree__7cSAngleCFv)
//	80095950: 80270FC8 (__ct__7cSAngleFf)
//	80095960: 80271030 (Degree__7cSAngleCFv)
//	80095968: 80270FC8 (__ct__7cSAngleFf)
//	80095980: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	80095990: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	800959A0: 80266B34 (__mi__4cXyzCFRC3Vec)
//	800959AC: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	800959B8: 80023590 (fpcSch_JudgeByID__FPvPv)
//	800959BC: 80023590 (fpcSch_JudgeByID__FPvPv)
//	800959C4: 800197F8 (fopAcIt_Judge__FPFPvPv_PvPv)
//	800959E0: 80023590 (fpcSch_JudgeByID__FPvPv)
//	800959E4: 80023590 (fpcSch_JudgeByID__FPvPv)
//	800959EC: 800197F8 (fopAcIt_Judge__FPFPvPv_PvPv)
//	80095A04: 804528B8 (lit_5141)
//	80095A14: 804528DC (lit_5346)
//	80095A38: 80452BA0 (lit_10782)
//	80095A3C: 80164E20 (relationalPos__9dCamera_cFP10fopAc_ac_cP10fopAc_ac_cP4cXyzf)
//	80095A68: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	80095A78: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	80095A88: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	80095A98: 80266B84 (__ml__4cXyzCFf)
//	80095AC0: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80095AD0: 80266B84 (__ml__4cXyzCFf)
//	80095AE0: 80347090 (PSVECAdd)
//	80095B18: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	80095B20: 802710E8 (Inv__7cSAngleCFv)
//	80095B2C: 80270F98 (__ct__7cSAngleFs)
//	80095B48: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	80095B70: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	80095B7C: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	80095B88: 80270FC8 (__ct__7cSAngleFf)
//	80095B94: 802710CC (Abs__7cSAngleCFv)
//	80095BBC: 80451188 (_0__7cSAngle)
//	80095BD0: 80270FC8 (__ct__7cSAngleFf)
//	80095BE0: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	80095BF8: 80270FC8 (__ct__7cSAngleFf)
//	80095C08: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	80095C20: 80270FC8 (__ct__7cSAngleFf)
//	80095C2C: 802710CC (Abs__7cSAngleCFv)
//	80095C54: 80451188 (_0__7cSAngle)
//	80095C68: 80270FC8 (__ct__7cSAngleFf)
//	80095C78: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	80095C90: 80270FC8 (__ct__7cSAngleFf)
//	80095CA0: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	80095CC4: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	80095CD0: 80270FC8 (__ct__7cSAngleFf)
//	80095CFC: 80270FC8 (__ct__7cSAngleFf)
//	80095D14: 80270FC8 (__ct__7cSAngleFf)
//	80095D40: 80270FC8 (__ct__7cSAngleFf)
//	80095D94: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	80095DA4: 80271264 (__ml__7cSAngleCFf)
//	80095DB0: 802711D4 (__apl__7cSAngleFRC7cSAngle)
//	80095DC0: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	80095DD0: 80271264 (__ml__7cSAngleCFf)
//	80095DDC: 802711D4 (__apl__7cSAngleFRC7cSAngle)
//	80095E0C: 80271A08 (Val__7cSGlobeFfRC7cSAngleRC7cSAngle)
//	80095E18: 80271AB4 (Xyz__7cSGlobeCFv)
//	80095E28: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	80095E68: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::twoActor0EvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/twoActor0EvCamera__9dCamera_cFv.s"
}
#pragma pop


/* 80095E7C-80095FD0 0154+00 s=0 e=1 z=0  None .text      peepHoleEvCamera__9dCamera_cFv                               */
//	80095EA8: 804061C0 (g_dComIfG_gameInfo)
//	80095EAC: 804061C0 (g_dComIfG_gameInfo)
//	80095EB4: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	80095EDC: 804061C0 (g_dComIfG_gameInfo)
//	80095EE0: 804061C0 (g_dComIfG_gameInfo)
//	80095EEC: 800432EC (convPId__14dEvt_control_cFUi)
//	80095F00: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	80095F24: 800883EC (xyzHorizontalDistance__8dCamMathFR4cXyzR4cXyz)
//	80095F28: 804529E4 (lit_8218)
//	80095F48: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80095F6C: 80266EF4 (normalize__4cXyzFv)
//	80095F78: 804529E4 (lit_8218)
//	80095F7C: 80266B84 (__ml__4cXyzCFf)
//	80095F8C: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	80095FB0: 800483C4 (setGoal__16dEvent_manager_cFP4cXyz)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::peepHoleEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/peepHoleEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80452BA4-80452BA8 0004+00 s=1 e=0 z=0  None .sdata2    @11068                                                       */
SECTION_SDATA2 static f32 lit_11068 = 245.0f;

/* 80095FD0-800965AC 05DC+00 s=0 e=1 z=0  None .text      digHoleEvCamera__9dCamera_cFv                                */
//	80095FE8: 803621D8 (_savegpr_28)
//	80096008: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8009600C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80096018: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	80096038: 80452B44 (lit_9798)
//	80096060: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	80096070: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8009607C: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	80096080: 80451190 (_90__7cSAngle)
//	80096088: 802710CC (Abs__7cSAngleCFv)
//	8009609C: 804528B8 (lit_5141)
//	800960A4: 8045296C (lit_8188)
//	800960AC: 80452974 (lit_8190)
//	800960C4: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	800960E0: 80452A00 (lit_8225)
//	800960EC: 8045293C (lit_7347)
//	800960F0: 80270FC8 (__ct__7cSAngleFf)
//	800960FC: 80270F98 (__ct__7cSAngleFs)
//	80096114: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	80096120: 80451188 (_0__7cSAngle)
//	8009612C: 8045291C (lit_7339)
//	80096134: 80452974 (lit_8190)
//	80096138: 80270FC8 (__ct__7cSAngleFf)
//	80096140: 802710E8 (Inv__7cSAngleCFv)
//	80096150: 802712F4 (__pl__FsRC7cSAngle)
//	8009615C: 80270F98 (__ct__7cSAngleFs)
//	80096170: 80271AB4 (Xyz__7cSGlobeCFv)
//	80096180: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	800961AC: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	800961B8: 8045295C (lit_8184)
//	80096220: 804528B8 (lit_5141)
//	8009622C: 80452BA4 (lit_11068)
//	80096244: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	80096260: 80452AB4 (lit_9406)
//	80096268: 80452974 (lit_8190)
//	80096270: 80452B40 (lit_9441)
//	80096284: 804529E4 (lit_8218)
//	8009628C: 80452950 (lit_8181)
//	80096294: 80452984 (lit_8194)
//	800962A8: 80452A3C (lit_8735)
//	800962B0: 8045294C (lit_8180)
//	800962B8: 8045293C (lit_7347)
//	800962CC: 80451018 (m_midnaActor__9daPy_py_c)
//	800962E4: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	800962F8: 80088384 (xyzRotateY__8dCamMathFR4cXyz7cSAngle)
//	80096320: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	8009634C: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	8009639C: 8008FA94 (func_8008FA94)
//	800963C4: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	800963E8: 800883EC (xyzHorizontalDistance__8dCamMathFR4cXyzR4cXyz)
//	800963EC: 80452928 (lit_7342)
//	8009642C: 80271030 (Degree__7cSAngleCFv)
//	80096430: 80452A00 (lit_8225)
//	8009644C: 80452968 (lit_8187)
//	80096460: 80270FC8 (__ct__7cSAngleFf)
//	8009646C: 80270F98 (__ct__7cSAngleFs)
//	8009647C: 8045295C (lit_8184)
//	8009649C: 80271AB4 (Xyz__7cSGlobeCFv)
//	800964AC: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	800964CC: 804061C0 (g_dComIfG_gameInfo)
//	800964D0: 804061C0 (g_dComIfG_gameInfo)
//	800964D8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800964DC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800964E4: 80368994 (strcmp)
//	80096570: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8009657C: 80271A70 (Val__7cSGlobeFRC4cXyz)
//	80096580: 8045295C (lit_8184)
//	80096598: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::digHoleEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/digHoleEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80452BA8-80452BAC 0004+00 s=1 e=0 z=0  None .sdata2    @11415                                                       */
SECTION_SDATA2 static f32 lit_11415 = 280.0f;

/* 80452BAC-80452BB0 0004+00 s=1 e=0 z=0  None .sdata2    @11416                                                       */
SECTION_SDATA2 static f32 lit_11416 = 4.0f / 5.0f;

/* 80452BB0-80452BB4 0004+00 s=1 e=0 z=0  None .sdata2    @11417                                                       */
SECTION_SDATA2 static f32 lit_11417 = -1.0f;

/* 80452BB4-80452BB8 0004+00 s=1 e=0 z=0  None .sdata2    @11418                                                       */
SECTION_SDATA2 static f32 lit_11418 = 1.0f / 5.0f;

/* 80452BB8-80452BBC 0004+00 s=1 e=0 z=0  None .sdata2    @11419                                                       */
SECTION_SDATA2 static f32 lit_11419 = -2.5f;

/* 80452BBC-80452BC0 0004+00 s=1 e=0 z=0  None .sdata2    @11420                                                       */
SECTION_SDATA2 static f32 lit_11420 = 4.5f;

/* 80452BC0-80452BC4 0004+00 s=1 e=0 z=0  None .sdata2    @11421                                                       */
SECTION_SDATA2 static f32 lit_11421 = 0.75f;

/* 80452BC4-80452BC8 0004+00 s=1 e=0 z=0  None .sdata2    @11422                                                       */
SECTION_SDATA2 static f32 lit_11422 = 2.0f / 5.0f;

/* 800965AC-80096EDC 0930+00 s=0 e=1 z=0  None .text      hintTalkEvCamera__9dCamera_cFv                               */
//	800965CC: 803621C8 (_savegpr_24)
//	800965E4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800965E8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800965F4: 800895F4 (getEvActor__9dCamera_cFPcPc)
//	80096600: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80096604: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80096610: 800895F4 (getEvActor__9dCamera_cFPcPc)
//	80096620: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80096624: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8009662C: 804529F8 (lit_8223)
//	80096630: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8009663C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80096640: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80096648: 80452BA8 (lit_11415)
//	8009664C: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	80096658: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8009665C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80096664: 80452A6C (lit_8747)
//	80096668: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	80096674: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80096678: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80096680: 8008908C (getEvIntData__9dCamera_cFPiPci)
//	800966B8: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	800966E0: 8009771C (attentionPos__9dCamera_cFP10fopAc_ac_c)
//	80096760: 8009775C (positionOf__9dCamera_cFP10fopAc_ac_c)
//	80096790: 80266B34 (__mi__4cXyzCFRC3Vec)
//	800967B4: 80266CE4 (norm__4cXyzCFv)
//	800967C0: 80452968 (lit_8187)
//	800967C4: 80266B84 (__ml__4cXyzCFf)
//	800967D4: 80347090 (PSVECAdd)
//	80096814: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80096838: 80271A70 (Val__7cSGlobeFRC4cXyz)
//	8009683C: 804061C0 (g_dComIfG_gameInfo)
//	80096840: 804061C0 (g_dComIfG_gameInfo)
//	80096854: 80452940 (lit_7357)
//	80096858: 80270FC8 (__ct__7cSAngleFf)
//	80096864: 80270F98 (__ct__7cSAngleFs)
//	80096878: 80452BAC (lit_11416)
//	8009687C: 80266B84 (__ml__4cXyzCFf)
//	8009688C: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	800968C0: 8037AABC (lit_11087)
//	800968C4: 8037AABC (lit_11087)
//	80096944: 80270F68 (__ct__7cSAngleFRC7cSAngle)
//	800969F4: 80097738 (directionOf__9dCamera_cFP10fopAc_ac_c)
//	80096A0C: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	80096A14: 80451188 (_0__7cSAngle)
//	80096A30: 80452BB0 (lit_11417)
//	80096A38: 804528DC (lit_5346)
//	80096A4C: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	80096A54: 80451188 (_0__7cSAngle)
//	80096A70: 80452BB0 (lit_11417)
//	80096A78: 804528DC (lit_5346)
//	80096A80: 804529B4 (lit_8206)
//	80096A84: 80270FC8 (__ct__7cSAngleFf)
//	80096A94: 80452BC0 (lit_11421)
//	80096AAC: 80270FC8 (__ct__7cSAngleFf)
//	80096ABC: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	80096AC8: 80270F98 (__ct__7cSAngleFs)
//	80096AD8: 80271120 (Cos__7cSAngleCFv)
//	80096AE4: 80271264 (__ml__7cSAngleCFf)
//	80096AF0: 80452BB4 (lit_11418)
//	80096AF4: 80271264 (__ml__7cSAngleCFf)
//	80096B04: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	80096B10: 80270F98 (__ct__7cSAngleFs)
//	80096B24: 80452BB4 (lit_11418)
//	80096B28: 80266B84 (__ml__4cXyzCFf)
//	80096B30: 80271120 (Cos__7cSAngleCFv)
//	80096B3C: 80266B84 (__ml__4cXyzCFf)
//	80096B4C: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80096B70: 80271AB4 (Xyz__7cSGlobeCFv)
//	80096B80: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	80096BAC: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	80096BC8: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	80096BE4: 80165AF0 (lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl)
//	80096C34: 8008FA94 (func_8008FA94)
//	80096C84: 8008FA94 (func_8008FA94)
//	80096CC0: 80452BB8 (lit_11419)
//	80096CC8: 80452BBC (lit_11420)
//	80096CCC: 80270FC8 (__ct__7cSAngleFf)
//	80096CD8: 802711D4 (__apl__7cSAngleFRC7cSAngle)
//	80096D24: 804528E8 (lit_5846)
//	80096D40: 804528F8 (lit_5962)
//	80096D5C: 80452BC4 (lit_11422)
//	80096D60: 8008813C (rationalBezierRatio__8dCamMathFff)
//	80096D74: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80096D84: 80266B84 (__ml__4cXyzCFf)
//	80096D94: 80347090 (PSVECAdd)
//	80096DC0: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	80096DD0: 80271264 (__ml__7cSAngleCFf)
//	80096DE0: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	80096DEC: 80270F98 (__ct__7cSAngleFs)
//	80096E08: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	80096E18: 80271264 (__ml__7cSAngleCFf)
//	80096E28: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	80096E34: 80270F98 (__ct__7cSAngleFs)
//	80096E48: 80271AB4 (Xyz__7cSGlobeCFv)
//	80096E58: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	80096EC8: 80362214 (_restgpr_24)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::hintTalkEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/hintTalkEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* 80096EDC-80097694 07B8+00 s=0 e=1 z=0  None .text      bspTransEvCamera__9dCamera_cFv                               */
//	80096EEC: 803621DC (_savegpr_29)
//	80096EF8: 8037AAE4 (lit_11437)
//	80096EFC: 8037AAE4 (lit_11437)
//	80096F38: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80096F3C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80096F40: 80088CB0 (getEvIntData__9dCamera_cFPiPc)
//	80096F5C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80096F60: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80096F68: 80088E58 (getEvFloatListData__9dCamera_cFPPfPc)
//	80096F80: 80097878 (Init__14d2DBSplinePathFll)
//	80096F98: 80097878 (Init__14d2DBSplinePathFll)
//	80096FA8: 80097904 (Step__14d2DBSplinePathFv)
//	80096FB8: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80096FBC: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80096FC4: 80368B2C (strcpy)
//	80096FD0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80096FD4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80096FDC: 80088E58 (getEvFloatListData__9dCamera_cFPPfPc)
//	80096FF4: 80097878 (Init__14d2DBSplinePathFll)
//	80096FFC: 80097904 (Step__14d2DBSplinePathFv)
//	80097008: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8009700C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80097018: 8008933C (getEvStringData__9dCamera_cFPcPcPc)
//	80097028: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8009702C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80097034: 80368B2C (strcpy)
//	80097040: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80097044: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8009704C: 80088E58 (getEvFloatListData__9dCamera_cFPPfPc)
//	80097064: 80097878 (Init__14d2DBSplinePathFll)
//	8009706C: 80097904 (Step__14d2DBSplinePathFv)
//	80097078: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8009707C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80097088: 8008933C (getEvStringData__9dCamera_cFPcPcPc)
//	80097098: 8037AAF4 (d_d_ev_camera__stringBase0)
//	8009709C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800970A4: 800894C4 (getEvActor__9dCamera_cFPc)
//	800970C0: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800970C4: 8037AAF4 (d_d_ev_camera__stringBase0)
//	800970D0: 8008933C (getEvStringData__9dCamera_cFPcPcPc)
//	80097110: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80097114: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80097120: 8008922C (getEvXyzData__9dCamera_cFP4cXyzPc4cXyz)
//	80097144: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80097148: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80097154: 8008922C (getEvXyzData__9dCamera_cFP4cXyzPc4cXyz)
//	80097160: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80097164: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80097170: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8009717C: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80097180: 8037AAF4 (d_d_ev_camera__stringBase0)
//	80097188: 804528DC (lit_5346)
//	8009718C: 80089154 (getEvFloatData__9dCamera_cFPfPcf)
//	8009726C: 80023590 (fpcSch_JudgeByID__FPvPv)
//	80097270: 80023590 (fpcSch_JudgeByID__FPvPv)
//	80097278: 800197F8 (fopAcIt_Judge__FPFPvPv_PvPv)
//	800972DC: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	8009734C: 80164D6C (relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz)
//	800973BC: 80097904 (Step__14d2DBSplinePathFv)
//	800973C8: 80097B20 (Calc__14d2DBSplinePathFPf)
//	800973E0: 80097904 (Step__14d2DBSplinePathFv)
//	800973EC: 80097B20 (Calc__14d2DBSplinePathFPf)
//	80097404: 80097904 (Step__14d2DBSplinePathFv)
//	80097410: 80097B20 (Calc__14d2DBSplinePathFPf)
//	80097488: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80097498: 80266B84 (__ml__4cXyzCFf)
//	800974A8: 80347090 (PSVECAdd)
//	800974B8: 80266B34 (__mi__4cXyzCFRC3Vec)
//	800974C4: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	800974D4: 80266B34 (__mi__4cXyzCFRC3Vec)
//	800974E0: 80271880 (__ct__7cSGlobeFRC4cXyz)
//	8009751C: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	80097538: 80271264 (__ml__7cSAngleCFf)
//	80097548: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	80097554: 80270F98 (__ct__7cSAngleFs)
//	80097570: 802711A4 (__mi__7cSAngleCFRC7cSAngle)
//	8009758C: 80271264 (__ml__7cSAngleCFf)
//	8009759C: 80271174 (__pl__7cSAngleCFRC7cSAngle)
//	800975A8: 80270F98 (__ct__7cSAngleFs)
//	800975BC: 80271AB4 (Xyz__7cSGlobeCFv)
//	800975CC: 80266AE4 (__pl__4cXyzCFRC3Vec)
//	800975F4: 80266B34 (__mi__4cXyzCFRC3Vec)
//	80097604: 80266B84 (__ml__4cXyzCFf)
//	80097614: 80347090 (PSVECAdd)
//	80097660: 80266B34 (__mi__4cXyzCFRC3Vec)
//	8009766C: 80271A70 (Val__7cSGlobeFRC4cXyz)
//	80097680: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dCamera_c::bspTransEvCamera() {
	nofralloc
#include "asm/d/d_ev_camera/bspTransEvCamera__9dCamera_cFv.s"
}
#pragma pop


/* 80097694-8009769C 0008+00 s=0 e=1 z=0  None .text      portalWarpEvCamera__9dCamera_cFv                             */
// False False
//  bool False
bool dCamera_c::portalWarpEvCamera() {
	return true;
}


/* 8009769C-8009771C 0080+00 s=0 e=0 z=0  None .text      __sinit_d_ev_camera_cpp                                      */
//	800976AC: 804253A8 (lit_4202)
//	800976B0: 804253A8 (lit_4202)
//	800976B4: 804528B8 (lit_5141)
//	800976BC: 8045296C (lit_8188)
//	800976C8: 80452934 (lit_7345)
//	800976D0: 80009184 (__dt__4cXyzFv)
//	800976D4: 80009184 (__dt__4cXyzFv)
//	800976DC: 80361C24 (__register_global_object)
//	800976E0: 804528B8 (lit_5141)
//	800976F0: 80452934 (lit_7345)
//	800976F8: 80009184 (__dt__4cXyzFv)
//	800976FC: 80009184 (__dt__4cXyzFv)
//	80097704: 80361C24 (__register_global_object)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void __sinit_d_ev_camera_cpp() {
	nofralloc
#include "asm/d/d_ev_camera/__sinit_d_ev_camera_cpp.s"
}
#pragma pop

#pragma push
#pragma force_active on
#pragma section ".ctors$15"
__declspec(section ".ctors$15") void* const _ctors_8009769C = (void*)__sinit_d_ev_camera_cpp;
#pragma pop


/* 8009771C-80097738 001C+00 s=11 e=22 z=0  None .text      attentionPos__9dCamera_cFP10fopAc_ac_c                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
asm void dCamera_c::attentionPos(fopAc_ac_c* param_0) {
	nofralloc
#include "asm/d/d_ev_camera/attentionPos__9dCamera_cFP10fopAc_ac_c.s"
}
#pragma pop


/* 80097738-8009775C 0024+00 s=10 e=10 z=0  None .text      directionOf__9dCamera_cFP10fopAc_ac_c                        */
//	80097748: 80270F98 (__ct__7cSAngleFs)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
asm void dCamera_c::directionOf(fopAc_ac_c* param_0) {
	nofralloc
#include "asm/d/d_ev_camera/directionOf__9dCamera_cFP10fopAc_ac_c.s"
}
#pragma pop


/* 8009775C-80097778 001C+00 s=9 e=20 z=0  None .text      positionOf__9dCamera_cFP10fopAc_ac_c                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
asm void dCamera_c::positionOf(fopAc_ac_c* param_0) {
	nofralloc
#include "asm/d/d_ev_camera/positionOf__9dCamera_cFP10fopAc_ac_c.s"
}
#pragma pop


/* 80097778-8009778C 0014+00 s=1 e=4 z=0  None .text      setFlag__9dCamera_cFUl                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  u32 False
asm void dCamera_c::setFlag(u32 param_0) {
	nofralloc
#include "asm/d/d_ev_camera/setFlag__9dCamera_cFUl.s"
}
#pragma pop


/* 8009778C-800977A8 001C+00 s=1 e=2 z=0  None .text      eyePos__9dCamera_cFP10fopAc_ac_c                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  fopAc_ac_c* False
// 	 fopAc_ac_c False
asm void dCamera_c::eyePos(fopAc_ac_c* param_0) {
	nofralloc
#include "asm/d/d_ev_camera/eyePos__9dCamera_cFP10fopAc_ac_c.s"
}
#pragma pop


/* 800977A8-800977B4 000C+00 s=1 e=0 z=0  None .text      checkNoDraw__9daMidna_cCFv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void daMidna_c::checkNoDraw() const {
	nofralloc
#include "asm/d/d_ev_camera/checkNoDraw__9daMidna_cCFv.s"
}
#pragma pop


/* 800977B4-800977C0 000C+00 s=1 e=1 z=0  None .text      checkMidnaRide__9daPy_py_cCFv                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void daPy_py_c::checkMidnaRide() const {
	nofralloc
#include "asm/d/d_ev_camera/checkMidnaRide__9daPy_py_cCFv.s"
}
#pragma pop


/* 800977C0-800977D8 0018+00 s=1 e=1 z=0  None .text      fopAcM_GetID__FPCv                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  void const* False
// 	 void const False
// 		 void False
asm void fopAcM_GetID(void const* param_0) {
	nofralloc
#include "asm/d/d_ev_camera/fopAcM_GetID__FPCv.s"
}
#pragma pop


/* 800977D8-800977F4 001C+00 s=5 e=9 z=0  None .text      __as__4cXyzFRC4cXyz                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
asm void cXyz::operator=(cXyz const& param_0) {
	nofralloc
#include "asm/d/d_ev_camera/__as__4cXyzFRC4cXyz.s"
}
#pragma pop


/* 800977F4-80097810 001C+00 s=5 e=9 z=0  None .text      __ct__4cXyzFRC4cXyz                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
asm cXyz::cXyz(cXyz const& param_0) {
	nofralloc
#include "asm/d/d_ev_camera/__ct__4cXyzFRC4cXyz.s"
}
#pragma pop


/* 80097810-8009784C 003C+00 s=1 e=0 z=0  None .text      __dt__Q29dCamera_c26@class$5983d_ev_camera_cppFv             */
//	80097830: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_80097810() {
	nofralloc
#include "asm/d/d_ev_camera/func_80097810.s"
}
#pragma pop


/* 8009784C-80097850 0004+00 s=1 e=0 z=0  None .text      __ct__Q29dCamera_c26@class$5983d_ev_camera_cppFv             */
// True False
//  void False
extern "C" static void func_8009784C() {
	/* empty function */
}


/* 80097850-80097858 0008+00 s=0 e=1 z=0  None .text      checkCanoeRide__9daPy_py_cCFv                                */
// False False
//  bool False
bool daPy_py_c::checkCanoeRide() const {
	return false;
}


/* 80097858-80097860 0008+00 s=0 e=1 z=0  None .text      checkBoardRide__9daPy_py_cCFv                                */
// False False
//  bool False
bool daPy_py_c::checkBoardRide() const {
	return false;
}


/* 80097860-80097868 0008+00 s=0 e=1 z=0  None .text      checkSpinnerRide__9daPy_py_cCFv                              */
// False False
//  bool False
bool daPy_py_c::checkSpinnerRide() const {
	return false;
}


/* 80097868-80097870 0008+00 s=0 e=1 z=0  None .text      checkBoarRide__9daPy_py_cCFv                                 */
// False False
//  bool False
bool daPy_py_c::checkBoarRide() const {
	return false;
}


/* 80097870-80097878 0008+00 s=0 e=1 z=0  None .text      getShadowTalkAtnPos__9daAlink_cFv                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void daAlink_c::getShadowTalkAtnPos() {
	nofralloc
#include "asm/d/d_ev_camera/getShadowTalkAtnPos__9daAlink_cFv.s"
}
#pragma pop


