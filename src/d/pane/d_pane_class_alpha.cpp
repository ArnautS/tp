// 
// Generated By: dol2asm
// Translation Unit: d/pane/d_pane_class_alpha
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "d/pane/d_pane_class_alpha.h"

// 
// Types:
// 

struct JKRHeap {
	/* 802CE4D4 */ // False False
//  u32 False
//  int False
void alloc(u32, int);
	/* 802CE548 */ // False False
//  void* False
// 	 void False
void free(void*);
};

struct JKRExpHeap {
};

struct J2DScreen {
};

struct J2DPane {
	/* 802F7A8C */ // False False
void getFirstChildPane();
	/* 802F7AC4 */ // False False
void getNextChildPane();
};

struct CPaneMgrAlphaMorf {
	/* 80255C68 */ // False False
//  J2DScreen* False
// 	 J2DScreen False
//  u64 False
//  u8 False
//  JKRExpHeap* False
// 	 JKRExpHeap False
CPaneMgrAlphaMorf(J2DScreen*, u64, u8, JKRExpHeap*);
	/* 80255CAC */ // True False
~CPaneMgrAlphaMorf();
	/* 80255D48 */ // True False
void initiateAlphaMorf();
	/* 80255DD0 */ // False False
void setBackupAlpha();
	/* 80255E28 */ // False False
//  f32 False
void setAlphaMorfRate(f32);
	/* 80255E98 */ // True False
//  J2DPane* False
// 	 J2DPane False
void childPaneBackupAlpha(J2DPane*);
	/* 80255F28 */ // True False
//  J2DPane* False
// 	 J2DPane False
//  f32 False
void childPaneSetAlphaMorf(J2DPane*, f32);
};

struct CPaneMgrAlpha {
	/* 802553EC */ // False False
CPaneMgrAlpha();
	/* 802553FC */ // False False
//  J2DScreen* False
// 	 J2DScreen False
//  u64 False
//  u8 False
//  JKRExpHeap* False
// 	 JKRExpHeap False
CPaneMgrAlpha(J2DScreen*, u64, u8, JKRExpHeap*);
	/* 8025546C */ // False False
~CPaneMgrAlpha();
	/* 802554E0 */ // True False
//  J2DPane* False
// 	 J2DPane False
//  JKRExpHeap* False
// 	 JKRExpHeap False
void initiateAlpha(J2DPane*, JKRExpHeap*);
	/* 802555C8 */ // False False
void show();
	/* 80255608 */ // False False
void hide();
	/* 8025564C */ // False False
void isVisible();
	/* 80255658 */ // False False
//  s16 False
//  s16 False
//  u8 False
void rateCalc(s16, s16, u8);
	/* 80255758 */ // True False
//  u8 False
void setAlpha(u8);
	/* 802557D0 */ // False False
//  f32 False
void setAlphaRate(f32);
	/* 80255828 */ // False False
void getAlphaRate();
	/* 80255878 */ // False False
//  s16 False
//  u8 False
//  u8 False
//  u8 False
void alphaAnime(s16, u8, u8, u8);
	/* 80255964 */ // False False
//  s16 False
//  u8 False
//  u8 False
//  u8 False
void alphaAnimeLoop(s16, u8, u8, u8);
	/* 80255A60 */ // False False
//  J2DPane* False
// 	 J2DPane False
void childPaneCount(J2DPane*);
	/* 80255ACC */ // False False
//  J2DPane* False
// 	 J2DPane False
void childPaneGetAlpha(J2DPane*);
	/* 80255B5C */ // False False
//  J2DPane* False
// 	 J2DPane False
//  u8 False
void childPaneSetAlpha(J2DPane*, u8);
};

// 
// Forward References:
// 


// False False
extern "C" void __ct__13CPaneMgrAlphaFv();
// False False
//  J2DScreen* False
// 	 J2DScreen False
//  u64 False
//  u8 False
//  JKRExpHeap* False
// 	 JKRExpHeap False
extern "C" void __ct__13CPaneMgrAlphaFP9J2DScreenUxUcP10JKRExpHeap();
// False False
extern "C" void __dt__13CPaneMgrAlphaFv();
// True False
//  J2DPane* False
// 	 J2DPane False
//  JKRExpHeap* False
// 	 JKRExpHeap False
extern "C" void initiateAlpha__13CPaneMgrAlphaFP7J2DPaneP10JKRExpHeap();
// False False
extern "C" void show__13CPaneMgrAlphaFv();
// False False
extern "C" void hide__13CPaneMgrAlphaFv();
// False False
extern "C" void isVisible__13CPaneMgrAlphaFv();
// False False
//  s16 False
//  s16 False
//  u8 False
extern "C" void rateCalc__13CPaneMgrAlphaFssUc();
// True False
//  u8 False
extern "C" void setAlpha__13CPaneMgrAlphaFUc();
// False False
//  f32 False
extern "C" void setAlphaRate__13CPaneMgrAlphaFf();
// False False
extern "C" void getAlphaRate__13CPaneMgrAlphaFv();
// False False
//  s16 False
//  u8 False
//  u8 False
//  u8 False
extern "C" void alphaAnime__13CPaneMgrAlphaFsUcUcUc();
// False False
//  s16 False
//  u8 False
//  u8 False
//  u8 False
extern "C" void alphaAnimeLoop__13CPaneMgrAlphaFsUcUcUc();
// False False
//  J2DPane* False
// 	 J2DPane False
extern "C" void childPaneCount__13CPaneMgrAlphaFP7J2DPane();
// False False
//  J2DPane* False
// 	 J2DPane False
extern "C" void childPaneGetAlpha__13CPaneMgrAlphaFP7J2DPane();
// False False
//  J2DPane* False
// 	 J2DPane False
//  u8 False
extern "C" void childPaneSetAlpha__13CPaneMgrAlphaFP7J2DPaneUc();
// False False
//  J2DScreen* False
// 	 J2DScreen False
//  u64 False
//  u8 False
//  JKRExpHeap* False
// 	 JKRExpHeap False
extern "C" void __ct__17CPaneMgrAlphaMorfFP9J2DScreenUxUcP10JKRExpHeap();
// True False
extern "C" void __dt__17CPaneMgrAlphaMorfFv();
// True False
extern "C" void initiateAlphaMorf__17CPaneMgrAlphaMorfFv();
// False False
extern "C" void setBackupAlpha__17CPaneMgrAlphaMorfFv();
// False False
//  f32 False
extern "C" void setAlphaMorfRate__17CPaneMgrAlphaMorfFf();
// True False
//  J2DPane* False
// 	 J2DPane False
extern "C" void childPaneBackupAlpha__17CPaneMgrAlphaMorfFP7J2DPane();
// True False
//  J2DPane* False
// 	 J2DPane False
//  f32 False
extern "C" void childPaneSetAlphaMorf__17CPaneMgrAlphaMorfFP7J2DPanef();
extern "C" extern void* __vt__17CPaneMgrAlphaMorf[4];
extern "C" extern void* __vt__13CPaneMgrAlpha[4];

// 
// External References:
// 

// False False
void mDoExt_getCurrentHeap();
// False False
//  void False
//  void* False
// 	 void False
void operator delete(void*);

// False False
extern "C" void mDoExt_getCurrentHeap__Fv();
// False False
//  u32 False
//  int False
extern "C" void alloc__7JKRHeapFUli();
// False False
//  void* False
// 	 void False
extern "C" void free__7JKRHeapFPv();
// False False
//  void False
//  void* False
// 	 void False
extern "C" void __dl__FPv();
// False False
extern "C" void getFirstChildPane__7J2DPaneFv();
// False False
extern "C" void getNextChildPane__7J2DPaneFv();
// False False
extern "C" void _savegpr_28();
// False False
extern "C" void _savegpr_29();
// False False
extern "C" void _restgpr_28();
// False False
extern "C" void _restgpr_29();

// 
// Declarations:
// 

/* ############################################################################################## */
/* 803C2E18-803C2E28 0010+00 s=2 e=0 z=0  None .data      __vt__17CPaneMgrAlphaMorf                                    */
SECTION_DATA void* __vt__17CPaneMgrAlphaMorf[4] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__17CPaneMgrAlphaMorfFv,
	(void*)setAlpha__13CPaneMgrAlphaFUc,
};

/* 803C2E28-803C2E38 0010+00 s=3 e=0 z=0  None .data      __vt__13CPaneMgrAlpha                                        */
SECTION_DATA void* __vt__13CPaneMgrAlpha[4] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__13CPaneMgrAlphaFv,
	(void*)setAlpha__13CPaneMgrAlphaFUc,
};

/* 802553EC-802553FC 0010+00 s=0 e=2 z=0  None .text      __ct__13CPaneMgrAlphaFv                                      */
//	802553EC: 803C2E28 (__vt__13CPaneMgrAlpha)
//	802553F0: 803C2E28 (__vt__13CPaneMgrAlpha)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm CPaneMgrAlpha::CPaneMgrAlpha() {
	nofralloc
#include "asm/d/pane/d_pane_class_alpha/__ct__13CPaneMgrAlphaFv.s"
}
#pragma pop


/* 802553FC-8025546C 0070+00 s=1 e=9 z=1  None .text      __ct__13CPaneMgrAlphaFP9J2DScreenUxUcP10JKRExpHeap           */
//	8025540C: 803621DC (_savegpr_29)
//	8025541C: 803C2E28 (__vt__13CPaneMgrAlpha)
//	80255420: 803C2E28 (__vt__13CPaneMgrAlpha)
//	8025544C: 802554E0 (initiateAlpha__13CPaneMgrAlphaFP7J2DPaneP10JKRExpHeap)
//	80255458: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  J2DScreen* False
// 	 J2DScreen False
//  u64 False
//  u8 False
//  JKRExpHeap* False
// 	 JKRExpHeap False
asm CPaneMgrAlpha::CPaneMgrAlpha(J2DScreen* param_0, u64 param_1, u8 param_2, JKRExpHeap* param_3) {
	nofralloc
#include "asm/d/pane/d_pane_class_alpha/__ct__13CPaneMgrAlphaFP9J2DScreenUxUcP10JKRExpHeap.s"
}
#pragma pop


/* 8025546C-802554E0 0074+00 s=2 e=1 z=0  None .text      __dt__13CPaneMgrAlphaFv                                      */
//	8025548C: 803C2E28 (__vt__13CPaneMgrAlpha)
//	80255490: 803C2E28 (__vt__13CPaneMgrAlpha)
//	802554A8: 802CE548 (free__7JKRHeapFPv)
//	802554C0: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm CPaneMgrAlpha::~CPaneMgrAlpha() {
	nofralloc
#include "asm/d/pane/d_pane_class_alpha/__dt__13CPaneMgrAlphaFv.s"
}
#pragma pop


/* 802554E0-802555C8 00E8+00 s=1 e=0 z=0  None .text      initiateAlpha__13CPaneMgrAlphaFP7J2DPaneP10JKRExpHeap        */
//	80255510: 8000F1EC (mDoExt_getCurrentHeap__Fv)
//	80255538: 802F7A8C (getFirstChildPane__7J2DPaneFv)
//	80255544: 80255A60 (childPaneCount__13CPaneMgrAlphaFP7J2DPane)
//	80255560: 802CE4D4 (alloc__7JKRHeapFUli)
//	80255574: 802F7A8C (getFirstChildPane__7J2DPaneFv)
//	80255580: 80255ACC (childPaneGetAlpha__13CPaneMgrAlphaFP7J2DPane)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  J2DPane* False
// 	 J2DPane False
//  JKRExpHeap* False
// 	 JKRExpHeap False
asm void CPaneMgrAlpha::initiateAlpha(J2DPane* param_0, JKRExpHeap* param_1) {
	nofralloc
#include "asm/d/pane/d_pane_class_alpha/initiateAlpha__13CPaneMgrAlphaFP7J2DPaneP10JKRExpHeap.s"
}
#pragma pop


/* 802555C8-80255608 0040+00 s=0 e=40 z=2  None .text      show__13CPaneMgrAlphaFv                                      */
//	802555DC: 8025564C (isVisible__13CPaneMgrAlphaFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void CPaneMgrAlpha::show() {
	nofralloc
#include "asm/d/pane/d_pane_class_alpha/show__13CPaneMgrAlphaFv.s"
}
#pragma pop


/* 80255608-8025564C 0044+00 s=0 e=46 z=2  None .text      hide__13CPaneMgrAlphaFv                                      */
//	8025561C: 8025564C (isVisible__13CPaneMgrAlphaFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void CPaneMgrAlpha::hide() {
	nofralloc
#include "asm/d/pane/d_pane_class_alpha/hide__13CPaneMgrAlphaFv.s"
}
#pragma pop


/* 8025564C-80255658 000C+00 s=2 e=12 z=0  None .text      isVisible__13CPaneMgrAlphaFv                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void CPaneMgrAlpha::isVisible() {
	nofralloc
#include "asm/d/pane/d_pane_class_alpha/isVisible__13CPaneMgrAlphaFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454EB8-80454EC0 0004+04 s=1 e=0 z=0  None .sdata2    @3692                                                        */
SECTION_SDATA2 static f32 lit_3692[1 + 1 /* padding */] = {
	1.0f,
	/* padding */
	0.0f,
};

/* 80454EC0-80454EC8 0008+00 s=3 e=0 z=0  None .sdata2    @3694                                                        */
SECTION_SDATA2 static f64 lit_3694 = 4503601774854144.0 /* cast s32 to float */;

/* 80255658-80255758 0100+00 s=2 e=2 z=0  None .text      rateCalc__13CPaneMgrAlphaFssUc                               */
//	8025566C: 80454EB8 (lit_3692)
//	80255694: 80454EC0 (lit_3694)
//	802556D8: 80454EC0 (lit_3694)
//	80255718: 80454EC0 (lit_3694)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  s16 False
//  s16 False
//  u8 False
asm void CPaneMgrAlpha::rateCalc(s16 param_0, s16 param_1, u8 param_2) {
	nofralloc
#include "asm/d/pane/d_pane_class_alpha/rateCalc__13CPaneMgrAlphaFssUc.s"
}
#pragma pop


/* 80255758-802557D0 0078+00 s=2 e=0 z=0  None .text      setAlpha__13CPaneMgrAlphaFUc                                 */
//	8025578C: 802F7A8C (getFirstChildPane__7J2DPaneFv)
//	8025579C: 80255B5C (childPaneSetAlpha__13CPaneMgrAlphaFP7J2DPaneUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u8 False
asm void CPaneMgrAlpha::setAlpha(u8 param_0) {
	nofralloc
#include "asm/d/pane/d_pane_class_alpha/setAlpha__13CPaneMgrAlphaFUc.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454EC8-80454ED0 0008+00 s=6 e=0 z=0  None .sdata2    @3708                                                        */
SECTION_SDATA2 static f64 lit_3708 = 4503599627370496.0 /* cast u32 to float */;

/* 802557D0-80255828 0058+00 s=1 e=173 z=5  None .text      setAlphaRate__13CPaneMgrAlphaFf                              */
//	802557E0: 80454EC8 (lit_3708)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  f32 False
asm void CPaneMgrAlpha::setAlphaRate(f32 param_0) {
	nofralloc
#include "asm/d/pane/d_pane_class_alpha/setAlphaRate__13CPaneMgrAlphaFf.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454ED0-80454ED8 0004+04 s=2 e=0 z=0  None .sdata2    @3721                                                        */
SECTION_SDATA2 static f32 lit_3721[1 + 1 /* padding */] = {
	0.0f,
	/* padding */
	0.0f,
};

/* 80255828-80255878 0050+00 s=0 e=107 z=2  None .text      getAlphaRate__13CPaneMgrAlphaFv                              */
//	8025582C: 80454ED0 (lit_3721)
//	80255844: 80454EC8 (lit_3708)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void CPaneMgrAlpha::getAlphaRate() {
	nofralloc
#include "asm/d/pane/d_pane_class_alpha/getAlphaRate__13CPaneMgrAlphaFv.s"
}
#pragma pop


/* 80255878-80255964 00EC+00 s=0 e=31 z=1  None .text      alphaAnime__13CPaneMgrAlphaFsUcUcUc                          */
//	80255888: 803621DC (_savegpr_29)
//	802558BC: 80255658 (rateCalc__13CPaneMgrAlphaFssUc)
//	802558C8: 80454EC8 (lit_3708)
//	802558E8: 80454EC0 (lit_3694)
//	80255950: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  s16 False
//  u8 False
//  u8 False
//  u8 False
asm void CPaneMgrAlpha::alphaAnime(s16 param_0, u8 param_1, u8 param_2, u8 param_3) {
	nofralloc
#include "asm/d/pane/d_pane_class_alpha/alphaAnime__13CPaneMgrAlphaFsUcUcUc.s"
}
#pragma pop


/* 80255964-80255A60 00FC+00 s=0 e=0 z=1  None .text      alphaAnimeLoop__13CPaneMgrAlphaFsUcUcUc                      */
//	80255974: 803621D8 (_savegpr_28)
//	802559DC: 80255658 (rateCalc__13CPaneMgrAlphaFssUc)
//	802559E8: 80454EC8 (lit_3708)
//	80255A08: 80454EC0 (lit_3694)
//	80255A4C: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  s16 False
//  u8 False
//  u8 False
//  u8 False
asm void CPaneMgrAlpha::alphaAnimeLoop(s16 param_0, u8 param_1, u8 param_2, u8 param_3) {
	nofralloc
#include "asm/d/pane/d_pane_class_alpha/alphaAnimeLoop__13CPaneMgrAlphaFsUcUcUc.s"
}
#pragma pop


/* 80255A60-80255ACC 006C+00 s=1 e=1 z=0  None .text      childPaneCount__13CPaneMgrAlphaFP7J2DPane                    */
//	80255A90: 802F7A8C (getFirstChildPane__7J2DPaneFv)
//	80255AA4: 802F7AC4 (getNextChildPane__7J2DPaneFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  J2DPane* False
// 	 J2DPane False
asm void CPaneMgrAlpha::childPaneCount(J2DPane* param_0) {
	nofralloc
#include "asm/d/pane/d_pane_class_alpha/childPaneCount__13CPaneMgrAlphaFP7J2DPane.s"
}
#pragma pop


/* 80255ACC-80255B5C 0090+00 s=1 e=1 z=0  None .text      childPaneGetAlpha__13CPaneMgrAlphaFP7J2DPane                 */
//	80255B20: 802F7A8C (getFirstChildPane__7J2DPaneFv)
//	80255B34: 802F7AC4 (getNextChildPane__7J2DPaneFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  J2DPane* False
// 	 J2DPane False
asm void CPaneMgrAlpha::childPaneGetAlpha(J2DPane* param_0) {
	nofralloc
#include "asm/d/pane/d_pane_class_alpha/childPaneGetAlpha__13CPaneMgrAlphaFP7J2DPane.s"
}
#pragma pop


/* 80255B5C-80255C68 010C+00 s=1 e=1 z=0  None .text      childPaneSetAlpha__13CPaneMgrAlphaFP7J2DPaneUc               */
//	80255B6C: 803621DC (_savegpr_29)
//	80255B98: 80454ED0 (lit_3721)
//	80255BA4: 80454EC8 (lit_3708)
//	80255BDC: 80454EC8 (lit_3708)
//	80255C24: 802F7A8C (getFirstChildPane__7J2DPaneFv)
//	80255C3C: 802F7AC4 (getNextChildPane__7J2DPaneFv)
//	80255C54: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  J2DPane* False
// 	 J2DPane False
//  u8 False
asm void CPaneMgrAlpha::childPaneSetAlpha(J2DPane* param_0, u8 param_1) {
	nofralloc
#include "asm/d/pane/d_pane_class_alpha/childPaneSetAlpha__13CPaneMgrAlphaFP7J2DPaneUc.s"
}
#pragma pop


/* 80255C68-80255CAC 0044+00 s=0 e=5 z=0  None .text      __ct__17CPaneMgrAlphaMorfFP9J2DScreenUxUcP10JKRExpHeap       */
//	80255C7C: 802553FC (__ct__13CPaneMgrAlphaFP9J2DScreenUxUcP10JKRExpHeap)
//	80255C80: 803C2E18 (__vt__17CPaneMgrAlphaMorf)
//	80255C84: 803C2E18 (__vt__17CPaneMgrAlphaMorf)
//	80255C90: 80255D48 (initiateAlphaMorf__17CPaneMgrAlphaMorfFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  J2DScreen* False
// 	 J2DScreen False
//  u64 False
//  u8 False
//  JKRExpHeap* False
// 	 JKRExpHeap False
asm CPaneMgrAlphaMorf::CPaneMgrAlphaMorf(J2DScreen* param_0, u64 param_1, u8 param_2, JKRExpHeap* param_3) {
	nofralloc
#include "asm/d/pane/d_pane_class_alpha/__ct__17CPaneMgrAlphaMorfFP9J2DScreenUxUcP10JKRExpHeap.s"
}
#pragma pop


/* 80255CAC-80255D48 009C+00 s=1 e=0 z=0  None .text      __dt__17CPaneMgrAlphaMorfFv                                  */
//	80255CCC: 803C2E18 (__vt__17CPaneMgrAlphaMorf)
//	80255CD0: 803C2E18 (__vt__17CPaneMgrAlphaMorf)
//	80255CE8: 802CE548 (free__7JKRHeapFPv)
//	80255D04: 802CE548 (free__7JKRHeapFPv)
//	80255D18: 8025546C (__dt__13CPaneMgrAlphaFv)
//	80255D28: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm CPaneMgrAlphaMorf::~CPaneMgrAlphaMorf() {
	nofralloc
#include "asm/d/pane/d_pane_class_alpha/__dt__17CPaneMgrAlphaMorfFv.s"
}
#pragma pop


/* 80255D48-80255DD0 0088+00 s=1 e=0 z=0  None .text      initiateAlphaMorf__17CPaneMgrAlphaMorfFv                     */
//	80255D88: 802CE4D4 (alloc__7JKRHeapFUli)
//	80255DA4: 802CE4D4 (alloc__7JKRHeapFUli)
//	80255DB8: 80255DD0 (setBackupAlpha__17CPaneMgrAlphaMorfFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void CPaneMgrAlphaMorf::initiateAlphaMorf() {
	nofralloc
#include "asm/d/pane/d_pane_class_alpha/initiateAlphaMorf__17CPaneMgrAlphaMorfFv.s"
}
#pragma pop


/* 80255DD0-80255E28 0058+00 s=1 e=3 z=0  None .text      setBackupAlpha__17CPaneMgrAlphaMorfFv                        */
//	80255E04: 802F7A8C (getFirstChildPane__7J2DPaneFv)
//	80255E10: 80255E98 (childPaneBackupAlpha__17CPaneMgrAlphaMorfFP7J2DPane)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void CPaneMgrAlphaMorf::setBackupAlpha() {
	nofralloc
#include "asm/d/pane/d_pane_class_alpha/setBackupAlpha__17CPaneMgrAlphaMorfFv.s"
}
#pragma pop


/* 80255E28-80255E98 0070+00 s=0 e=3 z=0  None .text      setAlphaMorfRate__17CPaneMgrAlphaMorfFf                      */
//	80255E64: 802F7A8C (getFirstChildPane__7J2DPaneFv)
//	80255E74: 80255F28 (childPaneSetAlphaMorf__17CPaneMgrAlphaMorfFP7J2DPanef)
//	80255E7C: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  f32 False
asm void CPaneMgrAlphaMorf::setAlphaMorfRate(f32 param_0) {
	nofralloc
#include "asm/d/pane/d_pane_class_alpha/setAlphaMorfRate__17CPaneMgrAlphaMorfFf.s"
}
#pragma pop


/* 80255E98-80255F28 0090+00 s=1 e=0 z=0  None .text      childPaneBackupAlpha__17CPaneMgrAlphaMorfFP7J2DPane          */
//	80255EEC: 802F7A8C (getFirstChildPane__7J2DPaneFv)
//	80255F00: 802F7AC4 (getNextChildPane__7J2DPaneFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  J2DPane* False
// 	 J2DPane False
asm void CPaneMgrAlphaMorf::childPaneBackupAlpha(J2DPane* param_0) {
	nofralloc
#include "asm/d/pane/d_pane_class_alpha/childPaneBackupAlpha__17CPaneMgrAlphaMorfFP7J2DPane.s"
}
#pragma pop


/* 80255F28-80256018 00F0+00 s=1 e=0 z=0  None .text      childPaneSetAlphaMorf__17CPaneMgrAlphaMorfFP7J2DPanef        */
//	80255F70: 80454EC8 (lit_3708)
//	80255FCC: 802F7A8C (getFirstChildPane__7J2DPaneFv)
//	80255FE4: 802F7AC4 (getNextChildPane__7J2DPaneFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  J2DPane* False
// 	 J2DPane False
//  f32 False
asm void CPaneMgrAlphaMorf::childPaneSetAlphaMorf(J2DPane* param_0, f32 param_1) {
	nofralloc
#include "asm/d/pane/d_pane_class_alpha/childPaneSetAlphaMorf__17CPaneMgrAlphaMorfFP7J2DPanef.s"
}
#pragma pop


