//
// Generated By: dol2asm
// Translation Unit: d/pane/d_pane_class
//

#include "d/pane/d_pane_class.h"
#include "dol2asm.h"
#include "dolphin/types.h"

//
// Types:
//

struct JUtility {
    struct TColor {};
};

struct JSURandomInputStream {
    /* 80255328 */ ~JSURandomInputStream();
};

struct JSUMemoryInputStream {
    /* 802552B8 */ ~JSUMemoryInputStream();
    /* 802DC520 */ void setBuffer(void const*, s32);
};

struct JSUIosBase {
    /* 80255388 */ ~JSUIosBase();
};

struct JSUInputStream {
    /* 802DC23C */ ~JSUInputStream();
};

struct JKRHeap {
    /* 802CE4D4 */ void alloc(u32, int);
    /* 802CE548 */ void free(void*);
};

struct JKRExpHeap {};

struct JKRArchive {};

struct JKRAramArchive {};

struct JGeometry {
    template <typename A1>
    struct TBox2 {};
    /* TBox2<f32> */
    struct TBox2__template0 {};
};

struct J2DWindow {
    /* 80254000 */ void getBlack() const;
    /* 8025400C */ void getWhite() const;
    /* 802543E0 */ void setWhite(JUtility::TColor);
    /* 80254430 */ void setBlack(JUtility::TColor);
    /* 80254568 */ void setBlackWhite(JUtility::TColor, JUtility::TColor);
};

struct J2DTextBox {
    /* 80254408 */ void setBlack(JUtility::TColor);
};

struct J2DScreen {
    /* 802F8748 */ void setPriority(JSURandomInputStream*, u32, JKRArchive*);
};

struct J2DRotateAxis {};

struct J2DPane {
    /* 802F7100 */ void getBounds();
    /* 802F71DC */ void rotate(f32, f32, J2DRotateAxis, f32);
    /* 802F7A8C */ void getFirstChildPane();
    /* 802F7AC4 */ void getNextChildPane();
    /* 802F7AFC */ void getParentPane();
};

struct J2DOrthoGraph {
    /* 802E96D0 */ J2DOrthoGraph(f32, f32, f32, f32, f32, f32);
    /* 802E980C */ void setOrtho(JGeometry::TBox2<f32> const&, f32, f32);
};

struct CPaneMgrAlpha {
    /* 802553EC */ CPaneMgrAlpha();
    /* 8025546C */ ~CPaneMgrAlpha();
    /* 80255658 */ void rateCalc(s16, s16, u8);
    /* 80255A60 */ void childPaneCount(J2DPane*);
    /* 80255ACC */ void childPaneGetAlpha(J2DPane*);
    /* 80255B5C */ void childPaneSetAlpha(J2DPane*, u8);
};

struct CPaneMgr {
    /* 80253984 */ CPaneMgr(J2DScreen*, u64, u8, JKRExpHeap*);
    /* 80253930 */ CPaneMgr();
    /* 80253A18 */ ~CPaneMgr();
    /* 80253AB4 */ void setAlpha(u8);
    /* 80253B2C */ void reinit();
    /* 80253C08 */ void initiate(J2DPane*, JKRExpHeap*);
    /* 80254018 */ void childPaneGetSize(J2DPane*);
    /* 80254134 */ void childPaneSetSize(J2DPane*, f32, f32);
    /* 802542E8 */ void getGlobalPosX();
    /* 80254364 */ void getGlobalPosY();
    /* 80254458 */ void setBlackWhite(JUtility::TColor, JUtility::TColor);
    /* 802545B0 */ void paneTrans(f32, f32);
    /* 80254638 */ void paneScale(f32, f32);
    /* 802547CC */ void scaleAnime(s16, f32, f32, u8);
    /* 802548BC */ void colorAnime(s16, JUtility::TColor, JUtility::TColor, JUtility::TColor,
                                   JUtility::TColor, u8);
    /* 80254C90 */ void getGlobalVtx(J2DPane*, f32 (*)[3][4], u8, bool, s16);
    /* 80254EBC */ void getGlobalVtxCenter(J2DPane*, bool, s16);
    /* 80254FB8 */ void getBounds(J2DPane*);
};

//
// Forward References:
//

void dPaneClass_showNullPane(J2DScreen*);
static void dPaneClass_showNullPane(J2DPane*);
void dPaneClass_setPriority(void**, JKRHeap*, J2DScreen*, char const*, u32, JKRArchive*);

extern "C" void __ct__8CPaneMgrFv();
extern "C" void __ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap();
extern "C" void __dt__8CPaneMgrFv();
extern "C" void setAlpha__8CPaneMgrFUc();
extern "C" void reinit__8CPaneMgrFv();
extern "C" void initiate__8CPaneMgrFP7J2DPaneP10JKRExpHeap();
extern "C" void getBlack__9J2DWindowCFv();
extern "C" void getWhite__9J2DWindowCFv();
extern "C" void childPaneGetSize__8CPaneMgrFP7J2DPane();
extern "C" void childPaneSetSize__8CPaneMgrFP7J2DPaneff();
extern "C" void getGlobalPosX__8CPaneMgrFv();
extern "C" void getGlobalPosY__8CPaneMgrFv();
extern "C" void setWhite__9J2DWindowFQ28JUtility6TColor();
extern "C" void setBlack__10J2DTextBoxFQ28JUtility6TColor();
extern "C" void setBlack__9J2DWindowFQ28JUtility6TColor();
extern "C" void setBlackWhite__8CPaneMgrFQ28JUtility6TColorQ28JUtility6TColor();
extern "C" void setBlackWhite__9J2DWindowFQ28JUtility6TColorQ28JUtility6TColor();
extern "C" void paneTrans__8CPaneMgrFff();
extern "C" void paneScale__8CPaneMgrFff();
extern "C" void scaleAnime__8CPaneMgrFsffUc();
extern "C" void
colorAnime__8CPaneMgrFsQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorUc();
extern "C" void getGlobalVtx__8CPaneMgrFP7J2DPanePA3_A4_fUcbs();
extern "C" void getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs();
extern "C" void getBounds__8CPaneMgrFP7J2DPane();
extern "C" void dPaneClass_showNullPane__FP9J2DScreen();
extern "C" static void dPaneClass_showNullPane__FP7J2DPane();
extern "C" void dPaneClass_setPriority__FPPvP7JKRHeapP9J2DScreenPCcUlP10JKRArchive();
extern "C" void __dt__20JSUMemoryInputStreamFv();
extern "C" void __dt__20JSURandomInputStreamFv();
extern "C" void __dt__10JSUIosBaseFv();
extern "C" void __sinit_d_pane_class_cpp();
extern "C" extern void* __vt__10JSUIosBase[3];
extern "C" extern void* __vt__8CPaneMgr[4 + 1 /* padding */];

//
// External References:
//

void mDoExt_getCurrentHeap();
void dLib_getExpandSizeFromAramArchive(JKRAramArchive*, char const*);
void operator delete(void*);

extern "C" void mDoExt_getCurrentHeap__Fv();
extern "C" void dLib_getExpandSizeFromAramArchive__FP14JKRAramArchivePCc();
extern "C" void __ct__13CPaneMgrAlphaFv();
extern "C" void __dt__13CPaneMgrAlphaFv();
extern "C" void rateCalc__13CPaneMgrAlphaFssUc();
extern "C" void childPaneCount__13CPaneMgrAlphaFP7J2DPane();
extern "C" void childPaneGetAlpha__13CPaneMgrAlphaFP7J2DPane();
extern "C" void childPaneSetAlpha__13CPaneMgrAlphaFP7J2DPaneUc();
extern "C" void alloc__7JKRHeapFUli();
extern "C" void free__7JKRHeapFPv();
extern "C" void __dl__FPv();
extern "C" void __dt__14JSUInputStreamFv();
extern "C" void setBuffer__20JSUMemoryInputStreamFPCvl();
extern "C" void __ct__13J2DOrthoGraphFffffff();
extern "C" void func_802E980C();
extern "C" void getBounds__7J2DPaneFv();
extern "C" void rotate__7J2DPaneFff13J2DRotateAxisf();
extern "C" void getFirstChildPane__7J2DPaneFv();
extern "C" void getNextChildPane__7J2DPaneFv();
extern "C" void getParentPane__7J2DPaneFv();
extern "C" void setPriority__9J2DScreenFP20JSURandomInputStreamUlP10JKRArchive();
extern "C" void PSMTXCopy();
extern "C" void PSMTXConcat();
extern "C" void _savegpr_24();
extern "C" void _savegpr_25();
extern "C" void _savegpr_26();
extern "C" void _savegpr_27();
extern "C" void _savegpr_28();
extern "C" void _savegpr_29();
extern "C" void _restgpr_24();
extern "C" void _restgpr_25();
extern "C" void _restgpr_26();
extern "C" void _restgpr_27();
extern "C" void _restgpr_28();
extern "C" void _restgpr_29();
extern "C" extern void* __vt__20JSURandomInputStream[9];
extern "C" extern void* __vt__14JSUInputStream[6 + 1 /* padding */];
extern "C" extern void* __vt__20JSUMemoryInputStream[9 + 1 /* padding */];
extern "C" extern void* __vt__14J2DGrafContext[10];
extern "C" extern void* __vt__13J2DOrthoGraph[10];

//
// Declarations:
//

/* ############################################################################################## */
/* 803C2DF8-803C2E04 000C+00 s=2 e=4 z=0  None .data      __vt__10JSUIosBase */
SECTION_DATA void* __vt__10JSUIosBase[3] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)__dt__10JSUIosBaseFv,
};

/* 803C2E04-803C2E18 0010+04 s=3 e=0 z=0  None .data      __vt__8CPaneMgr */
SECTION_DATA void* __vt__8CPaneMgr[4 + 1 /* padding */] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)__dt__8CPaneMgrFv,
    (void*)setAlpha__8CPaneMgrFUc,
    /* padding */
    NULL,
};

/* 80253930-80253984 0054+00 s=0 e=11 z=0  None .text      __ct__8CPaneMgrFv */
//	80253944: 802553EC (__ct__13CPaneMgrAlphaFv)
//	80253948: 803C2E04 (__vt__8CPaneMgr)
//	8025394C: 803C2E04 (__vt__8CPaneMgr)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm CPaneMgr::CPaneMgr() {
    nofralloc
#include "asm/d/pane/d_pane_class/__ct__8CPaneMgrFv.s"
}
#pragma pop

/* 80253984-80253A18 0094+00 s=0 e=58 z=2  None .text __ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap
 */
//	80253994: 803621D0 (_savegpr_26)
//	802539B0: 802553EC (__ct__13CPaneMgrAlphaFv)
//	802539B4: 803C2E04 (__vt__8CPaneMgr)
//	802539B8: 803C2E04 (__vt__8CPaneMgr)
//	802539F8: 80253C08 (initiate__8CPaneMgrFP7J2DPaneP10JKRExpHeap)
//	80253A04: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm CPaneMgr::CPaneMgr(J2DScreen* param_0, u64 param_1, u8 param_2, JKRExpHeap* param_3) {
    nofralloc
#include "asm/d/pane/d_pane_class/__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap.s"
}
#pragma pop

/* 80253A18-80253AB4 009C+00 s=1 e=11 z=0  None .text      __dt__8CPaneMgrFv */
//	80253A38: 803C2E04 (__vt__8CPaneMgr)
//	80253A3C: 803C2E04 (__vt__8CPaneMgr)
//	80253A54: 802CE548 (free__7JKRHeapFPv)
//	80253A70: 802CE548 (free__7JKRHeapFPv)
//	80253A84: 8025546C (__dt__13CPaneMgrAlphaFv)
//	80253A94: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm CPaneMgr::~CPaneMgr() {
    nofralloc
#include "asm/d/pane/d_pane_class/__dt__8CPaneMgrFv.s"
}
#pragma pop

/* 80253AB4-80253B2C 0078+00 s=1 e=0 z=0  None .text      setAlpha__8CPaneMgrFUc */
//	80253AE8: 802F7A8C (getFirstChildPane__7J2DPaneFv)
//	80253AF8: 80255B5C (childPaneSetAlpha__13CPaneMgrAlphaFP7J2DPaneUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::setAlpha(u8 param_0) {
    nofralloc
#include "asm/d/pane/d_pane_class/setAlpha__8CPaneMgrFUc.s"
}
#pragma pop

/* 80253B2C-80253C08 00DC+00 s=0 e=3 z=0  None .text      reinit__8CPaneMgrFv */
//	80253B44: 802F7100 (getBounds__7J2DPaneFv)
//	80253B54: 802F7100 (getBounds__7J2DPaneFv)
//	80253B64: 802542E8 (getGlobalPosX__8CPaneMgrFv)
//	80253B70: 80254364 (getGlobalPosY__8CPaneMgrFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::reinit() {
    nofralloc
#include "asm/d/pane/d_pane_class/reinit__8CPaneMgrFv.s"
}
#pragma pop

/* 80253C08-80254000 03F8+00 s=1 e=0 z=0  None .text      initiate__8CPaneMgrFP7J2DPaneP10JKRExpHeap
 */
//	80253C38: 8000F1EC (mDoExt_getCurrentHeap__Fv)
//	80253C68: 802F7A8C (getFirstChildPane__7J2DPaneFv)
//	80253C74: 80255A60 (childPaneCount__13CPaneMgrAlphaFP7J2DPane)
//	80253C94: 802CE4D4 (alloc__7JKRHeapFUli)
//	80253CA8: 802F7A8C (getFirstChildPane__7J2DPaneFv)
//	80253CB4: 80254018 (childPaneGetSize__8CPaneMgrFP7J2DPane)
//	80253CD0: 802CE4D4 (alloc__7JKRHeapFUli)
//	80253CE4: 802F7A8C (getFirstChildPane__7J2DPaneFv)
//	80253CF0: 80255ACC (childPaneGetAlpha__13CPaneMgrAlphaFP7J2DPane)
//	80253CF8: 802F7100 (getBounds__7J2DPaneFv)
//	80253D08: 802F7100 (getBounds__7J2DPaneFv)
//	80253D18: 802542E8 (getGlobalPosX__8CPaneMgrFv)
//	80253D24: 80254364 (getGlobalPosY__8CPaneMgrFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::initiate(J2DPane* param_0, JKRExpHeap* param_1) {
    nofralloc
#include "asm/d/pane/d_pane_class/initiate__8CPaneMgrFP7J2DPaneP10JKRExpHeap.s"
}
#pragma pop

/* 80254000-8025400C 000C+00 s=0 e=1 z=0  None .text      getBlack__9J2DWindowCFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DWindow::getBlack() const {
    nofralloc
#include "asm/d/pane/d_pane_class/getBlack__9J2DWindowCFv.s"
}
#pragma pop

/* 8025400C-80254018 000C+00 s=0 e=1 z=0  None .text      getWhite__9J2DWindowCFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DWindow::getWhite() const {
    nofralloc
#include "asm/d/pane/d_pane_class/getWhite__9J2DWindowCFv.s"
}
#pragma pop

/* 80254018-80254134 011C+00 s=1 e=0 z=0  None .text      childPaneGetSize__8CPaneMgrFP7J2DPane */
//	8025403C: 802F7100 (getBounds__7J2DPaneFv)
//	8025405C: 802F7100 (getBounds__7J2DPaneFv)
//	802540F8: 802F7A8C (getFirstChildPane__7J2DPaneFv)
//	8025410C: 802F7AC4 (getNextChildPane__7J2DPaneFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::childPaneGetSize(J2DPane* param_0) {
    nofralloc
#include "asm/d/pane/d_pane_class/childPaneGetSize__8CPaneMgrFP7J2DPane.s"
}
#pragma pop

/* ############################################################################################## */
/* 80454E88-80454E90 0004+04 s=4 e=0 z=0  None .sdata2    @3858 */
SECTION_SDATA2 static f32 lit_3858[1 + 1 /* padding */] = {
    0.0f,
    /* padding */
    0.0f,
};

/* 80454E90-80454E98 0008+00 s=2 e=0 z=0  None .sdata2    @3860 */
SECTION_SDATA2 static f64 lit_3860 = 4503601774854144.0 /* cast s32 to float */;

/* 80254134-802542E8 01B4+00 s=1 e=0 z=0  None .text      childPaneSetSize__8CPaneMgrFP7J2DPaneff */
//	80254178: 80454E90 (lit_3860)
//	802541D0: 80454E90 (lit_3860)
//	8025421C: 80454E88 (lit_3858)
//	80254238: 80454E90 (lit_3860)
//	80254278: 802F71DC (rotate__7J2DPaneFff13J2DRotateAxisf)
//	8025428C: 802F7A8C (getFirstChildPane__7J2DPaneFv)
//	802542A8: 802F7AC4 (getNextChildPane__7J2DPaneFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::childPaneSetSize(J2DPane* param_0, f32 param_1, f32 param_2) {
    nofralloc
#include "asm/d/pane/d_pane_class/childPaneSetSize__8CPaneMgrFP7J2DPaneff.s"
}
#pragma pop

/* 802542E8-80254364 007C+00 s=2 e=18 z=0  None .text      getGlobalPosX__8CPaneMgrFv */
//	80254308: 802F7100 (getBounds__7J2DPaneFv)
//	80254314: 802F7AFC (getParentPane__7J2DPaneFv)
//	80254324: 802F7100 (getBounds__7J2DPaneFv)
//	80254334: 802F7AFC (getParentPane__7J2DPaneFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::getGlobalPosX() {
    nofralloc
#include "asm/d/pane/d_pane_class/getGlobalPosX__8CPaneMgrFv.s"
}
#pragma pop

/* 80254364-802543E0 007C+00 s=2 e=15 z=0  None .text      getGlobalPosY__8CPaneMgrFv */
//	80254384: 802F7100 (getBounds__7J2DPaneFv)
//	80254390: 802F7AFC (getParentPane__7J2DPaneFv)
//	802543A0: 802F7100 (getBounds__7J2DPaneFv)
//	802543B0: 802F7AFC (getParentPane__7J2DPaneFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::getGlobalPosY() {
    nofralloc
#include "asm/d/pane/d_pane_class/getGlobalPosY__8CPaneMgrFv.s"
}
#pragma pop

/* 802543E0-80254408 0028+00 s=0 e=1 z=0  None .text      setWhite__9J2DWindowFQ28JUtility6TColor */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DWindow::setWhite(JUtility::TColor param_0) {
    nofralloc
#include "asm/d/pane/d_pane_class/setWhite__9J2DWindowFQ28JUtility6TColor.s"
}
#pragma pop

/* 80254408-80254430 0028+00 s=0 e=1 z=0  None .text      setBlack__10J2DTextBoxFQ28JUtility6TColor
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTextBox::setBlack(JUtility::TColor param_0) {
    nofralloc
#include "asm/d/pane/d_pane_class/setBlack__10J2DTextBoxFQ28JUtility6TColor.s"
}
#pragma pop

/* 80254430-80254458 0028+00 s=0 e=1 z=0  None .text      setBlack__9J2DWindowFQ28JUtility6TColor */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DWindow::setBlack(JUtility::TColor param_0) {
    nofralloc
#include "asm/d/pane/d_pane_class/setBlack__9J2DWindowFQ28JUtility6TColor.s"
}
#pragma pop

/* 80254458-80254568 0110+00 s=1 e=7 z=0  None .text
 * setBlackWhite__8CPaneMgrFQ28JUtility6TColorQ28JUtility6TColor */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::setBlackWhite(JUtility::TColor param_0, JUtility::TColor param_1) {
    nofralloc
#include "asm/d/pane/d_pane_class/setBlackWhite__8CPaneMgrFQ28JUtility6TColorQ28JUtility6TColor.s"
}
#pragma pop

/* 80254568-802545B0 0048+00 s=0 e=1 z=0  None .text
 * setBlackWhite__9J2DWindowFQ28JUtility6TColorQ28JUtility6TColor */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DWindow::setBlackWhite(JUtility::TColor param_0, JUtility::TColor param_1) {
    nofralloc
#include "asm/d/pane/d_pane_class/setBlackWhite__9J2DWindowFQ28JUtility6TColorQ28JUtility6TColor.s"
}
#pragma pop

/* ############################################################################################## */
/* 80454E98-80454EA0 0004+04 s=3 e=0 z=0  None .sdata2    @4046 */
SECTION_SDATA2 static f32 lit_4046[1 + 1 /* padding */] = {
    0.5f,
    /* padding */
    0.0f,
};

/* 802545B0-80254638 0088+00 s=0 e=51 z=3  None .text      paneTrans__8CPaneMgrFff */
//	802545E0: 80454E98 (lit_4046)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::paneTrans(f32 param_0, f32 param_1) {
    nofralloc
#include "asm/d/pane/d_pane_class/paneTrans__8CPaneMgrFff.s"
}
#pragma pop

/* 80254638-802547CC 0194+00 s=0 e=5 z=0  None .text      paneScale__8CPaneMgrFff */
//	80254694: 802F7100 (getBounds__7J2DPaneFv)
//	802546AC: 802F7100 (getBounds__7J2DPaneFv)
//	802546F4: 80454E98 (lit_4046)
//	80254728: 80454E88 (lit_3858)
//	80254754: 802F71DC (rotate__7J2DPaneFff13J2DRotateAxisf)
//	80254770: 802F7A8C (getFirstChildPane__7J2DPaneFv)
//	80254784: 80254134 (childPaneSetSize__8CPaneMgrFP7J2DPaneff)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::paneScale(f32 param_0, f32 param_1) {
    nofralloc
#include "asm/d/pane/d_pane_class/paneScale__8CPaneMgrFff.s"
}
#pragma pop

/* 802547CC-802548BC 00F0+00 s=0 e=10 z=0  None .text      scaleAnime__8CPaneMgrFsffUc */
//	8025481C: 80255658 (rateCalc__13CPaneMgrAlphaFssUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::scaleAnime(s16 param_0, f32 param_1, f32 param_2, u8 param_3) {
    nofralloc
#include "asm/d/pane/d_pane_class/scaleAnime__8CPaneMgrFsffUc.s"
}
#pragma pop

/* ############################################################################################## */
/* 80454EA0-80454EA8 0008+00 s=1 e=0 z=0  None .sdata2    @4349 */
SECTION_SDATA2 static f64 lit_4349 = 4503599627370496.0 /* cast u32 to float */;

/* 802548BC-80254C90 03D4+00 s=0 e=4 z=0  None .text
 * colorAnime__8CPaneMgrFsQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorUc
 */
//	802548CC: 803621D4 (_savegpr_27)
//	80254908: 80255658 (rateCalc__13CPaneMgrAlphaFssUc)
//	80254928: 80454EA0 (lit_4349)
//	80254944: 80454E90 (lit_3860)
//	80254984: 80454EA0 (lit_4349)
//	802549A0: 80454E90 (lit_3860)
//	802549E8: 80454EA0 (lit_4349)
//	80254A04: 80454E90 (lit_3860)
//	80254A4C: 80454EA0 (lit_4349)
//	80254A68: 80454E90 (lit_3860)
//	80254AB0: 80454EA0 (lit_4349)
//	80254ACC: 80454E90 (lit_3860)
//	80254B0C: 80454EA0 (lit_4349)
//	80254B28: 80454E90 (lit_3860)
//	80254B70: 80454EA0 (lit_4349)
//	80254B8C: 80454E90 (lit_3860)
//	80254BD4: 80454EA0 (lit_4349)
//	80254BF0: 80454E90 (lit_3860)
//	80254C44: 80254458 (setBlackWhite__8CPaneMgrFQ28JUtility6TColorQ28JUtility6TColor)
//	80254C68: 80254458 (setBlackWhite__8CPaneMgrFQ28JUtility6TColorQ28JUtility6TColor)
//	80254C7C: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::colorAnime(s16 param_0, JUtility::TColor param_1, JUtility::TColor param_2,
                              JUtility::TColor param_3, JUtility::TColor param_4, u8 param_5) {
    nofralloc
#include "asm/d/pane/d_pane_class/func_802548BC.s"
}
#pragma pop

/* ############################################################################################## */
/* 80454EA8-80454EAC 0004+00 s=1 e=0 z=0  None .sdata2    @4473 */
SECTION_SDATA2 static f32 lit_4473 = 608.0f;

/* 80454EAC-80454EB0 0004+00 s=1 e=0 z=0  None .sdata2    @4474 */
SECTION_SDATA2 static f32 lit_4474 = 448.0f;

/* 80454EB0-80454EB4 0004+00 s=1 e=0 z=0  None .sdata2    @4475 */
SECTION_SDATA2 static f32 lit_4475 = -1.0f;

/* 80454EB4-80454EB8 0004+00 s=1 e=0 z=0  None .sdata2    @4476 */
SECTION_SDATA2 static f32 lit_4476 = 1.0f;

/* 80254C90-80254EBC 022C+00 s=1 e=9 z=0  None .text getGlobalVtx__8CPaneMgrFP7J2DPanePA3_A4_fUcbs
 */
//	80254CA0: 803621C8 (_savegpr_24)
//	80254CC4: 802F7AFC (getParentPane__7J2DPaneFv)
//	80254CD0: 80454E88 (lit_3858)
//	80254CD8: 80454EA8 (lit_4473)
//	80254CDC: 80454EAC (lit_4474)
//	80254CE0: 80454EB0 (lit_4475)
//	80254CE4: 80454EB4 (lit_4476)
//	80254CE8: 802E96D0 (__ct__13J2DOrthoGraphFffffff)
//	80254CEC: 80454E88 (lit_3858)
//	80254CF8: 80454EA8 (lit_4473)
//	80254D00: 80454EAC (lit_4474)
//	80254D10: 80454EB0 (lit_4475)
//	80254D14: 80454EB4 (lit_4476)
//	80254D18: 802E980C (func_802E980C)
//	80254D4C: 803464B0 (PSMTXCopy)
//	80254D5C: 803464E4 (PSMTXConcat)
//	80254D80: 803464B0 (PSMTXCopy)
//	80254D90: 80454E88 (lit_3858)
//	80254DB8: 803CC9E0 (__vt__13J2DOrthoGraph)
//	80254DBC: 803CC9E0 (__vt__13J2DOrthoGraph)
//	80254DC4: 803CC9B8 (__vt__14J2DGrafContext)
//	80254DC8: 803CC9B8 (__vt__14J2DGrafContext)
//	80254DDC: 80254FB8 (getBounds__8CPaneMgrFP7J2DPane)
//	80254E8C: 803CC9E0 (__vt__13J2DOrthoGraph)
//	80254E90: 803CC9E0 (__vt__13J2DOrthoGraph)
//	80254E98: 803CC9B8 (__vt__14J2DGrafContext)
//	80254E9C: 803CC9B8 (__vt__14J2DGrafContext)
//	80254EA8: 80362214 (_restgpr_24)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::getGlobalVtx(J2DPane* param_0, f32 (*param_1)[3][4], u8 param_2, bool param_3,
                                s16 param_4) {
    nofralloc
#include "asm/d/pane/d_pane_class/getGlobalVtx__8CPaneMgrFP7J2DPanePA3_A4_fUcbs.s"
}
#pragma pop

/* 80254EBC-80254FB8 00FC+00 s=0 e=56 z=1  None .text      getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs
 */
//	80254ECC: 803621D8 (_savegpr_28)
//	80254EF4: 80254C90 (getGlobalVtx__8CPaneMgrFP7J2DPanePA3_A4_fUcbs)
//	80254F2C: 80254C90 (getGlobalVtx__8CPaneMgrFP7J2DPanePA3_A4_fUcbs)
//	80254F48: 80454E98 (lit_4046)
//	80254FA4: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::getGlobalVtxCenter(J2DPane* param_0, bool param_1, s16 param_2) {
    nofralloc
#include "asm/d/pane/d_pane_class/getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs.s"
}
#pragma pop

/* ############################################################################################## */
/* 80430748-80430758 0010+00 s=2 e=0 z=0  None .bss       static_mBounds */
static u8 static_mBounds[16];

/* 80254FB8-802550E8 0130+00 s=1 e=0 z=0  None .text      getBounds__8CPaneMgrFP7J2DPane */
//	80254FD0: 803621DC (_savegpr_29)
//	80254FE0: 802F7100 (getBounds__7J2DPaneFv)
//	80255008: 802F7AFC (getParentPane__7J2DPaneFv)
//	802550A4: 80430748 (static_mBounds)
//	802550B0: 80430748 (static_mBounds)
//	802550D4: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void CPaneMgr::getBounds(J2DPane* param_0) {
    nofralloc
#include "asm/d/pane/d_pane_class/getBounds__8CPaneMgrFP7J2DPane.s"
}
#pragma pop

/* 802550E8-8025512C 0044+00 s=0 e=54 z=3  None .text      dPaneClass_showNullPane__FP9J2DScreen */
//	80255118: 8025512C (dPaneClass_showNullPane__FP7J2DPane)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dPaneClass_showNullPane(J2DScreen* param_0) {
    nofralloc
#include "asm/d/pane/d_pane_class/dPaneClass_showNullPane__FP9J2DScreen.s"
}
#pragma pop

/* 8025512C-80255184 0058+00 s=1 e=0 z=0  None .text      dPaneClass_showNullPane__FP7J2DPane */
//	8025515C: 802F7A8C (getFirstChildPane__7J2DPaneFv)
//	80255168: 802F7AC4 (getNextChildPane__7J2DPaneFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm static void dPaneClass_showNullPane(J2DPane* param_0) {
    nofralloc
#include "asm/d/pane/d_pane_class/dPaneClass_showNullPane__FP7J2DPane.s"
}
#pragma pop

/* 80255184-802552B8 0134+00 s=0 e=1 z=0  None .text
 * dPaneClass_setPriority__FPPvP7JKRHeapP9J2DScreenPCcUlP10JKRArchive */
//	80255194: 803621CC (_savegpr_25)
//	802551C4: 80032738 (dLib_getExpandSizeFromAramArchive__FP14JKRAramArchivePCc)
//	802551E4: 802CE4D4 (alloc__7JKRHeapFUli)
//	8025521C: 803C2DF8 (__vt__10JSUIosBase)
//	80255220: 803C2DF8 (__vt__10JSUIosBase)
//	80255230: 803CC4D4 (__vt__14JSUInputStream)
//	80255234: 803CC4D4 (__vt__14JSUInputStream)
//	8025523C: 803CC4B0 (__vt__20JSURandomInputStream)
//	80255240: 803CC4B0 (__vt__20JSURandomInputStream)
//	80255248: 803CC4F0 (__vt__20JSUMemoryInputStream)
//	8025524C: 803CC4F0 (__vt__20JSUMemoryInputStream)
//	80255254: 802DC520 (setBuffer__20JSUMemoryInputStreamFPCvl)
//	80255268: 802F8748 (setPriority__9J2DScreenFP20JSURandomInputStreamUlP10JKRArchive)
//	80255270: 803CC4F0 (__vt__20JSUMemoryInputStream)
//	80255274: 803CC4F0 (__vt__20JSUMemoryInputStream)
//	8025527C: 803CC4B0 (__vt__20JSURandomInputStream)
//	80255280: 803CC4B0 (__vt__20JSURandomInputStream)
//	80255290: 802DC23C (__dt__14JSUInputStreamFv)
//	802552A4: 80362218 (_restgpr_25)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dPaneClass_setPriority(void** param_0, JKRHeap* param_1, J2DScreen* param_2,
                                char const* param_3, u32 param_4, JKRArchive* param_5) {
    nofralloc
#include "asm/d/pane/d_pane_class/dPaneClass_setPriority__FPPvP7JKRHeapP9J2DScreenPCcUlP10JKRArchive.s"
}
#pragma pop

/* 802552B8-80255328 0070+00 s=0 e=1 z=0  None .text      __dt__20JSUMemoryInputStreamFv */
//	802552D8: 803CC4F0 (__vt__20JSUMemoryInputStream)
//	802552DC: 803CC4F0 (__vt__20JSUMemoryInputStream)
//	802552E8: 803CC4B0 (__vt__20JSURandomInputStream)
//	802552EC: 803CC4B0 (__vt__20JSURandomInputStream)
//	802552F8: 802DC23C (__dt__14JSUInputStreamFv)
//	80255308: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JSUMemoryInputStream::~JSUMemoryInputStream() {
    nofralloc
#include "asm/d/pane/d_pane_class/__dt__20JSUMemoryInputStreamFv.s"
}
#pragma pop

/* 80255328-80255388 0060+00 s=0 e=1 z=0  None .text      __dt__20JSURandomInputStreamFv */
//	80255348: 803CC4B0 (__vt__20JSURandomInputStream)
//	8025534C: 803CC4B0 (__vt__20JSURandomInputStream)
//	80255358: 802DC23C (__dt__14JSUInputStreamFv)
//	80255368: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JSURandomInputStream::~JSURandomInputStream() {
    nofralloc
#include "asm/d/pane/d_pane_class/__dt__20JSURandomInputStreamFv.s"
}
#pragma pop

/* 80255388-802553D0 0048+00 s=1 e=0 z=0  None .text      __dt__10JSUIosBaseFv */
//	802553A0: 803C2DF8 (__vt__10JSUIosBase)
//	802553A4: 803C2DF8 (__vt__10JSUIosBase)
//	802553B4: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JSUIosBase::~JSUIosBase() {
    nofralloc
#include "asm/d/pane/d_pane_class/__dt__10JSUIosBaseFv.s"
}
#pragma pop

/* 802553D0-802553EC 001C+00 s=0 e=0 z=0  None .text      __sinit_d_pane_class_cpp */
//	802553D0: 80454E88 (lit_3858)
//	802553D4: 80430748 (static_mBounds)
//	802553D8: 80430748 (static_mBounds)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void __sinit_d_pane_class_cpp() {
    nofralloc
#include "asm/d/pane/d_pane_class/__sinit_d_pane_class_cpp.s"
}
#pragma pop

#pragma push
#pragma force_active on
SECTION_CTORS void* const _ctors_802553D0 = (void*)__sinit_d_pane_class_cpp;
#pragma pop
