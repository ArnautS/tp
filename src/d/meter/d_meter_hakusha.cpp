// 
// Generated By: dol2asm
// Translation Unit: d/meter/d_meter_hakusha
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "d/meter/d_meter_hakusha.h"

// 
// Types:
// 

struct dMeterSub_c {
	/* 80194138 */ // False False
//  bool False
bool isDead();
};

struct dMeterHakusha_c {
	/* 8020C320 */ // False False
//  void* False
// 	 void False
dMeterHakusha_c(void*);
	/* 8020C384 */ // True False
~dMeterHakusha_c();
	/* 8020C400 */ // True False
void _create();
	/* 8020C808 */ // True False
//  u32 False
void _execute(u32);
	/* 8020C850 */ // True False
void draw();
	/* 8020CABC */ // True False
void _delete();
	/* 8020CC58 */ // True False
//  u32 False
void alphaAnimeHakusha(u32);
	/* 8020CD6C */ // True False
void updateHakusha();
	/* 8020D258 */ // True False
void setAlphaHakushaAnimeMin();
	/* 8020D308 */ // True False
void setAlphaHakushaAnimeMax();
	/* 8020D3B8 */ // True False
void setAlphaButtonAnimeMin();
	/* 8020D41C */ // True False
void setAlphaButtonAnimeMax();
	/* 8020D480 */ // True False
void getHakushaNum();
};

struct JUtility {
	struct TColor {
	};

};

struct CPaneMgrAlpha {
	/* 802555C8 */ // False False
void show();
	/* 80255608 */ // False False
void hide();
	/* 802557D0 */ // False False
//  f32 False
void setAlphaRate(f32);
	/* 80255828 */ // False False
void getAlphaRate();
};

struct dMeter2Draw_c {
	/* 8021462C */ // False False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  JUtility::TColor False
//  JUtility::TColor False
//  JUtility::TColor False
//  JUtility::TColor False
void drawPikariHakusha(f32, f32, f32, f32, JUtility::TColor, JUtility::TColor, JUtility::TColor, JUtility::TColor);
	/* 8021A9C8 */ // False False
//  CPaneMgrAlpha* False
// 	 CPaneMgrAlpha False
//  s16 False
void setAlphaAnimeMin(CPaneMgrAlpha*, s16);
	/* 8021AAA4 */ // False False
//  CPaneMgrAlpha* False
// 	 CPaneMgrAlpha False
//  s16 False
void setAlphaAnimeMax(CPaneMgrAlpha*, s16);
};

struct dComIfG_play_c {
	/* 8002C97C */ // False False
//  int False
void getLayerNo(int);
};

struct JKRExpHeap {
};

struct JKRArchive {
};

struct J2DGrafContext {
};

struct J2DScreen {
	/* 802F8498 */ // False False
J2DScreen();
	/* 802F8648 */ // False False
//  char const* False
// 	 char const False
// 		 char False
//  u32 False
//  JKRArchive* False
// 	 JKRArchive False
void setPriority(char const*, u32, JKRArchive*);
	/* 802F8ED4 */ // False False
//  f32 False
//  f32 False
//  J2DGrafContext const* False
// 	 J2DGrafContext const False
// 		 J2DGrafContext False
void draw(f32, f32, J2DGrafContext const*);
};

struct J2DPane {
};

struct CPaneMgr {
	/* 80253984 */ // False False
//  J2DScreen* False
// 	 J2DScreen False
//  u64 False
//  u8 False
//  JKRExpHeap* False
// 	 JKRExpHeap False
CPaneMgr(J2DScreen*, u64, u8, JKRExpHeap*);
	/* 802545B0 */ // False False
//  f32 False
//  f32 False
void paneTrans(f32, f32);
	/* 80254EBC */ // False False
//  J2DPane* False
// 	 J2DPane False
//  bool False
//  s16 False
void getGlobalVtxCenter(J2DPane*, bool, s16);
};

// 
// Forward References:
// 


// False False
//  void* False
// 	 void False
extern "C" void __ct__15dMeterHakusha_cFPv();
// True False
extern "C" void __dt__15dMeterHakusha_cFv();
// True False
extern "C" void _create__15dMeterHakusha_cFv();
// True False
//  u32 False
extern "C" void _execute__15dMeterHakusha_cFUl();
// True False
extern "C" void draw__15dMeterHakusha_cFv();
// True False
extern "C" void _delete__15dMeterHakusha_cFv();
// True False
//  u32 False
extern "C" void alphaAnimeHakusha__15dMeterHakusha_cFUl();
// True False
extern "C" void updateHakusha__15dMeterHakusha_cFv();
// True False
extern "C" void setAlphaHakushaAnimeMin__15dMeterHakusha_cFv();
// True False
extern "C" void setAlphaHakushaAnimeMax__15dMeterHakusha_cFv();
// True False
extern "C" void setAlphaButtonAnimeMin__15dMeterHakusha_cFv();
// True False
extern "C" void setAlphaButtonAnimeMax__15dMeterHakusha_cFv();
// True False
extern "C" void getHakushaNum__15dMeterHakusha_cFv();
extern "C" extern char const* const d_meter_d_meter_hakusha__stringBase0;
extern "C" extern void* __vt__15dMeterHakusha_c[8];

// 
// External References:
// 

// False False
//  J2DScreen* False
// 	 J2DScreen False
void dPaneClass_showNullPane(J2DScreen*);
// False False
//  void* False
// 	 void False
//  u32 False
void* operator new(u32);
// False False
//  void False
//  void* False
// 	 void False
void operator delete(void*);

// False False
//  int False
extern "C" void getLayerNo__14dComIfG_play_cFi();
// False False
//  bool False
extern "C" bool isDead__11dMeterSub_cFv();
// False False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  JUtility::TColor False
//  JUtility::TColor False
//  JUtility::TColor False
//  JUtility::TColor False
extern "C" void drawPikariHakusha__13dMeter2Draw_cFffffQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColor();
// False False
//  CPaneMgrAlpha* False
// 	 CPaneMgrAlpha False
//  s16 False
extern "C" void setAlphaAnimeMin__13dMeter2Draw_cFP13CPaneMgrAlphas();
// False False
//  CPaneMgrAlpha* False
// 	 CPaneMgrAlpha False
//  s16 False
extern "C" void setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas();
// False False
//  J2DScreen* False
// 	 J2DScreen False
//  u64 False
//  u8 False
//  JKRExpHeap* False
// 	 JKRExpHeap False
extern "C" void __ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap();
// False False
//  f32 False
//  f32 False
extern "C" void paneTrans__8CPaneMgrFff();
// False False
//  J2DPane* False
// 	 J2DPane False
//  bool False
//  s16 False
extern "C" void getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs();
// False False
//  J2DScreen* False
// 	 J2DScreen False
extern "C" void dPaneClass_showNullPane__FP9J2DScreen();
// False False
extern "C" void show__13CPaneMgrAlphaFv();
// False False
extern "C" void hide__13CPaneMgrAlphaFv();
// False False
//  f32 False
extern "C" void setAlphaRate__13CPaneMgrAlphaFf();
// False False
extern "C" void getAlphaRate__13CPaneMgrAlphaFv();
// False False
//  void* False
// 	 void False
//  u32 False
extern "C" void* __nw__FUl();
// False False
//  void False
//  void* False
// 	 void False
extern "C" void __dl__FPv();
// False False
extern "C" void __ct__9J2DScreenFv();
// False False
//  char const* False
// 	 char const False
// 		 char False
//  u32 False
//  JKRArchive* False
// 	 JKRArchive False
extern "C" void setPriority__9J2DScreenFPCcUlP10JKRArchive();
// False False
//  f32 False
//  f32 False
//  J2DGrafContext const* False
// 	 J2DGrafContext const False
// 		 J2DGrafContext False
extern "C" void draw__9J2DScreenFffPC14J2DGrafContext();
// False False
extern "C" void _savegpr_24();
// False False
extern "C" void _savegpr_26();
// False False
extern "C" void _savegpr_27();
// False False
extern "C" void _restgpr_24();
// False False
extern "C" void _restgpr_26();
// False False
extern "C" void _restgpr_27();
// False False
extern "C" void strcmp();
extern "C" extern void* __vt__12dDlst_base_c[3];
extern "C" extern void* __vt__11dMeterSub_c[8 + 3 /* padding */];
extern "C" extern u8 g_dComIfG_gameInfo[122384];
extern "C" extern u8 g_drawHIO[3880];
extern "C" extern u8 g_meter2_info[248];

// 
// Declarations:
// 

/* ############################################################################################## */
/* 803BF288-803BF2B8 0030+00 s=1 e=0 z=0  None .data      haku_tag$3719                                                */
SECTION_DATA static u8 haku_tag[48] = {
	0x68, 0x61, 0x6B, 0x75, 0x5F, 0x6E, 0x30, 0x30, 0x68, 0x61, 0x6B, 0x75, 0x5F, 0x6E, 0x30, 0x31,
	0x68, 0x61, 0x6B, 0x75, 0x5F, 0x6E, 0x30, 0x32, 0x68, 0x61, 0x6B, 0x75, 0x5F, 0x6E, 0x30, 0x33,
	0x68, 0x61, 0x6B, 0x75, 0x5F, 0x6E, 0x30, 0x34, 0x68, 0x61, 0x6B, 0x75, 0x5F, 0x6E, 0x30, 0x35,
};

/* 803BF2B8-803BF2D8 0020+00 s=2 e=0 z=0  None .data      __vt__15dMeterHakusha_c                                      */
SECTION_DATA void* __vt__15dMeterHakusha_c[8] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)draw__15dMeterHakusha_cFv,
	(void*)__dt__15dMeterHakusha_cFv,
	(void*)_create__15dMeterHakusha_cFv,
	(void*)_execute__15dMeterHakusha_cFUl,
	(void*)_delete__15dMeterHakusha_cFv,
	(void*)isDead__11dMeterSub_cFv,
};

/* 8020C320-8020C384 0064+00 s=0 e=1 z=0  None .text      __ct__15dMeterHakusha_cFPv                                   */
//	8020C334: 803A6F88 (__vt__12dDlst_base_c)
//	8020C338: 803A6F88 (__vt__12dDlst_base_c)
//	8020C340: 803BB6D4 (__vt__11dMeterSub_c)
//	8020C344: 803BB6D4 (__vt__11dMeterSub_c)
//	8020C34C: 803BF2B8 (__vt__15dMeterHakusha_c)
//	8020C350: 803BF2B8 (__vt__15dMeterHakusha_c)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  void* False
// 	 void False
asm dMeterHakusha_c::dMeterHakusha_c(void* param_0) {
	nofralloc
#include "asm/d/meter/d_meter_hakusha/__ct__15dMeterHakusha_cFPv.s"
}
#pragma pop


/* 8020C384-8020C400 007C+00 s=1 e=0 z=0  None .text      __dt__15dMeterHakusha_cFv                                    */
//	8020C3A4: 803BF2B8 (__vt__15dMeterHakusha_c)
//	8020C3A8: 803BF2B8 (__vt__15dMeterHakusha_c)
//	8020C3C8: 803BB6D4 (__vt__11dMeterSub_c)
//	8020C3CC: 803BB6D4 (__vt__11dMeterSub_c)
//	8020C3E0: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dMeterHakusha_c::~dMeterHakusha_c() {
	nofralloc
#include "asm/d/meter/d_meter_hakusha/__dt__15dMeterHakusha_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 803981B0-80398208 0055+03 s=3 e=0 z=0  None .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char const* const stringBase_803981B0 = 
    "zelda_game_image_hakusha_parts.blo";
SECTION_DEAD char const* const stringBase_803981D3 = 
    "zelda_game_image_hakusha_a_btn.blo";
SECTION_DEAD char const* const stringBase_803981F6 = "F_SP108";
SECTION_DEAD char const* const stringBase_803981FE = "F_SP00";
/* @stringBase0 padding */
SECTION_DEAD static char const* const pad_80398205 = "\0\0";
#pragma pop

/* 80454800-80454804 0004+00 s=6 e=0 z=0  None .sdata2    @3793                                                        */
SECTION_SDATA2 static u8 lit_3793[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 80454804-80454808 0004+00 s=2 e=0 z=0  None .sdata2    @3794                                                        */
SECTION_SDATA2 static f32 lit_3794 = 28.399999618530273f;

/* 8020C400-8020C808 0408+00 s=1 e=0 z=0  None .text      _create__15dMeterHakusha_cFv                                 */
//	8020C410: 803621D4 (_savegpr_27)
//	8020C424: 803BF288 (haku_tag)
//	8020C428: 803BF288 (haku_tag)
//	8020C430: 802CEC4C (__nw__FUl)
//	8020C454: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	8020C47C: 802CEC4C (__nw__FUl)
//	8020C4A4: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	8020C4B4: 802CEC4C (__nw__FUl)
//	8020C4C0: 802F8498 (__ct__9J2DScreenFv)
//	8020C4D0: 803981B0 (d_meter_d_meter_hakusha__stringBase0)
//	8020C4D4: 803981B0 (d_meter_d_meter_hakusha__stringBase0)
//	8020C4DC: 804061C0 (g_dComIfG_gameInfo)
//	8020C4E0: 804061C0 (g_dComIfG_gameInfo)
//	8020C4E8: 802F8648 (setPriority__9J2DScreenFPCcUlP10JKRArchive)
//	8020C4F0: 802550E8 (dPaneClass_showNullPane__FP9J2DScreen)
//	8020C4F8: 802CEC4C (__nw__FUl)
//	8020C51C: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	8020C52C: 802CEC4C (__nw__FUl)
//	8020C554: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	8020C564: 80454800 (lit_3793)
//	8020C568: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8020C570: 80454800 (lit_3793)
//	8020C574: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8020C57C: 80255608 (hide__13CPaneMgrAlphaFv)
//	8020C584: 80255608 (hide__13CPaneMgrAlphaFv)
//	8020C594: 80454800 (lit_3793)
//	8020C5D4: 80430188 (g_meter2_info)
//	8020C5D8: 80430188 (g_meter2_info)
//	8020C5E8: 802CEC4C (__nw__FUl)
//	8020C5F4: 802F8498 (__ct__9J2DScreenFv)
//	8020C604: 803981B0 (d_meter_d_meter_hakusha__stringBase0)
//	8020C608: 803981B0 (d_meter_d_meter_hakusha__stringBase0)
//	8020C618: 802F8648 (setPriority__9J2DScreenFPCcUlP10JKRArchive)
//	8020C620: 802550E8 (dPaneClass_showNullPane__FP9J2DScreen)
//	8020C628: 802CEC4C (__nw__FUl)
//	8020C64C: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	8020C65C: 802555C8 (show__13CPaneMgrAlphaFv)
//	8020C664: 80454800 (lit_3793)
//	8020C668: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8020C68C: 80454800 (lit_3793)
//	8020C6A8: 8042EBC8 (g_drawHIO)
//	8020C6AC: 8042EBC8 (g_drawHIO)
//	8020C6C0: 804061C0 (g_dComIfG_gameInfo)
//	8020C6C4: 804061C0 (g_dComIfG_gameInfo)
//	8020C6CC: 803981B0 (d_meter_d_meter_hakusha__stringBase0)
//	8020C6D0: 803981B0 (d_meter_d_meter_hakusha__stringBase0)
//	8020C6D8: 80368994 (strcmp)
//	8020C6E8: 80454804 (lit_3794)
//	8020C6EC: 8042EBC8 (g_drawHIO)
//	8020C6F0: 8042EBC8 (g_drawHIO)
//	8020C700: 802545B0 (paneTrans__8CPaneMgrFff)
//	8020C70C: 8042EBC8 (g_drawHIO)
//	8020C710: 8042EBC8 (g_drawHIO)
//	8020C71C: 802545B0 (paneTrans__8CPaneMgrFff)
//	8020C720: 8042EBC8 (g_drawHIO)
//	8020C724: 8042EBC8 (g_drawHIO)
//	8020C758: 802545B0 (paneTrans__8CPaneMgrFff)
//	8020C75C: 8042EBC8 (g_drawHIO)
//	8020C760: 8042EBC8 (g_drawHIO)
//	8020C788: 8042EBC8 (g_drawHIO)
//	8020C78C: 8042EBC8 (g_drawHIO)
//	8020C7B4: 8042EBC8 (g_drawHIO)
//	8020C7B8: 8042EBC8 (g_drawHIO)
//	8020C7E0: 80454800 (lit_3793)
//	8020C7F4: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterHakusha_c::_create() {
	nofralloc
#include "asm/d/meter/d_meter_hakusha/_create__15dMeterHakusha_cFv.s"
}
#pragma pop


/* 8020C808-8020C850 0048+00 s=1 e=0 z=0  None .text      _execute__15dMeterHakusha_cFUl                               */
//	8020C824: 8020CD6C (updateHakusha__15dMeterHakusha_cFv)
//	8020C830: 8020CC58 (alphaAnimeHakusha__15dMeterHakusha_cFUl)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
asm void dMeterHakusha_c::_execute(u32 param_0) {
	nofralloc
#include "asm/d/meter/d_meter_hakusha/_execute__15dMeterHakusha_cFUl.s"
}
#pragma pop


/* 8020C850-8020CABC 026C+00 s=1 e=0 z=0  None .text      draw__15dMeterHakusha_cFv                                    */
//	8020C860: 803621C8 (_savegpr_24)
//	8020C868: 804061C0 (g_dComIfG_gameInfo)
//	8020C86C: 804061C0 (g_dComIfG_gameInfo)
//	8020C8B4: 80454800 (lit_3793)
//	8020C8C0: 802F8ED4 (draw__9J2DScreenFffPC14J2DGrafContext)
//	8020C8D0: 8042EBC8 (g_drawHIO)
//	8020C8D4: 8042EBC8 (g_drawHIO)
//	8020C8D8: 80430188 (g_meter2_info)
//	8020C8DC: 80430188 (g_meter2_info)
//	8020C8F8: 802555C8 (show__13CPaneMgrAlphaFv)
//	8020C904: 80255608 (hide__13CPaneMgrAlphaFv)
//	8020C918: 802555C8 (show__13CPaneMgrAlphaFv)
//	8020C924: 80255608 (hide__13CPaneMgrAlphaFv)
//	8020C97C: 80454800 (lit_3793)
//	8020C988: 802F8ED4 (draw__9J2DScreenFffPC14J2DGrafContext)
//	8020C998: 80454800 (lit_3793)
//	8020C9C0: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	8020CA34: 8021462C (drawPikariHakusha__13dMeter2Draw_cFffffQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColor)
//	8020CA84: 8021462C (drawPikariHakusha__13dMeter2Draw_cFffffQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColor)
//	8020CA98: 8020D480 (getHakushaNum__15dMeterHakusha_cFv)
//	8020CAA8: 80362214 (_restgpr_24)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterHakusha_c::draw() {
	nofralloc
#include "asm/d/meter/d_meter_hakusha/draw__15dMeterHakusha_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454808-8045480C 0004+00 s=3 e=0 z=0  None .sdata2    @3936                                                        */
SECTION_SDATA2 static f32 lit_3936 = 1.0f;

/* 8020CABC-8020CC58 019C+00 s=1 e=0 z=0  None .text      _delete__15dMeterHakusha_cFv                                 */
//	8020CACC: 803621D4 (_savegpr_27)
//	8020CB1C: 80454800 (lit_3793)
//	8020CB24: 802545B0 (paneTrans__8CPaneMgrFff)
//	8020CB30: 80454808 (lit_3936)
//	8020CC44: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterHakusha_c::_delete() {
	nofralloc
#include "asm/d/meter/d_meter_hakusha/_delete__15dMeterHakusha_cFv.s"
}
#pragma pop


/* 8020CC58-8020CD6C 0114+00 s=1 e=0 z=0  None .text      alphaAnimeHakusha__15dMeterHakusha_cFUl                      */
//	8020CCC8: 804061C0 (g_dComIfG_gameInfo)
//	8020CCCC: 804061C0 (g_dComIfG_gameInfo)
//	8020CCD4: 803981B0 (d_meter_d_meter_hakusha__stringBase0)
//	8020CCD8: 803981B0 (d_meter_d_meter_hakusha__stringBase0)
//	8020CCE0: 80368994 (strcmp)
//	8020CCF0: 8002C97C (getLayerNo__14dComIfG_play_cFi)
//	8020CCFC: 804061C0 (g_dComIfG_gameInfo)
//	8020CD00: 804061C0 (g_dComIfG_gameInfo)
//	8020CD1C: 8020D258 (setAlphaHakushaAnimeMin__15dMeterHakusha_cFv)
//	8020CD24: 8020D3B8 (setAlphaButtonAnimeMin__15dMeterHakusha_cFv)
//	8020CD30: 8020D308 (setAlphaHakushaAnimeMax__15dMeterHakusha_cFv)
//	8020CD44: 8020D41C (setAlphaButtonAnimeMax__15dMeterHakusha_cFv)
//	8020CD50: 8020D3B8 (setAlphaButtonAnimeMin__15dMeterHakusha_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
asm void dMeterHakusha_c::alphaAnimeHakusha(u32 param_0) {
	nofralloc
#include "asm/d/meter/d_meter_hakusha/alphaAnimeHakusha__15dMeterHakusha_cFUl.s"
}
#pragma pop


/* ############################################################################################## */
/* 8045480C-80454810 0004+00 s=1 e=0 z=0  None .sdata2    @4094                                                        */
SECTION_SDATA2 static f32 lit_4094 = 18.0f;

/* 80454810-80454814 0004+00 s=1 e=0 z=0  None .sdata2    @4095                                                        */
SECTION_SDATA2 static f32 lit_4095 = 28.0f;

/* 80454814-80454818 0004+00 s=1 e=0 z=0  None .sdata2    @4096                                                        */
SECTION_SDATA2 static f32 lit_4096 = 20.0f;

/* 80454818-80454820 0008+00 s=1 e=0 z=0  None .sdata2    @4098                                                        */
SECTION_SDATA2 static f64 lit_4098 = 4503601774854144.0 /* cast s32 to float */;

/* 8020CD6C-8020D258 04EC+00 s=1 e=0 z=0  None .text      updateHakusha__15dMeterHakusha_cFv                           */
//	8020CD9C: 803621D0 (_savegpr_26)
//	8020CDB8: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	8020CDE8: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	8020CE10: 8020D480 (getHakushaNum__15dMeterHakusha_cFv)
//	8020CE14: 80454818 (lit_4098)
//	8020CE44: 80430188 (g_meter2_info)
//	8020CE48: 80430188 (g_meter2_info)
//	8020CE5C: 8045480C (lit_4094)
//	8020CE60: 8042EBC8 (g_drawHIO)
//	8020CE64: 8042EBC8 (g_drawHIO)
//	8020CE94: 8042EBC8 (g_drawHIO)
//	8020CE98: 8042EBC8 (g_drawHIO)
//	8020CE9C: 8045480C (lit_4094)
//	8020CEEC: 8042EBC8 (g_drawHIO)
//	8020CEF0: 8042EBC8 (g_drawHIO)
//	8020CEF4: 80454800 (lit_3793)
//	8020CF3C: 80454810 (lit_4095)
//	8020CF48: 80454800 (lit_3793)
//	8020CF8C: 80454800 (lit_3793)
//	8020CF9C: 80454814 (lit_4096)
//	8020CFBC: 80454800 (lit_3793)
//	8020CFC8: 80454814 (lit_4096)
//	8020D030: 80454800 (lit_3793)
//	8020D040: 80454814 (lit_4096)
//	8020D060: 80454800 (lit_3793)
//	8020D06C: 80454814 (lit_4096)
//	8020D0B8: 8020D480 (getHakushaNum__15dMeterHakusha_cFv)
//	8020D0DC: 8042EBC8 (g_drawHIO)
//	8020D0E0: 8042EBC8 (g_drawHIO)
//	8020D100: 804061C0 (g_dComIfG_gameInfo)
//	8020D104: 804061C0 (g_dComIfG_gameInfo)
//	8020D10C: 803981B0 (d_meter_d_meter_hakusha__stringBase0)
//	8020D110: 803981B0 (d_meter_d_meter_hakusha__stringBase0)
//	8020D118: 80368994 (strcmp)
//	8020D128: 80454804 (lit_3794)
//	8020D12C: 8042EBC8 (g_drawHIO)
//	8020D130: 8042EBC8 (g_drawHIO)
//	8020D140: 802545B0 (paneTrans__8CPaneMgrFff)
//	8020D14C: 8042EBC8 (g_drawHIO)
//	8020D150: 8042EBC8 (g_drawHIO)
//	8020D15C: 802545B0 (paneTrans__8CPaneMgrFff)
//	8020D160: 8042EBC8 (g_drawHIO)
//	8020D164: 8042EBC8 (g_drawHIO)
//	8020D198: 802545B0 (paneTrans__8CPaneMgrFff)
//	8020D19C: 8042EBC8 (g_drawHIO)
//	8020D1A0: 8042EBC8 (g_drawHIO)
//	8020D1C8: 8042EBC8 (g_drawHIO)
//	8020D1CC: 8042EBC8 (g_drawHIO)
//	8020D1F4: 8042EBC8 (g_drawHIO)
//	8020D1F8: 8042EBC8 (g_drawHIO)
//	8020D244: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterHakusha_c::updateHakusha() {
	nofralloc
#include "asm/d/meter/d_meter_hakusha/updateHakusha__15dMeterHakusha_cFv.s"
}
#pragma pop


/* 8020D258-8020D308 00B0+00 s=1 e=0 z=0  None .text      setAlphaHakushaAnimeMin__15dMeterHakusha_cFv                 */
//	8020D270: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	8020D274: 80454800 (lit_3793)
//	8020D284: 8042EBC8 (g_drawHIO)
//	8020D288: 8042EBC8 (g_drawHIO)
//	8020D290: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8020D294: 80430188 (g_meter2_info)
//	8020D298: 80430188 (g_meter2_info)
//	8020D2AC: 8021A9C8 (setAlphaAnimeMin__13dMeter2Draw_cFP13CPaneMgrAlphas)
//	8020D2B4: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	8020D2B8: 80454800 (lit_3793)
//	8020D2C8: 8042EBC8 (g_drawHIO)
//	8020D2CC: 8042EBC8 (g_drawHIO)
//	8020D2D4: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8020D2D8: 80430188 (g_meter2_info)
//	8020D2DC: 80430188 (g_meter2_info)
//	8020D2F0: 8021A9C8 (setAlphaAnimeMin__13dMeter2Draw_cFP13CPaneMgrAlphas)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterHakusha_c::setAlphaHakushaAnimeMin() {
	nofralloc
#include "asm/d/meter/d_meter_hakusha/setAlphaHakushaAnimeMin__15dMeterHakusha_cFv.s"
}
#pragma pop


/* 8020D308-8020D3B8 00B0+00 s=1 e=0 z=0  None .text      setAlphaHakushaAnimeMax__15dMeterHakusha_cFv                 */
//	8020D320: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	8020D324: 8042EBC8 (g_drawHIO)
//	8020D328: 8042EBC8 (g_drawHIO)
//	8020D340: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8020D344: 80430188 (g_meter2_info)
//	8020D348: 80430188 (g_meter2_info)
//	8020D35C: 8021AAA4 (setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas)
//	8020D364: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	8020D368: 8042EBC8 (g_drawHIO)
//	8020D36C: 8042EBC8 (g_drawHIO)
//	8020D384: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8020D388: 80430188 (g_meter2_info)
//	8020D38C: 80430188 (g_meter2_info)
//	8020D3A0: 8021AAA4 (setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterHakusha_c::setAlphaHakushaAnimeMax() {
	nofralloc
#include "asm/d/meter/d_meter_hakusha/setAlphaHakushaAnimeMax__15dMeterHakusha_cFv.s"
}
#pragma pop


/* 8020D3B8-8020D41C 0064+00 s=1 e=0 z=0  None .text      setAlphaButtonAnimeMin__15dMeterHakusha_cFv                  */
//	8020D3D0: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	8020D3D4: 80454800 (lit_3793)
//	8020D3E4: 80454808 (lit_3936)
//	8020D3E8: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8020D3EC: 80430188 (g_meter2_info)
//	8020D3F0: 80430188 (g_meter2_info)
//	8020D404: 8021A9C8 (setAlphaAnimeMin__13dMeter2Draw_cFP13CPaneMgrAlphas)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterHakusha_c::setAlphaButtonAnimeMin() {
	nofralloc
#include "asm/d/meter/d_meter_hakusha/setAlphaButtonAnimeMin__15dMeterHakusha_cFv.s"
}
#pragma pop


/* 8020D41C-8020D480 0064+00 s=1 e=0 z=0  None .text      setAlphaButtonAnimeMax__15dMeterHakusha_cFv                  */
//	8020D434: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	8020D438: 80454808 (lit_3936)
//	8020D44C: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8020D450: 80430188 (g_meter2_info)
//	8020D454: 80430188 (g_meter2_info)
//	8020D468: 8021AAA4 (setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterHakusha_c::setAlphaButtonAnimeMax() {
	nofralloc
#include "asm/d/meter/d_meter_hakusha/setAlphaButtonAnimeMax__15dMeterHakusha_cFv.s"
}
#pragma pop


/* 8020D480-8020D49C 001C+00 s=2 e=0 z=0  None .text      getHakushaNum__15dMeterHakusha_cFv                           */
//	8020D480: 8042EBC8 (g_drawHIO)
//	8020D484: 8042EBC8 (g_drawHIO)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterHakusha_c::getHakushaNum() {
	nofralloc
#include "asm/d/meter/d_meter_hakusha/getHakushaNum__15dMeterHakusha_cFv.s"
}
#pragma pop


