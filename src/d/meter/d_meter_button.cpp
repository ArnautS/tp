// 
// Generated By: dol2asm
// Translation Unit: d/meter/d_meter_button
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "d/meter/d_meter_button.h"

// 
// Types:
// 

struct dSv_player_item_c {
	/* 80033030 */ // False False
//  int False
//  bool False
void getItem(int, bool) const;
};

struct dSv_event_c {
	/* 800349BC */ // False False
//  u16 False
void isEventBit(u16) const;
};

struct dMsgString_c {
	/* 80249C20 */ // False False
dMsgString_c();
	/* 80249D28 */ // False False
~dMsgString_c();
};

struct J2DTextBox {
	/* 80300658 */ // False False
void getStringPtr() const;
	/* 8030074C */ // False False
//  s16 False
//  char const* False
// 	 char const False
// 		 char False
//  ... False
void setString(s16, char const*, ...);
};

struct JUTFont {
};

struct COutFont_c {
	/* 80225C94 */ // False False
//  u8 False
COutFont_c(u8);
};

struct dMsgObject_c {
	/* 802370A8 */ // False False
void isGetItemMessage();
	/* 802370BC */ // False False
void isKanbanMessage();
	/* 802370E8 */ // False False
void isHowlMessage();
	/* 802371B0 */ // False False
void isMidonaTalkWait();
	/* 802371E4 */ // False False
void isPlaceMessage();
	/* 802371F8 */ // False False
void isBossMessage();
	/* 8023720C */ // False False
//  bool False
bool isBookMessage();
	/* 80237214 */ // False False
void isStaffMessage();
	/* 802380F4 */ // False False
//  u32 False
//  J2DTextBox* False
// 	 J2DTextBox False
//  J2DTextBox* False
// 	 J2DTextBox False
//  JUTFont* False
// 	 JUTFont False
//  COutFont_c* False
// 	 COutFont_c False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  s16* False
// 	 s16 False
void getString(u32, J2DTextBox*, J2DTextBox*, JUTFont*, COutFont_c*, char*, char*, char*, s16*);
	/* 8023822C */ // False False
void getStatus();
	/* 80238258 */ // False False
void getScrnDrawPtr();
};

struct J2DPane {
	/* 802F7100 */ // False False
void getBounds();
};

struct JKRArchive {
};

struct J2DGrafContext {
};

struct J2DScreen {
	/* 802F8498 */ // False False
J2DScreen();
	/* 802F8648 */ // False False
//  char const* False
// 	 char const False
// 		 char False
//  u32 False
//  JKRArchive* False
// 	 JKRArchive False
void setPriority(char const*, u32, JKRArchive*);
	/* 802F8ED4 */ // False False
//  f32 False
//  f32 False
//  J2DGrafContext const* False
// 	 J2DGrafContext const False
// 		 J2DGrafContext False
void draw(f32, f32, J2DGrafContext const*);
};

struct JKRExpHeap {
};

struct CPaneMgr {
	/* 80253984 */ // False False
//  J2DScreen* False
// 	 J2DScreen False
//  u64 False
//  u8 False
//  JKRExpHeap* False
// 	 JKRExpHeap False
CPaneMgr(J2DScreen*, u64, u8, JKRExpHeap*);
	/* 80253930 */ // False False
CPaneMgr();
	/* 80253A18 */ // False False
~CPaneMgr();
	/* 802545B0 */ // False False
//  f32 False
//  f32 False
void paneTrans(f32, f32);
	/* 80254C90 */ // False False
//  J2DPane* False
// 	 J2DPane False
//  f32 (* )[3][4] False
// 	 f32 False
// 	 * False
// 		  False
//  u8 False
//  bool False
//  s16 False
void getGlobalVtx(J2DPane*, f32 (* )[3][4], u8, bool, s16);
	/* 80254EBC */ // False False
//  J2DPane* False
// 	 J2DPane False
//  bool False
//  s16 False
void getGlobalVtxCenter(J2DPane*, bool, s16);
};

struct dMeterButton_c {
	/* 80201328 */ // False False
dMeterButton_c();
	/* 80201370 */ // True False
~dMeterButton_c();
	/* 802013CC */ // True False
void _create();
	/* 80201404 */ // False False
//  u32 False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
void _execute(u32, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool);
	/* 80202240 */ // True False
void draw();
	/* 80202A9C */ // True False
void _delete();
	/* 802032C4 */ // True False
//  u32 False
//  bool False
void alphaAnimeButtonA(u32, bool);
	/* 8020339C */ // True False
//  u32 False
//  bool False
void alphaAnimeButtonB(u32, bool);
	/* 802034A8 */ // True False
//  u32 False
//  bool False
void alphaAnimeButtonR(u32, bool);
	/* 802035AC */ // True False
//  u32 False
//  bool False
void alphaAnimeButtonZ(u32, bool);
	/* 802036C0 */ // True False
//  u32 False
//  bool False
void alphaAnimeButton3D(u32, bool);
	/* 802037B8 */ // True False
//  u32 False
//  bool False
void alphaAnimeButtonC(u32, bool);
	/* 80203878 */ // True False
//  u32 False
//  bool False
void alphaAnimeButtonS(u32, bool);
	/* 802038F4 */ // True False
//  u32 False
//  bool False
void alphaAnimeButtonX(u32, bool);
	/* 80203A08 */ // True False
//  u32 False
//  bool False
void alphaAnimeButtonY(u32, bool);
	/* 80203B1C */ // True False
//  u32 False
//  bool False
void alphaAnimeButtonNun(u32, bool);
	/* 80203C30 */ // True False
//  u32 False
//  bool False
void alphaAnimeButtonRemo(u32, bool);
	/* 80203D44 */ // True False
//  u32 False
//  bool False
void alphaAnimeButtonRemo2(u32, bool);
	/* 80203E58 */ // True False
//  u32 False
//  bool False
void alphaAnimeButtonAR(u32, bool);
	/* 80203F60 */ // True False
//  u32 False
//  bool False
void alphaAnimeButton3DB(u32, bool);
	/* 80204068 */ // True False
//  u32 False
//  bool False
void alphaAnimeButtonNURE(u32, bool);
	/* 80204170 */ // True False
//  u32 False
//  bool False
void alphaAnimeButtonReel(u32, bool);
	/* 80204278 */ // True False
//  u32 False
//  bool False
void alphaAnimeButtonReel2(u32, bool);
	/* 80204368 */ // True False
//  u32 False
//  bool False
void alphaAnimeButtonAB(u32, bool);
	/* 80204458 */ // True False
//  u32 False
//  bool False
void alphaAnimeButtonTate(u32, bool);
	/* 80204548 */ // True False
//  u32 False
//  bool False
void alphaAnimeButtonNunZ(u32, bool);
	/* 80204620 */ // True False
//  u32 False
//  bool False
void alphaAnimeButtonNunC(u32, bool);
	/* 802046F8 */ // True False
//  u32 False
//  bool False
void alphaAnimeButtonBin(u32, bool);
	/* 802047E8 */ // True False
void screenInitButton();
	/* 80205834 */ // True False
void screenInitText();
	/* 80205CA0 */ // True False
void updateButton();
	/* 80206978 */ // True False
//  u32 False
void updateText(u32);
	/* 80206CE0 */ // True False
void setAlphaButtonAAnimeMin();
	/* 80206D70 */ // True False
//  int False
void isFastSet(int);
	/* 80207060 */ // True False
void setAlphaButtonAAnimeMax();
	/* 8020714C */ // True False
void setAlphaButtonBAnimeMin();
	/* 802071DC */ // True False
void setAlphaButtonBAnimeMax();
	/* 802072C8 */ // True False
void setAlphaButtonRAnimeMin();
	/* 80207358 */ // True False
void setAlphaButtonRAnimeMax();
	/* 80207444 */ // True False
void setAlphaButtonZAnimeMin();
	/* 802074D4 */ // True False
void setAlphaButtonZAnimeMax();
	/* 802075C0 */ // True False
void setAlphaButton3DAnimeMin();
	/* 80207654 */ // True False
void setAlphaButton3DAnimeMax();
	/* 80207740 */ // True False
//  void False
void setAlphaButton3DVAnimeMin();
	/* 80207744 */ // True False
//  void False
void setAlphaButton3DVAnimeMax();
	/* 80207748 */ // True False
void setAlphaButtonCAnimeMin();
	/* 802077EC */ // True False
void setAlphaButtonCAnimeMax();
	/* 80207A28 */ // True False
void setAlphaButtonSAnimeMin();
	/* 80207AB8 */ // True False
void setAlphaButtonSAnimeMax();
	/* 80207BA4 */ // True False
void setAlphaButtonXAnimeMin();
	/* 80207C34 */ // True False
void setAlphaButtonXAnimeMax();
	/* 80207D20 */ // True False
void setAlphaButtonYAnimeMin();
	/* 80207DB0 */ // True False
void setAlphaButtonYAnimeMax();
	/* 80207E9C */ // True False
void setAlphaButtonNunAnimeMin();
	/* 80207F34 */ // True False
void setAlphaButtonNunAnimeMax();
	/* 80208028 */ // True False
void setAlphaButtonRemoAnimeMin();
	/* 802080C0 */ // True False
void setAlphaButtonRemoAnimeMax();
	/* 802081B4 */ // True False
void setAlphaButtonRemo2AnimeMin();
	/* 8020824C */ // True False
void setAlphaButtonRemo2AnimeMax();
	/* 80208340 */ // True False
void setAlphaButtonARAnimeMin();
	/* 802083D8 */ // True False
void setAlphaButtonARAnimeMax();
	/* 802084D8 */ // True False
void setAlphaButton3DBAnimeMin();
	/* 80208570 */ // True False
void setAlphaButton3DBAnimeMax();
	/* 80208670 */ // True False
void setAlphaButtonNUREAnimeMin();
	/* 80208708 */ // True False
void setAlphaButtonNUREAnimeMax();
	/* 80208808 */ // True False
void setAlphaButtonReelAnimeMin();
	/* 802088A0 */ // True False
void setAlphaButtonReelAnimeMax();
	/* 802089A0 */ // True False
void setAlphaButtonReel2AnimeMin();
	/* 80208A38 */ // True False
void setAlphaButtonReel2AnimeMax();
	/* 80208AEC */ // True False
void setAlphaButtonABAnimeMin();
	/* 80208B84 */ // True False
void setAlphaButtonABAnimeMax();
	/* 80208C38 */ // True False
void setAlphaButtonTateAnimeMin();
	/* 80208CD0 */ // True False
void setAlphaButtonTateAnimeMax();
	/* 80208D84 */ // True False
void setAlphaButtonNunZAnimeMin();
	/* 80208E1C */ // True False
void setAlphaButtonNunZAnimeMax();
	/* 80208F1C */ // True False
void setAlphaButtonNunCAnimeMin();
	/* 80208FB4 */ // True False
void setAlphaButtonNunCAnimeMax();
	/* 802090B4 */ // True False
void setAlphaButtonBinAnimeMin();
	/* 8020914C */ // True False
void setAlphaButtonBinAnimeMax();
	/* 8020924C */ // True False
//  int False
void setAlphaButtonOAnimeMin(int);
	/* 802092C0 */ // True False
//  int False
void setAlphaButtonOAnimeMax(int);
	/* 80209368 */ // True False
void setAlphaIconAnimeMin();
	/* 802093D8 */ // True False
void setAlphaIconAnimeMax();
	/* 80209474 */ // False False
void isClose();
	/* 802095C0 */ // False False
//  char* False
// 	 char False
//  u8 False
//  u8 False
//  u8 False
void setString(char*, u8, u8, u8);
	/* 80209CEC */ // False False
void hideAll();
	/* 80209D7C */ // True False
//  u8 False
//  char* False
// 	 char False
//  int False
void getCenterPosCalc(u8, char*, int);
	/* 8020A540 */ // True False
//  int False
//  f32 False
void trans_button(int, f32);
	/* 8020A94C */ // True False
//  u8 False
void hide_button(u8);
	/* 8020AA84 */ // True False
void pikariCheck();
	/* 8020AE68 */ // True False
//  CPaneMgr* False
// 	 CPaneMgr False
//  f32 False
//  f32 False
//  u8 False
void paneTrans(CPaneMgr*, f32, f32, u8);
};

struct J2DPicture {
};

struct dMeter2Info_c {
	/* 8021C1F0 */ // False False
void decFloatingMessageTimer();
	/* 8021C218 */ // False False
void resetFloatingMessage();
	/* 8021C6A4 */ // False False
//  J2DTextBox* False
// 	 J2DTextBox False
//  char* False
// 	 char False
void getStringLength(J2DTextBox*, char*);
	/* 8021CF08 */ // False False
//  u8 False
//  void* False
// 	 void False
//  J2DPicture* False
// 	 J2DPicture False
//  void* False
// 	 void False
//  J2DPicture* False
// 	 J2DPicture False
//  void* False
// 	 void False
//  J2DPicture* False
// 	 J2DPicture False
//  void* False
// 	 void False
//  J2DPicture* False
// 	 J2DPicture False
//  int False
void readItemTexture(u8, void*, J2DPicture*, void*, J2DPicture*, void*, J2DPicture*, void*, J2DPicture*, int);
};

struct JUtility {
	struct TColor {
	};

};

struct CPaneMgrAlpha {
	/* 802555C8 */ // False False
void show();
	/* 80255608 */ // False False
void hide();
	/* 802557D0 */ // False False
//  f32 False
void setAlphaRate(f32);
	/* 80255828 */ // False False
void getAlphaRate();
};

struct dMeter2Draw_c {
	/* 802140DC */ // False False
//  f32 False
//  f32 False
//  f32* False
// 	 f32 False
//  f32 False
//  JUtility::TColor False
//  JUtility::TColor False
//  JUtility::TColor False
//  JUtility::TColor False
//  f32 False
//  u8 False
void drawPikari(f32, f32, f32*, f32, JUtility::TColor, JUtility::TColor, JUtility::TColor, JUtility::TColor, f32, u8);
	/* 8021AAA4 */ // False False
//  CPaneMgrAlpha* False
// 	 CPaneMgrAlpha False
//  s16 False
void setAlphaAnimeMax(CPaneMgrAlpha*, s16);
	/* 8021BBB4 */ // False False
void getCanoeFishing();
};

struct dComIfG_play_c {
	/* 8002C97C */ // False False
//  int False
void getLayerNo(int);
};

struct Vec {
};

struct JAISoundID {
};

struct Z2SeMgr {
	/* 802AB984 */ // False False
//  JAISoundID False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  u32 False
//  s8 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  u8 False
void seStart(JAISoundID, Vec const*, u32, s8, f32, f32, f32, f32, u8);
};

struct JKRHeap {
	/* 802CE4D4 */ // False False
//  u32 False
//  int False
void alloc(u32, int);
	/* 802CE548 */ // False False
//  void* False
// 	 void False
void free(void*);
};

// 
// Forward References:
// 


// False False
extern "C" void __ct__14dMeterButton_cFv();
// True False
extern "C" void __dt__14dMeterButton_cFv();
// True False
extern "C" void _create__14dMeterButton_cFv();
// False False
//  u32 False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
extern "C" void _execute__14dMeterButton_cFUlbbbbbbbbbbbbbbbbbbbbbb();
// True False
extern "C" void draw__14dMeterButton_cFv();
// True False
extern "C" void _delete__14dMeterButton_cFv();
// True False
//  u32 False
//  bool False
extern "C" void alphaAnimeButtonA__14dMeterButton_cFUlb();
// True False
//  u32 False
//  bool False
extern "C" void alphaAnimeButtonB__14dMeterButton_cFUlb();
// True False
//  u32 False
//  bool False
extern "C" void alphaAnimeButtonR__14dMeterButton_cFUlb();
// True False
//  u32 False
//  bool False
extern "C" void alphaAnimeButtonZ__14dMeterButton_cFUlb();
// True False
//  u32 False
//  bool False
extern "C" void alphaAnimeButton3D__14dMeterButton_cFUlb();
// True False
//  u32 False
//  bool False
extern "C" void alphaAnimeButtonC__14dMeterButton_cFUlb();
// True False
//  u32 False
//  bool False
extern "C" void alphaAnimeButtonS__14dMeterButton_cFUlb();
// True False
//  u32 False
//  bool False
extern "C" void alphaAnimeButtonX__14dMeterButton_cFUlb();
// True False
//  u32 False
//  bool False
extern "C" void alphaAnimeButtonY__14dMeterButton_cFUlb();
// True False
//  u32 False
//  bool False
extern "C" void alphaAnimeButtonNun__14dMeterButton_cFUlb();
// True False
//  u32 False
//  bool False
extern "C" void alphaAnimeButtonRemo__14dMeterButton_cFUlb();
// True False
//  u32 False
//  bool False
extern "C" void alphaAnimeButtonRemo2__14dMeterButton_cFUlb();
// True False
//  u32 False
//  bool False
extern "C" void alphaAnimeButtonAR__14dMeterButton_cFUlb();
// True False
//  u32 False
//  bool False
extern "C" void alphaAnimeButton3DB__14dMeterButton_cFUlb();
// True False
//  u32 False
//  bool False
extern "C" void alphaAnimeButtonNURE__14dMeterButton_cFUlb();
// True False
//  u32 False
//  bool False
extern "C" void alphaAnimeButtonReel__14dMeterButton_cFUlb();
// True False
//  u32 False
//  bool False
extern "C" void alphaAnimeButtonReel2__14dMeterButton_cFUlb();
// True False
//  u32 False
//  bool False
extern "C" void alphaAnimeButtonAB__14dMeterButton_cFUlb();
// True False
//  u32 False
//  bool False
extern "C" void alphaAnimeButtonTate__14dMeterButton_cFUlb();
// True False
//  u32 False
//  bool False
extern "C" void alphaAnimeButtonNunZ__14dMeterButton_cFUlb();
// True False
//  u32 False
//  bool False
extern "C" void alphaAnimeButtonNunC__14dMeterButton_cFUlb();
// True False
//  u32 False
//  bool False
extern "C" void alphaAnimeButtonBin__14dMeterButton_cFUlb();
// True False
extern "C" void screenInitButton__14dMeterButton_cFv();
// True False
extern "C" void screenInitText__14dMeterButton_cFv();
// True False
extern "C" void updateButton__14dMeterButton_cFv();
// True False
//  u32 False
extern "C" void updateText__14dMeterButton_cFUl();
// True False
extern "C" void setAlphaButtonAAnimeMin__14dMeterButton_cFv();
// True False
//  int False
extern "C" void isFastSet__14dMeterButton_cFi();
// True False
extern "C" void setAlphaButtonAAnimeMax__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonBAnimeMin__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonBAnimeMax__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonRAnimeMin__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonRAnimeMax__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonZAnimeMin__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonZAnimeMax__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButton3DAnimeMin__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButton3DAnimeMax__14dMeterButton_cFv();
// True False
//  void False
extern "C" void setAlphaButton3DVAnimeMin__14dMeterButton_cFv();
// True False
//  void False
extern "C" void setAlphaButton3DVAnimeMax__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonCAnimeMin__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonCAnimeMax__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonSAnimeMin__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonSAnimeMax__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonXAnimeMin__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonXAnimeMax__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonYAnimeMin__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonYAnimeMax__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonNunAnimeMin__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonNunAnimeMax__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonRemoAnimeMin__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonRemoAnimeMax__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonRemo2AnimeMin__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonRemo2AnimeMax__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonARAnimeMin__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonARAnimeMax__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButton3DBAnimeMin__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButton3DBAnimeMax__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonNUREAnimeMin__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonNUREAnimeMax__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonReelAnimeMin__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonReelAnimeMax__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonReel2AnimeMin__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonReel2AnimeMax__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonABAnimeMin__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonABAnimeMax__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonTateAnimeMin__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonTateAnimeMax__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonNunZAnimeMin__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonNunZAnimeMax__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonNunCAnimeMin__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonNunCAnimeMax__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonBinAnimeMin__14dMeterButton_cFv();
// True False
extern "C" void setAlphaButtonBinAnimeMax__14dMeterButton_cFv();
// True False
//  int False
extern "C" void setAlphaButtonOAnimeMin__14dMeterButton_cFi();
// True False
//  int False
extern "C" void setAlphaButtonOAnimeMax__14dMeterButton_cFi();
// True False
extern "C" void setAlphaIconAnimeMin__14dMeterButton_cFv();
// True False
extern "C" void setAlphaIconAnimeMax__14dMeterButton_cFv();
// False False
extern "C" void isClose__14dMeterButton_cFv();
// False False
//  char* False
// 	 char False
//  u8 False
//  u8 False
//  u8 False
extern "C" void setString__14dMeterButton_cFPcUcUcUc();
// False False
extern "C" void hideAll__14dMeterButton_cFv();
// True False
//  u8 False
//  char* False
// 	 char False
//  int False
extern "C" void getCenterPosCalc__14dMeterButton_cFUcPci();
// True False
//  int False
//  f32 False
extern "C" void trans_button__14dMeterButton_cFif();
// True False
//  u8 False
extern "C" void hide_button__14dMeterButton_cFUc();
// True False
extern "C" void pikariCheck__14dMeterButton_cFv();
// True False
//  CPaneMgr* False
// 	 CPaneMgr False
//  f32 False
//  f32 False
//  u8 False
extern "C" void paneTrans__14dMeterButton_cFP8CPaneMgrffUc();
extern "C" extern char const* const d_meter_d_meter_button__stringBase0;
extern "C" extern void* __vt__14dMeterButton_c[4];

// 
// External References:
// 

// False False
void mDoExt_getCurrentHeap();
// False False
void mDoExt_getMesgFont();
// False False
//  int False
//  int False
void dComIfGs_isOneZoneSwitch(int, int);
// False False
//  J2DScreen* False
// 	 J2DScreen False
void dPaneClass_showNullPane(J2DScreen*);
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
//  f32 False
void cLib_addCalc2(f32*, f32, f32, f32);
// False False
//  void* False
// 	 void False
//  u32 False
void* operator new(u32);
// False False
//  void False
//  void* False
// 	 void False
void operator delete(void*);

// False False
extern "C" void mDoExt_getCurrentHeap__Fv();
// False False
extern "C" void mDoExt_getMesgFont__Fv();
// False False
//  int False
extern "C" void getLayerNo__14dComIfG_play_cFi();
// False False
//  int False
//  int False
extern "C" void dComIfGs_isOneZoneSwitch__Fii();
// False False
//  int False
//  bool False
extern "C" void getItem__17dSv_player_item_cCFib();
// False False
//  u16 False
extern "C" void isEventBit__11dSv_event_cCFUs();
// False False
//  f32 False
//  f32 False
//  f32* False
// 	 f32 False
//  f32 False
//  JUtility::TColor False
//  JUtility::TColor False
//  JUtility::TColor False
//  JUtility::TColor False
//  f32 False
//  u8 False
extern "C" void drawPikari__13dMeter2Draw_cFffPffQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorfUc();
// False False
//  CPaneMgrAlpha* False
// 	 CPaneMgrAlpha False
//  s16 False
extern "C" void setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas();
// False False
extern "C" void getCanoeFishing__13dMeter2Draw_cFv();
// False False
extern "C" void decFloatingMessageTimer__13dMeter2Info_cFv();
// False False
extern "C" void resetFloatingMessage__13dMeter2Info_cFv();
// False False
//  J2DTextBox* False
// 	 J2DTextBox False
//  char* False
// 	 char False
extern "C" void getStringLength__13dMeter2Info_cFP10J2DTextBoxPc();
// False False
//  u8 False
//  void* False
// 	 void False
//  J2DPicture* False
// 	 J2DPicture False
//  void* False
// 	 void False
//  J2DPicture* False
// 	 J2DPicture False
//  void* False
// 	 void False
//  J2DPicture* False
// 	 J2DPicture False
//  void* False
// 	 void False
//  J2DPicture* False
// 	 J2DPicture False
//  int False
extern "C" void readItemTexture__13dMeter2Info_cFUcPvP10J2DPicturePvP10J2DPicturePvP10J2DPicturePvP10J2DPicturei();
// False False
//  u8 False
extern "C" void __ct__10COutFont_cFUc();
// False False
extern "C" void isGetItemMessage__12dMsgObject_cFv();
// False False
extern "C" void isKanbanMessage__12dMsgObject_cFv();
// False False
extern "C" void isHowlMessage__12dMsgObject_cFv();
// False False
extern "C" void isMidonaTalkWait__12dMsgObject_cFv();
// False False
extern "C" void isPlaceMessage__12dMsgObject_cFv();
// False False
extern "C" void isBossMessage__12dMsgObject_cFv();
// False False
//  bool False
extern "C" bool isBookMessage__12dMsgObject_cFv();
// False False
extern "C" void isStaffMessage__12dMsgObject_cFv();
// False False
//  u32 False
//  J2DTextBox* False
// 	 J2DTextBox False
//  J2DTextBox* False
// 	 J2DTextBox False
//  JUTFont* False
// 	 JUTFont False
//  COutFont_c* False
// 	 COutFont_c False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  char* False
// 	 char False
//  s16* False
// 	 s16 False
extern "C" void getString__12dMsgObject_cFUlP10J2DTextBoxP10J2DTextBoxP7JUTFontP10COutFont_cPcPcPcPs();
// False False
extern "C" void getStatus__12dMsgObject_cFv();
// False False
extern "C" void getScrnDrawPtr__12dMsgObject_cFv();
// False False
extern "C" void __ct__12dMsgString_cFv();
// False False
extern "C" void __dt__12dMsgString_cFv();
// False False
extern "C" void __ct__8CPaneMgrFv();
// False False
//  J2DScreen* False
// 	 J2DScreen False
//  u64 False
//  u8 False
//  JKRExpHeap* False
// 	 JKRExpHeap False
extern "C" void __ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap();
// False False
extern "C" void __dt__8CPaneMgrFv();
// False False
//  f32 False
//  f32 False
extern "C" void paneTrans__8CPaneMgrFff();
// False False
//  J2DPane* False
// 	 J2DPane False
//  f32 (* )[3][4] False
// 	 f32 False
// 	 * False
// 		  False
//  u8 False
//  bool False
//  s16 False
extern "C" void getGlobalVtx__8CPaneMgrFP7J2DPanePA3_A4_fUcbs();
// False False
//  J2DPane* False
// 	 J2DPane False
//  bool False
//  s16 False
extern "C" void getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs();
// False False
//  J2DScreen* False
// 	 J2DScreen False
extern "C" void dPaneClass_showNullPane__FP9J2DScreen();
// False False
extern "C" void show__13CPaneMgrAlphaFv();
// False False
extern "C" void hide__13CPaneMgrAlphaFv();
// False False
//  f32 False
extern "C" void setAlphaRate__13CPaneMgrAlphaFf();
// False False
extern "C" void getAlphaRate__13CPaneMgrAlphaFv();
// False False
//  f32* False
// 	 f32 False
//  f32 False
//  f32 False
//  f32 False
extern "C" void cLib_addCalc2__FPffff();
// False False
//  JAISoundID False
//  Vec const* False
// 	 Vec const False
// 		 Vec False
//  u32 False
//  s8 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  u8 False
extern "C" void seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc();
// False False
//  u32 False
//  int False
extern "C" void alloc__7JKRHeapFUli();
// False False
//  void* False
// 	 void False
extern "C" void free__7JKRHeapFPv();
// False False
//  void* False
// 	 void False
//  u32 False
extern "C" void* __nw__FUl();
// False False
//  void False
//  void* False
// 	 void False
extern "C" void __dl__FPv();
// False False
extern "C" void getBounds__7J2DPaneFv();
// False False
extern "C" void __ct__9J2DScreenFv();
// False False
//  char const* False
// 	 char const False
// 		 char False
//  u32 False
//  JKRArchive* False
// 	 JKRArchive False
extern "C" void setPriority__9J2DScreenFPCcUlP10JKRArchive();
// False False
//  f32 False
//  f32 False
//  J2DGrafContext const* False
// 	 J2DGrafContext const False
// 		 J2DGrafContext False
extern "C" void draw__9J2DScreenFffPC14J2DGrafContext();
// False False
extern "C" void getStringPtr__10J2DTextBoxCFv();
// False False
//  s16 False
//  char const* False
// 	 char const False
// 		 char False
//  ... False
extern "C" void setString__10J2DTextBoxFsPCce();
// False False
extern "C" void __save_gpr();
// False False
extern "C" void _savegpr_21();
// False False
extern "C" void _savegpr_24();
// False False
extern "C" void _savegpr_25();
// False False
extern "C" void _savegpr_26();
// False False
extern "C" void _savegpr_27();
// False False
extern "C" void _savegpr_29();
// False False
extern "C" void __restore_gpr();
// False False
extern "C" void _restgpr_21();
// False False
extern "C" void _restgpr_24();
// False False
extern "C" void _restgpr_25();
// False False
extern "C" void _restgpr_26();
// False False
extern "C" void _restgpr_27();
// False False
extern "C" void _restgpr_29();
// False False
extern "C" void strcmp();
// False False
extern "C" void strcpy();
extern "C" extern u8 const tempBitLabels__20dSv_event_tmp_flag_c[370 + 2 /* padding */];
extern "C" extern void* __vt__12dDlst_base_c[3];
extern "C" extern u8 g_dComIfG_gameInfo[122384];
extern "C" extern u8 g_drawHIO[3880];
extern "C" extern u8 g_meter2_info[248];
extern "C" extern u8 g_MsgObject_HIO_c[1040];
extern "C" extern u8 mAudioMgrPtr__10Z2AudioMgr[4 + 4 /* padding */];

// 
// Declarations:
// 

/* ############################################################################################## */
/* 803BF1A8-803BF200 0058+00 s=1 e=0 z=0  None .data      @7807                                                        */
SECTION_DATA static void* lit_7807[22] = {
	(void*)(((char*)getCenterPosCalc__14dMeterButton_cFUcPci)+0x12C),
	(void*)(((char*)getCenterPosCalc__14dMeterButton_cFUcPci)+0x178),
	(void*)(((char*)getCenterPosCalc__14dMeterButton_cFUcPci)+0x1C4),
	(void*)(((char*)getCenterPosCalc__14dMeterButton_cFUcPci)+0x214),
	(void*)(((char*)getCenterPosCalc__14dMeterButton_cFUcPci)+0x3DC),
	(void*)(((char*)getCenterPosCalc__14dMeterButton_cFUcPci)+0x4C8),
	(void*)(((char*)getCenterPosCalc__14dMeterButton_cFUcPci)+0x5A0),
	(void*)(((char*)getCenterPosCalc__14dMeterButton_cFUcPci)+0x5EC),
	(void*)(((char*)getCenterPosCalc__14dMeterButton_cFUcPci)+0x638),
	(void*)(((char*)getCenterPosCalc__14dMeterButton_cFUcPci)+0x714),
	(void*)(((char*)getCenterPosCalc__14dMeterButton_cFUcPci)+0x714),
	(void*)(((char*)getCenterPosCalc__14dMeterButton_cFUcPci)+0x714),
	(void*)(((char*)getCenterPosCalc__14dMeterButton_cFUcPci)+0x714),
	(void*)(((char*)getCenterPosCalc__14dMeterButton_cFUcPci)+0x684),
	(void*)(((char*)getCenterPosCalc__14dMeterButton_cFUcPci)+0x714),
	(void*)(((char*)getCenterPosCalc__14dMeterButton_cFUcPci)+0x714),
	(void*)(((char*)getCenterPosCalc__14dMeterButton_cFUcPci)+0x714),
	(void*)(((char*)getCenterPosCalc__14dMeterButton_cFUcPci)+0x714),
	(void*)(((char*)getCenterPosCalc__14dMeterButton_cFUcPci)+0x714),
	(void*)(((char*)getCenterPosCalc__14dMeterButton_cFUcPci)+0x714),
	(void*)(((char*)getCenterPosCalc__14dMeterButton_cFUcPci)+0x714),
	(void*)(((char*)getCenterPosCalc__14dMeterButton_cFUcPci)+0x6D0),
};

/* 803BF200-803BF258 0058+00 s=1 e=0 z=0  None .data      @7858                                                        */
SECTION_DATA static void* lit_7858[22] = {
	(void*)(((char*)trans_button__14dMeterButton_cFif)+0xBC),
	(void*)(((char*)trans_button__14dMeterButton_cFif)+0xE4),
	(void*)(((char*)trans_button__14dMeterButton_cFif)+0x10C),
	(void*)(((char*)trans_button__14dMeterButton_cFif)+0x134),
	(void*)(((char*)trans_button__14dMeterButton_cFif)+0x15C),
	(void*)(((char*)trans_button__14dMeterButton_cFif)+0x194),
	(void*)(((char*)trans_button__14dMeterButton_cFif)+0x1BC),
	(void*)(((char*)trans_button__14dMeterButton_cFif)+0x1E8),
	(void*)(((char*)trans_button__14dMeterButton_cFif)+0x210),
	(void*)(((char*)trans_button__14dMeterButton_cFif)+0x294),
	(void*)(((char*)trans_button__14dMeterButton_cFif)+0x294),
	(void*)(((char*)trans_button__14dMeterButton_cFif)+0x294),
	(void*)(((char*)trans_button__14dMeterButton_cFif)+0x294),
	(void*)(((char*)trans_button__14dMeterButton_cFif)+0x238),
	(void*)(((char*)trans_button__14dMeterButton_cFif)+0x294),
	(void*)(((char*)trans_button__14dMeterButton_cFif)+0x294),
	(void*)(((char*)trans_button__14dMeterButton_cFif)+0x294),
	(void*)(((char*)trans_button__14dMeterButton_cFif)+0x294),
	(void*)(((char*)trans_button__14dMeterButton_cFif)+0x294),
	(void*)(((char*)trans_button__14dMeterButton_cFif)+0x294),
	(void*)(((char*)trans_button__14dMeterButton_cFif)+0x294),
	(void*)(((char*)trans_button__14dMeterButton_cFif)+0x268),
};

/* 803BF258-803BF268 0010+00 s=2 e=0 z=0  None .data      __vt__14dMeterButton_c                                       */
SECTION_DATA void* __vt__14dMeterButton_c[4] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)draw__14dMeterButton_cFv,
	(void*)__dt__14dMeterButton_cFv,
};

/* 80201328-80201370 0048+00 s=0 e=1 z=1  None .text      __ct__14dMeterButton_cFv                                     */
//	8020133C: 803A6F88 (__vt__12dDlst_base_c)
//	80201340: 803A6F88 (__vt__12dDlst_base_c)
//	80201348: 803BF258 (__vt__14dMeterButton_c)
//	8020134C: 803BF258 (__vt__14dMeterButton_c)
//	80201354: 802013CC (_create__14dMeterButton_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm dMeterButton_c::dMeterButton_c() {
	nofralloc
#include "asm/d/meter/d_meter_button/__ct__14dMeterButton_cFv.s"
}
#pragma pop


/* 80201370-802013CC 005C+00 s=1 e=0 z=0  None .text      __dt__14dMeterButton_cFv                                     */
//	80201390: 803BF258 (__vt__14dMeterButton_c)
//	80201394: 803BF258 (__vt__14dMeterButton_c)
//	8020139C: 80202A9C (_delete__14dMeterButton_cFv)
//	802013AC: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm dMeterButton_c::~dMeterButton_c() {
	nofralloc
#include "asm/d/meter/d_meter_button/__dt__14dMeterButton_cFv.s"
}
#pragma pop


/* 802013CC-80201404 0038+00 s=1 e=0 z=0  None .text      _create__14dMeterButton_cFv                                  */
//	802013E0: 802047E8 (screenInitButton__14dMeterButton_cFv)
//	802013E8: 80205834 (screenInitText__14dMeterButton_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::_create() {
	nofralloc
#include "asm/d/meter/d_meter_button/_create__14dMeterButton_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454748-8045474C 0004+00 s=36 e=0 z=0  None .sdata2    @4146                                                        */
SECTION_SDATA2 static u8 lit_4146[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 8045474C-80454750 0004+00 s=30 e=0 z=0  None .sdata2    @4147                                                        */
SECTION_SDATA2 static f32 lit_4147 = 1.0f;

/* 80454750-80454754 0004+00 s=2 e=0 z=0  None .sdata2    @4148                                                        */
SECTION_SDATA2 static f32 lit_4148 = 10.0f;

/* 80454754-80454758 0004+00 s=1 e=0 z=0  None .sdata2    @4149                                                        */
SECTION_SDATA2 static f32 lit_4149 = 1.0f / 10.0f;

/* 80201404-80202240 0E3C+00 s=0 e=1 z=0  None .text      _execute__14dMeterButton_cFUlbbbbbbbbbbbbbbbbbbbbbb          */
//	8020141C: 803621A0 (__save_gpr)
//	80201464: 80205CA0 (updateButton__14dMeterButton_cFv)
//	80201470: 80206978 (updateText__14dMeterButton_cFUl)
//	8020147C: 804061C0 (g_dComIfG_gameInfo)
//	80201480: 804061C0 (g_dComIfG_gameInfo)
//	80201488: 803790C0 (tempBitLabels__20dSv_event_tmp_flag_c)
//	8020148C: 803790C0 (tempBitLabels__20dSv_event_tmp_flag_c)
//	80201494: 800349BC (isEventBit__11dSv_event_cCFUs)
//	802014A0: 8023822C (getStatus__12dMsgObject_cFv)
//	802014CC: 802032C4 (alphaAnimeButtonA__14dMeterButton_cFUlb)
//	802014E0: 8020339C (alphaAnimeButtonB__14dMeterButton_cFUlb)
//	802014F4: 802034A8 (alphaAnimeButtonR__14dMeterButton_cFUlb)
//	80201508: 802035AC (alphaAnimeButtonZ__14dMeterButton_cFUlb)
//	8020151C: 802036C0 (alphaAnimeButton3D__14dMeterButton_cFUlb)
//	80201530: 802037B8 (alphaAnimeButtonC__14dMeterButton_cFUlb)
//	80201544: 80203878 (alphaAnimeButtonS__14dMeterButton_cFUlb)
//	80201558: 802038F4 (alphaAnimeButtonX__14dMeterButton_cFUlb)
//	8020156C: 80203A08 (alphaAnimeButtonY__14dMeterButton_cFUlb)
//	80201580: 80203B1C (alphaAnimeButtonNun__14dMeterButton_cFUlb)
//	80201594: 80203C30 (alphaAnimeButtonRemo__14dMeterButton_cFUlb)
//	802015A8: 80203D44 (alphaAnimeButtonRemo2__14dMeterButton_cFUlb)
//	802015BC: 80203E58 (alphaAnimeButtonAR__14dMeterButton_cFUlb)
//	802015D0: 80203F60 (alphaAnimeButton3DB__14dMeterButton_cFUlb)
//	802015E4: 80204068 (alphaAnimeButtonNURE__14dMeterButton_cFUlb)
//	802015F8: 80204170 (alphaAnimeButtonReel__14dMeterButton_cFUlb)
//	8020160C: 80204278 (alphaAnimeButtonReel2__14dMeterButton_cFUlb)
//	80201620: 80204368 (alphaAnimeButtonAB__14dMeterButton_cFUlb)
//	80201634: 80204458 (alphaAnimeButtonTate__14dMeterButton_cFUlb)
//	80201648: 80204548 (alphaAnimeButtonNunZ__14dMeterButton_cFUlb)
//	8020165C: 80204620 (alphaAnimeButtonNunC__14dMeterButton_cFUlb)
//	80201670: 802046F8 (alphaAnimeButtonBin__14dMeterButton_cFUlb)
//	8020167C: 8020AA84 (pikariCheck__14dMeterButton_cFv)
//	802018EC: 802092C0 (setAlphaButtonOAnimeMax__14dMeterButton_cFi)
//	802018FC: 8020924C (setAlphaButtonOAnimeMin__14dMeterButton_cFi)
//	80201B44: 802093D8 (setAlphaIconAnimeMax__14dMeterButton_cFv)
//	80201B50: 80209368 (setAlphaIconAnimeMin__14dMeterButton_cFv)
//	80201B60: 804061C0 (g_dComIfG_gameInfo)
//	80201B64: 804061C0 (g_dComIfG_gameInfo)
//	80201E88: 804061C0 (g_dComIfG_gameInfo)
//	80201E8C: 804061C0 (g_dComIfG_gameInfo)
//	802021AC: 80454748 (lit_4146)
//	802021CC: 8045474C (lit_4147)
//	802021D0: 80454750 (lit_4148)
//	802021D4: 8026FA3C (cLib_addCalc2__FPffff)
//	802021EC: 80454754 (lit_4149)
//	80202208: 8020A540 (trans_button__14dMeterButton_cFif)
//	8020222C: 803621EC (__restore_gpr)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  u32 False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
//  bool False
asm void dMeterButton_c::_execute(u32 param_0, bool param_1, bool param_2, bool param_3, bool param_4, bool param_5, bool param_6, bool param_7, bool param_8, bool param_9, bool param_10, bool param_11, bool param_12, bool param_13, bool param_14, bool param_15, bool param_16, bool param_17, bool param_18, bool param_19, bool param_20, bool param_21, bool param_22) {
	nofralloc
#include "asm/d/meter/d_meter_button/_execute__14dMeterButton_cFUlbbbbbbbbbbbbbbbbbbbbbb.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454758-8045475C 0004+00 s=23 e=0 z=0  None .sdata2    @4513                                                        */
SECTION_SDATA2 static f32 lit_4513 = -1.0f;

/* 8045475C-80454760 0004+00 s=2 e=0 z=0  None .sdata2    @4514                                                        */
SECTION_SDATA2 static f32 lit_4514 = 18.0f;

/* 80454760-80454768 0004+04 s=1 e=0 z=0  None .sdata2    @4515                                                        */
SECTION_SDATA2 static f32 lit_4515[1 + 1 /* padding */] = {
	9.0f / 5.0f,
	/* padding */
	0.0f,
};

/* 80454768-80454770 0008+00 s=3 e=0 z=0  None .sdata2    @4517                                                        */
SECTION_SDATA2 static f64 lit_4517 = 4503601774854144.0 /* cast s32 to float */;

/* 80202240-80202A9C 085C+00 s=1 e=0 z=0  None .text      draw__14dMeterButton_cFv                                     */
//	80202268: 803621BC (_savegpr_21)
//	80202270: 804061C0 (g_dComIfG_gameInfo)
//	80202274: 804061C0 (g_dComIfG_gameInfo)
//	80202294: 80454748 (lit_4146)
//	802022A0: 802F8ED4 (draw__9J2DScreenFffPC14J2DGrafContext)
//	802022B0: 80454748 (lit_4146)
//	802022BC: 802F8ED4 (draw__9J2DScreenFffPC14J2DGrafContext)
//	802022C0: 80430188 (g_meter2_info)
//	802022C4: 80430188 (g_meter2_info)
//	802022D8: 80454748 (lit_4146)
//	802022E4: 802F8ED4 (draw__9J2DScreenFffPC14J2DGrafContext)
//	802022FC: 80300658 (getStringPtr__10J2DTextBoxCFv)
//	80202308: 80368B2C (strcpy)
//	80202310: 80454748 (lit_4146)
//	8020231C: 802F8ED4 (draw__9J2DScreenFffPC14J2DGrafContext)
//	8020235C: 80454758 (lit_4513)
//	80202378: 80300658 (getStringPtr__10J2DTextBoxCFv)
//	80202380: 80368B2C (strcpy)
//	80202390: 804061C0 (g_dComIfG_gameInfo)
//	80202394: 804061C0 (g_dComIfG_gameInfo)
//	80202398: 8042EBC8 (g_drawHIO)
//	8020239C: 8042EBC8 (g_drawHIO)
//	802023A0: 80430188 (g_meter2_info)
//	802023A4: 80430188 (g_meter2_info)
//	802023A8: 80454748 (lit_4146)
//	802023F0: 8045475C (lit_4514)
//	8020245C: 80454768 (lit_4517)
//	80202498: 80454768 (lit_4517)
//	802024CC: 8045474C (lit_4147)
//	80202568: 80454748 (lit_4146)
//	80202578: 8045475C (lit_4514)
//	802025BC: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	802025EC: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	8020261C: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	8020264C: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	8020267C: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	802026AC: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	802026DC: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	8020270C: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	8020273C: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	8020278C: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	802027F4: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	80202814: 8045475C (lit_4514)
//	8020282C: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80202840: 8045474C (lit_4147)
//	80202848: 80454758 (lit_4513)
//	80202854: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
//	802028B4: 80454760 (lit_4515)
//	802028D0: 802140DC (drawPikari__13dMeter2Draw_cFffPffQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorfUc)
//	80202928: 802140DC (drawPikari__13dMeter2Draw_cFffPffQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorfUc)
//	80202988: 802140DC (drawPikari__13dMeter2Draw_cFffPffQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorfUc)
//	80202998: 80206D70 (isFastSet__14dMeterButton_cFi)
//	802029F4: 802140DC (drawPikari__13dMeter2Draw_cFffPffQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorfUc)
//	80202A4C: 802140DC (drawPikari__13dMeter2Draw_cFffPffQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorfUc)
//	80202A88: 80362208 (_restgpr_21)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::draw() {
	nofralloc
#include "asm/d/meter/d_meter_button/draw__14dMeterButton_cFv.s"
}
#pragma pop


/* 80202A9C-802032C4 0828+00 s=1 e=0 z=0  None .text      _delete__14dMeterButton_cFv                                  */
//	80202AAC: 803621D4 (_savegpr_27)
//	80202AB4: 80430188 (g_meter2_info)
//	80202AB8: 80430188 (g_meter2_info)
//	80202ABC: 8021C218 (resetFloatingMessage__13dMeter2Info_cFv)
//	80202AC0: 80238258 (getScrnDrawPtr__12dMsgObject_cFv)
//	80202AD4: 804061C0 (g_dComIfG_gameInfo)
//	80202AD8: 804061C0 (g_dComIfG_gameInfo)
//	80202AE0: 802371B0 (isMidonaTalkWait__12dMsgObject_cFv)
//	80202AEC: 804061C0 (g_dComIfG_gameInfo)
//	80202AF0: 804061C0 (g_dComIfG_gameInfo)
//	80202AF8: 802371E4 (isPlaceMessage__12dMsgObject_cFv)
//	80202B08: 802370E8 (isHowlMessage__12dMsgObject_cFv)
//	80202B18: 802371F8 (isBossMessage__12dMsgObject_cFv)
//	80202B28: 8023720C (isBookMessage__12dMsgObject_cFv)
//	80202B38: 80237214 (isStaffMessage__12dMsgObject_cFv)
//	80202B48: 802370BC (isKanbanMessage__12dMsgObject_cFv)
//	80202B64: 804061C0 (g_dComIfG_gameInfo)
//	80202B68: 804061C0 (g_dComIfG_gameInfo)
//	80202B80: 804061C0 (g_dComIfG_gameInfo)
//	80202B84: 804061C0 (g_dComIfG_gameInfo)
//	80202BA0: 802370A8 (isGetItemMessage__12dMsgObject_cFv)
//	80202BAC: 804061C0 (g_dComIfG_gameInfo)
//	80202BB0: 804061C0 (g_dComIfG_gameInfo)
//	80202BD0: 802CE548 (free__7JKRHeapFPv)
//	80203258: 80249D28 (__dt__12dMsgString_cFv)
//	8020328C: 804061C0 (g_dComIfG_gameInfo)
//	80203290: 804061C0 (g_dComIfG_gameInfo)
//	802032B0: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::_delete() {
	nofralloc
#include "asm/d/meter/d_meter_button/_delete__14dMeterButton_cFv.s"
}
#pragma pop


/* 802032C4-8020339C 00D8+00 s=1 e=0 z=0  None .text      alphaAnimeButtonA__14dMeterButton_cFUlb                      */
//	802032D4: 803621DC (_savegpr_29)
//	802032EC: 8023822C (getStatus__12dMsgObject_cFv)
//	80203350: 80206CE0 (setAlphaButtonAAnimeMin__14dMeterButton_cFv)
//	80203368: 80207060 (setAlphaButtonAAnimeMax__14dMeterButton_cFv)
//	80203388: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
//  bool False
asm void dMeterButton_c::alphaAnimeButtonA(u32 param_0, bool param_1) {
	nofralloc
#include "asm/d/meter/d_meter_button/alphaAnimeButtonA__14dMeterButton_cFUlb.s"
}
#pragma pop


/* 8020339C-802034A8 010C+00 s=1 e=0 z=0  None .text      alphaAnimeButtonB__14dMeterButton_cFUlb                      */
//	802033AC: 803621DC (_savegpr_29)
//	802033C4: 8023822C (getStatus__12dMsgObject_cFv)
//	80203414: 804061C0 (g_dComIfG_gameInfo)
//	80203418: 804061C0 (g_dComIfG_gameInfo)
//	8020345C: 8020714C (setAlphaButtonBAnimeMin__14dMeterButton_cFv)
//	80203474: 802071DC (setAlphaButtonBAnimeMax__14dMeterButton_cFv)
//	80203494: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
//  bool False
asm void dMeterButton_c::alphaAnimeButtonB(u32 param_0, bool param_1) {
	nofralloc
#include "asm/d/meter/d_meter_button/alphaAnimeButtonB__14dMeterButton_cFUlb.s"
}
#pragma pop


/* 802034A8-802035AC 0104+00 s=1 e=0 z=0  None .text      alphaAnimeButtonR__14dMeterButton_cFUlb                      */
//	802034B8: 803621DC (_savegpr_29)
//	802034D0: 8023822C (getStatus__12dMsgObject_cFv)
//	80203510: 804061C0 (g_dComIfG_gameInfo)
//	80203514: 804061C0 (g_dComIfG_gameInfo)
//	80203560: 802072C8 (setAlphaButtonRAnimeMin__14dMeterButton_cFv)
//	80203578: 80207358 (setAlphaButtonRAnimeMax__14dMeterButton_cFv)
//	80203598: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
//  bool False
asm void dMeterButton_c::alphaAnimeButtonR(u32 param_0, bool param_1) {
	nofralloc
#include "asm/d/meter/d_meter_button/alphaAnimeButtonR__14dMeterButton_cFUlb.s"
}
#pragma pop


/* 802035AC-802036C0 0114+00 s=1 e=0 z=0  None .text      alphaAnimeButtonZ__14dMeterButton_cFUlb                      */
//	802035BC: 803621DC (_savegpr_29)
//	802035D4: 8023822C (getStatus__12dMsgObject_cFv)
//	80203624: 804061C0 (g_dComIfG_gameInfo)
//	80203628: 804061C0 (g_dComIfG_gameInfo)
//	80203674: 80207444 (setAlphaButtonZAnimeMin__14dMeterButton_cFv)
//	8020368C: 802074D4 (setAlphaButtonZAnimeMax__14dMeterButton_cFv)
//	802036AC: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
//  bool False
asm void dMeterButton_c::alphaAnimeButtonZ(u32 param_0, bool param_1) {
	nofralloc
#include "asm/d/meter/d_meter_button/alphaAnimeButtonZ__14dMeterButton_cFUlb.s"
}
#pragma pop


/* 802036C0-802037B8 00F8+00 s=1 e=0 z=0  None .text      alphaAnimeButton3D__14dMeterButton_cFUlb                     */
//	802036D0: 803621DC (_savegpr_29)
//	802036E8: 8023822C (getStatus__12dMsgObject_cFv)
//	80203734: 802075C0 (setAlphaButton3DAnimeMin__14dMeterButton_cFv)
//	8020373C: 80207740 (setAlphaButton3DVAnimeMin__14dMeterButton_cFv)
//	80203750: 804061C0 (g_dComIfG_gameInfo)
//	80203754: 804061C0 (g_dComIfG_gameInfo)
//	80203768: 802075C0 (setAlphaButton3DAnimeMin__14dMeterButton_cFv)
//	80203770: 80207744 (setAlphaButton3DVAnimeMax__14dMeterButton_cFv)
//	8020377C: 80207654 (setAlphaButton3DAnimeMax__14dMeterButton_cFv)
//	80203784: 80207740 (setAlphaButton3DVAnimeMin__14dMeterButton_cFv)
//	802037A4: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
//  bool False
asm void dMeterButton_c::alphaAnimeButton3D(u32 param_0, bool param_1) {
	nofralloc
#include "asm/d/meter/d_meter_button/alphaAnimeButton3D__14dMeterButton_cFUlb.s"
}
#pragma pop


/* 802037B8-80203878 00C0+00 s=1 e=0 z=0  None .text      alphaAnimeButtonC__14dMeterButton_cFUlb                      */
//	802037C8: 803621DC (_savegpr_29)
//	802037E0: 8023822C (getStatus__12dMsgObject_cFv)
//	8020382C: 80207748 (setAlphaButtonCAnimeMin__14dMeterButton_cFv)
//	80203844: 802077EC (setAlphaButtonCAnimeMax__14dMeterButton_cFv)
//	80203864: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
//  bool False
asm void dMeterButton_c::alphaAnimeButtonC(u32 param_0, bool param_1) {
	nofralloc
#include "asm/d/meter/d_meter_button/alphaAnimeButtonC__14dMeterButton_cFUlb.s"
}
#pragma pop


/* 80203878-802038F4 007C+00 s=1 e=0 z=0  None .text      alphaAnimeButtonS__14dMeterButton_cFUlb                      */
//	802038B0: 80207A28 (setAlphaButtonSAnimeMin__14dMeterButton_cFv)
//	802038C4: 80207AB8 (setAlphaButtonSAnimeMax__14dMeterButton_cFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
//  bool False
asm void dMeterButton_c::alphaAnimeButtonS(u32 param_0, bool param_1) {
	nofralloc
#include "asm/d/meter/d_meter_button/alphaAnimeButtonS__14dMeterButton_cFUlb.s"
}
#pragma pop


/* 802038F4-80203A08 0114+00 s=1 e=0 z=0  None .text      alphaAnimeButtonX__14dMeterButton_cFUlb                      */
//	80203904: 803621DC (_savegpr_29)
//	8020391C: 8023822C (getStatus__12dMsgObject_cFv)
//	8020396C: 804061C0 (g_dComIfG_gameInfo)
//	80203970: 804061C0 (g_dComIfG_gameInfo)
//	802039BC: 80207BA4 (setAlphaButtonXAnimeMin__14dMeterButton_cFv)
//	802039D4: 80207C34 (setAlphaButtonXAnimeMax__14dMeterButton_cFv)
//	802039F4: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
//  bool False
asm void dMeterButton_c::alphaAnimeButtonX(u32 param_0, bool param_1) {
	nofralloc
#include "asm/d/meter/d_meter_button/alphaAnimeButtonX__14dMeterButton_cFUlb.s"
}
#pragma pop


/* 80203A08-80203B1C 0114+00 s=1 e=0 z=0  None .text      alphaAnimeButtonY__14dMeterButton_cFUlb                      */
//	80203A18: 803621DC (_savegpr_29)
//	80203A30: 8023822C (getStatus__12dMsgObject_cFv)
//	80203A80: 804061C0 (g_dComIfG_gameInfo)
//	80203A84: 804061C0 (g_dComIfG_gameInfo)
//	80203AD0: 80207D20 (setAlphaButtonYAnimeMin__14dMeterButton_cFv)
//	80203AE8: 80207DB0 (setAlphaButtonYAnimeMax__14dMeterButton_cFv)
//	80203B08: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
//  bool False
asm void dMeterButton_c::alphaAnimeButtonY(u32 param_0, bool param_1) {
	nofralloc
#include "asm/d/meter/d_meter_button/alphaAnimeButtonY__14dMeterButton_cFUlb.s"
}
#pragma pop


/* 80203B1C-80203C30 0114+00 s=1 e=0 z=0  None .text      alphaAnimeButtonNun__14dMeterButton_cFUlb                    */
//	80203B2C: 803621DC (_savegpr_29)
//	80203B44: 8023822C (getStatus__12dMsgObject_cFv)
//	80203B94: 804061C0 (g_dComIfG_gameInfo)
//	80203B98: 804061C0 (g_dComIfG_gameInfo)
//	80203BE4: 80207E9C (setAlphaButtonNunAnimeMin__14dMeterButton_cFv)
//	80203BFC: 80207F34 (setAlphaButtonNunAnimeMax__14dMeterButton_cFv)
//	80203C1C: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
//  bool False
asm void dMeterButton_c::alphaAnimeButtonNun(u32 param_0, bool param_1) {
	nofralloc
#include "asm/d/meter/d_meter_button/alphaAnimeButtonNun__14dMeterButton_cFUlb.s"
}
#pragma pop


/* 80203C30-80203D44 0114+00 s=1 e=0 z=0  None .text      alphaAnimeButtonRemo__14dMeterButton_cFUlb                   */
//	80203C40: 803621DC (_savegpr_29)
//	80203C58: 8023822C (getStatus__12dMsgObject_cFv)
//	80203CA8: 804061C0 (g_dComIfG_gameInfo)
//	80203CAC: 804061C0 (g_dComIfG_gameInfo)
//	80203CF8: 80208028 (setAlphaButtonRemoAnimeMin__14dMeterButton_cFv)
//	80203D10: 802080C0 (setAlphaButtonRemoAnimeMax__14dMeterButton_cFv)
//	80203D30: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
//  bool False
asm void dMeterButton_c::alphaAnimeButtonRemo(u32 param_0, bool param_1) {
	nofralloc
#include "asm/d/meter/d_meter_button/alphaAnimeButtonRemo__14dMeterButton_cFUlb.s"
}
#pragma pop


/* 80203D44-80203E58 0114+00 s=1 e=0 z=0  None .text      alphaAnimeButtonRemo2__14dMeterButton_cFUlb                  */
//	80203D54: 803621DC (_savegpr_29)
//	80203D6C: 8023822C (getStatus__12dMsgObject_cFv)
//	80203DBC: 804061C0 (g_dComIfG_gameInfo)
//	80203DC0: 804061C0 (g_dComIfG_gameInfo)
//	80203E0C: 802081B4 (setAlphaButtonRemo2AnimeMin__14dMeterButton_cFv)
//	80203E24: 8020824C (setAlphaButtonRemo2AnimeMax__14dMeterButton_cFv)
//	80203E44: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
//  bool False
asm void dMeterButton_c::alphaAnimeButtonRemo2(u32 param_0, bool param_1) {
	nofralloc
#include "asm/d/meter/d_meter_button/alphaAnimeButtonRemo2__14dMeterButton_cFUlb.s"
}
#pragma pop


/* 80203E58-80203F60 0108+00 s=1 e=0 z=0  None .text      alphaAnimeButtonAR__14dMeterButton_cFUlb                     */
//	80203E68: 803621DC (_savegpr_29)
//	80203E80: 8023822C (getStatus__12dMsgObject_cFv)
//	80203EC4: 804061C0 (g_dComIfG_gameInfo)
//	80203EC8: 804061C0 (g_dComIfG_gameInfo)
//	80203F14: 80208340 (setAlphaButtonARAnimeMin__14dMeterButton_cFv)
//	80203F2C: 802083D8 (setAlphaButtonARAnimeMax__14dMeterButton_cFv)
//	80203F4C: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
//  bool False
asm void dMeterButton_c::alphaAnimeButtonAR(u32 param_0, bool param_1) {
	nofralloc
#include "asm/d/meter/d_meter_button/alphaAnimeButtonAR__14dMeterButton_cFUlb.s"
}
#pragma pop


/* 80203F60-80204068 0108+00 s=1 e=0 z=0  None .text      alphaAnimeButton3DB__14dMeterButton_cFUlb                    */
//	80203F70: 803621DC (_savegpr_29)
//	80203F88: 8023822C (getStatus__12dMsgObject_cFv)
//	80203FCC: 804061C0 (g_dComIfG_gameInfo)
//	80203FD0: 804061C0 (g_dComIfG_gameInfo)
//	8020401C: 802084D8 (setAlphaButton3DBAnimeMin__14dMeterButton_cFv)
//	80204034: 80208570 (setAlphaButton3DBAnimeMax__14dMeterButton_cFv)
//	80204054: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
//  bool False
asm void dMeterButton_c::alphaAnimeButton3DB(u32 param_0, bool param_1) {
	nofralloc
#include "asm/d/meter/d_meter_button/alphaAnimeButton3DB__14dMeterButton_cFUlb.s"
}
#pragma pop


/* 80204068-80204170 0108+00 s=1 e=0 z=0  None .text      alphaAnimeButtonNURE__14dMeterButton_cFUlb                   */
//	80204078: 803621DC (_savegpr_29)
//	80204090: 8023822C (getStatus__12dMsgObject_cFv)
//	802040D4: 804061C0 (g_dComIfG_gameInfo)
//	802040D8: 804061C0 (g_dComIfG_gameInfo)
//	80204124: 80208670 (setAlphaButtonNUREAnimeMin__14dMeterButton_cFv)
//	8020413C: 80208708 (setAlphaButtonNUREAnimeMax__14dMeterButton_cFv)
//	8020415C: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
//  bool False
asm void dMeterButton_c::alphaAnimeButtonNURE(u32 param_0, bool param_1) {
	nofralloc
#include "asm/d/meter/d_meter_button/alphaAnimeButtonNURE__14dMeterButton_cFUlb.s"
}
#pragma pop


/* 80204170-80204278 0108+00 s=1 e=0 z=0  None .text      alphaAnimeButtonReel__14dMeterButton_cFUlb                   */
//	80204180: 803621DC (_savegpr_29)
//	80204198: 8023822C (getStatus__12dMsgObject_cFv)
//	802041DC: 804061C0 (g_dComIfG_gameInfo)
//	802041E0: 804061C0 (g_dComIfG_gameInfo)
//	8020422C: 80208808 (setAlphaButtonReelAnimeMin__14dMeterButton_cFv)
//	80204244: 802088A0 (setAlphaButtonReelAnimeMax__14dMeterButton_cFv)
//	80204264: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
//  bool False
asm void dMeterButton_c::alphaAnimeButtonReel(u32 param_0, bool param_1) {
	nofralloc
#include "asm/d/meter/d_meter_button/alphaAnimeButtonReel__14dMeterButton_cFUlb.s"
}
#pragma pop


/* 80204278-80204368 00F0+00 s=1 e=0 z=0  None .text      alphaAnimeButtonReel2__14dMeterButton_cFUlb                  */
//	80204288: 803621DC (_savegpr_29)
//	802042A0: 8023822C (getStatus__12dMsgObject_cFv)
//	802042E4: 804061C0 (g_dComIfG_gameInfo)
//	802042E8: 804061C0 (g_dComIfG_gameInfo)
//	80204334: 802089A0 (setAlphaButtonReel2AnimeMin__14dMeterButton_cFv)
//	80204340: 80208A38 (setAlphaButtonReel2AnimeMax__14dMeterButton_cFv)
//	80204354: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
//  bool False
asm void dMeterButton_c::alphaAnimeButtonReel2(u32 param_0, bool param_1) {
	nofralloc
#include "asm/d/meter/d_meter_button/alphaAnimeButtonReel2__14dMeterButton_cFUlb.s"
}
#pragma pop


/* 80204368-80204458 00F0+00 s=1 e=0 z=0  None .text      alphaAnimeButtonAB__14dMeterButton_cFUlb                     */
//	80204378: 803621DC (_savegpr_29)
//	80204390: 8023822C (getStatus__12dMsgObject_cFv)
//	802043D4: 804061C0 (g_dComIfG_gameInfo)
//	802043D8: 804061C0 (g_dComIfG_gameInfo)
//	80204424: 80208AEC (setAlphaButtonABAnimeMin__14dMeterButton_cFv)
//	80204430: 80208B84 (setAlphaButtonABAnimeMax__14dMeterButton_cFv)
//	80204444: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
//  bool False
asm void dMeterButton_c::alphaAnimeButtonAB(u32 param_0, bool param_1) {
	nofralloc
#include "asm/d/meter/d_meter_button/alphaAnimeButtonAB__14dMeterButton_cFUlb.s"
}
#pragma pop


/* 80204458-80204548 00F0+00 s=1 e=0 z=0  None .text      alphaAnimeButtonTate__14dMeterButton_cFUlb                   */
//	80204468: 803621DC (_savegpr_29)
//	80204480: 8023822C (getStatus__12dMsgObject_cFv)
//	802044C4: 804061C0 (g_dComIfG_gameInfo)
//	802044C8: 804061C0 (g_dComIfG_gameInfo)
//	80204514: 80208C38 (setAlphaButtonTateAnimeMin__14dMeterButton_cFv)
//	80204520: 80208CD0 (setAlphaButtonTateAnimeMax__14dMeterButton_cFv)
//	80204534: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
//  bool False
asm void dMeterButton_c::alphaAnimeButtonTate(u32 param_0, bool param_1) {
	nofralloc
#include "asm/d/meter/d_meter_button/alphaAnimeButtonTate__14dMeterButton_cFUlb.s"
}
#pragma pop


/* 80204548-80204620 00D8+00 s=1 e=0 z=0  None .text      alphaAnimeButtonNunZ__14dMeterButton_cFUlb                   */
//	80204558: 803621DC (_savegpr_29)
//	80204570: 8023822C (getStatus__12dMsgObject_cFv)
//	8020459C: 804061C0 (g_dComIfG_gameInfo)
//	802045A0: 804061C0 (g_dComIfG_gameInfo)
//	802045EC: 80208D84 (setAlphaButtonNunZAnimeMin__14dMeterButton_cFv)
//	802045F8: 80208E1C (setAlphaButtonNunZAnimeMax__14dMeterButton_cFv)
//	8020460C: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
//  bool False
asm void dMeterButton_c::alphaAnimeButtonNunZ(u32 param_0, bool param_1) {
	nofralloc
#include "asm/d/meter/d_meter_button/alphaAnimeButtonNunZ__14dMeterButton_cFUlb.s"
}
#pragma pop


/* 80204620-802046F8 00D8+00 s=1 e=0 z=0  None .text      alphaAnimeButtonNunC__14dMeterButton_cFUlb                   */
//	80204630: 803621DC (_savegpr_29)
//	80204648: 8023822C (getStatus__12dMsgObject_cFv)
//	80204674: 804061C0 (g_dComIfG_gameInfo)
//	80204678: 804061C0 (g_dComIfG_gameInfo)
//	802046C4: 80208F1C (setAlphaButtonNunCAnimeMin__14dMeterButton_cFv)
//	802046D0: 80208FB4 (setAlphaButtonNunCAnimeMax__14dMeterButton_cFv)
//	802046E4: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
//  bool False
asm void dMeterButton_c::alphaAnimeButtonNunC(u32 param_0, bool param_1) {
	nofralloc
#include "asm/d/meter/d_meter_button/alphaAnimeButtonNunC__14dMeterButton_cFUlb.s"
}
#pragma pop


/* 802046F8-802047E8 00F0+00 s=1 e=0 z=0  None .text      alphaAnimeButtonBin__14dMeterButton_cFUlb                    */
//	80204708: 803621DC (_savegpr_29)
//	80204720: 8023822C (getStatus__12dMsgObject_cFv)
//	80204764: 804061C0 (g_dComIfG_gameInfo)
//	80204768: 804061C0 (g_dComIfG_gameInfo)
//	802047B4: 802090B4 (setAlphaButtonBinAnimeMin__14dMeterButton_cFv)
//	802047C0: 8020914C (setAlphaButtonBinAnimeMax__14dMeterButton_cFv)
//	802047D4: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
//  bool False
asm void dMeterButton_c::alphaAnimeButtonBin(u32 param_0, bool param_1) {
	nofralloc
#include "asm/d/meter/d_meter_button/alphaAnimeButtonBin__14dMeterButton_cFUlb.s"
}
#pragma pop


/* ############################################################################################## */
/* 80398048-80398098 0050+00 s=1 e=0 z=0  None .rodata    text_tag$5461                                                */
SECTION_RODATA static u8 const text_tag[80] = {
	0x69, 0x6E, 0x66, 0x6F, 0x5F, 0x61, 0x72, 0x30, 0x69, 0x6E, 0x66, 0x6F, 0x5F, 0x61, 0x72, 0x31,
	0x69, 0x6E, 0x66, 0x6F, 0x5F, 0x61, 0x72, 0x32, 0x69, 0x6E, 0x66, 0x6F, 0x5F, 0x61, 0x72, 0x33,
	0x69, 0x6E, 0x66, 0x6F, 0x5F, 0x61, 0x72, 0x34, 0x69, 0x6E, 0x66, 0x6F, 0x5F, 0x61, 0x72, 0x35,
	0x69, 0x6E, 0x66, 0x6F, 0x5F, 0x61, 0x72, 0x36, 0x69, 0x6E, 0x66, 0x6F, 0x5F, 0x61, 0x72, 0x37,
	0x69, 0x6E, 0x66, 0x6F, 0x5F, 0x61, 0x72, 0x38, 0x69, 0x6E, 0x66, 0x6F, 0x5F, 0x61, 0x72, 0x39,
};

/* 80398098-803980E8 0050+00 s=1 e=0 z=0  None .rodata    ftext_tag$5462                                               */
SECTION_RODATA static u8 const ftext_tag[80] = {
	0x66, 0x6E, 0x66, 0x6F, 0x5F, 0x61, 0x72, 0x30, 0x66, 0x6E, 0x66, 0x6F, 0x5F, 0x61, 0x72, 0x31,
	0x66, 0x6E, 0x66, 0x6F, 0x5F, 0x61, 0x72, 0x32, 0x66, 0x6E, 0x66, 0x6F, 0x5F, 0x61, 0x72, 0x33,
	0x66, 0x6E, 0x66, 0x6F, 0x5F, 0x61, 0x72, 0x34, 0x66, 0x6E, 0x66, 0x6F, 0x5F, 0x61, 0x72, 0x35,
	0x66, 0x6E, 0x66, 0x6F, 0x5F, 0x61, 0x72, 0x36, 0x66, 0x6E, 0x66, 0x6F, 0x5F, 0x61, 0x72, 0x37,
	0x66, 0x6E, 0x66, 0x6F, 0x5F, 0x61, 0x72, 0x38, 0x66, 0x6E, 0x66, 0x6F, 0x5F, 0x61, 0x72, 0x39,
};

/* 803980E8-80398158 006C+04 s=4 e=0 z=0  None .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char const* const stringBase_803980E8 = 
    "zelda_game_image_button_info.blo";
SECTION_DEAD char const* const stringBase_80398109 = "";
SECTION_DEAD char const* const stringBase_8039810A = "zelda_message_window_new.blo";
SECTION_DEAD char const* const stringBase_80398127 = "zelda_message_window_text.blo";
SECTION_DEAD char const* const stringBase_80398145 = "F_SP00";
SECTION_DEAD char const* const stringBase_8039814C = "R_SP161";
/* @stringBase0 padding */
SECTION_DEAD static char const* const pad_80398154 = "\0\0\0";
#pragma pop

/* 80454770-80454774 0004+00 s=4 e=0 z=0  None .sdata2    @5628                                                        */
SECTION_SDATA2 static f32 lit_5628 = 0.5f;

/* 80454774-80454778 0004+00 s=2 e=0 z=0  None .sdata2    @5629                                                        */
SECTION_SDATA2 static f32 lit_5629 = 304.0f;

/* 80454778-8045477C 0004+00 s=1 e=0 z=0  None .sdata2    @5630                                                        */
SECTION_SDATA2 static f32 lit_5630 = 8.0f;

/* 8045477C-80454780 0004+00 s=1 e=0 z=0  None .sdata2    @5631                                                        */
SECTION_SDATA2 static f32 lit_5631 = 307.25f;

/* 80454780-80454784 0004+00 s=1 e=0 z=0  None .sdata2    @5632                                                        */
SECTION_SDATA2 static f32 lit_5632 = 307.75f;

/* 80454784-80454788 0004+00 s=1 e=0 z=0  None .sdata2    @5633                                                        */
SECTION_SDATA2 static f32 lit_5633 = 300.0f;

/* 80454788-8045478C 0004+00 s=1 e=0 z=0  None .sdata2    @5634                                                        */
SECTION_SDATA2 static f32 lit_5634 = 304.5f;

/* 8045478C-80454790 0004+00 s=1 e=0 z=0  None .sdata2    @5635                                                        */
SECTION_SDATA2 static f32 lit_5635 = 347.5f;

/* 80454790-80454794 0004+00 s=1 e=0 z=0  None .sdata2    @5636                                                        */
SECTION_SDATA2 static f32 lit_5636 = 367.25f;

/* 802047E8-80205834 104C+00 s=1 e=0 z=0  None .text      screenInitButton__14dMeterButton_cFv                         */
//	80204800: 803621C8 (_savegpr_24)
//	8020480C: 802CEC4C (__nw__FUl)
//	80204818: 802F8498 (__ct__9J2DScreenFv)
//	80204828: 803980E8 (d_meter_d_meter_button__stringBase0)
//	8020482C: 803980E8 (d_meter_d_meter_button__stringBase0)
//	80204834: 804061C0 (g_dComIfG_gameInfo)
//	80204838: 804061C0 (g_dComIfG_gameInfo)
//	80204840: 802F8648 (setPriority__9J2DScreenFPCcUlP10JKRArchive)
//	80204848: 802550E8 (dPaneClass_showNullPane__FP9J2DScreen)
//	80204858: 802CEC4C (__nw__FUl)
//	8020487C: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80204890: 80454748 (lit_4146)
//	802048C8: 80454748 (lit_4146)
//	80204904: 80454770 (lit_5628)
//	80204914: 80454774 (lit_5629)
//	8020492C: 80454748 (lit_4146)
//	80204934: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	8020493C: 802CEC4C (__nw__FUl)
//	80204960: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80204970: 80454748 (lit_4146)
//	80204974: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8020497C: 802555C8 (show__13CPaneMgrAlphaFv)
//	80204984: 802CEC4C (__nw__FUl)
//	802049A8: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	802049B8: 80454748 (lit_4146)
//	802049BC: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	802049C4: 802555C8 (show__13CPaneMgrAlphaFv)
//	802049CC: 802CEC4C (__nw__FUl)
//	802049F0: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80204A00: 80454748 (lit_4146)
//	80204A04: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80204A0C: 802555C8 (show__13CPaneMgrAlphaFv)
//	80204A14: 802CEC4C (__nw__FUl)
//	80204A38: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80204AB8: 802CEC4C (__nw__FUl)
//	80204ADC: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80204AEC: 80454748 (lit_4146)
//	80204AF0: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80204AF8: 802555C8 (show__13CPaneMgrAlphaFv)
//	80204B00: 802CEC4C (__nw__FUl)
//	80204B28: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80204B38: 80454748 (lit_4146)
//	80204B3C: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80204B44: 802555C8 (show__13CPaneMgrAlphaFv)
//	80204BFC: 802CEC4C (__nw__FUl)
//	80204C20: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80204C30: 80454748 (lit_4146)
//	80204C34: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80204C3C: 802555C8 (show__13CPaneMgrAlphaFv)
//	80204CF4: 802CEC4C (__nw__FUl)
//	80204D18: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80204D28: 80454748 (lit_4146)
//	80204D2C: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80204D34: 802CEC4C (__nw__FUl)
//	80204D58: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80204D68: 80454748 (lit_4146)
//	80204D6C: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80204D74: 802CEC4C (__nw__FUl)
//	80204D98: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80204DA8: 80454748 (lit_4146)
//	80204DAC: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80204DC8: 802CEC4C (__nw__FUl)
//	80204DEC: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80204DFC: 80454748 (lit_4146)
//	80204E00: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80204E28: 802CEC4C (__nw__FUl)
//	80204E50: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80204E60: 80454748 (lit_4146)
//	80204E64: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80204E6C: 802CEC4C (__nw__FUl)
//	80204E90: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80204EA0: 80454748 (lit_4146)
//	80204EA4: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80204EAC: 802CEC4C (__nw__FUl)
//	80204ED4: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80204EE4: 80454748 (lit_4146)
//	80204EE8: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80204EF0: 802CEC4C (__nw__FUl)
//	80204F18: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80204F28: 80454748 (lit_4146)
//	80204F2C: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80204F30: 8000F1EC (mDoExt_getCurrentHeap__Fv)
//	80204F44: 802CE4D4 (alloc__7JKRHeapFUli)
//	80204F4C: 804061C0 (g_dComIfG_gameInfo)
//	80204F50: 804061C0 (g_dComIfG_gameInfo)
//	80204F60: 80033030 (getItem__17dSv_player_item_cCFib)
//	80204F68: 80430188 (g_meter2_info)
//	80204F6C: 80430188 (g_meter2_info)
//	80204F78: 8021BBB4 (getCanoeFishing__13dMeter2Draw_cFv)
//	80204FB4: 80430188 (g_meter2_info)
//	80204FB8: 80430188 (g_meter2_info)
//	80204FD4: 8021CF08 (readItemTexture__13dMeter2Info_cFUcPvP10J2DPicturePvP10J2DPicturePvP10J2DPicturePvP10J2DPicturei)
//	80204FEC: 80398098 (ftext_tag)
//	80204FF0: 80398098 (ftext_tag)
//	80204FF4: 80398048 (text_tag)
//	80204FF8: 80398048 (text_tag)
//	80204FFC: 803980E8 (d_meter_d_meter_button__stringBase0)
//	80205000: 803980E8 (d_meter_d_meter_button__stringBase0)
//	80205054: 800149F0 (mDoExt_getMesgFont__Fv)
//	80205080: 8030074C (setString__10J2DTextBoxFsPCce)
//	802050B0: 802F7100 (getBounds__7J2DPaneFv)
//	802050CC: 803980E8 (d_meter_d_meter_button__stringBase0)
//	802050D0: 803980E8 (d_meter_d_meter_button__stringBase0)
//	802050D4: 80454748 (lit_4146)
//	802050EC: 80368B2C (strcpy)
//	8020514C: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	80205184: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	802051BC: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	802051F4: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	80205214: 80253930 (__ct__8CPaneMgrFv)
//	80205254: 80254C90 (getGlobalVtx__8CPaneMgrFP7J2DPanePA3_A4_fUcbs)
//	802052AC: 80254C90 (getGlobalVtx__8CPaneMgrFP7J2DPanePA3_A4_fUcbs)
//	80205304: 80254C90 (getGlobalVtx__8CPaneMgrFP7J2DPanePA3_A4_fUcbs)
//	8020535C: 80254C90 (getGlobalVtx__8CPaneMgrFP7J2DPanePA3_A4_fUcbs)
//	802053B0: 80454770 (lit_5628)
//	802053C4: 80253A18 (__dt__8CPaneMgrFv)
//	802053DC: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	80205414: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	8020544C: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	80205484: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	802054BC: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	802054DC: 80454778 (lit_5630)
//	802054E8: 80454748 (lit_4146)
//	80205510: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	80205534: 80454748 (lit_4146)
//	80205568: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	802055A0: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	802055D8: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	802055FC: 80454748 (lit_4146)
//	80205608: 8045474C (lit_4147)
//	80205754: 8045477C (lit_5631)
//	8020575C: 80454780 (lit_5632)
//	80205764: 80454784 (lit_5633)
//	8020576C: 80454788 (lit_5634)
//	80205774: 8045478C (lit_5635)
//	8020577C: 804061C0 (g_dComIfG_gameInfo)
//	80205780: 804061C0 (g_dComIfG_gameInfo)
//	8020579C: 8045477C (lit_5631)
//	802057AC: 80454790 (lit_5636)
//	80205810: 80205CA0 (updateButton__14dMeterButton_cFv)
//	80205820: 80362214 (_restgpr_24)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::screenInitButton() {
	nofralloc
#include "asm/d/meter/d_meter_button/screenInitButton__14dMeterButton_cFv.s"
}
#pragma pop


/* 80205834-80205CA0 046C+00 s=1 e=0 z=0  None .text      screenInitText__14dMeterButton_cFv                           */
//	80205854: 803621D0 (_savegpr_26)
//	80205860: 802CEC4C (__nw__FUl)
//	8020586C: 802F8498 (__ct__9J2DScreenFv)
//	8020587C: 803980E8 (d_meter_d_meter_button__stringBase0)
//	80205880: 803980E8 (d_meter_d_meter_button__stringBase0)
//	8020588C: 804061C0 (g_dComIfG_gameInfo)
//	80205890: 804061C0 (g_dComIfG_gameInfo)
//	80205898: 802F8648 (setPriority__9J2DScreenFPCcUlP10JKRArchive)
//	802058A0: 802550E8 (dPaneClass_showNullPane__FP9J2DScreen)
//	802058A8: 802CEC4C (__nw__FUl)
//	802058CC: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	802058DC: 80454748 (lit_4146)
//	802058E0: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80205908: 802F7100 (getBounds__7J2DPaneFv)
//	80205910: 8043028C (g_MsgObject_HIO_c)
//	80205914: 8043028C (g_MsgObject_HIO_c)
//	80205944: 802F7100 (getBounds__7J2DPaneFv)
//	8020594C: 8043028C (g_MsgObject_HIO_c)
//	80205950: 8043028C (g_MsgObject_HIO_c)
//	8020599C: 802CEC4C (__nw__FUl)
//	802059C4: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	802059D4: 802CEC4C (__nw__FUl)
//	802059E0: 802F8498 (__ct__9J2DScreenFv)
//	802059F0: 803980E8 (d_meter_d_meter_button__stringBase0)
//	802059F4: 803980E8 (d_meter_d_meter_button__stringBase0)
//	80205A00: 804061C0 (g_dComIfG_gameInfo)
//	80205A04: 804061C0 (g_dComIfG_gameInfo)
//	80205A0C: 802F8648 (setPriority__9J2DScreenFPCcUlP10JKRArchive)
//	80205A14: 802550E8 (dPaneClass_showNullPane__FP9J2DScreen)
//	80205A1C: 802CEC4C (__nw__FUl)
//	80205A44: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80205A54: 802CEC4C (__nw__FUl)
//	80205A7C: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80205A8C: 802CEC4C (__nw__FUl)
//	80205AB0: 80253984 (__ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap)
//	80205B60: 803980E8 (d_meter_d_meter_button__stringBase0)
//	80205B64: 803980E8 (d_meter_d_meter_button__stringBase0)
//	80205B74: 800149F0 (mDoExt_getMesgFont__Fv)
//	80205BA4: 8030074C (setString__10J2DTextBoxFsPCce)
//	80205BB8: 800149F0 (mDoExt_getMesgFont__Fv)
//	80205BE0: 803980E8 (d_meter_d_meter_button__stringBase0)
//	80205BE4: 803980E8 (d_meter_d_meter_button__stringBase0)
//	80205BF0: 8030074C (setString__10J2DTextBoxFsPCce)
//	80205C2C: 802CEC4C (__nw__FUl)
//	80205C38: 80249C20 (__ct__12dMsgString_cFv)
//	80205C48: 802CEC4C (__nw__FUl)
//	80205C58: 80225C94 (__ct__10COutFont_cFUc)
//	80205C8C: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::screenInitText() {
	nofralloc
#include "asm/d/meter/d_meter_button/screenInitText__14dMeterButton_cFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80454794-80454798 0004+00 s=1 e=0 z=0  None .sdata2    @6012                                                        */
SECTION_SDATA2 static f32 lit_6012 = -25.0f;

/* 80454798-8045479C 0004+00 s=1 e=0 z=0  None .sdata2    @6013                                                        */
SECTION_SDATA2 static f32 lit_6013 = 4.0f / 5.0f;

/* 8045479C-804547A0 0004+00 s=1 e=0 z=0  None .sdata2    @6014                                                        */
SECTION_SDATA2 static f32 lit_6014 = -10.0f;

/* 804547A0-804547A4 0004+00 s=1 e=0 z=0  None .sdata2    @6015                                                        */
SECTION_SDATA2 static f32 lit_6015 = 25.0f;

/* 804547A4-804547A8 0004+00 s=1 e=0 z=0  None .sdata2    @6016                                                        */
SECTION_SDATA2 static f32 lit_6016 = 9.0f / 10.0f;

/* 804547A8-804547AC 0004+00 s=2 e=0 z=0  None .sdata2    @6017                                                        */
SECTION_SDATA2 static f32 lit_6017 = 2.0f;

/* 80205CA0-80206978 0CD8+00 s=2 e=0 z=0  None .text      updateButton__14dMeterButton_cFv                             */
//	80205CC8: 803621D4 (_savegpr_27)
//	80205CD0: 80454748 (lit_4146)
//	80205CD8: 8045474C (lit_4147)
//	80205CE8: 8042EBC8 (g_drawHIO)
//	80205CEC: 8042EBC8 (g_drawHIO)
//	80205D10: 8042EBC8 (g_drawHIO)
//	80205D14: 8042EBC8 (g_drawHIO)
//	80205D20: 80454748 (lit_4146)
//	80205D28: 80430188 (g_meter2_info)
//	80205D2C: 80430188 (g_meter2_info)
//	80205D54: 80454794 (lit_6012)
//	80205D5C: 80454748 (lit_4146)
//	80205D64: 804061C0 (g_dComIfG_gameInfo)
//	80205D68: 804061C0 (g_dComIfG_gameInfo)
//	80205D74: 803980E8 (d_meter_d_meter_button__stringBase0)
//	80205D78: 803980E8 (d_meter_d_meter_button__stringBase0)
//	80205D80: 80368994 (strcmp)
//	80205D90: 8002C97C (getLayerNo__14dComIfG_play_cFi)
//	80205DA0: 8002C97C (getLayerNo__14dComIfG_play_cFi)
//	80205DAC: 80454794 (lit_6012)
//	80205DBC: 803980E8 (d_meter_d_meter_button__stringBase0)
//	80205DC0: 803980E8 (d_meter_d_meter_button__stringBase0)
//	80205DC8: 80368994 (strcmp)
//	80205DDC: 8002DB64 (dComIfGs_isOneZoneSwitch__Fii)
//	80205DE8: 80454794 (lit_6012)
//	80205E00: 80454798 (lit_6013)
//	80205E04: 804061C0 (g_dComIfG_gameInfo)
//	80205E08: 804061C0 (g_dComIfG_gameInfo)
//	80205E20: 8045479C (lit_6014)
//	80205E24: 804547A0 (lit_6015)
//	80205E28: 804547A4 (lit_6016)
//	80205E64: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	80205E6C: 8042EBC8 (g_drawHIO)
//	80205E70: 8042EBC8 (g_drawHIO)
//	80205EB0: 8042EBC8 (g_drawHIO)
//	80205EB4: 8042EBC8 (g_drawHIO)
//	80205ED8: 8042EBC8 (g_drawHIO)
//	80205EDC: 8042EBC8 (g_drawHIO)
//	80205F0C: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	80205F14: 8042EBC8 (g_drawHIO)
//	80205F18: 8042EBC8 (g_drawHIO)
//	80205F2C: 804061C0 (g_dComIfG_gameInfo)
//	80205F30: 804061C0 (g_dComIfG_gameInfo)
//	80205F68: 8042EBC8 (g_drawHIO)
//	80205F6C: 8042EBC8 (g_drawHIO)
//	80205F90: 8042EBC8 (g_drawHIO)
//	80205F94: 8042EBC8 (g_drawHIO)
//	80205FC4: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	80205FCC: 8042EBC8 (g_drawHIO)
//	80205FD0: 8042EBC8 (g_drawHIO)
//	8020600C: 8042EBC8 (g_drawHIO)
//	80206010: 8042EBC8 (g_drawHIO)
//	80206034: 8042EBC8 (g_drawHIO)
//	80206038: 8042EBC8 (g_drawHIO)
//	80206068: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	80206070: 8042EBC8 (g_drawHIO)
//	80206074: 8042EBC8 (g_drawHIO)
//	802060B0: 8042EBC8 (g_drawHIO)
//	802060B4: 8042EBC8 (g_drawHIO)
//	802060D8: 8042EBC8 (g_drawHIO)
//	802060DC: 8042EBC8 (g_drawHIO)
//	8020610C: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	80206114: 8042EBC8 (g_drawHIO)
//	80206118: 8042EBC8 (g_drawHIO)
//	80206154: 8042EBC8 (g_drawHIO)
//	80206158: 8042EBC8 (g_drawHIO)
//	8020617C: 8042EBC8 (g_drawHIO)
//	80206180: 8042EBC8 (g_drawHIO)
//	802061B0: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	802061B8: 8042EBC8 (g_drawHIO)
//	802061BC: 8042EBC8 (g_drawHIO)
//	802061F8: 8042EBC8 (g_drawHIO)
//	802061FC: 8042EBC8 (g_drawHIO)
//	80206220: 8042EBC8 (g_drawHIO)
//	80206224: 8042EBC8 (g_drawHIO)
//	80206254: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	8020625C: 8042EBC8 (g_drawHIO)
//	80206260: 8042EBC8 (g_drawHIO)
//	8020629C: 8042EBC8 (g_drawHIO)
//	802062A0: 8042EBC8 (g_drawHIO)
//	802062C4: 8042EBC8 (g_drawHIO)
//	802062C8: 8042EBC8 (g_drawHIO)
//	802062F8: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	80206300: 8042EBC8 (g_drawHIO)
//	80206304: 8042EBC8 (g_drawHIO)
//	80206340: 8042EBC8 (g_drawHIO)
//	80206344: 8042EBC8 (g_drawHIO)
//	80206368: 8042EBC8 (g_drawHIO)
//	8020636C: 8042EBC8 (g_drawHIO)
//	8020639C: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	802063A4: 8042EBC8 (g_drawHIO)
//	802063A8: 8042EBC8 (g_drawHIO)
//	802063E4: 8042EBC8 (g_drawHIO)
//	802063E8: 8042EBC8 (g_drawHIO)
//	8020640C: 8042EBC8 (g_drawHIO)
//	80206410: 8042EBC8 (g_drawHIO)
//	80206440: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	80206448: 8042EBC8 (g_drawHIO)
//	8020644C: 8042EBC8 (g_drawHIO)
//	80206488: 8042EBC8 (g_drawHIO)
//	8020648C: 8042EBC8 (g_drawHIO)
//	802064B0: 8042EBC8 (g_drawHIO)
//	802064B4: 8042EBC8 (g_drawHIO)
//	802064E4: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	802064EC: 8042EBC8 (g_drawHIO)
//	802064F0: 8042EBC8 (g_drawHIO)
//	8020652C: 8042EBC8 (g_drawHIO)
//	80206530: 8042EBC8 (g_drawHIO)
//	80206554: 8042EBC8 (g_drawHIO)
//	80206558: 8042EBC8 (g_drawHIO)
//	80206588: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	8020659C: 8042EBC8 (g_drawHIO)
//	802065A0: 8042EBC8 (g_drawHIO)
//	802065C4: 8042EBC8 (g_drawHIO)
//	802065C8: 8042EBC8 (g_drawHIO)
//	802065E8: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	802065F0: 8042EBC8 (g_drawHIO)
//	802065F4: 8042EBC8 (g_drawHIO)
//	80206630: 8042EBC8 (g_drawHIO)
//	80206634: 8042EBC8 (g_drawHIO)
//	80206658: 8042EBC8 (g_drawHIO)
//	8020665C: 8042EBC8 (g_drawHIO)
//	8020667C: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	80206684: 8042EBC8 (g_drawHIO)
//	80206688: 8042EBC8 (g_drawHIO)
//	802066C4: 8042EBC8 (g_drawHIO)
//	802066C8: 8042EBC8 (g_drawHIO)
//	802066EC: 8042EBC8 (g_drawHIO)
//	802066F0: 8042EBC8 (g_drawHIO)
//	802066FC: 80454748 (lit_4146)
//	80206744: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	8020674C: 8042EBC8 (g_drawHIO)
//	80206750: 8042EBC8 (g_drawHIO)
//	8020678C: 8042EBC8 (g_drawHIO)
//	80206790: 8042EBC8 (g_drawHIO)
//	802067B4: 8042EBC8 (g_drawHIO)
//	802067B8: 8042EBC8 (g_drawHIO)
//	802067C4: 80454748 (lit_4146)
//	8020680C: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	80206814: 8042EBC8 (g_drawHIO)
//	80206818: 8042EBC8 (g_drawHIO)
//	80206884: 8042EBC8 (g_drawHIO)
//	80206888: 8042EBC8 (g_drawHIO)
//	802068AC: 8042EBC8 (g_drawHIO)
//	802068B0: 8042EBC8 (g_drawHIO)
//	802068BC: 80454748 (lit_4146)
//	802068DC: 804547A8 (lit_6017)
//	802068F8: 80454748 (lit_4146)
//	80206904: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	8020690C: 8042EBC8 (g_drawHIO)
//	80206910: 8042EBC8 (g_drawHIO)
//	80206964: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::updateButton() {
	nofralloc
#include "asm/d/meter/d_meter_button/updateButton__14dMeterButton_cFv.s"
}
#pragma pop


/* 80206978-80206CE0 0368+00 s=1 e=0 z=0  None .text      updateText__14dMeterButton_cFUl                              */
//	80206990: 803621D4 (_savegpr_27)
//	8020699C: 80430188 (g_meter2_info)
//	802069A0: 80430188 (g_meter2_info)
//	802069B4: 8042EBC8 (g_drawHIO)
//	802069B8: 8042EBC8 (g_drawHIO)
//	802069C0: 80454748 (lit_4146)
//	802069C4: 802545B0 (paneTrans__8CPaneMgrFff)
//	802069D0: 8042EBC8 (g_drawHIO)
//	802069D4: 8042EBC8 (g_drawHIO)
//	802069E0: 802545B0 (paneTrans__8CPaneMgrFff)
//	802069F8: 80254EBC (getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs)
//	80206A3C: 80430188 (g_meter2_info)
//	80206A40: 80430188 (g_meter2_info)
//	80206A78: 800149F0 (mDoExt_getMesgFont__Fv)
//	80206AA8: 802380F4 (getString__12dMsgObject_cFUlP10J2DTextBoxP10J2DTextBoxP7JUTFontP10COutFont_cPcPcPcPs)
//	80206AC4: 80300658 (getStringPtr__10J2DTextBoxCFv)
//	80206ACC: 80368B2C (strcpy)
//	80206AD8: 80300658 (getStringPtr__10J2DTextBoxCFv)
//	80206AE0: 80368B2C (strcpy)
//	80206B00: 80300658 (getStringPtr__10J2DTextBoxCFv)
//	80206B08: 80368B2C (strcpy)
//	80206B1C: 80430188 (g_meter2_info)
//	80206B20: 80430188 (g_meter2_info)
//	80206B24: 8021C1F0 (decFloatingMessageTimer__13dMeter2Info_cFv)
//	80206B28: 8045474C (lit_4147)
//	80206B80: 80454768 (lit_4517)
//	80206B9C: 80454750 (lit_4148)
//	80206BB0: 80430188 (g_meter2_info)
//	80206BB4: 80430188 (g_meter2_info)
//	80206BB8: 8021C218 (resetFloatingMessage__13dMeter2Info_cFv)
//	80206BD8: 80454768 (lit_4517)
//	80206BF4: 80454750 (lit_4148)
//	80206C04: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80206C1C: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80206C30: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80206C58: 80454748 (lit_4146)
//	80206C5C: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80206C68: 80454748 (lit_4146)
//	80206C74: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80206C88: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80206C98: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80206CAC: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80206CCC: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u32 False
asm void dMeterButton_c::updateText(u32 param_0) {
	nofralloc
#include "asm/d/meter/d_meter_button/updateText__14dMeterButton_cFUl.s"
}
#pragma pop


/* 80206CE0-80206D70 0090+00 s=1 e=0 z=0  None .text      setAlphaButtonAAnimeMin__14dMeterButton_cFv                  */
//	80206CF8: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80206CFC: 80454748 (lit_4146)
//	80206D20: 80454748 (lit_4146)
//	80206D24: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80206D38: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80206D3C: 80454748 (lit_4146)
//	80206D50: 8020A94C (hide_button__14dMeterButton_cFUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonAAnimeMin() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonAAnimeMin__14dMeterButton_cFv.s"
}
#pragma pop


/* 80206D70-80207060 02F0+00 s=5 e=0 z=0  None .text      isFastSet__14dMeterButton_cFi                                */
//	80206D70: 804061C0 (g_dComIfG_gameInfo)
//	80206D74: 804061C0 (g_dComIfG_gameInfo)
//	80206D94: 804061C0 (g_dComIfG_gameInfo)
//	80206D98: 804061C0 (g_dComIfG_gameInfo)
//	80206DB8: 804061C0 (g_dComIfG_gameInfo)
//	80206DBC: 804061C0 (g_dComIfG_gameInfo)
//	80206DDC: 804061C0 (g_dComIfG_gameInfo)
//	80206DE0: 804061C0 (g_dComIfG_gameInfo)
//	80206E00: 804061C0 (g_dComIfG_gameInfo)
//	80206E04: 804061C0 (g_dComIfG_gameInfo)
//	80206E24: 804061C0 (g_dComIfG_gameInfo)
//	80206E28: 804061C0 (g_dComIfG_gameInfo)
//	80206E48: 804061C0 (g_dComIfG_gameInfo)
//	80206E4C: 804061C0 (g_dComIfG_gameInfo)
//	80206E6C: 804061C0 (g_dComIfG_gameInfo)
//	80206E70: 804061C0 (g_dComIfG_gameInfo)
//	80206E90: 804061C0 (g_dComIfG_gameInfo)
//	80206E94: 804061C0 (g_dComIfG_gameInfo)
//	80206EB4: 804061C0 (g_dComIfG_gameInfo)
//	80206EB8: 804061C0 (g_dComIfG_gameInfo)
//	80206ED8: 804061C0 (g_dComIfG_gameInfo)
//	80206EDC: 804061C0 (g_dComIfG_gameInfo)
//	80206FE4: 804061C0 (g_dComIfG_gameInfo)
//	80206FE8: 804061C0 (g_dComIfG_gameInfo)
//	80207008: 804061C0 (g_dComIfG_gameInfo)
//	8020700C: 804061C0 (g_dComIfG_gameInfo)
//	8020702C: 804061C0 (g_dComIfG_gameInfo)
//	80207030: 804061C0 (g_dComIfG_gameInfo)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
asm void dMeterButton_c::isFastSet(int param_0) {
	nofralloc
#include "asm/d/meter/d_meter_button/isFastSet__14dMeterButton_cFi.s"
}
#pragma pop


/* 80207060-8020714C 00EC+00 s=1 e=0 z=0  None .text      setAlphaButtonAAnimeMax__14dMeterButton_cFv                  */
//	80207078: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	8020707C: 8045474C (lit_4147)
//	80207088: 804061C0 (g_dComIfG_gameInfo)
//	8020708C: 804061C0 (g_dComIfG_gameInfo)
//	802070A4: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	802070C0: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	802070C4: 80430188 (g_meter2_info)
//	802070C8: 80430188 (g_meter2_info)
//	802070DC: 8021AAA4 (setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas)
//	802070E4: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802070E8: 8045474C (lit_4147)
//	80207108: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80207120: 80454758 (lit_4513)
//	8020712C: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonAAnimeMax() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonAAnimeMax__14dMeterButton_cFv.s"
}
#pragma pop


/* 8020714C-802071DC 0090+00 s=1 e=0 z=0  None .text      setAlphaButtonBAnimeMin__14dMeterButton_cFv                  */
//	80207164: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207168: 80454748 (lit_4146)
//	8020718C: 80454748 (lit_4146)
//	80207190: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	802071A4: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802071A8: 80454748 (lit_4146)
//	802071BC: 8020A94C (hide_button__14dMeterButton_cFUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonBAnimeMin() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonBAnimeMin__14dMeterButton_cFv.s"
}
#pragma pop


/* 802071DC-802072C8 00EC+00 s=1 e=0 z=0  None .text      setAlphaButtonBAnimeMax__14dMeterButton_cFv                  */
//	802071F4: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802071F8: 8045474C (lit_4147)
//	80207204: 804061C0 (g_dComIfG_gameInfo)
//	80207208: 804061C0 (g_dComIfG_gameInfo)
//	80207220: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8020723C: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80207240: 80430188 (g_meter2_info)
//	80207244: 80430188 (g_meter2_info)
//	80207258: 8021AAA4 (setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas)
//	80207260: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207264: 8045474C (lit_4147)
//	80207284: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	8020729C: 80454758 (lit_4513)
//	802072A8: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonBAnimeMax() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonBAnimeMax__14dMeterButton_cFv.s"
}
#pragma pop


/* 802072C8-80207358 0090+00 s=1 e=0 z=0  None .text      setAlphaButtonRAnimeMin__14dMeterButton_cFv                  */
//	802072E0: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802072E4: 80454748 (lit_4146)
//	80207308: 80454748 (lit_4146)
//	8020730C: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80207320: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207324: 80454748 (lit_4146)
//	80207338: 8020A94C (hide_button__14dMeterButton_cFUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonRAnimeMin() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonRAnimeMin__14dMeterButton_cFv.s"
}
#pragma pop


/* 80207358-80207444 00EC+00 s=1 e=0 z=0  None .text      setAlphaButtonRAnimeMax__14dMeterButton_cFv                  */
//	80207370: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207374: 8045474C (lit_4147)
//	80207380: 804061C0 (g_dComIfG_gameInfo)
//	80207384: 804061C0 (g_dComIfG_gameInfo)
//	8020739C: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	802073B8: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	802073BC: 80430188 (g_meter2_info)
//	802073C0: 80430188 (g_meter2_info)
//	802073D4: 8021AAA4 (setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas)
//	802073DC: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802073E0: 8045474C (lit_4147)
//	80207400: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80207418: 80454758 (lit_4513)
//	80207424: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonRAnimeMax() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonRAnimeMax__14dMeterButton_cFv.s"
}
#pragma pop


/* 80207444-802074D4 0090+00 s=1 e=0 z=0  None .text      setAlphaButtonZAnimeMin__14dMeterButton_cFv                  */
//	8020745C: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207460: 80454748 (lit_4146)
//	80207484: 80454748 (lit_4146)
//	80207488: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8020749C: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802074A0: 80454748 (lit_4146)
//	802074B4: 8020A94C (hide_button__14dMeterButton_cFUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonZAnimeMin() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonZAnimeMin__14dMeterButton_cFv.s"
}
#pragma pop


/* 802074D4-802075C0 00EC+00 s=1 e=0 z=0  None .text      setAlphaButtonZAnimeMax__14dMeterButton_cFv                  */
//	802074EC: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802074F0: 8045474C (lit_4147)
//	802074FC: 804061C0 (g_dComIfG_gameInfo)
//	80207500: 804061C0 (g_dComIfG_gameInfo)
//	80207518: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80207534: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80207538: 80430188 (g_meter2_info)
//	8020753C: 80430188 (g_meter2_info)
//	80207550: 8021AAA4 (setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas)
//	80207558: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	8020755C: 8045474C (lit_4147)
//	8020757C: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80207594: 80454758 (lit_4513)
//	802075A0: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonZAnimeMax() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonZAnimeMax__14dMeterButton_cFv.s"
}
#pragma pop


/* 802075C0-80207654 0094+00 s=1 e=0 z=0  None .text      setAlphaButton3DAnimeMin__14dMeterButton_cFv                 */
//	802075D8: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802075DC: 80454748 (lit_4146)
//	80207600: 80454748 (lit_4146)
//	80207604: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8020761C: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207620: 80454748 (lit_4146)
//	80207634: 8020A94C (hide_button__14dMeterButton_cFUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButton3DAnimeMin() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButton3DAnimeMin__14dMeterButton_cFv.s"
}
#pragma pop


/* 80207654-80207740 00EC+00 s=1 e=0 z=0  None .text      setAlphaButton3DAnimeMax__14dMeterButton_cFv                 */
//	8020766C: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207670: 8045474C (lit_4147)
//	8020767C: 804061C0 (g_dComIfG_gameInfo)
//	80207680: 804061C0 (g_dComIfG_gameInfo)
//	80207698: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	802076B4: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	802076B8: 80430188 (g_meter2_info)
//	802076BC: 80430188 (g_meter2_info)
//	802076D0: 8021AAA4 (setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas)
//	802076D8: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802076DC: 8045474C (lit_4147)
//	802076FC: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80207714: 80454758 (lit_4513)
//	80207720: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButton3DAnimeMax() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButton3DAnimeMax__14dMeterButton_cFv.s"
}
#pragma pop


/* 80207740-80207744 0004+00 s=1 e=0 z=0  None .text      setAlphaButton3DVAnimeMin__14dMeterButton_cFv                */
// True False
//  void False
void dMeterButton_c::setAlphaButton3DVAnimeMin() {
	/* empty function */
}


/* 80207744-80207748 0004+00 s=1 e=0 z=0  None .text      setAlphaButton3DVAnimeMax__14dMeterButton_cFv                */
// True False
//  void False
void dMeterButton_c::setAlphaButton3DVAnimeMax() {
	/* empty function */
}


/* 80207748-802077EC 00A4+00 s=1 e=0 z=0  None .text      setAlphaButtonCAnimeMin__14dMeterButton_cFv                  */
//	80207760: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207764: 80454748 (lit_4146)
//	80207788: 80454748 (lit_4146)
//	8020778C: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	802077A0: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802077A4: 80454748 (lit_4146)
//	802077B8: 8020A94C (hide_button__14dMeterButton_cFUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonCAnimeMin() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonCAnimeMin__14dMeterButton_cFv.s"
}
#pragma pop


/* 802077EC-80207A28 023C+00 s=1 e=0 z=0  None .text      setAlphaButtonCAnimeMax__14dMeterButton_cFv                  */
//	80207804: 803621DC (_savegpr_29)
//	80207810: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207814: 8045474C (lit_4147)
//	80207820: 804061C0 (g_dComIfG_gameInfo)
//	80207824: 804061C0 (g_dComIfG_gameInfo)
//	8020783C: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80207858: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8020785C: 80430188 (g_meter2_info)
//	80207860: 80430188 (g_meter2_info)
//	80207874: 8021AAA4 (setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas)
//	8020787C: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207880: 8045474C (lit_4147)
//	802078A0: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	802078B8: 80454758 (lit_4513)
//	802078C4: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
//	802078D0: 8042EBC8 (g_drawHIO)
//	802078D4: 8042EBC8 (g_drawHIO)
//	80207940: 80454768 (lit_4517)
//	8020797C: 80454768 (lit_4517)
//	802079E8: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	802079F0: 80454748 (lit_4146)
//	802079F4: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80207A14: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonCAnimeMax() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonCAnimeMax__14dMeterButton_cFv.s"
}
#pragma pop


/* 80207A28-80207AB8 0090+00 s=1 e=0 z=0  None .text      setAlphaButtonSAnimeMin__14dMeterButton_cFv                  */
//	80207A40: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207A44: 80454748 (lit_4146)
//	80207A68: 80454748 (lit_4146)
//	80207A6C: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80207A80: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207A84: 80454748 (lit_4146)
//	80207A98: 8020A94C (hide_button__14dMeterButton_cFUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonSAnimeMin() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonSAnimeMin__14dMeterButton_cFv.s"
}
#pragma pop


/* 80207AB8-80207BA4 00EC+00 s=1 e=0 z=0  None .text      setAlphaButtonSAnimeMax__14dMeterButton_cFv                  */
//	80207AD0: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207AD4: 8045474C (lit_4147)
//	80207AE0: 804061C0 (g_dComIfG_gameInfo)
//	80207AE4: 804061C0 (g_dComIfG_gameInfo)
//	80207AFC: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80207B18: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80207B1C: 80430188 (g_meter2_info)
//	80207B20: 80430188 (g_meter2_info)
//	80207B34: 8021AAA4 (setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas)
//	80207B3C: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207B40: 8045474C (lit_4147)
//	80207B60: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80207B78: 80454758 (lit_4513)
//	80207B84: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonSAnimeMax() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonSAnimeMax__14dMeterButton_cFv.s"
}
#pragma pop


/* 80207BA4-80207C34 0090+00 s=1 e=0 z=0  None .text      setAlphaButtonXAnimeMin__14dMeterButton_cFv                  */
//	80207BBC: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207BC0: 80454748 (lit_4146)
//	80207BE4: 80454748 (lit_4146)
//	80207BE8: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80207BFC: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207C00: 80454748 (lit_4146)
//	80207C14: 8020A94C (hide_button__14dMeterButton_cFUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonXAnimeMin() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonXAnimeMin__14dMeterButton_cFv.s"
}
#pragma pop


/* 80207C34-80207D20 00EC+00 s=1 e=0 z=0  None .text      setAlphaButtonXAnimeMax__14dMeterButton_cFv                  */
//	80207C4C: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207C50: 8045474C (lit_4147)
//	80207C5C: 804061C0 (g_dComIfG_gameInfo)
//	80207C60: 804061C0 (g_dComIfG_gameInfo)
//	80207C78: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80207C94: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80207C98: 80430188 (g_meter2_info)
//	80207C9C: 80430188 (g_meter2_info)
//	80207CB0: 8021AAA4 (setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas)
//	80207CB8: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207CBC: 8045474C (lit_4147)
//	80207CDC: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80207CF4: 80454758 (lit_4513)
//	80207D00: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonXAnimeMax() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonXAnimeMax__14dMeterButton_cFv.s"
}
#pragma pop


/* 80207D20-80207DB0 0090+00 s=1 e=0 z=0  None .text      setAlphaButtonYAnimeMin__14dMeterButton_cFv                  */
//	80207D38: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207D3C: 80454748 (lit_4146)
//	80207D60: 80454748 (lit_4146)
//	80207D64: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80207D78: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207D7C: 80454748 (lit_4146)
//	80207D90: 8020A94C (hide_button__14dMeterButton_cFUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonYAnimeMin() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonYAnimeMin__14dMeterButton_cFv.s"
}
#pragma pop


/* 80207DB0-80207E9C 00EC+00 s=1 e=0 z=0  None .text      setAlphaButtonYAnimeMax__14dMeterButton_cFv                  */
//	80207DC8: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207DCC: 8045474C (lit_4147)
//	80207DD8: 804061C0 (g_dComIfG_gameInfo)
//	80207DDC: 804061C0 (g_dComIfG_gameInfo)
//	80207DF4: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80207E10: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80207E14: 80430188 (g_meter2_info)
//	80207E18: 80430188 (g_meter2_info)
//	80207E2C: 8021AAA4 (setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas)
//	80207E34: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207E38: 8045474C (lit_4147)
//	80207E58: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80207E70: 80454758 (lit_4513)
//	80207E7C: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonYAnimeMax() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonYAnimeMax__14dMeterButton_cFv.s"
}
#pragma pop


/* 80207E9C-80207F34 0098+00 s=1 e=0 z=0  None .text      setAlphaButtonNunAnimeMin__14dMeterButton_cFv                */
//	80207EBC: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207EC0: 80454748 (lit_4146)
//	80207EE4: 80454748 (lit_4146)
//	80207EE8: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80207EFC: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207F00: 80454748 (lit_4146)
//	80207F14: 8020A94C (hide_button__14dMeterButton_cFUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonNunAnimeMin() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonNunAnimeMin__14dMeterButton_cFv.s"
}
#pragma pop


/* 80207F34-80208028 00F4+00 s=1 e=0 z=0  None .text      setAlphaButtonNunAnimeMax__14dMeterButton_cFv                */
//	80207F54: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207F58: 8045474C (lit_4147)
//	80207F64: 804061C0 (g_dComIfG_gameInfo)
//	80207F68: 804061C0 (g_dComIfG_gameInfo)
//	80207F80: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80207F9C: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80207FA0: 80430188 (g_meter2_info)
//	80207FA4: 80430188 (g_meter2_info)
//	80207FB8: 8021AAA4 (setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas)
//	80207FC0: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80207FC4: 8045474C (lit_4147)
//	80207FE4: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80207FFC: 80454758 (lit_4513)
//	80208008: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonNunAnimeMax() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonNunAnimeMax__14dMeterButton_cFv.s"
}
#pragma pop


/* 80208028-802080C0 0098+00 s=1 e=0 z=0  None .text      setAlphaButtonRemoAnimeMin__14dMeterButton_cFv               */
//	80208048: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	8020804C: 80454748 (lit_4146)
//	80208070: 80454748 (lit_4146)
//	80208074: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80208088: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	8020808C: 80454748 (lit_4146)
//	802080A0: 8020A94C (hide_button__14dMeterButton_cFUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonRemoAnimeMin() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonRemoAnimeMin__14dMeterButton_cFv.s"
}
#pragma pop


/* 802080C0-802081B4 00F4+00 s=1 e=0 z=0  None .text      setAlphaButtonRemoAnimeMax__14dMeterButton_cFv               */
//	802080E0: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802080E4: 8045474C (lit_4147)
//	802080F0: 804061C0 (g_dComIfG_gameInfo)
//	802080F4: 804061C0 (g_dComIfG_gameInfo)
//	8020810C: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80208128: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8020812C: 80430188 (g_meter2_info)
//	80208130: 80430188 (g_meter2_info)
//	80208144: 8021AAA4 (setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas)
//	8020814C: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80208150: 8045474C (lit_4147)
//	80208170: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80208188: 80454758 (lit_4513)
//	80208194: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonRemoAnimeMax() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonRemoAnimeMax__14dMeterButton_cFv.s"
}
#pragma pop


/* 802081B4-8020824C 0098+00 s=1 e=0 z=0  None .text      setAlphaButtonRemo2AnimeMin__14dMeterButton_cFv              */
//	802081D4: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802081D8: 80454748 (lit_4146)
//	802081FC: 80454748 (lit_4146)
//	80208200: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80208214: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80208218: 80454748 (lit_4146)
//	8020822C: 8020A94C (hide_button__14dMeterButton_cFUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonRemo2AnimeMin() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonRemo2AnimeMin__14dMeterButton_cFv.s"
}
#pragma pop


/* 8020824C-80208340 00F4+00 s=1 e=0 z=0  None .text      setAlphaButtonRemo2AnimeMax__14dMeterButton_cFv              */
//	8020826C: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80208270: 8045474C (lit_4147)
//	8020827C: 804061C0 (g_dComIfG_gameInfo)
//	80208280: 804061C0 (g_dComIfG_gameInfo)
//	80208298: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	802082B4: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	802082B8: 80430188 (g_meter2_info)
//	802082BC: 80430188 (g_meter2_info)
//	802082D0: 8021AAA4 (setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas)
//	802082D8: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802082DC: 8045474C (lit_4147)
//	802082FC: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80208314: 80454758 (lit_4513)
//	80208320: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonRemo2AnimeMax() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonRemo2AnimeMax__14dMeterButton_cFv.s"
}
#pragma pop


/* 80208340-802083D8 0098+00 s=1 e=0 z=0  None .text      setAlphaButtonARAnimeMin__14dMeterButton_cFv                 */
//	80208360: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80208364: 80454748 (lit_4146)
//	80208388: 80454748 (lit_4146)
//	8020838C: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	802083A0: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802083A4: 80454748 (lit_4146)
//	802083B8: 8020A94C (hide_button__14dMeterButton_cFUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonARAnimeMin() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonARAnimeMin__14dMeterButton_cFv.s"
}
#pragma pop


/* 802083D8-802084D8 0100+00 s=1 e=0 z=0  None .text      setAlphaButtonARAnimeMax__14dMeterButton_cFv                 */
//	802083F8: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802083FC: 8045474C (lit_4147)
//	80208408: 804061C0 (g_dComIfG_gameInfo)
//	8020840C: 804061C0 (g_dComIfG_gameInfo)
//	8020842C: 8045474C (lit_4147)
//	80208430: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8020844C: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80208450: 80430188 (g_meter2_info)
//	80208454: 80430188 (g_meter2_info)
//	80208468: 8021AAA4 (setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas)
//	80208470: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80208474: 8045474C (lit_4147)
//	80208494: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	802084AC: 80454758 (lit_4513)
//	802084B8: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonARAnimeMax() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonARAnimeMax__14dMeterButton_cFv.s"
}
#pragma pop


/* 802084D8-80208570 0098+00 s=1 e=0 z=0  None .text      setAlphaButton3DBAnimeMin__14dMeterButton_cFv                */
//	802084F8: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802084FC: 80454748 (lit_4146)
//	80208520: 80454748 (lit_4146)
//	80208524: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80208538: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	8020853C: 80454748 (lit_4146)
//	80208550: 8020A94C (hide_button__14dMeterButton_cFUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButton3DBAnimeMin() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButton3DBAnimeMin__14dMeterButton_cFv.s"
}
#pragma pop


/* 80208570-80208670 0100+00 s=1 e=0 z=0  None .text      setAlphaButton3DBAnimeMax__14dMeterButton_cFv                */
//	80208590: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80208594: 8045474C (lit_4147)
//	802085A0: 804061C0 (g_dComIfG_gameInfo)
//	802085A4: 804061C0 (g_dComIfG_gameInfo)
//	802085C4: 8045474C (lit_4147)
//	802085C8: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	802085E4: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	802085E8: 80430188 (g_meter2_info)
//	802085EC: 80430188 (g_meter2_info)
//	80208600: 8021AAA4 (setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas)
//	80208608: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	8020860C: 8045474C (lit_4147)
//	8020862C: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80208644: 80454758 (lit_4513)
//	80208650: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButton3DBAnimeMax() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButton3DBAnimeMax__14dMeterButton_cFv.s"
}
#pragma pop


/* 80208670-80208708 0098+00 s=1 e=0 z=0  None .text      setAlphaButtonNUREAnimeMin__14dMeterButton_cFv               */
//	80208690: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80208694: 80454748 (lit_4146)
//	802086B8: 80454748 (lit_4146)
//	802086BC: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	802086D0: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802086D4: 80454748 (lit_4146)
//	802086E8: 8020A94C (hide_button__14dMeterButton_cFUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonNUREAnimeMin() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonNUREAnimeMin__14dMeterButton_cFv.s"
}
#pragma pop


/* 80208708-80208808 0100+00 s=1 e=0 z=0  None .text      setAlphaButtonNUREAnimeMax__14dMeterButton_cFv               */
//	80208728: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	8020872C: 8045474C (lit_4147)
//	80208738: 804061C0 (g_dComIfG_gameInfo)
//	8020873C: 804061C0 (g_dComIfG_gameInfo)
//	8020875C: 8045474C (lit_4147)
//	80208760: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8020877C: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80208780: 80430188 (g_meter2_info)
//	80208784: 80430188 (g_meter2_info)
//	80208798: 8021AAA4 (setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas)
//	802087A0: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802087A4: 8045474C (lit_4147)
//	802087C4: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	802087DC: 80454758 (lit_4513)
//	802087E8: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonNUREAnimeMax() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonNUREAnimeMax__14dMeterButton_cFv.s"
}
#pragma pop


/* 80208808-802088A0 0098+00 s=1 e=0 z=0  None .text      setAlphaButtonReelAnimeMin__14dMeterButton_cFv               */
//	80208828: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	8020882C: 80454748 (lit_4146)
//	80208850: 80454748 (lit_4146)
//	80208854: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80208868: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	8020886C: 80454748 (lit_4146)
//	80208880: 8020A94C (hide_button__14dMeterButton_cFUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonReelAnimeMin() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonReelAnimeMin__14dMeterButton_cFv.s"
}
#pragma pop


/* 802088A0-802089A0 0100+00 s=1 e=0 z=0  None .text      setAlphaButtonReelAnimeMax__14dMeterButton_cFv               */
//	802088C0: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802088C4: 8045474C (lit_4147)
//	802088D0: 804061C0 (g_dComIfG_gameInfo)
//	802088D4: 804061C0 (g_dComIfG_gameInfo)
//	802088F4: 8045474C (lit_4147)
//	802088F8: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80208914: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80208918: 80430188 (g_meter2_info)
//	8020891C: 80430188 (g_meter2_info)
//	80208930: 8021AAA4 (setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas)
//	80208938: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	8020893C: 8045474C (lit_4147)
//	8020895C: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80208974: 80454758 (lit_4513)
//	80208980: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonReelAnimeMax() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonReelAnimeMax__14dMeterButton_cFv.s"
}
#pragma pop


/* 802089A0-80208A38 0098+00 s=1 e=0 z=0  None .text      setAlphaButtonReel2AnimeMin__14dMeterButton_cFv              */
//	802089C0: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802089C4: 80454748 (lit_4146)
//	802089E8: 80454748 (lit_4146)
//	802089EC: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80208A00: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80208A04: 80454748 (lit_4146)
//	80208A18: 8020A94C (hide_button__14dMeterButton_cFUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonReel2AnimeMin() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonReel2AnimeMin__14dMeterButton_cFv.s"
}
#pragma pop


/* 80208A38-80208AEC 00B4+00 s=1 e=0 z=0  None .text      setAlphaButtonReel2AnimeMax__14dMeterButton_cFv              */
//	80208A58: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80208A5C: 8045474C (lit_4147)
//	80208A70: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80208A84: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80208A88: 8045474C (lit_4147)
//	80208AA8: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80208AC0: 80454758 (lit_4513)
//	80208ACC: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonReel2AnimeMax() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonReel2AnimeMax__14dMeterButton_cFv.s"
}
#pragma pop


/* 80208AEC-80208B84 0098+00 s=1 e=0 z=0  None .text      setAlphaButtonABAnimeMin__14dMeterButton_cFv                 */
//	80208B0C: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80208B10: 80454748 (lit_4146)
//	80208B34: 80454748 (lit_4146)
//	80208B38: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80208B4C: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80208B50: 80454748 (lit_4146)
//	80208B64: 8020A94C (hide_button__14dMeterButton_cFUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonABAnimeMin() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonABAnimeMin__14dMeterButton_cFv.s"
}
#pragma pop


/* 80208B84-80208C38 00B4+00 s=1 e=0 z=0  None .text      setAlphaButtonABAnimeMax__14dMeterButton_cFv                 */
//	80208BA4: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80208BA8: 8045474C (lit_4147)
//	80208BBC: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80208BD0: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80208BD4: 8045474C (lit_4147)
//	80208BF4: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80208C0C: 80454758 (lit_4513)
//	80208C18: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonABAnimeMax() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonABAnimeMax__14dMeterButton_cFv.s"
}
#pragma pop


/* 80208C38-80208CD0 0098+00 s=1 e=0 z=0  None .text      setAlphaButtonTateAnimeMin__14dMeterButton_cFv               */
//	80208C58: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80208C5C: 80454748 (lit_4146)
//	80208C80: 80454748 (lit_4146)
//	80208C84: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80208C98: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80208C9C: 80454748 (lit_4146)
//	80208CB0: 8020A94C (hide_button__14dMeterButton_cFUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonTateAnimeMin() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonTateAnimeMin__14dMeterButton_cFv.s"
}
#pragma pop


/* 80208CD0-80208D84 00B4+00 s=1 e=0 z=0  None .text      setAlphaButtonTateAnimeMax__14dMeterButton_cFv               */
//	80208CF0: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80208CF4: 8045474C (lit_4147)
//	80208D08: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80208D1C: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80208D20: 8045474C (lit_4147)
//	80208D40: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80208D58: 80454758 (lit_4513)
//	80208D64: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonTateAnimeMax() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonTateAnimeMax__14dMeterButton_cFv.s"
}
#pragma pop


/* 80208D84-80208E1C 0098+00 s=1 e=0 z=0  None .text      setAlphaButtonNunZAnimeMin__14dMeterButton_cFv               */
//	80208DA4: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80208DA8: 80454748 (lit_4146)
//	80208DCC: 80454748 (lit_4146)
//	80208DD0: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80208DE4: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80208DE8: 80454748 (lit_4146)
//	80208DFC: 8020A94C (hide_button__14dMeterButton_cFUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonNunZAnimeMin() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonNunZAnimeMin__14dMeterButton_cFv.s"
}
#pragma pop


/* 80208E1C-80208F1C 0100+00 s=1 e=0 z=0  None .text      setAlphaButtonNunZAnimeMax__14dMeterButton_cFv               */
//	80208E3C: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80208E40: 8045474C (lit_4147)
//	80208E4C: 804061C0 (g_dComIfG_gameInfo)
//	80208E50: 804061C0 (g_dComIfG_gameInfo)
//	80208E70: 8045474C (lit_4147)
//	80208E74: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80208E90: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80208E94: 80430188 (g_meter2_info)
//	80208E98: 80430188 (g_meter2_info)
//	80208EAC: 8021AAA4 (setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas)
//	80208EB4: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80208EB8: 8045474C (lit_4147)
//	80208ED8: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80208EF0: 80454758 (lit_4513)
//	80208EFC: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonNunZAnimeMax() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonNunZAnimeMax__14dMeterButton_cFv.s"
}
#pragma pop


/* 80208F1C-80208FB4 0098+00 s=1 e=0 z=0  None .text      setAlphaButtonNunCAnimeMin__14dMeterButton_cFv               */
//	80208F3C: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80208F40: 80454748 (lit_4146)
//	80208F64: 80454748 (lit_4146)
//	80208F68: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80208F7C: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80208F80: 80454748 (lit_4146)
//	80208F94: 8020A94C (hide_button__14dMeterButton_cFUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonNunCAnimeMin() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonNunCAnimeMin__14dMeterButton_cFv.s"
}
#pragma pop


/* 80208FB4-802090B4 0100+00 s=1 e=0 z=0  None .text      setAlphaButtonNunCAnimeMax__14dMeterButton_cFv               */
//	80208FD4: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80208FD8: 8045474C (lit_4147)
//	80208FE4: 804061C0 (g_dComIfG_gameInfo)
//	80208FE8: 804061C0 (g_dComIfG_gameInfo)
//	80209008: 8045474C (lit_4147)
//	8020900C: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80209028: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8020902C: 80430188 (g_meter2_info)
//	80209030: 80430188 (g_meter2_info)
//	80209044: 8021AAA4 (setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas)
//	8020904C: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80209050: 8045474C (lit_4147)
//	80209070: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80209088: 80454758 (lit_4513)
//	80209094: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonNunCAnimeMax() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonNunCAnimeMax__14dMeterButton_cFv.s"
}
#pragma pop


/* 802090B4-8020914C 0098+00 s=1 e=0 z=0  None .text      setAlphaButtonBinAnimeMin__14dMeterButton_cFv                */
//	802090D4: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802090D8: 80454748 (lit_4146)
//	802090FC: 80454748 (lit_4146)
//	80209100: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80209114: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80209118: 80454748 (lit_4146)
//	8020912C: 8020A94C (hide_button__14dMeterButton_cFUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonBinAnimeMin() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonBinAnimeMin__14dMeterButton_cFv.s"
}
#pragma pop


/* 8020914C-8020924C 0100+00 s=1 e=0 z=0  None .text      setAlphaButtonBinAnimeMax__14dMeterButton_cFv                */
//	8020916C: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80209170: 8045474C (lit_4147)
//	8020917C: 804061C0 (g_dComIfG_gameInfo)
//	80209180: 804061C0 (g_dComIfG_gameInfo)
//	802091A0: 8045474C (lit_4147)
//	802091A4: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	802091C0: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	802091C4: 80430188 (g_meter2_info)
//	802091C8: 80430188 (g_meter2_info)
//	802091DC: 8021AAA4 (setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas)
//	802091E4: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802091E8: 8045474C (lit_4147)
//	80209208: 80451368 (mAudioMgrPtr__10Z2AudioMgr)
//	80209220: 80454758 (lit_4513)
//	8020922C: 802AB984 (seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaButtonBinAnimeMax() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonBinAnimeMax__14dMeterButton_cFv.s"
}
#pragma pop


/* 8020924C-802092C0 0074+00 s=1 e=0 z=0  None .text      setAlphaButtonOAnimeMin__14dMeterButton_cFi                  */
//	8020925C: 803621DC (_savegpr_29)
//	80209274: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80209278: 80454748 (lit_4146)
//	8020928C: 80206D70 (isFastSet__14dMeterButton_cFi)
//	80209294: 80454748 (lit_4146)
//	80209298: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	802092AC: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
asm void dMeterButton_c::setAlphaButtonOAnimeMin(int param_0) {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonOAnimeMin__14dMeterButton_cFi.s"
}
#pragma pop


/* 802092C0-80209368 00A8+00 s=1 e=0 z=0  None .text      setAlphaButtonOAnimeMax__14dMeterButton_cFi                  */
//	802092D0: 803621DC (_savegpr_29)
//	802092E8: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802092EC: 8045474C (lit_4147)
//	80209300: 80206D70 (isFastSet__14dMeterButton_cFi)
//	80209310: 8045474C (lit_4147)
//	80209314: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8020932C: 8045474C (lit_4147)
//	80209330: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80209334: 80430188 (g_meter2_info)
//	80209338: 80430188 (g_meter2_info)
//	8020934C: 8021AAA4 (setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas)
//	80209354: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
asm void dMeterButton_c::setAlphaButtonOAnimeMax(int param_0) {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaButtonOAnimeMax__14dMeterButton_cFi.s"
}
#pragma pop


/* 80209368-802093D8 0070+00 s=1 e=0 z=0  None .text      setAlphaIconAnimeMin__14dMeterButton_cFv                     */
//	80209380: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80209384: 80454748 (lit_4146)
//	802093A0: 80206D70 (isFastSet__14dMeterButton_cFi)
//	802093A8: 80454748 (lit_4146)
//	802093AC: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaIconAnimeMin() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaIconAnimeMin__14dMeterButton_cFv.s"
}
#pragma pop


/* 802093D8-80209474 009C+00 s=1 e=0 z=0  None .text      setAlphaIconAnimeMax__14dMeterButton_cFv                     */
//	802093F0: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802093F4: 8045474C (lit_4147)
//	80209410: 80206D70 (isFastSet__14dMeterButton_cFi)
//	80209420: 8045474C (lit_4147)
//	80209424: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8020943C: 8045474C (lit_4147)
//	80209440: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	80209444: 80430188 (g_meter2_info)
//	80209448: 80430188 (g_meter2_info)
//	8020945C: 8021AAA4 (setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::setAlphaIconAnimeMax() {
	nofralloc
#include "asm/d/meter/d_meter_button/setAlphaIconAnimeMax__14dMeterButton_cFv.s"
}
#pragma pop


/* 80209474-802095C0 014C+00 s=0 e=1 z=0  None .text      isClose__14dMeterButton_cFv                                  */
//	8020948C: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80209490: 80454748 (lit_4146)
//	802094A0: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802094A4: 80454748 (lit_4146)
//	802094B4: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802094B8: 80454748 (lit_4146)
//	802094C8: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802094CC: 80454748 (lit_4146)
//	802094DC: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802094E0: 80454748 (lit_4146)
//	802094F0: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	802094F4: 80454748 (lit_4146)
//	80209504: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80209508: 80454748 (lit_4146)
//	80209518: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	8020951C: 80454748 (lit_4146)
//	8020952C: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80209530: 80454748 (lit_4146)
//	80209540: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80209544: 80454748 (lit_4146)
//	80209554: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80209558: 80454748 (lit_4146)
//	80209568: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	8020956C: 80454748 (lit_4146)
//	8020957C: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80209580: 80454748 (lit_4146)
//	80209590: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	80209594: 80454748 (lit_4146)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dMeterButton_c::isClose() {
	nofralloc
#include "asm/d/meter/d_meter_button/isClose__14dMeterButton_cFv.s"
}
#pragma pop


/* 802095C0-80209CEC 072C+00 s=0 e=1 z=0  None .text      setString__14dMeterButton_cFPcUcUcUc                         */
//	802095D0: 803621CC (_savegpr_25)
//	802095FC: 80368994 (strcmp)
//	8020962C: 80368994 (strcmp)
//	802098B0: 8020A94C (hide_button__14dMeterButton_cFUc)
//	802098CC: 80368994 (strcmp)
//	80209B38: 80454748 (lit_4146)
//	80209B50: 80368994 (strcmp)
//	80209B64: 80368994 (strcmp)
//	80209B8C: 80209D7C (getCenterPosCalc__14dMeterButton_cFUcPci)
//	80209BA4: 80454748 (lit_4146)
//	80209BB8: 804061C0 (g_dComIfG_gameInfo)
//	80209BBC: 804061C0 (g_dComIfG_gameInfo)
//	80209BCC: 80454748 (lit_4146)
//	80209BDC: 8042EBC8 (g_drawHIO)
//	80209BE0: 8042EBC8 (g_drawHIO)
//	80209BF8: 80454770 (lit_5628)
//	80209C24: 80368B2C (strcpy)
//	80209C64: 80300658 (getStringPtr__10J2DTextBoxCFv)
//	80209C6C: 80368B2C (strcpy)
//	80209CB8: 80300658 (getStringPtr__10J2DTextBoxCFv)
//	80209CC0: 80368B2C (strcpy)
//	80209CD8: 80362218 (_restgpr_25)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  char* False
// 	 char False
//  u8 False
//  u8 False
//  u8 False
asm void dMeterButton_c::setString(char* param_0, u8 param_1, u8 param_2, u8 param_3) {
	nofralloc
#include "asm/d/meter/d_meter_button/setString__14dMeterButton_cFPcUcUcUc.s"
}
#pragma pop


/* 80209CEC-80209D7C 0090+00 s=0 e=1 z=0  None .text      hideAll__14dMeterButton_cFv                                  */
//	80209D5C: 80255608 (hide__13CPaneMgrAlphaFv)
//	80209D64: 80255608 (hide__13CPaneMgrAlphaFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void dMeterButton_c::hideAll() {
	nofralloc
#include "asm/d/meter/d_meter_button/hideAll__14dMeterButton_cFv.s"
}
#pragma pop


/* 80209D7C-8020A540 07C4+00 s=2 e=0 z=0  None .text      getCenterPosCalc__14dMeterButton_cFUcPci                     */
//	80209DA4: 803621D0 (_savegpr_26)
//	80209DB4: 80430188 (g_meter2_info)
//	80209DB8: 80430188 (g_meter2_info)
//	80209DC0: 8021C6A4 (getStringLength__13dMeter2Info_cFP10J2DTextBoxPc)
//	80209DC8: 8045474C (lit_4147)
//	80209E58: 80454770 (lit_5628)
//	80209E74: 80454748 (lit_4146)
//	80209E90: 803BF1A8 (lit_7807)
//	80209E94: 803BF1A8 (lit_7807)
//	80209F94: 80253930 (__ct__8CPaneMgrFv)
//	80209FD4: 80254C90 (getGlobalVtx__8CPaneMgrFP7J2DPanePA3_A4_fUcbs)
//	8020A02C: 80254C90 (getGlobalVtx__8CPaneMgrFP7J2DPanePA3_A4_fUcbs)
//	8020A084: 80254C90 (getGlobalVtx__8CPaneMgrFP7J2DPanePA3_A4_fUcbs)
//	8020A0DC: 80254C90 (getGlobalVtx__8CPaneMgrFP7J2DPanePA3_A4_fUcbs)
//	8020A13C: 80253A18 (__dt__8CPaneMgrFv)
//	8020A194: 804061C0 (g_dComIfG_gameInfo)
//	8020A198: 804061C0 (g_dComIfG_gameInfo)
//	8020A234: 80454748 (lit_4146)
//	8020A244: 804061C0 (g_dComIfG_gameInfo)
//	8020A248: 804061C0 (g_dComIfG_gameInfo)
//	8020A290: 80454748 (lit_4146)
//	8020A488: 80454748 (lit_4146)
//	8020A4B0: 80454770 (lit_5628)
//	8020A504: 80454770 (lit_5628)
//	8020A52C: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u8 False
//  char* False
// 	 char False
//  int False
asm void dMeterButton_c::getCenterPosCalc(u8 param_0, char* param_1, int param_2) {
	nofralloc
#include "asm/d/meter/d_meter_button/getCenterPosCalc__14dMeterButton_cFUcPci.s"
}
#pragma pop


/* ############################################################################################## */
/* 804547AC-804547B0 0004+00 s=1 e=0 z=0  None .sdata2    @7857                                                        */
SECTION_SDATA2 static f32 lit_7857 = 20.0f;

/* 8020A540-8020A94C 040C+00 s=2 e=0 z=0  None .text      trans_button__14dMeterButton_cFif                            */
//	8020A568: 803621D0 (_savegpr_26)
//	8020A588: 80454748 (lit_4146)
//	8020A594: 80454774 (lit_5629)
//	8020A5B0: 80454770 (lit_5628)
//	8020A5B4: 804547AC (lit_7857)
//	8020A5E4: 803BF200 (lit_7858)
//	8020A5E8: 803BF200 (lit_7858)
//	8020A61C: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	8020A644: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	8020A66C: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	8020A694: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	8020A6CC: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	8020A6F4: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	8020A71C: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	8020A748: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	8020A770: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	8020A7A0: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	8020A7D0: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	8020A7FC: 80454770 (lit_5628)
//	8020A80C: 80454774 (lit_5629)
//	8020A824: 804547AC (lit_7857)
//	8020A848: 80454770 (lit_5628)
//	8020A858: 80454774 (lit_5629)
//	8020A870: 804547AC (lit_7857)
//	8020A890: 80454770 (lit_5628)
//	8020A8A0: 80454774 (lit_5629)
//	8020A8E4: 804547A8 (lit_6017)
//	8020A8F0: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	8020A918: 8020AE68 (paneTrans__14dMeterButton_cFP8CPaneMgrffUc)
//	8020A938: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
//  f32 False
asm void dMeterButton_c::trans_button(int param_0, f32 param_1) {
	nofralloc
#include "asm/d/meter/d_meter_button/trans_button__14dMeterButton_cFif.s"
}
#pragma pop


/* 8020A94C-8020AA84 0138+00 s=23 e=0 z=0  None .text      hide_button__14dMeterButton_cFUc                             */
//	8020A9B0: 803980E8 (d_meter_d_meter_button__stringBase0)
//	8020A9B4: 803980E8 (d_meter_d_meter_button__stringBase0)
//	8020A9BC: 80368B2C (strcpy)
//	8020A9D4: 80255828 (getAlphaRate__13CPaneMgrAlphaFv)
//	8020A9DC: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8020A9F0: 80454748 (lit_4146)
//	8020A9F4: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8020A9FC: 80454748 (lit_4146)
//	8020AA00: 802557D0 (setAlphaRate__13CPaneMgrAlphaFf)
//	8020AA20: 803980E8 (d_meter_d_meter_button__stringBase0)
//	8020AA24: 803980E8 (d_meter_d_meter_button__stringBase0)
//	8020AA2C: 80368B2C (strcpy)
//	8020AA54: 80454748 (lit_4146)
//	8020AA60: 803980E8 (d_meter_d_meter_button__stringBase0)
//	8020AA64: 803980E8 (d_meter_d_meter_button__stringBase0)
//	8020AA6C: 80368B2C (strcpy)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u8 False
asm void dMeterButton_c::hide_button(u8 param_0) {
	nofralloc
#include "asm/d/meter/d_meter_button/hide_button__14dMeterButton_cFUc.s"
}
#pragma pop


/* 8020AA84-8020AE68 03E4+00 s=1 e=0 z=0  None .text      pikariCheck__14dMeterButton_cFv                              */
//	8020AA94: 804061C0 (g_dComIfG_gameInfo)
//	8020AA98: 804061C0 (g_dComIfG_gameInfo)
//	8020AA9C: 8042EBC8 (g_drawHIO)
//	8020AAA0: 8042EBC8 (g_drawHIO)
//	8020AE1C: 8045475C (lit_4514)
//	8020AE34: 8045475C (lit_4514)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void dMeterButton_c::pikariCheck() {
	nofralloc
#include "asm/d/meter/d_meter_button/pikariCheck__14dMeterButton_cFv.s"
}
#pragma pop


/* 8020AE68-8020AE8C 0024+00 s=3 e=0 z=0  None .text      paneTrans__14dMeterButton_cFP8CPaneMgrffUc                   */
//	8020AE78: 802545B0 (paneTrans__8CPaneMgrFff)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  CPaneMgr* False
// 	 CPaneMgr False
//  f32 False
//  f32 False
//  u8 False
asm void dMeterButton_c::paneTrans(CPaneMgr* param_0, f32 param_1, f32 param_2, u8 param_3) {
	nofralloc
#include "asm/d/meter/d_meter_button/paneTrans__14dMeterButton_cFP8CPaneMgrffUc.s"
}
#pragma pop


