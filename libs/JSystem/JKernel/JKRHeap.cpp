//
// Generated By: dol2asm
// Translation Unit: JKRHeap
//

#include "JSystem/JKernel/JKRHeap.h"
#include "dol2asm.h"
#include "dolphin/types.h"

//
// Types:
//

struct JUTException {
    /* 802E21FC */ void panic_f(char const*, int, char const*, ...);
};

struct JSUPtrLink {
    /* 802DBDFC */ JSUPtrLink(void*);
    /* 802DBE14 */ ~JSUPtrLink();
};

struct JSUPtrList {
    /* 802DBEAC */ ~JSUPtrList();
    /* 802DBF14 */ void initiate();
    /* 802DBF4C */ void append(JSUPtrLink*);
    /* 802DC15C */ void remove(JSUPtrLink*);
};

struct JKRHeap {
    struct TState {};

    /* 800065D8 */ bool dump_sort();
    /* 802CE138 */ JKRHeap(void*, u32, JKRHeap*, bool);
    /* 802CE264 */ ~JKRHeap();
    /* 802CE378 */ void initArena(char**, u32*, int);
    /* 802CE428 */ void becomeSystemHeap();
    /* 802CE438 */ void becomeCurrentHeap();
    /* 802CE448 */ void destroy();
    /* 802CE4D4 */ void alloc(u32, int);
    /* 802CE474 */ void alloc(u32, int, JKRHeap*);
    /* 802CE500 */ void free(void*, JKRHeap*);
    /* 802CE548 */ void free(void*);
    /* 802CE574 */ void callAllDisposer();
    /* 802CE5CC */ void freeAll();
    /* 802CE5F8 */ void freeTail();
    /* 802CE684 */ void resize(void*, u32);
    /* 802CE624 */ void resize(void*, u32, JKRHeap*);
    /* 802CE700 */ void getSize(void*);
    /* 802CE6B0 */ void getSize(void*, JKRHeap*);
    /* 802CE72C */ void getFreeSize();
    /* 802CE758 */ void getMaxFreeBlock();
    /* 802CE784 */ void getTotalFreeSize();
    /* 802CE7B0 */ void changeGroupID(u8);
    /* 802CE7DC */ void getMaxAllocatableSize(int);
    /* 802CE83C */ void findFromRoot(void*);
    /* 802CE894 */ void find(void*) const;
    /* 802CE93C */ void findAllHeap(void*) const;
    /* 802CE9E4 */ void dispose_subroutine(u32, u32);
    /* 802CEAA0 */ void dispose(void*, void*);
    /* 802CEA78 */ void dispose(void*, u32);
    /* 802CEAC0 */ void dispose();
    /* 802CEB18 */ void copyMemory(void*, void*, u32);
    /* 802CEB78 */ void setErrorFlag(bool);
    /* 802CEB88 */ void setErrorHandler(void (*)(void*, u32, int));
    /* 802CEBA8 */ void isSubHeap(JKRHeap*) const;
    /* 802CED84 */ void state_register(JKRHeap::TState*, u32) const;
    /* 802CED88 */ void state_compare(JKRHeap::TState const&, JKRHeap::TState const&) const;
    /* 802CEDA0 */ void state_dump(JKRHeap::TState const&) const;
    /* 802CEDA4 */ bool do_changeGroupID(u8);
    /* 802CEDAC */ bool do_getCurrentGroupId();
};

struct JKRDisposer {
    /* 802D147C */ JKRDisposer();
    /* 802D14E4 */ ~JKRDisposer();
};

//
// Forward References:
//

extern "C" void __ct__7JKRHeapFPvUlP7JKRHeapb();
extern "C" void __dt__7JKRHeapFv();
extern "C" void initArena__7JKRHeapFPPcPUli();
extern "C" void becomeSystemHeap__7JKRHeapFv();
extern "C" void becomeCurrentHeap__7JKRHeapFv();
extern "C" void destroy__7JKRHeapFv();
extern "C" void alloc__7JKRHeapFUliP7JKRHeap();
extern "C" void alloc__7JKRHeapFUli();
extern "C" void free__7JKRHeapFPvP7JKRHeap();
extern "C" void free__7JKRHeapFPv();
extern "C" void callAllDisposer__7JKRHeapFv();
extern "C" void freeAll__7JKRHeapFv();
extern "C" void freeTail__7JKRHeapFv();
extern "C" void resize__7JKRHeapFPvUlP7JKRHeap();
extern "C" void resize__7JKRHeapFPvUl();
extern "C" void getSize__7JKRHeapFPvP7JKRHeap();
extern "C" void getSize__7JKRHeapFPv();
extern "C" void getFreeSize__7JKRHeapFv();
extern "C" void getMaxFreeBlock__7JKRHeapFv();
extern "C" void getTotalFreeSize__7JKRHeapFv();
extern "C" void changeGroupID__7JKRHeapFUc();
extern "C" void getMaxAllocatableSize__7JKRHeapFi();
extern "C" void findFromRoot__7JKRHeapFPv();
extern "C" void find__7JKRHeapCFPv();
extern "C" void findAllHeap__7JKRHeapCFPv();
extern "C" void dispose_subroutine__7JKRHeapFUlUl();
extern "C" void dispose__7JKRHeapFPvUl();
extern "C" void dispose__7JKRHeapFPvPv();
extern "C" void dispose__7JKRHeapFv();
extern "C" void copyMemory__7JKRHeapFPvPvUl();
extern "C" static void JKRDefaultMemoryErrorRoutine__FPvUli();
extern "C" void setErrorFlag__7JKRHeapFb();
extern "C" void setErrorHandler__7JKRHeapFPFPvUli_v();
extern "C" void isSubHeap__7JKRHeapCFP7JKRHeap();
extern "C" void* __nw__FUl();
extern "C" void* __nw__FUli();
extern "C" void* __nw__FUlP7JKRHeapi();
extern "C" void* __nwa__FUl();
extern "C" void* __nwa__FUli();
extern "C" void* __nwa__FUlP7JKRHeapi();
extern "C" void __dl__FPv();
extern "C" void __dla__FPv();
extern "C" void state_register__7JKRHeapCFPQ27JKRHeap6TStateUl();
extern "C" void state_compare__7JKRHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState();
extern "C" void state_dump__7JKRHeapCFRCQ27JKRHeap6TState();
extern "C" bool do_changeGroupID__7JKRHeapFUc();
extern "C" bool do_getCurrentGroupId__7JKRHeapFv();
extern "C" extern char const* const JKRHeap__stringBase0;

//
// External References:
//

extern "C" bool dump_sort__7JKRHeapFv();
extern "C" void __ct__11JKRDisposerFv();
extern "C" void __dt__11JKRDisposerFv();
extern "C" void __ct__10JSUPtrLinkFPv();
extern "C" void __dt__10JSUPtrLinkFv();
extern "C" void __dt__10JSUPtrListFv();
extern "C" void initiate__10JSUPtrListFv();
extern "C" void append__10JSUPtrListFP10JSUPtrLink();
extern "C" void remove__10JSUPtrListFP10JSUPtrLink();
extern "C" void panic_f__12JUTExceptionFPCciPCce();
extern "C" void OSInitAlloc();
extern "C" void OSGetArenaHi();
extern "C" void OSGetArenaLo();
extern "C" void OSSetArenaHi();
extern "C" void OSSetArenaLo();
extern "C" void OSInitMutex();
extern "C" void _savegpr_26();
extern "C" void _savegpr_27();
extern "C" void _savegpr_28();
extern "C" void _savegpr_29();
extern "C" void _restgpr_26();
extern "C" void _restgpr_27();
extern "C" void _restgpr_28();
extern "C" void _restgpr_29();
extern "C" extern u8 data_804508B0[8];

//
// Declarations:
//

/* ############################################################################################## */
/* 803CBF70-803CBFD0 029090 0060+00 2/2 0/0 0/0 .data            __vt__7JKRHeap */
SECTION_DATA extern void* __vt__7JKRHeap[24] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)__dt__7JKRHeapFv,
    (void*)callAllDisposer__7JKRHeapFv,
    (void*)NULL,
    (void*)NULL,
    (void*)dump_sort__7JKRHeapFv,
    (void*)NULL,
    (void*)NULL,
    (void*)NULL,
    (void*)NULL,
    (void*)NULL,
    (void*)NULL,
    (void*)NULL,
    (void*)NULL,
    (void*)NULL,
    (void*)NULL,
    (void*)NULL,
    (void*)NULL,
    (void*)do_changeGroupID__7JKRHeapFUc,
    (void*)do_getCurrentGroupId__7JKRHeapFv,
    (void*)state_register__7JKRHeapCFPQ27JKRHeap6TStateUl,
    (void*)state_compare__7JKRHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState,
    (void*)state_dump__7JKRHeapCFRCQ27JKRHeap6TState,
};

/* 80451370-80451374 000870 0004+00 3/3 44/44 0/0 .sbss            sSystemHeap__7JKRHeap */
extern u8 sSystemHeap__7JKRHeap[4];
u8 sSystemHeap__7JKRHeap[4];

/* 80451374-80451378 000874 0004+00 4/4 23/23 0/0 .sbss            sCurrentHeap__7JKRHeap */
extern u8 sCurrentHeap__7JKRHeap[4];
u8 sCurrentHeap__7JKRHeap[4];

/* 80451378-8045137C 000878 0004+00 3/3 10/10 0/0 .sbss            sRootHeap__7JKRHeap */
extern u8 sRootHeap__7JKRHeap[4];
u8 sRootHeap__7JKRHeap[4];

/* 8045137C-80451380 00087C 0004+00 2/2 3/3 0/0 .sbss            mErrorHandler__7JKRHeap */
extern u8 mErrorHandler__7JKRHeap[4];
u8 mErrorHandler__7JKRHeap[4];

/* 80451380-80451384 000880 0004+00 1/1 0/0 0/0 .sbss            None */
static u8 data_80451380[4];

/* 802CE138-802CE264 2C8A78 012C+00 0/0 3/3 0/0 .text            __ct__7JKRHeapFPvUlP7JKRHeapb */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JKRHeap::JKRHeap(void* param_0, u32 param_1, JKRHeap* param_2, bool param_3) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/__ct__7JKRHeapFPvUlP7JKRHeapb.s"
}
#pragma pop

/* 802CE264-802CE378 2C8BA4 0114+00 1/0 3/3 0/0 .text            __dt__7JKRHeapFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JKRHeap::~JKRHeap() {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/__dt__7JKRHeapFv.s"
}
#pragma pop

/* ############################################################################################## */
/* 80451384-80451388 000884 0004+00 1/1 1/1 0/0 .sbss            mCodeStart__7JKRHeap */
extern u8 mCodeStart__7JKRHeap[4];
u8 mCodeStart__7JKRHeap[4];

/* 80451388-8045138C 000888 0004+00 1/1 1/1 0/0 .sbss            mCodeEnd__7JKRHeap */
extern u8 mCodeEnd__7JKRHeap[4];
u8 mCodeEnd__7JKRHeap[4];

/* 8045138C-80451390 00088C 0004+00 1/1 1/1 0/0 .sbss            mUserRamStart__7JKRHeap */
extern u8 mUserRamStart__7JKRHeap[4];
u8 mUserRamStart__7JKRHeap[4];

/* 80451390-80451394 000890 0004+00 1/1 1/1 0/0 .sbss            mUserRamEnd__7JKRHeap */
extern u8 mUserRamEnd__7JKRHeap[4];
u8 mUserRamEnd__7JKRHeap[4];

/* 80451394-80451398 000894 0004+00 1/1 2/2 0/0 .sbss            mMemorySize__7JKRHeap */
extern u8 mMemorySize__7JKRHeap[4];
u8 mMemorySize__7JKRHeap[4];

/* 802CE378-802CE428 2C8CB8 00B0+00 0/0 1/1 0/0 .text            initArena__7JKRHeapFPPcPUli */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::initArena(char** param_0, u32* param_1, int param_2) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/initArena__7JKRHeapFPPcPUli.s"
}
#pragma pop

/* 802CE428-802CE438 2C8D68 0010+00 1/1 0/0 0/0 .text            becomeSystemHeap__7JKRHeapFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::becomeSystemHeap() {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/becomeSystemHeap__7JKRHeapFv.s"
}
#pragma pop

/* 802CE438-802CE448 2C8D78 0010+00 1/1 22/22 1/1 .text            becomeCurrentHeap__7JKRHeapFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::becomeCurrentHeap() {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/becomeCurrentHeap__7JKRHeapFv.s"
}
#pragma pop

/* 802CE448-802CE474 2C8D88 002C+00 0/0 5/5 1/1 .text            destroy__7JKRHeapFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::destroy() {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/destroy__7JKRHeapFv.s"
}
#pragma pop

/* 802CE474-802CE4D4 2C8DB4 0060+00 6/6 23/23 0/0 .text            alloc__7JKRHeapFUliP7JKRHeap */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::alloc(u32 param_0, int param_1, JKRHeap* param_2) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/alloc__7JKRHeapFUliP7JKRHeap.s"
}
#pragma pop

/* 802CE4D4-802CE500 2C8E14 002C+00 1/1 30/30 1/1 .text            alloc__7JKRHeapFUli */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::alloc(u32 param_0, int param_1) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/alloc__7JKRHeapFUli.s"
}
#pragma pop

/* 802CE500-802CE548 2C8E40 0048+00 2/2 38/38 1/1 .text            free__7JKRHeapFPvP7JKRHeap */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::free(void* param_0, JKRHeap* param_1) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/free__7JKRHeapFPvP7JKRHeap.s"
}
#pragma pop

/* 802CE548-802CE574 2C8E88 002C+00 1/1 29/29 0/0 .text            free__7JKRHeapFPv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::free(void* param_0) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/free__7JKRHeapFPv.s"
}
#pragma pop

/* 802CE574-802CE5CC 2C8EB4 0058+00 1/0 5/2 0/0 .text            callAllDisposer__7JKRHeapFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::callAllDisposer() {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/callAllDisposer__7JKRHeapFv.s"
}
#pragma pop

/* 802CE5CC-802CE5F8 2C8F0C 002C+00 0/0 12/12 0/0 .text            freeAll__7JKRHeapFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::freeAll() {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/freeAll__7JKRHeapFv.s"
}
#pragma pop

/* 802CE5F8-802CE624 2C8F38 002C+00 0/0 1/1 0/0 .text            freeTail__7JKRHeapFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::freeTail() {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/freeTail__7JKRHeapFv.s"
}
#pragma pop

/* 802CE624-802CE684 2C8F64 0060+00 0/0 1/1 0/0 .text            resize__7JKRHeapFPvUlP7JKRHeap */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::resize(void* param_0, u32 param_1, JKRHeap* param_2) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/resize__7JKRHeapFPvUlP7JKRHeap.s"
}
#pragma pop

/* 802CE684-802CE6B0 2C8FC4 002C+00 1/1 1/1 0/0 .text            resize__7JKRHeapFPvUl */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::resize(void* param_0, u32 param_1) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/resize__7JKRHeapFPvUl.s"
}
#pragma pop

/* 802CE6B0-802CE700 2C8FF0 0050+00 0/0 4/4 0/0 .text            getSize__7JKRHeapFPvP7JKRHeap */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::getSize(void* param_0, JKRHeap* param_1) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/getSize__7JKRHeapFPvP7JKRHeap.s"
}
#pragma pop

/* 802CE700-802CE72C 2C9040 002C+00 1/1 1/1 0/0 .text            getSize__7JKRHeapFPv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::getSize(void* param_0) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/getSize__7JKRHeapFPv.s"
}
#pragma pop

/* 802CE72C-802CE758 2C906C 002C+00 1/1 18/18 0/0 .text            getFreeSize__7JKRHeapFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::getFreeSize() {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/getFreeSize__7JKRHeapFv.s"
}
#pragma pop

/* 802CE758-802CE784 2C9098 002C+00 1/1 0/0 0/0 .text            getMaxFreeBlock__7JKRHeapFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::getMaxFreeBlock() {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/getMaxFreeBlock__7JKRHeapFv.s"
}
#pragma pop

/* 802CE784-802CE7B0 2C90C4 002C+00 0/0 32/32 0/0 .text            getTotalFreeSize__7JKRHeapFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::getTotalFreeSize() {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/getTotalFreeSize__7JKRHeapFv.s"
}
#pragma pop

/* 802CE7B0-802CE7DC 2C90F0 002C+00 0/0 1/1 0/0 .text            changeGroupID__7JKRHeapFUc */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::changeGroupID(u8 param_0) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/changeGroupID__7JKRHeapFUc.s"
}
#pragma pop

/* 802CE7DC-802CE83C 2C911C 0060+00 0/0 2/2 0/0 .text            getMaxAllocatableSize__7JKRHeapFi
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::getMaxAllocatableSize(int param_0) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/getMaxAllocatableSize__7JKRHeapFi.s"
}
#pragma pop

/* 802CE83C-802CE894 2C917C 0058+00 3/3 8/8 0/0 .text            findFromRoot__7JKRHeapFPv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::findFromRoot(void* param_0) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/findFromRoot__7JKRHeapFPv.s"
}
#pragma pop

/* 802CE894-802CE93C 2C91D4 00A8+00 1/1 1/1 0/0 .text            find__7JKRHeapCFPv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::find(void* param_0) const {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/find__7JKRHeapCFPv.s"
}
#pragma pop

/* 802CE93C-802CE9E4 2C927C 00A8+00 1/1 0/0 0/0 .text            findAllHeap__7JKRHeapCFPv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::findAllHeap(void* param_0) const {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/findAllHeap__7JKRHeapCFPv.s"
}
#pragma pop

/* 802CE9E4-802CEA78 2C9324 0094+00 2/2 0/0 0/0 .text            dispose_subroutine__7JKRHeapFUlUl
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::dispose_subroutine(u32 param_0, u32 param_1) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/dispose_subroutine__7JKRHeapFUlUl.s"
}
#pragma pop

/* 802CEA78-802CEAA0 2C93B8 0028+00 0/0 1/1 0/0 .text            dispose__7JKRHeapFPvUl */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::dispose(void* param_0, u32 param_1) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/dispose__7JKRHeapFPvUl.s"
}
#pragma pop

/* 802CEAA0-802CEAC0 2C93E0 0020+00 0/0 1/1 0/0 .text            dispose__7JKRHeapFPvPv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::dispose(void* param_0, void* param_1) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/dispose__7JKRHeapFPvPv.s"
}
#pragma pop

/* 802CEAC0-802CEB18 2C9400 0058+00 0/0 3/3 0/0 .text            dispose__7JKRHeapFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::dispose() {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/dispose__7JKRHeapFv.s"
}
#pragma pop

/* 802CEB18-802CEB40 2C9458 0028+00 0/0 4/4 0/0 .text            copyMemory__7JKRHeapFPvPvUl */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::copyMemory(void* param_0, void* param_1, u32 param_2) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/copyMemory__7JKRHeapFPvPvUl.s"
}
#pragma pop

/* 802CEB40-802CEB78 2C9480 0038+00 2/2 0/0 0/0 .text JKRDefaultMemoryErrorRoutine__FPvUli */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
static asm void JKRDefaultMemoryErrorRoutine(void* param_0, u32 param_1, int param_2) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/JKRDefaultMemoryErrorRoutine__FPvUli.s"
}
#pragma pop

/* 802CEB78-802CEB88 2C94B8 0010+00 0/0 2/2 0/0 .text            setErrorFlag__7JKRHeapFb */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::setErrorFlag(bool param_0) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/setErrorFlag__7JKRHeapFb.s"
}
#pragma pop

/* 802CEB88-802CEBA8 2C94C8 0020+00 0/0 1/1 0/0 .text            setErrorHandler__7JKRHeapFPFPvUli_v
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::setErrorHandler(void (*)(void*, u32, int)) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/setErrorHandler__7JKRHeapFPFPvUli_v.s"
}
#pragma pop

/* 802CEBA8-802CEC4C 2C94E8 00A4+00 0/0 1/1 0/0 .text            isSubHeap__7JKRHeapCFP7JKRHeap */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::isSubHeap(JKRHeap* param_0) const {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/isSubHeap__7JKRHeapCFP7JKRHeap.s"
}
#pragma pop

/* 802CEC4C-802CEC74 2C958C 0028+00 0/0 278/278 377/377 .text            __nw__FUl */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void* operator new(u32 param_0) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/__nw__FUl.s"
}
#pragma pop

/* 802CEC74-802CEC98 2C95B4 0024+00 0/0 15/15 0/0 .text            __nw__FUli */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void* operator new(u32 param_0, int param_1) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/__nw__FUli.s"
}
#pragma pop

/* 802CEC98-802CECC4 2C95D8 002C+00 0/0 47/47 0/0 .text            __nw__FUlP7JKRHeapi */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void* operator new(u32 param_0, JKRHeap* param_1, int param_2) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/__nw__FUlP7JKRHeapi.s"
}
#pragma pop

/* 802CECC4-802CECEC 2C9604 0028+00 0/0 52/52 15/15 .text            __nwa__FUl */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void* operator new[](u32 param_0) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/__nwa__FUl.s"
}
#pragma pop

/* 802CECEC-802CED10 2C962C 0024+00 0/0 29/29 0/0 .text            __nwa__FUli */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void* operator new[](u32 param_0, int param_1) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/__nwa__FUli.s"
}
#pragma pop

/* 802CED10-802CED3C 2C9650 002C+00 0/0 25/25 0/0 .text            __nwa__FUlP7JKRHeapi */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void* operator new[](u32 param_0, JKRHeap* param_1, int param_2) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/__nwa__FUlP7JKRHeapi.s"
}
#pragma pop

/* 802CED3C-802CED60 2C967C 0024+00 1/1 847/847 4665/4665 .text            __dl__FPv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void operator delete(void* param_0) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/__dl__FPv.s"
}
#pragma pop

/* 802CED60-802CED84 2C96A0 0024+00 0/0 20/20 3/3 .text            __dla__FPv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void operator delete[](void* param_0) {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/__dla__FPv.s"
}
#pragma pop

/* 802CED84-802CED88 2C96C4 0004+00 1/0 1/0 0/0 .text
 * state_register__7JKRHeapCFPQ27JKRHeap6TStateUl               */
void JKRHeap::state_register(JKRHeap::TState* param_0, u32 param_1) const {
    /* empty function */
}

/* 802CED88-802CEDA0 2C96C8 0018+00 1/0 1/0 0/0 .text
 * state_compare__7JKRHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JKRHeap::state_compare(JKRHeap::TState const& param_0,
                                JKRHeap::TState const& param_1) const {
    nofralloc
#include "asm/JSystem/JKernel/JKRHeap/state_compare__7JKRHeapCFRCQ27JKRHeap6TStateRCQ27JKRHeap6TState.s"
}
#pragma pop

/* 802CEDA0-802CEDA4 2C96E0 0004+00 1/0 3/0 0/0 .text state_dump__7JKRHeapCFRCQ27JKRHeap6TState */
void JKRHeap::state_dump(JKRHeap::TState const& param_0) const {
    /* empty function */
}

/* 802CEDA4-802CEDAC 2C96E4 0008+00 1/0 1/0 0/0 .text            do_changeGroupID__7JKRHeapFUc */
bool JKRHeap::do_changeGroupID(u8 param_0) {
    return false;
}

/* 802CEDAC-802CEDB4 2C96EC 0008+00 1/0 1/0 0/0 .text            do_getCurrentGroupId__7JKRHeapFv */
bool JKRHeap::do_getCurrentGroupId() {
    return false;
}

/* 8039CAD8-8039CAF0 029138 0016+02 1/1 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD static char const* const stringBase_8039CAD8 = "JKRHeap.cpp";
SECTION_DEAD static char const* const stringBase_8039CAE4 = "%s";
SECTION_DEAD static char const* const stringBase_8039CAE7 = "abort\n";
/* @stringBase0 padding */
SECTION_DEAD static char const* const pad_8039CAEE = "\0";
#pragma pop
