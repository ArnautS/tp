// 
// Generated By: dol2asm
// Translation Unit: JUTResFont
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "JSystem/JUtility/JUTResFont.h"

// 
// Types:
// 

struct _GXTexMapID {
};

struct ResFONT {
};

struct JUtility {
	struct TColor {
	};

};

struct JUTFont {
	struct TWidth {
	};

	/* 802DECF8 */ // False False
JUTFont();
	/* 802DED24 */ // False False
void initialize_state();
	/* 802E0108 */ // True False
//  bool False
//  int False
bool isLeadByte_1Byte(int);
	/* 802E0110 */ // True False
//  bool False
//  int False
bool isLeadByte_2Byte(int);
	/* 802E0118 */ // True False
//  int False
void isLeadByte_ShiftJIS(int);
};

struct JKRHeap {
};

struct JUTResFont {
	/* 802DDFD8 */ // False False
void getResFont() const;
	/* 802DDFE0 */ // False False
void getFontType() const;
	/* 802DDFEC */ // False False
void getLeading() const;
	/* 802DDFF8 */ // False False
void getWidth() const;
	/* 802DE004 */ // False False
void getAscent() const;
	/* 802DE010 */ // False False
void getDescent() const;
	/* 802DE01C */ // False False
void getHeight() const;
	/* 802DEF94 */ // False False
//  ResFONT const* False
// 	 ResFONT const False
// 		 ResFONT False
//  JKRHeap* False
// 	 JKRHeap False
JUTResFont(ResFONT const*, JKRHeap*);
	/* 802DEF48 */ // False False
JUTResFont();
	/* 802DF000 */ // False False
~JUTResFont();
	/* 802DF08C */ // False False
void deleteMemBlocks_ResFont();
	/* 802DF0B0 */ // False False
void initialize_state();
	/* 802DF0DC */ // True False
//  ResFONT const* False
// 	 ResFONT const False
// 		 ResFONT False
//  JKRHeap* False
// 	 JKRHeap False
void initiate(ResFONT const*, JKRHeap*);
	/* 802DF13C */ // True False
//  ResFONT const* False
// 	 ResFONT const False
// 		 ResFONT False
//  JKRHeap* False
// 	 JKRHeap False
void protected_initiate(ResFONT const*, JKRHeap*);
	/* 802DF248 */ // True False
void countBlock();
	/* 802DF344 */ // True False
void setBlock();
	/* 802DF584 */ // False False
//  JUtility::TColor False
//  JUtility::TColor False
void setGX(JUtility::TColor, JUtility::TColor);
	/* 802DF48C */ // False False
void setGX();
	/* 802DF7C4 */ // False False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  int False
//  bool False
void drawChar_scale(f32, f32, f32, f32, int, bool);
	/* 802DFBE8 */ // True False
//  int False
//  _GXTexMapID False
//  JUTFont::TWidth* False
// 	 JUTFont::TWidth False
void loadFont(int, _GXTexMapID, JUTFont::TWidth*);
	/* 802DFC64 */ // False False
//  int False
//  JUTFont::TWidth* False
// 	 JUTFont::TWidth False
void getWidthEntry(int, JUTFont::TWidth*) const;
	/* 802DFD0C */ // False False
void getCellWidth() const;
	/* 802DFD58 */ // False False
void getCellHeight() const;
	/* 802DFDA4 */ // False False
//  int False
void isLeadByte(int) const;
	/* 802DFDD8 */ // True False
//  int False
void getFontCode(int) const;
	/* 802DFF60 */ // True False
//  int False
//  _GXTexMapID False
void loadImage(int, _GXTexMapID);
	/* 802E00C4 */ // True False
//  int False
//  u16* False
// 	 u16 False
void convertSjis(int, u16*) const;
};

// 
// Forward References:
// 


// False False
extern "C" void __ct__10JUTResFontFv();
// False False
//  ResFONT const* False
// 	 ResFONT const False
// 		 ResFONT False
//  JKRHeap* False
// 	 JKRHeap False
extern "C" void __ct__10JUTResFontFPC7ResFONTP7JKRHeap();
// False False
extern "C" void __dt__10JUTResFontFv();
// False False
extern "C" void deleteMemBlocks_ResFont__10JUTResFontFv();
// False False
extern "C" void initialize_state__10JUTResFontFv();
// True False
//  ResFONT const* False
// 	 ResFONT const False
// 		 ResFONT False
//  JKRHeap* False
// 	 JKRHeap False
extern "C" void initiate__10JUTResFontFPC7ResFONTP7JKRHeap();
// True False
//  ResFONT const* False
// 	 ResFONT const False
// 		 ResFONT False
//  JKRHeap* False
// 	 JKRHeap False
extern "C" void protected_initiate__10JUTResFontFPC7ResFONTP7JKRHeap();
// True False
extern "C" void countBlock__10JUTResFontFv();
// True False
extern "C" void setBlock__10JUTResFontFv();
// False False
extern "C" void setGX__10JUTResFontFv();
// False False
//  JUtility::TColor False
//  JUtility::TColor False
extern "C" void setGX__10JUTResFontFQ28JUtility6TColorQ28JUtility6TColor();
// False False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  int False
//  bool False
extern "C" void drawChar_scale__10JUTResFontFffffib();
// True False
//  int False
//  _GXTexMapID False
//  JUTFont::TWidth* False
// 	 JUTFont::TWidth False
extern "C" void loadFont__10JUTResFontFi11_GXTexMapIDPQ27JUTFont6TWidth();
// False False
//  int False
//  JUTFont::TWidth* False
// 	 JUTFont::TWidth False
extern "C" void getWidthEntry__10JUTResFontCFiPQ27JUTFont6TWidth();
// False False
extern "C" void getCellWidth__10JUTResFontCFv();
// False False
extern "C" void getCellHeight__10JUTResFontCFv();
// False False
//  int False
extern "C" void isLeadByte__10JUTResFontCFi();
// True False
//  int False
extern "C" void getFontCode__10JUTResFontCFi();
// True False
//  int False
//  _GXTexMapID False
extern "C" void loadImage__10JUTResFontFi11_GXTexMapID();
// True False
//  int False
//  u16* False
// 	 u16 False
extern "C" void convertSjis__10JUTResFontCFiPUs();
// True False
//  bool False
//  int False
extern "C" bool isLeadByte_1Byte__7JUTFontFi();
// True False
//  bool False
//  int False
extern "C" bool isLeadByte_2Byte__7JUTFontFi();
// True False
//  int False
extern "C" void isLeadByte_ShiftJIS__7JUTFontFi();
extern "C" extern void* const saoAboutEncoding___10JUTResFont[3];
extern "C" extern char const* const JUTResFont__stringBase0;
extern "C" extern void* __vt__10JUTResFont[19 + 1 /* padding */];

// 
// External References:
// 

// False False
//  void* False
// 	 void False
//  u32 False
//  JKRHeap* False
// 	 JKRHeap False
//  int False
void* operator new[](u32, JKRHeap*, int);
// False False
//  void False
//  void* False
// 	 void False
void operator delete(void*);
// False False
//  void False
//  void* False
// 	 void False
void operator delete[](void*);

// False False
//  void* False
// 	 void False
//  u32 False
//  JKRHeap* False
// 	 JKRHeap False
//  int False
extern "C" void* __nwa__FUlP7JKRHeapi();
// False False
//  void False
//  void* False
// 	 void False
extern "C" void __dl__FPv();
// False False
//  void False
//  void* False
// 	 void False
extern "C" void __dla__FPv();
// False False
extern "C" void getResFont__10JUTResFontCFv();
// False False
extern "C" void getFontType__10JUTResFontCFv();
// False False
extern "C" void getLeading__10JUTResFontCFv();
// False False
extern "C" void getWidth__10JUTResFontCFv();
// False False
extern "C" void getAscent__10JUTResFontCFv();
// False False
extern "C" void getDescent__10JUTResFontCFv();
// False False
extern "C" void getHeight__10JUTResFontCFv();
// False False
extern "C" void __ct__7JUTFontFv();
// False False
extern "C" void initialize_state__7JUTFontFv();
// False False
extern "C" void JUTReportConsole();
// False False
extern "C" void GXSetVtxDesc();
// False False
extern "C" void GXClearVtxDesc();
// False False
extern "C" void GXSetVtxAttrFmt();
// False False
extern "C" void GXSetNumTexGens();
// False False
extern "C" void GXBegin();
// False False
extern "C" void GXSetNumChans();
// False False
extern "C" void GXSetChanCtrl();
// False False
extern "C" void GXInitTexObj();
// False False
extern "C" void GXInitTexObjLOD();
// False False
extern "C" void GXLoadTexObj();
// False False
extern "C" void GXSetTevOp();
// False False
extern "C" void GXSetTevColorIn();
// False False
extern "C" void GXSetTevAlphaIn();
// False False
extern "C" void GXSetTevColorOp();
// False False
extern "C" void GXSetTevAlphaOp();
// False False
extern "C" void GXSetTevColor();
// False False
extern "C" void GXSetTevOrder();
// False False
extern "C" void GXSetNumTevStages();
// False False
extern "C" void GXSetBlendMode();
// False False
extern "C" void _savegpr_25();
// False False
extern "C" void _savegpr_27();
// False False
extern "C" void _savegpr_28();
// False False
extern "C" void _savegpr_29();
// False False
extern "C" void _restgpr_25();
// False False
extern "C" void _restgpr_27();
// False False
extern "C" void _restgpr_28();
// False False
extern "C" void _restgpr_29();
extern "C" extern void* __vt__7JUTFont[17];

// 
// Declarations:
// 

/* ############################################################################################## */
/* 803CC5A0-803CC5F0 004C+04 s=3 e=0 z=0  None .data      __vt__10JUTResFont                                           */
SECTION_DATA void* __vt__10JUTResFont[19 + 1 /* padding */] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__10JUTResFontFv,
	(void*)setGX__10JUTResFontFv,
	(void*)setGX__10JUTResFontFQ28JUtility6TColorQ28JUtility6TColor,
	(void*)drawChar_scale__10JUTResFontFffffib,
	(void*)getLeading__10JUTResFontCFv,
	(void*)getAscent__10JUTResFontCFv,
	(void*)getDescent__10JUTResFontCFv,
	(void*)getHeight__10JUTResFontCFv,
	(void*)getWidth__10JUTResFontCFv,
	(void*)getWidthEntry__10JUTResFontCFiPQ27JUTFont6TWidth,
	(void*)getCellWidth__10JUTResFontCFv,
	(void*)getCellHeight__10JUTResFontCFv,
	(void*)getFontType__10JUTResFontCFv,
	(void*)getResFont__10JUTResFontCFv,
	(void*)isLeadByte__10JUTResFontCFi,
	(void*)loadImage__10JUTResFontFi11_GXTexMapID,
	(void*)setBlock__10JUTResFontFv,
	/* padding */
	NULL,
};

/* 802DEF48-802DEF94 004C+00 s=0 e=1 z=0  None .text      __ct__10JUTResFontFv                                         */
//	802DEF5C: 802DECF8 (__ct__7JUTFontFv)
//	802DEF60: 803CC5A0 (__vt__10JUTResFont)
//	802DEF64: 803CC5A0 (__vt__10JUTResFont)
//	802DEF70: 802DF0B0 (initialize_state__10JUTResFontFv)
//	802DEF78: 802DED24 (initialize_state__7JUTFontFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm JUTResFont::JUTResFont() {
	nofralloc
#include "asm/JSystem/JUtility/JUTResFont/__ct__10JUTResFontFv.s"
}
#pragma pop


/* 802DEF94-802DF000 006C+00 s=0 e=10 z=0  None .text      __ct__10JUTResFontFPC7ResFONTP7JKRHeap                       */
//	802DEFA4: 803621DC (_savegpr_29)
//	802DEFB4: 802DECF8 (__ct__7JUTFontFv)
//	802DEFB8: 803CC5A0 (__vt__10JUTResFont)
//	802DEFBC: 803CC5A0 (__vt__10JUTResFont)
//	802DEFC8: 802DF0B0 (initialize_state__10JUTResFontFv)
//	802DEFD0: 802DED24 (initialize_state__7JUTFontFv)
//	802DEFE0: 802DF0DC (initiate__10JUTResFontFPC7ResFONTP7JKRHeap)
//	802DEFEC: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  ResFONT const* False
// 	 ResFONT const False
// 		 ResFONT False
//  JKRHeap* False
// 	 JKRHeap False
asm JUTResFont::JUTResFont(ResFONT const* param_0, JKRHeap* param_1) {
	nofralloc
#include "asm/JSystem/JUtility/JUTResFont/__ct__10JUTResFontFPC7ResFONTP7JKRHeap.s"
}
#pragma pop


/* 802DF000-802DF08C 008C+00 s=1 e=2 z=0  None .text      __dt__10JUTResFontFv                                         */
//	802DF020: 803CC5A0 (__vt__10JUTResFont)
//	802DF024: 803CC5A0 (__vt__10JUTResFont)
//	802DF038: 802DF08C (deleteMemBlocks_ResFont__10JUTResFontFv)
//	802DF040: 802DF0B0 (initialize_state__10JUTResFontFv)
//	802DF048: 802DED24 (initialize_state__7JUTFontFv)
//	802DF054: 803A31F0 (__vt__7JUTFont)
//	802DF058: 803A31F0 (__vt__7JUTFont)
//	802DF06C: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm JUTResFont::~JUTResFont() {
	nofralloc
#include "asm/JSystem/JUtility/JUTResFont/__dt__10JUTResFontFv.s"
}
#pragma pop


/* 802DF08C-802DF0B0 0024+00 s=3 e=3 z=0  None .text      deleteMemBlocks_ResFont__10JUTResFontFv                      */
//	802DF09C: 802CED60 (__dla__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void JUTResFont::deleteMemBlocks_ResFont() {
	nofralloc
#include "asm/JSystem/JUtility/JUTResFont/deleteMemBlocks_ResFont__10JUTResFontFv.s"
}
#pragma pop


/* 802DF0B0-802DF0DC 002C+00 s=5 e=3 z=0  None .text      initialize_state__10JUTResFontFv                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void JUTResFont::initialize_state() {
	nofralloc
#include "asm/JSystem/JUtility/JUTResFont/initialize_state__10JUTResFontFv.s"
}
#pragma pop


/* 802DF0DC-802DF13C 0060+00 s=1 e=0 z=0  None .text      initiate__10JUTResFontFPC7ResFONTP7JKRHeap                   */
//	802DF0F0: 802DF13C (protected_initiate__10JUTResFontFPC7ResFONTP7JKRHeap)
//	802DF100: 802DF08C (deleteMemBlocks_ResFont__10JUTResFontFv)
//	802DF108: 802DF0B0 (initialize_state__10JUTResFontFv)
//	802DF110: 802DED24 (initialize_state__7JUTFontFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  ResFONT const* False
// 	 ResFONT const False
// 		 ResFONT False
//  JKRHeap* False
// 	 JKRHeap False
asm void JUTResFont::initiate(ResFONT const* param_0, JKRHeap* param_1) {
	nofralloc
#include "asm/JSystem/JUtility/JUTResFont/initiate__10JUTResFontFPC7ResFONTP7JKRHeap.s"
}
#pragma pop


/* 802DF13C-802DF248 010C+00 s=1 e=0 z=0  None .text      protected_initiate__10JUTResFontFPC7ResFONTP7JKRHeap         */
//	802DF14C: 803621DC (_savegpr_29)
//	802DF15C: 802DF08C (deleteMemBlocks_ResFont__10JUTResFontFv)
//	802DF164: 802DF0B0 (initialize_state__10JUTResFontFv)
//	802DF16C: 802DED24 (initialize_state__7JUTFontFv)
//	802DF190: 802DF248 (countBlock__10JUTResFontFv)
//	802DF1B4: 802CED10 (__nwa__FUlP7JKRHeapi)
//	802DF234: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  ResFONT const* False
// 	 ResFONT const False
// 		 ResFONT False
//  JKRHeap* False
// 	 JKRHeap False
asm void JUTResFont::protected_initiate(ResFONT const* param_0, JKRHeap* param_1) {
	nofralloc
#include "asm/JSystem/JUtility/JUTResFont/protected_initiate__10JUTResFontFPC7ResFONTP7JKRHeap.s"
}
#pragma pop


/* ############################################################################################## */
/* 8039D390-8039D39C 000C+00 s=1 e=1 z=0  None .rodata    saoAboutEncoding___10JUTResFont                              */
SECTION_RODATA void* const saoAboutEncoding___10JUTResFont[3] = {
	(void*)isLeadByte_1Byte__7JUTFontFi,
	(void*)isLeadByte_2Byte__7JUTFontFi,
	(void*)isLeadByte_ShiftJIS__7JUTFontFi,
};

/* 8039D39C-8039D45C 00BE+02 s=1 e=0 z=0  None .rodata    halftofull$726                                               */
SECTION_RODATA static u8 const halftofull[190 + 2 /* padding */] = {
	0x81, 0x40, 0x81, 0x49, 0x81, 0x68, 0x81, 0x94, 0x81, 0x90, 0x81, 0x93, 0x81, 0x95, 0x81, 0x66,
	0x81, 0x69, 0x81, 0x6A, 0x81, 0x96, 0x81, 0x7B, 0x81, 0x43, 0x81, 0x7C, 0x81, 0x44, 0x81, 0x5E,
	0x82, 0x4F, 0x82, 0x50, 0x82, 0x51, 0x82, 0x52, 0x82, 0x53, 0x82, 0x54, 0x82, 0x55, 0x82, 0x56,
	0x82, 0x57, 0x82, 0x58, 0x81, 0x46, 0x81, 0x47, 0x81, 0x83, 0x81, 0x81, 0x81, 0x84, 0x81, 0x48,
	0x81, 0x97, 0x82, 0x60, 0x82, 0x61, 0x82, 0x62, 0x82, 0x63, 0x82, 0x64, 0x82, 0x65, 0x82, 0x66,
	0x82, 0x67, 0x82, 0x68, 0x82, 0x69, 0x82, 0x6A, 0x82, 0x6B, 0x82, 0x6C, 0x82, 0x6D, 0x82, 0x6E,
	0x82, 0x6F, 0x82, 0x70, 0x82, 0x71, 0x82, 0x72, 0x82, 0x73, 0x82, 0x74, 0x82, 0x75, 0x82, 0x76,
	0x82, 0x77, 0x82, 0x78, 0x82, 0x79, 0x81, 0x6D, 0x81, 0x8F, 0x81, 0x6E, 0x81, 0x4F, 0x81, 0x51,
	0x81, 0x65, 0x82, 0x81, 0x82, 0x82, 0x82, 0x83, 0x82, 0x84, 0x82, 0x85, 0x82, 0x86, 0x82, 0x87,
	0x82, 0x88, 0x82, 0x89, 0x82, 0x8A, 0x82, 0x8B, 0x82, 0x8C, 0x82, 0x8D, 0x82, 0x8E, 0x82, 0x8F,
	0x82, 0x90, 0x82, 0x91, 0x82, 0x92, 0x82, 0x93, 0x82, 0x94, 0x82, 0x95, 0x82, 0x96, 0x82, 0x97,
	0x82, 0x98, 0x82, 0x99, 0x82, 0x9A, 0x81, 0x6F, 0x81, 0x62, 0x81, 0x70, 0x81, 0x60,
	/* padding */
	0x00, 0x00,
};

/* 8039D45C-8039D490 0034+00 s=2 e=0 z=0  None .rodata    @stringBase0                                                 */
#pragma push
#pragma force_active on
#pragma section ".dead"
SECTION_DEAD char const* const stringBase_8039D45C = "JUTResFont: Unknown data block\n";
SECTION_DEAD char const* const stringBase_8039D47C = "Unknown data block\n";
#pragma pop

/* 802DF248-802DF344 00FC+00 s=1 e=0 z=0  None .text      countBlock__10JUTResFontFv                                   */
//	802DF258: 803621D8 (_savegpr_28)
//	802DF304: 8039D45C (JUTResFont__stringBase0)
//	802DF308: 8039D45C (JUTResFont__stringBase0)
//	802DF30C: 802E8648 (JUTReportConsole)
//	802DF330: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void JUTResFont::countBlock() {
	nofralloc
#include "asm/JSystem/JUtility/JUTResFont/countBlock__10JUTResFontFv.s"
}
#pragma pop


/* 802DF344-802DF48C 0148+00 s=1 e=0 z=0  None .text      setBlock__10JUTResFontFv                                     */
//	802DF354: 803621CC (_savegpr_25)
//	802DF3E8: 8039D390 (saoAboutEncoding___10JUTResFont)
//	802DF3EC: 8039D390 (saoAboutEncoding___10JUTResFont)
//	802DF448: 8039D45C (JUTResFont__stringBase0)
//	802DF44C: 8039D45C (JUTResFont__stringBase0)
//	802DF454: 802E8648 (JUTReportConsole)
//	802DF478: 80362218 (_restgpr_25)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void JUTResFont::setBlock() {
	nofralloc
#include "asm/JSystem/JUtility/JUTResFont/setBlock__10JUTResFontFv.s"
}
#pragma pop


/* 802DF48C-802DF584 00F8+00 s=1 e=1 z=0  None .text      setGX__10JUTResFontFv                                        */
//	802DF49C: 8035DB30 (GXSetNumChans)
//	802DF4A4: 8035F890 (GXSetNumTevStages)
//	802DF4AC: 8035BDFC (GXSetNumTexGens)
//	802DF4C0: 8035F6F4 (GXSetTevOrder)
//	802DF4E0: 8035DB6C (GXSetChanCtrl)
//	802DF4EC: 8035F198 (GXSetTevOp)
//	802DF500: 8035FBF0 (GXSetBlendMode)
//	802DF518: 8035B5C4 (GXSetVtxAttrFmt)
//	802DF530: 8035B5C4 (GXSetVtxAttrFmt)
//	802DF548: 8035B5C4 (GXSetVtxAttrFmt)
//	802DF54C: 8035B58C (GXClearVtxDesc)
//	802DF558: 8035AEB8 (GXSetVtxDesc)
//	802DF564: 8035AEB8 (GXSetVtxDesc)
//	802DF570: 8035AEB8 (GXSetVtxDesc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void JUTResFont::setGX() {
	nofralloc
#include "asm/JSystem/JUtility/JUTResFont/setGX__10JUTResFontFv.s"
}
#pragma pop


/* 802DF584-802DF7C4 0240+00 s=1 e=1 z=0  None .text      setGX__10JUTResFontFQ28JUtility6TColorQ28JUtility6TColor     */
//	802DF5D4: 8035DB30 (GXSetNumChans)
//	802DF5DC: 8035F890 (GXSetNumTevStages)
//	802DF5E4: 8035BDFC (GXSetNumTexGens)
//	802DF5F8: 8035F6F4 (GXSetTevOrder)
//	802DF618: 8035DB6C (GXSetChanCtrl)
//	802DF62C: 8035F37C (GXSetTevColor)
//	802DF640: 8035F37C (GXSetTevColor)
//	802DF658: 8035F224 (GXSetTevColorIn)
//	802DF670: 8035F268 (GXSetTevAlphaIn)
//	802DF68C: 8035F2AC (GXSetTevColorOp)
//	802DF6A8: 8035F314 (GXSetTevAlphaOp)
//	802DF6BC: 8035F6F4 (GXSetTevOrder)
//	802DF6D4: 8035F224 (GXSetTevColorIn)
//	802DF6EC: 8035F268 (GXSetTevAlphaIn)
//	802DF708: 8035F2AC (GXSetTevColorOp)
//	802DF724: 8035F314 (GXSetTevAlphaOp)
//	802DF738: 8035FBF0 (GXSetBlendMode)
//	802DF750: 8035B5C4 (GXSetVtxAttrFmt)
//	802DF768: 8035B5C4 (GXSetVtxAttrFmt)
//	802DF780: 8035B5C4 (GXSetVtxAttrFmt)
//	802DF784: 8035B58C (GXClearVtxDesc)
//	802DF790: 8035AEB8 (GXSetVtxDesc)
//	802DF79C: 8035AEB8 (GXSetVtxDesc)
//	802DF7A8: 8035AEB8 (GXSetVtxDesc)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  JUtility::TColor False
//  JUtility::TColor False
asm void JUTResFont::setGX(JUtility::TColor param_0, JUtility::TColor param_1) {
	nofralloc
#include "asm/JSystem/JUtility/JUTResFont/setGX__10JUTResFontFQ28JUtility6TColorQ28JUtility6TColor.s"
}
#pragma pop


/* ############################################################################################## */
/* 80455FF0-80455FF8 0004+04 s=2 e=0 z=0  None .sdata2    @647                                                         */
SECTION_SDATA2 static f32 lit_647[1 + 1 /* padding */] = {
	0.0f,
	/* padding */
	0.0f,
};

/* 80455FF8-80456000 0008+00 s=1 e=0 z=0  None .sdata2    @649                                                         */
SECTION_SDATA2 static f64 lit_649 = 4503601774854144.0 /* cast s32 to float */;

/* 80456000-80456008 0008+00 s=1 e=0 z=0  None .sdata2    @651                                                         */
SECTION_SDATA2 static f64 lit_651 = 4503599627370496.0 /* cast u32 to float */;

/* 802DF7C4-802DFBE8 0424+00 s=1 e=1 z=0  None .text      drawChar_scale__10JUTResFontFffffib                          */
//	802DF804: 803621D4 (_savegpr_27)
//	802DF828: 802DFBE8 (loadFont__10JUTResFontFi11_GXTexMapIDPQ27JUTFont6TWidth)
//	802DF85C: 80455FF8 (lit_649)
//	802DF880: 80456000 (lit_651)
//	802DF8B0: 80455FF8 (lit_649)
//	802DF914: 80455FF8 (lit_649)
//	802DF970: 80455FF8 (lit_649)
//	802DF994: 80456000 (lit_651)
//	802DF9C4: 80455FF8 (lit_649)
//	802DF9F8: 80455FF8 (lit_649)
//	802DFA30: 80455FF8 (lit_649)
//	802DFA64: 80455FF8 (lit_649)
//	802DFAEC: 8035B5C4 (GXSetVtxAttrFmt)
//	802DFAFC: 8035C764 (GXBegin)
//	802DFB0C: 80455FF0 (lit_647)
//	802DFB2C: 80455FF0 (lit_647)
//	802DFB4C: 80455FF0 (lit_647)
//	802DFB6C: 80455FF0 (lit_647)
//	802DFB98: 8035B5C4 (GXSetVtxAttrFmt)
//	802DFBD4: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  int False
//  bool False
asm void JUTResFont::drawChar_scale(f32 param_0, f32 param_1, f32 param_2, f32 param_3, int param_4, bool param_5) {
	nofralloc
#include "asm/JSystem/JUtility/JUTResFont/drawChar_scale__10JUTResFontFffffib.s"
}
#pragma pop


/* 802DFBE8-802DFC64 007C+00 s=1 e=0 z=0  None .text      loadFont__10JUTResFontFi11_GXTexMapIDPQ27JUTFont6TWidth      */
//	802DFBF8: 803621DC (_savegpr_29)
//	802DFC2C: 802DFDD8 (getFontCode__10JUTResFontCFi)
//	802DFC50: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
//  _GXTexMapID False
//  JUTFont::TWidth* False
// 	 JUTFont::TWidth False
asm void JUTResFont::loadFont(int param_0, _GXTexMapID param_1, JUTFont::TWidth* param_2) {
	nofralloc
#include "asm/JSystem/JUtility/JUTResFont/loadFont__10JUTResFontFi11_GXTexMapIDPQ27JUTFont6TWidth.s"
}
#pragma pop


/* 802DFC64-802DFD0C 00A8+00 s=1 e=1 z=0  None .text      getWidthEntry__10JUTResFontCFiPQ27JUTFont6TWidth             */
//	802DFC80: 802DFDD8 (getFontCode__10JUTResFontCFi)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  int False
//  JUTFont::TWidth* False
// 	 JUTFont::TWidth False
asm void JUTResFont::getWidthEntry(int param_0, JUTFont::TWidth* param_1) const {
	nofralloc
#include "asm/JSystem/JUtility/JUTResFont/getWidthEntry__10JUTResFontCFiPQ27JUTFont6TWidth.s"
}
#pragma pop


/* 802DFD0C-802DFD58 004C+00 s=1 e=1 z=0  None .text      getCellWidth__10JUTResFontCFv                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void JUTResFont::getCellWidth() const {
	nofralloc
#include "asm/JSystem/JUtility/JUTResFont/getCellWidth__10JUTResFontCFv.s"
}
#pragma pop


/* 802DFD58-802DFDA4 004C+00 s=1 e=1 z=0  None .text      getCellHeight__10JUTResFontCFv                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void JUTResFont::getCellHeight() const {
	nofralloc
#include "asm/JSystem/JUtility/JUTResFont/getCellHeight__10JUTResFontCFv.s"
}
#pragma pop


/* 802DFDA4-802DFDD8 0034+00 s=1 e=1 z=0  None .text      isLeadByte__10JUTResFontCFi                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  int False
asm void JUTResFont::isLeadByte(int param_0) const {
	nofralloc
#include "asm/JSystem/JUtility/JUTResFont/isLeadByte__10JUTResFontCFi.s"
}
#pragma pop


/* 802DFDD8-802DFF60 0188+00 s=2 e=0 z=0  None .text      getFontCode__10JUTResFontCFi                                 */
//	802DFDE8: 803621DC (_savegpr_29)
//	802DFE30: 8039D39C (halftofull)
//	802DFE34: 8039D39C (halftofull)
//	802DFF30: 802E00C4 (convertSjis__10JUTResFontCFiPUs)
//	802DFF4C: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
asm void JUTResFont::getFontCode(int param_0) const {
	nofralloc
#include "asm/JSystem/JUtility/JUTResFont/getFontCode__10JUTResFontCFi.s"
}
#pragma pop


/* 802DFF60-802E00C4 0164+00 s=1 e=0 z=0  None .text      loadImage__10JUTResFontFi11_GXTexMapID                       */
//	802DFF70: 803621D8 (_savegpr_28)
//	802E006C: 8035DE40 (GXInitTexObj)
//	802E007C: 80455FF0 (lit_647)
//	802E0094: 8035E0D4 (GXInitTexObjLOD)
//	802E00A8: 8035E414 (GXLoadTexObj)
//	802E00B0: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
//  _GXTexMapID False
asm void JUTResFont::loadImage(int param_0, _GXTexMapID param_1) {
	nofralloc
#include "asm/JSystem/JUtility/JUTResFont/loadImage__10JUTResFontFi11_GXTexMapID.s"
}
#pragma pop


/* 802E00C4-802E0108 0044+00 s=1 e=0 z=0  None .text      convertSjis__10JUTResFontCFiPUs                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
//  u16* False
// 	 u16 False
asm void JUTResFont::convertSjis(int param_0, u16* param_1) const {
	nofralloc
#include "asm/JSystem/JUtility/JUTResFont/convertSjis__10JUTResFontCFiPUs.s"
}
#pragma pop


/* 802E0108-802E0110 0008+00 s=1 e=0 z=0  None .text      isLeadByte_1Byte__7JUTFontFi                                 */
// True False
//  bool False
//  int False
bool JUTFont::isLeadByte_1Byte(int param_0) {
	return false;
}


/* 802E0110-802E0118 0008+00 s=1 e=0 z=0  None .text      isLeadByte_2Byte__7JUTFontFi                                 */
// True False
//  bool False
//  int False
bool JUTFont::isLeadByte_2Byte(int param_0) {
	return true;
}


/* 802E0118-802E0148 0030+00 s=1 e=0 z=0  None .text      isLeadByte_ShiftJIS__7JUTFontFi                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
asm void JUTFont::isLeadByte_ShiftJIS(int param_0) {
	nofralloc
#include "asm/JSystem/JUtility/JUTResFont/isLeadByte_ShiftJIS__7JUTFontFi.s"
}
#pragma pop


