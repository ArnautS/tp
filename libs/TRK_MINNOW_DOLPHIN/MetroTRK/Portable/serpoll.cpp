//
// Generated By: dol2asm
// Translation Unit: MetroTRK/Portable/serpoll
//

#include "TRK_MINNOW_DOLPHIN/MetroTRK/Portable/serpoll.h"
#include "dol2asm.h"
#include "dolphin/types.h"

//
// Forward References:
//

extern "C" bool TRKTerminateSerialHandler();
extern "C" void TRKInitializeSerialHandler();
extern "C" void TRKProcessInput();
extern "C" void TRKGetInput();
extern "C" void TRKTestForPacket();
extern "C" extern u8 gTRKInputPendingPtr[4 + 4 /* padding */];

//
// External References:
//

extern "C" void TRKConstructEvent();
extern "C" void TRKPostEvent();
extern "C" void TRKAppendBuffer_ui8();
extern "C" void TRKSetBufferPosition();
extern "C" void TRKReleaseBuffer();
extern "C" void TRKGetBuffer();
extern "C" void TRKGetFreeBuffer();
extern "C" void TRKReadUARTN();
extern "C" void TRKPollUART();
extern "C" void MWTRACE();

//
// Declarations:
//

/* 8036D858-8036D860 368198 0008+00 0/0 1/1 0/0 .text            TRKTerminateSerialHandler */
bool TRKTerminateSerialHandler() {
    return false;
}

/* ############################################################################################## */
/* 803A2700-803A2724 02ED60 0022+02 2/2 0/0 0/0 .rodata          @121 */
SECTION_RODATA static u8 const lit_121[34 + 2 /* padding */] = {
    0x54,
    0x52,
    0x4B,
    0x5F,
    0x50,
    0x61,
    0x63,
    0x6B,
    0x65,
    0x74,
    0x5F,
    0x48,
    0x65,
    0x61,
    0x64,
    0x65,
    0x72,
    0x20,
    0x09,
    0x20,
    0x20,
    0x20,
    0x20,
    0x25,
    0x6C,
    0x64,
    0x20,
    0x62,
    0x79,
    0x74,
    0x65,
    0x73,
    0x0A,
    0x00,
    /* padding */
    0x00,
    0x00,
};
SECTION_DEAD void* const cg_803A2700 = (void*)(&lit_121);

/* 803A2724-803A2748 02ED84 0022+02 0/1 0/0 0/0 .rodata          @122 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const lit_122[34 + 2 /* padding */] = {
    0x54,
    0x52,
    0x4B,
    0x5F,
    0x43,
    0x4D,
    0x44,
    0x5F,
    0x52,
    0x65,
    0x61,
    0x64,
    0x4D,
    0x65,
    0x6D,
    0x6F,
    0x72,
    0x79,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x25,
    0x6C,
    0x64,
    0x20,
    0x62,
    0x79,
    0x74,
    0x65,
    0x73,
    0x0A,
    0x00,
    /* padding */
    0x00,
    0x00,
};
SECTION_DEAD void* const cg_803A2724 = (void*)(&lit_122);
#pragma pop

/* 803A2748-803A276C 02EDA8 0022+02 0/1 0/0 0/0 .rodata          @123 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const lit_123[34 + 2 /* padding */] = {
    0x54,
    0x52,
    0x4B,
    0x5F,
    0x43,
    0x4D,
    0x44,
    0x5F,
    0x57,
    0x72,
    0x69,
    0x74,
    0x65,
    0x4D,
    0x65,
    0x6D,
    0x6F,
    0x72,
    0x79,
    0x20,
    0x20,
    0x20,
    0x20,
    0x25,
    0x6C,
    0x64,
    0x20,
    0x62,
    0x79,
    0x74,
    0x65,
    0x73,
    0x0A,
    0x00,
    /* padding */
    0x00,
    0x00,
};
SECTION_DEAD void* const cg_803A2748 = (void*)(&lit_123);
#pragma pop

/* 803A276C-803A278C 02EDCC 0020+00 0/1 0/0 0/0 .rodata          @124 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const lit_124[32] = {
    0x54, 0x52, 0x4B, 0x5F, 0x43, 0x4D, 0x44, 0x5F, 0x43, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x20,
    0x09, 0x20, 0x20, 0x20, 0x20, 0x25, 0x6C, 0x64, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x0A, 0x00,
};
SECTION_DEAD void* const cg_803A276C = (void*)(&lit_124);
#pragma pop

/* 803A278C-803A27AC 02EDEC 0020+00 0/1 0/0 0/0 .rodata          @125 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const lit_125[32] = {
    0x54, 0x52, 0x4B, 0x5F, 0x43, 0x4D, 0x44, 0x5F, 0x52, 0x65, 0x70, 0x6C, 0x79, 0x41, 0x63, 0x6B,
    0x09, 0x20, 0x20, 0x20, 0x20, 0x25, 0x6C, 0x64, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x0A, 0x00,
};
SECTION_DEAD void* const cg_803A278C = (void*)(&lit_125);
#pragma pop

/* 803A27AC-803A27D0 02EE0C 0021+03 0/1 0/0 0/0 .rodata          @126 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const lit_126[33 + 3 /* padding */] = {
    0x54,
    0x52,
    0x4B,
    0x5F,
    0x43,
    0x4D,
    0x44,
    0x5F,
    0x52,
    0x65,
    0x61,
    0x64,
    0x52,
    0x65,
    0x67,
    0x69,
    0x73,
    0x74,
    0x65,
    0x72,
    0x73,
    0x09,
    0x25,
    0x6C,
    0x64,
    0x20,
    0x62,
    0x79,
    0x74,
    0x65,
    0x73,
    0x0A,
    0x00,
    /* padding */
    0x00,
    0x00,
    0x00,
};
SECTION_DEAD void* const cg_803A27AC = (void*)(&lit_126);
#pragma pop

/* 8044F270-8044F288 07BF90 0014+04 3/3 0/0 0/0 .bss             gTRKFramingState */
static u8 gTRKFramingState[20 + 4 /* padding */];

/* 8036D860-8036D924 3681A0 00C4+00 0/0 1/1 0/0 .text            TRKInitializeSerialHandler */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void TRKInitializeSerialHandler() {
    nofralloc
#include "asm/TRK_MINNOW_DOLPHIN/MetroTRK/Portable/serpoll/TRKInitializeSerialHandler.s"
}
#pragma pop

/* 8036D924-8036D974 368264 0050+00 0/0 1/1 0/0 .text            TRKProcessInput */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void TRKProcessInput() {
    nofralloc
#include "asm/TRK_MINNOW_DOLPHIN/MetroTRK/Portable/serpoll/TRKProcessInput.s"
}
#pragma pop

/* 8036D974-8036D9D4 3682B4 0060+00 0/0 1/1 0/0 .text            TRKGetInput */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void TRKGetInput() {
    nofralloc
#include "asm/TRK_MINNOW_DOLPHIN/MetroTRK/Portable/serpoll/TRKGetInput.s"
}
#pragma pop

/* ############################################################################################## */
/* 803A27D0-803A27F4 02EE30 0024+00 0/1 0/0 0/0 .rodata          @146 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const lit_146[36] = {
    0x54, 0x65, 0x73, 0x74, 0x46, 0x6F, 0x72, 0x50, 0x61, 0x63, 0x6B, 0x65,
    0x74, 0x20, 0x3A, 0x20, 0x46, 0x72, 0x65, 0x65, 0x42, 0x75, 0x66, 0x66,
    0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x20, 0x25, 0x6C, 0x64, 0x0A, 0x00,
};
SECTION_DEAD void* const cg_803A27D0 = (void*)(&lit_146);
#pragma pop

/* 803A27F4-803A2810 02EE54 001B+01 0/1 0/0 0/0 .rodata          @147 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const lit_147[27 + 1 /* padding */] = {
    0x52,
    0x65,
    0x61,
    0x64,
    0x69,
    0x6E,
    0x67,
    0x20,
    0x70,
    0x61,
    0x79,
    0x6C,
    0x6F,
    0x61,
    0x64,
    0x20,
    0x25,
    0x6C,
    0x64,
    0x20,
    0x62,
    0x79,
    0x74,
    0x65,
    0x73,
    0x0A,
    0x00,
    /* padding */
    0x00,
};
SECTION_DEAD void* const cg_803A27F4 = (void*)(&lit_147);
#pragma pop

/* 803A2810-803A2844 02EE70 0031+03 0/1 0/0 0/0 .rodata          @148 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const lit_148[49 + 3 /* padding */] = {
    0x54,
    0x65,
    0x73,
    0x74,
    0x46,
    0x6F,
    0x72,
    0x50,
    0x61,
    0x63,
    0x6B,
    0x65,
    0x74,
    0x20,
    0x3A,
    0x20,
    0x49,
    0x6E,
    0x76,
    0x61,
    0x6C,
    0x69,
    0x64,
    0x20,
    0x73,
    0x69,
    0x7A,
    0x65,
    0x20,
    0x6F,
    0x66,
    0x20,
    0x70,
    0x61,
    0x63,
    0x6B,
    0x65,
    0x74,
    0x20,
    0x68,
    0x64,
    0x72,
    0x2E,
    0x73,
    0x69,
    0x7A,
    0x65,
    0x0A,
    0x00,
    /* padding */
    0x00,
    0x00,
    0x00,
};
SECTION_DEAD void* const cg_803A2810 = (void*)(&lit_148);
#pragma pop

/* 803A2844-803A286C 02EEA4 0028+00 0/1 0/0 0/0 .rodata          @149 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const lit_149[40] = {
    0x54, 0x65, 0x73, 0x74, 0x46, 0x6F, 0x72, 0x50, 0x61, 0x63, 0x6B, 0x65, 0x74, 0x20,
    0x3A, 0x20, 0x49, 0x6E, 0x76, 0x61, 0x6C, 0x69, 0x64, 0x20, 0x73, 0x69, 0x7A, 0x65,
    0x20, 0x6F, 0x66, 0x20, 0x70, 0x61, 0x63, 0x6B, 0x65, 0x74, 0x0A, 0x00,
};
SECTION_DEAD void* const cg_803A2844 = (void*)(&lit_149);
#pragma pop

/* 803A286C-803A2890 02EECC 001D+07 0/1 0/0 0/0 .rodata          @150 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const lit_150[29 + 7 /* padding */] = {
    0x54,
    0x65,
    0x73,
    0x74,
    0x46,
    0x6F,
    0x72,
    0x50,
    0x61,
    0x63,
    0x6B,
    0x65,
    0x74,
    0x20,
    0x72,
    0x65,
    0x74,
    0x75,
    0x72,
    0x6E,
    0x69,
    0x6E,
    0x67,
    0x20,
    0x25,
    0x6C,
    0x64,
    0x0A,
    0x00,
    /* padding */
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
};
SECTION_DEAD void* const cg_803A286C = (void*)(&lit_150);
#pragma pop

/* 8036D9D4-8036DB10 368314 013C+00 1/1 1/1 0/0 .text            TRKTestForPacket */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void TRKTestForPacket() {
    nofralloc
#include "asm/TRK_MINNOW_DOLPHIN/MetroTRK/Portable/serpoll/TRKTestForPacket.s"
}
#pragma pop

/* ############################################################################################## */
/* 804519B8-804519C0 000EB8 0004+04 0/0 2/2 0/0 .sbss            gTRKInputPendingPtr */
extern u8 gTRKInputPendingPtr[4 + 4 /* padding */];
u8 gTRKInputPendingPtr[4 + 4 /* padding */];
