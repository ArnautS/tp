// 
// Generated By: dol2asm
// Translation Unit: MetroTRK/Portable/dispatch
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "TRK_MINNOW_DOLPHIN/MetroTRK/Portable/dispatch.h"

// 
// Forward References:
// 


// False False
extern "C" void TRKDispatchMessage();
// False False
//  bool False
extern "C" bool TRKInitializeDispatcher();

// 
// External References:
// 


// False False
extern "C" void TRKSetBufferPosition();
// False False
extern "C" void TRKDoSetOption();
// False False
extern "C" void TRKDoStop();
// False False
extern "C" void TRKDoStep();
// False False
extern "C" void TRKDoContinue();
// False False
extern "C" void TRKDoWriteRegisters();
// False False
extern "C" void TRKDoReadRegisters();
// False False
extern "C" void TRKDoWriteMemory();
// False False
extern "C" void TRKDoReadMemory();
// False False
//  bool False
extern "C" bool TRKDoSupportMask();
// False False
//  bool False
extern "C" bool TRKDoVersions();
// False False
extern "C" void TRKDoOverride();
// False False
extern "C" void TRKDoReset();
// False False
extern "C" void TRKDoDisconnect();
// False False
extern "C" void TRKDoConnect();
// False False
extern "C" void MWTRACE();

// 
// Declarations:
// 

/* ############################################################################################## */
/* 803A2890-803A28AC 0019+03 s=1 e=0 z=0  None .rodata    @126                                                         */
SECTION_RODATA static u8 const lit_126[25 + 3 /* padding */] = {
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x20, 0x63, 0x6F, 0x6D, 0x6D, 0x61, 0x6E, 0x64,
	0x20, 0x30, 0x78, 0x25, 0x30, 0x38, 0x78, 0x0A, 0x00,
	/* padding */
	0x00, 0x00, 0x00,
};

/* 803A28AC-803A28D0 001D+07 s=1 e=0 z=0  None .rodata    @127                                                         */
SECTION_RODATA static u8 const lit_127[29 + 7 /* padding */] = {
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x20, 0x63, 0x6F, 0x6D, 0x70, 0x6C, 0x65, 0x74,
	0x65, 0x20, 0x65, 0x72, 0x72, 0x20, 0x3D, 0x20, 0x25, 0x6C, 0x64, 0x0A, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 803D3190-803D3200 006C+04 s=1 e=0 z=0  None .data      @128                                                         */
SECTION_DATA static void* lit_128[27 + 1 /* padding */] = {
	(void*)(((char*)TRKDispatchMessage)+0x13C),
	(void*)(((char*)TRKDispatchMessage)+0x60),
	(void*)(((char*)TRKDispatchMessage)+0x70),
	(void*)(((char*)TRKDispatchMessage)+0x80),
	(void*)(((char*)TRKDispatchMessage)+0xA0),
	(void*)(((char*)TRKDispatchMessage)+0xB0),
	(void*)(((char*)TRKDispatchMessage)+0x13C),
	(void*)(((char*)TRKDispatchMessage)+0x90),
	(void*)(((char*)TRKDispatchMessage)+0x13C),
	(void*)(((char*)TRKDispatchMessage)+0x13C),
	(void*)(((char*)TRKDispatchMessage)+0x13C),
	(void*)(((char*)TRKDispatchMessage)+0x13C),
	(void*)(((char*)TRKDispatchMessage)+0x13C),
	(void*)(((char*)TRKDispatchMessage)+0x13C),
	(void*)(((char*)TRKDispatchMessage)+0x13C),
	(void*)(((char*)TRKDispatchMessage)+0x13C),
	(void*)(((char*)TRKDispatchMessage)+0xC0),
	(void*)(((char*)TRKDispatchMessage)+0xD0),
	(void*)(((char*)TRKDispatchMessage)+0xE0),
	(void*)(((char*)TRKDispatchMessage)+0xF0),
	(void*)(((char*)TRKDispatchMessage)+0x13C),
	(void*)(((char*)TRKDispatchMessage)+0x13C),
	(void*)(((char*)TRKDispatchMessage)+0x13C),
	(void*)(((char*)TRKDispatchMessage)+0x130),
	(void*)(((char*)TRKDispatchMessage)+0x100),
	(void*)(((char*)TRKDispatchMessage)+0x110),
	(void*)(((char*)TRKDispatchMessage)+0x120),
	/* padding */
	NULL,
};

/* 8036DB9C-8036DD0C 0170+00 s=1 e=1 z=0  None .text      TRKDispatchMessage                                           */
//	8036DBBC: 8036D61C (TRKSetBufferPosition)
//	8036DBC0: 803A2890 (lit_126)
//	8036DBC8: 803A2890 (lit_126)
//	8036DBD4: 80372C54 (MWTRACE)
//	8036DBE4: 803D3190 (lit_128)
//	8036DBEC: 803D3190 (lit_128)
//	8036DC00: 8036EC5C (TRKDoConnect)
//	8036DC10: 8036EBE4 (TRKDoDisconnect)
//	8036DC20: 8036EB8C (TRKDoReset)
//	8036DC30: 8036EB34 (TRKDoOverride)
//	8036DC40: 8036EB2C (TRKDoVersions)
//	8036DC50: 8036EB24 (TRKDoSupportMask)
//	8036DC60: 8036E8E0 (TRKDoReadMemory)
//	8036DC70: 8036E6A4 (TRKDoWriteMemory)
//	8036DC80: 8036E3C4 (TRKDoReadRegisters)
//	8036DC90: 8036E134 (TRKDoWriteRegisters)
//	8036DCA0: 8036E084 (TRKDoContinue)
//	8036DCB0: 8036DE64 (TRKDoStep)
//	8036DCC0: 8036DDBC (TRKDoStop)
//	8036DCD0: 8036DD14 (TRKDoSetOption)
//	8036DCD8: 803A28AC (lit_127)
//	8036DCE0: 803A28AC (lit_127)
//	8036DCEC: 80372C54 (MWTRACE)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void TRKDispatchMessage() {
	nofralloc
#include "asm/TRK_MINNOW_DOLPHIN/MetroTRK/Portable/dispatch/TRKDispatchMessage.s"
}
#pragma pop


/* 8036DD0C-8036DD14 0008+00 s=0 e=1 z=0  None .text      TRKInitializeDispatcher                                      */
// False False
//  bool False
extern "C" bool TRKInitializeDispatcher() {
	return false;
}


