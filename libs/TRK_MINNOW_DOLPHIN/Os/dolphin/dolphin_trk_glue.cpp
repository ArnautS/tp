// 
// Generated By: dol2asm
// Translation Unit: Os/dolphin/dolphin_trk_glue
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "TRK_MINNOW_DOLPHIN/Os/dolphin/dolphin_trk_glue.h"

// 
// Forward References:
// 


// True False
extern "C" static void TRKLoadContext();
// False False
//  void False
extern "C" void TRKUARTInterruptHandler();
// False False
extern "C" void InitializeProgramEndTrap();
// False False
extern "C" void TRK_board_display();
// False False
extern "C" void UnreserveEXI2Port();
// False False
extern "C" void ReserveEXI2Port();
// False False
extern "C" void TRKWriteUARTN();
// False False
extern "C" void TRKReadUARTN();
// False False
extern "C" void TRKPollUART();
// False False
extern "C" void EnableEXI2Interrupts();
// False False
extern "C" void TRKInitializeIntDrivenUART();
// False False
extern "C" void InitMetroTRKCommTable();
// True False
extern "C" static void TRKEXICallBack();
extern "C" extern u8 const lit_215[21 + 3 /* padding */];
extern "C" extern u8 const lit_216[23 + 1 /* padding */];
extern "C" extern u8 const lit_217[33 + 3 /* padding */];
extern "C" extern u8 const lit_218[36];
extern "C" extern u8 const lit_219[43 + 1 /* padding */];
extern "C" extern u8 const lit_220[47 + 1 /* padding */];
extern "C" extern u8 const lit_221[40 + 4 /* padding */];
SECTION_BSS u8 data_8044F820[4];
SECTION_BSS extern u8 _MetroTRK_Has_Framing[4];
SECTION_BSS extern u8 data_8044F828[8];

// 
// External References:
// 


// False False
SECTION_INIT void TRK_memcpy();
// False False
extern "C" void OSReport();
// False False
extern "C" void PPCHalt();
// False False
extern "C" void DCFlushRange();
// False False
extern "C" void ICInvalidateRange();
// False False
extern "C" void OSEnableScheduler();
// False False
extern "C" void TRKInterruptHandler();
// False False
//  s32 False
extern "C" s32 udp_cc_post_stop();
// False False
//  s32 False
extern "C" s32 udp_cc_pre_continue();
// False False
//  bool False
extern "C" bool udp_cc_peek();
// False False
//  bool False
extern "C" bool udp_cc_write();
// False False
//  bool False
extern "C" bool udp_cc_read();
// False False
//  s32 False
extern "C" s32 udp_cc_close();
// False False
//  s32 False
extern "C" s32 udp_cc_open();
// False False
//  s32 False
extern "C" s32 udp_cc_shutdown();
// False False
//  s32 False
extern "C" s32 udp_cc_initialize();
// False False
extern "C" void ddh_cc_initinterrupts();
// False False
extern "C" void ddh_cc_peek();
// False False
extern "C" void ddh_cc_post_stop();
// False False
extern "C" void ddh_cc_pre_continue();
// False False
extern "C" void ddh_cc_write();
// False False
extern "C" void ddh_cc_read();
// False False
//  bool False
extern "C" bool ddh_cc_close();
// False False
extern "C" void ddh_cc_open();
// False False
//  bool False
extern "C" bool ddh_cc_shutdown();
// False False
extern "C" void ddh_cc_initialize();
// False False
extern "C" void gdev_cc_initinterrupts();
// False False
extern "C" void gdev_cc_peek();
// False False
extern "C" void gdev_cc_post_stop();
// False False
extern "C" void gdev_cc_pre_continue();
// False False
extern "C" void gdev_cc_write();
// False False
extern "C" void gdev_cc_read();
// False False
//  bool False
extern "C" bool gdev_cc_close();
// False False
extern "C" void gdev_cc_open();
// False False
//  bool False
extern "C" bool gdev_cc_shutdown();
// False False
extern "C" void gdev_cc_initialize();
// False False
//  bool False
extern "C" bool AMC_IsStub();
// False False
//  bool False
extern "C" bool Hu_IsStub();

// 
// Declarations:
// 

/* 80371BF4-80371C7C 0088+00 s=1 e=0 z=0  None .text      TRKLoadContext                                               */
//	80371C78: 8036F684 (TRKInterruptHandler)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void TRKLoadContext() {
	nofralloc
#include "asm/TRK_MINNOW_DOLPHIN/Os/dolphin/dolphin_trk_glue/TRKLoadContext.s"
}
#pragma pop


/* 80371C7C-80371C80 0004+00 s=0 e=1 z=0  None .text      TRKUARTInterruptHandler                                      */
// False False
//  void False
extern "C" void TRKUARTInterruptHandler() {
	/* empty function */
}


/* ############################################################################################## */
/* 803A2C08-803A2C0C 0004+00 s=2 e=0 z=0  None .rodata    EndofProgramInstruction$162                                  */
SECTION_RODATA static u8 const EndofProgramInstruction[4] = {
	0x00, 0x45, 0x4E, 0x44,
};

/* 80371C80-80371CD8 0058+00 s=0 e=1 z=0  None .text      InitializeProgramEndTrap                                     */
//	80371C88: 80339D00 (PPCHalt)
//	80371C8C: 803A2C08 (EndofProgramInstruction)
//	80371C9C: 80339D00 (PPCHalt)
//	80371CA0: 803A2C08 (EndofProgramInstruction)
//	80371CA8: 800035C0 (TRK_memcpy)
//	80371CB4: 8033B690 (ICInvalidateRange)
//	80371CC0: 8033B5AC (DCFlushRange)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void InitializeProgramEndTrap() {
	nofralloc
#include "asm/TRK_MINNOW_DOLPHIN/Os/dolphin/dolphin_trk_glue/InitializeProgramEndTrap.s"
}
#pragma pop


/* ############################################################################################## */
/* 803A2C0C-803A2C10 0004+00 s=1 e=0 z=0  None .rodata    @165                                                         */
SECTION_RODATA static u32 const lit_165 = 0x25730A00;

/* 80371CD8-80371D08 0030+00 s=0 e=1 z=0  None .text      TRK_board_display                                            */
//	80371CE0: 803A2C0C (lit_165)
//	80371CEC: 803A2C0C (lit_165)
//	80371CF4: 80006ABC (OSReport)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void TRK_board_display() {
	nofralloc
#include "asm/TRK_MINNOW_DOLPHIN/Os/dolphin/dolphin_trk_glue/TRK_board_display.s"
}
#pragma pop


/* ############################################################################################## */
/* 803D32A8-803D32D0 0028+00 s=8 e=0 z=0  None .data      gDBCommTable                                                 */
SECTION_DATA static u8 gDBCommTable[40] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 80371D08-80371D38 0030+00 s=0 e=1 z=0  None .text      UnreserveEXI2Port                                            */
//	80371D10: 803D32A8 (gDBCommTable)
//	80371D18: 803D32A8 (gDBCommTable)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void UnreserveEXI2Port() {
	nofralloc
#include "asm/TRK_MINNOW_DOLPHIN/Os/dolphin/dolphin_trk_glue/UnreserveEXI2Port.s"
}
#pragma pop


/* 80371D38-80371D68 0030+00 s=0 e=1 z=0  None .text      ReserveEXI2Port                                              */
//	80371D40: 803D32A8 (gDBCommTable)
//	80371D48: 803D32A8 (gDBCommTable)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void ReserveEXI2Port() {
	nofralloc
#include "asm/TRK_MINNOW_DOLPHIN/Os/dolphin/dolphin_trk_glue/ReserveEXI2Port.s"
}
#pragma pop


/* 80371D68-80371DA4 003C+00 s=0 e=13 z=0  None .text      TRKWriteUARTN                                                */
//	80371D70: 803D32A8 (gDBCommTable)
//	80371D78: 803D32A8 (gDBCommTable)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void TRKWriteUARTN() {
	nofralloc
#include "asm/TRK_MINNOW_DOLPHIN/Os/dolphin/dolphin_trk_glue/TRKWriteUARTN.s"
}
#pragma pop


/* 80371DA4-80371DE0 003C+00 s=0 e=1 z=0  None .text      TRKReadUARTN                                                 */
//	80371DAC: 803D32A8 (gDBCommTable)
//	80371DB4: 803D32A8 (gDBCommTable)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void TRKReadUARTN() {
	nofralloc
#include "asm/TRK_MINNOW_DOLPHIN/Os/dolphin/dolphin_trk_glue/TRKReadUARTN.s"
}
#pragma pop


/* 80371DE0-80371E10 0030+00 s=0 e=1 z=0  None .text      TRKPollUART                                                  */
//	80371DE8: 803D32A8 (gDBCommTable)
//	80371DF0: 803D32A8 (gDBCommTable)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void TRKPollUART() {
	nofralloc
#include "asm/TRK_MINNOW_DOLPHIN/Os/dolphin/dolphin_trk_glue/TRKPollUART.s"
}
#pragma pop


/* ############################################################################################## */
/* 8044F820-8044F824 0004+00 s=2 e=0 z=0  .bss .bss       None                                                         */
static u8 data_8044F820[4];

/* 80371E10-80371E58 0048+00 s=0 e=1 z=0  None .text      EnableEXI2Interrupts                                         */
//	80371E18: 8044F820 (data_8044F820)
//	80371E20: 8044F820 (data_8044F820)
//	80371E2C: 803D32A8 (gDBCommTable)
//	80371E30: 803D32A8 (gDBCommTable)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void EnableEXI2Interrupts() {
	nofralloc
#include "asm/TRK_MINNOW_DOLPHIN/Os/dolphin/dolphin_trk_glue/EnableEXI2Interrupts.s"
}
#pragma pop


/* 80371E58-80371EA8 0050+00 s=0 e=1 z=0  None .text      TRKInitializeIntDrivenUART                                   */
//	80371E60: 80372114 (TRKEXICallBack)
//	80371E64: 803D32A8 (gDBCommTable)
//	80371E6C: 80372114 (TRKEXICallBack)
//	80371E70: 803D32A8 (gDBCommTable)
//	80371E80: 803D32A8 (gDBCommTable)
//	80371E84: 803D32A8 (gDBCommTable)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void TRKInitializeIntDrivenUART() {
	nofralloc
#include "asm/TRK_MINNOW_DOLPHIN/Os/dolphin/dolphin_trk_glue/TRKInitializeIntDrivenUART.s"
}
#pragma pop


/* 80371EA8-80372114 026C+00 s=0 e=2 z=0  None .text      InitMetroTRKCommTable                                        */
//	80371EB0: 803A2C08 (EndofProgramInstruction)
//	80371ECC: 803A2C08 (EndofProgramInstruction)
//	80371EDC: 80006ABC (OSReport)
//	80371EE0: 8044F820 (data_8044F820)
//	80371EEC: 8044F820 (data_8044F820)
//	80371EFC: 80006ABC (OSReport)
//	80371F00: 8044F820 (data_8044F820)
//	80371F04: 80372354 (udp_cc_initialize)
//	80371F08: 803D32A8 (gDBCommTable)
//	80371F0C: 80372344 (udp_cc_open)
//	80371F10: 8037233C (udp_cc_close)
//	80371F14: 80372334 (udp_cc_read)
//	80371F18: 8037232C (udp_cc_write)
//	80371F1C: 8037234C (udp_cc_shutdown)
//	80371F20: 80372324 (udp_cc_peek)
//	80371F24: 8037231C (udp_cc_pre_continue)
//	80371F28: 80372314 (udp_cc_post_stop)
//	80371F2C: 8044F820 (data_8044F820)
//	80371F34: 80372354 (udp_cc_initialize)
//	80371F38: 803D32A8 (gDBCommTable)
//	80371F3C: 80372344 (udp_cc_open)
//	80371F40: 8037233C (udp_cc_close)
//	80371F44: 80372334 (udp_cc_read)
//	80371F48: 8037232C (udp_cc_write)
//	80371F4C: 8037234C (udp_cc_shutdown)
//	80371F50: 80372324 (udp_cc_peek)
//	80371F54: 8037231C (udp_cc_pre_continue)
//	80371F58: 80372314 (udp_cc_post_stop)
//	80371FA4: 80006ABC (OSReport)
//	80371FA8: 803737AC (Hu_IsStub)
//	80371FAC: 80372BCC (gdev_cc_initialize)
//	80371FB0: 80372BA0 (gdev_cc_open)
//	80371FB4: 80372BCC (gdev_cc_initialize)
//	80371FB8: 803D32A8 (gDBCommTable)
//	80371FBC: 80372B98 (gdev_cc_close)
//	80371FC0: 80372AA4 (gdev_cc_read)
//	80371FC4: 803729E4 (gdev_cc_write)
//	80371FC8: 80372BC4 (gdev_cc_shutdown)
//	80371FCC: 8037292C (gdev_cc_peek)
//	80371FD0: 803729C0 (gdev_cc_pre_continue)
//	80371FD4: 8037299C (gdev_cc_post_stop)
//	80371FD8: 80372908 (gdev_cc_initinterrupts)
//	80371FDC: 803D32A8 (gDBCommTable)
//	80371FE0: 80372BA0 (gdev_cc_open)
//	80371FE4: 80372B98 (gdev_cc_close)
//	80371FE8: 80372AA4 (gdev_cc_read)
//	80371FEC: 803729E4 (gdev_cc_write)
//	80371FF0: 80372BC4 (gdev_cc_shutdown)
//	80371FF4: 8037292C (gdev_cc_peek)
//	80371FF8: 803729C0 (gdev_cc_pre_continue)
//	80371FFC: 8037299C (gdev_cc_post_stop)
//	80372000: 80372908 (gdev_cc_initinterrupts)
//	80372040: 80006ABC (OSReport)
//	80372044: 80372D24 (AMC_IsStub)
//	80372048: 80372618 (ddh_cc_initialize)
//	8037204C: 803725EC (ddh_cc_open)
//	80372050: 80372618 (ddh_cc_initialize)
//	80372054: 803D32A8 (gDBCommTable)
//	80372058: 803725E4 (ddh_cc_close)
//	8037205C: 803724F8 (ddh_cc_read)
//	80372060: 80372438 (ddh_cc_write)
//	80372064: 80372610 (ddh_cc_shutdown)
//	80372068: 80372380 (ddh_cc_peek)
//	8037206C: 80372414 (ddh_cc_pre_continue)
//	80372070: 803723F0 (ddh_cc_post_stop)
//	80372074: 8037235C (ddh_cc_initinterrupts)
//	80372078: 803D32A8 (gDBCommTable)
//	8037207C: 803725EC (ddh_cc_open)
//	80372080: 803725E4 (ddh_cc_close)
//	80372084: 803724F8 (ddh_cc_read)
//	80372088: 80372438 (ddh_cc_write)
//	8037208C: 80372610 (ddh_cc_shutdown)
//	80372090: 80372380 (ddh_cc_peek)
//	80372094: 80372414 (ddh_cc_pre_continue)
//	80372098: 803723F0 (ddh_cc_post_stop)
//	8037209C: 8037235C (ddh_cc_initinterrupts)
//	803720D8: 80006ABC (OSReport)
//	803720E4: 80006ABC (OSReport)
//	803720F0: 80006ABC (OSReport)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void InitMetroTRKCommTable() {
	nofralloc
#include "asm/TRK_MINNOW_DOLPHIN/Os/dolphin/dolphin_trk_glue/InitMetroTRKCommTable.s"
}
#pragma pop


/* 80372114-8037214C 0038+00 s=1 e=0 z=0  None .text      TRKEXICallBack                                               */
//	80372128: 80340D04 (OSEnableScheduler)
//	80372134: 80371BF4 (TRKLoadContext)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void TRKEXICallBack() {
	nofralloc
#include "asm/TRK_MINNOW_DOLPHIN/Os/dolphin/dolphin_trk_glue/TRKEXICallBack.s"
}
#pragma pop


/* ############################################################################################## */
/* 803A2C10-803A2C28 0015+03 s=0 e=0 z=0  None .rodata    @215                                                         */
SECTION_RODATA u8 const lit_215[21 + 3 /* padding */] = {
	0x44, 0x65, 0x76, 0x6B, 0x69, 0x74, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6F, 0x20, 0x3A, 0x20,
	0x25, 0x6C, 0x64, 0x0A, 0x00,
	/* padding */
	0x00, 0x00, 0x00,
};

/* 803A2C28-803A2C40 0017+01 s=0 e=0 z=0  None .rodata    @216                                                         */
SECTION_RODATA u8 const lit_216[23 + 1 /* padding */] = {
	0x4D, 0x65, 0x74, 0x72, 0x6F, 0x54, 0x52, 0x4B, 0x20, 0x3A, 0x20, 0x53, 0x65, 0x74, 0x20, 0x74,
	0x6F, 0x20, 0x42, 0x42, 0x41, 0x0A, 0x00,
	/* padding */
	0x00,
};

/* 803A2C40-803A2C64 0021+03 s=0 e=0 z=0  None .rodata    @217                                                         */
SECTION_RODATA u8 const lit_217[33 + 3 /* padding */] = {
	0x4D, 0x65, 0x74, 0x72, 0x6F, 0x54, 0x52, 0x4B, 0x20, 0x3A, 0x20, 0x53, 0x65, 0x74, 0x20, 0x74,
	0x6F, 0x20, 0x47, 0x44, 0x45, 0x56, 0x20, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x0A,
	0x00,
	/* padding */
	0x00, 0x00, 0x00,
};

/* 803A2C64-803A2C88 0024+00 s=0 e=0 z=0  None .rodata    @218                                                         */
SECTION_RODATA u8 const lit_218[36] = {
	0x4D, 0x65, 0x74, 0x72, 0x6F, 0x54, 0x52, 0x4B, 0x20, 0x3A, 0x20, 0x53, 0x65, 0x74, 0x20, 0x74,
	0x6F, 0x20, 0x41, 0x4D, 0x43, 0x20, 0x44, 0x44, 0x48, 0x20, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x0A, 0x00,
};

/* 803A2C88-803A2CB4 002B+01 s=0 e=0 z=0  None .rodata    @219                                                         */
SECTION_RODATA u8 const lit_219[43 + 1 /* padding */] = {
	0x4D, 0x65, 0x74, 0x72, 0x6F, 0x54, 0x52, 0x4B, 0x20, 0x3A, 0x20, 0x53, 0x65, 0x74, 0x20, 0x74,
	0x6F, 0x20, 0x55, 0x4E, 0x4B, 0x4E, 0x4F, 0x57, 0x4E, 0x20, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x2E, 0x20, 0x28, 0x25, 0x6C, 0x64, 0x29, 0x0A, 0x00,
	/* padding */
	0x00,
};

/* 803A2CB4-803A2CE4 002F+01 s=0 e=0 z=0  None .rodata    @220                                                         */
SECTION_RODATA u8 const lit_220[47 + 1 /* padding */] = {
	0x4D, 0x65, 0x74, 0x72, 0x6F, 0x54, 0x52, 0x4B, 0x20, 0x3A, 0x20, 0x49, 0x6E, 0x76, 0x61, 0x6C,
	0x69, 0x64, 0x20, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x20, 0x49, 0x44, 0x20, 0x70,
	0x61, 0x73, 0x73, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6F, 0x6D, 0x20, 0x4F, 0x53, 0x0A, 0x00,
	/* padding */
	0x00,
};

/* 803A2CE4-803A2D10 0028+04 s=0 e=0 z=0  None .rodata    @221                                                         */
SECTION_RODATA u8 const lit_221[40 + 4 /* padding */] = {
	0x4D, 0x65, 0x74, 0x72, 0x6F, 0x54, 0x52, 0x4B, 0x20, 0x3A, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6C, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x6F, 0x20, 0x47, 0x44, 0x45, 0x56, 0x20, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x0A, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00,
};

/* 8044F824-8044F828 0004+00 s=0 e=0 z=0  .bss .bss       _MetroTRK_Has_Framing                                        */
u8 _MetroTRK_Has_Framing[4];

/* 8044F828-8044F830 0008+00 s=0 e=2 z=0  .bss .bss       None                                                         */
u8 data_8044F828[8];

