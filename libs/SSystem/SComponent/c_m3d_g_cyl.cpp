// 
// Generated By: dol2asm
// Translation Unit: c_m3d_g_cyl
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "SSystem/SComponent/c_m3d_g_cyl.h"

// 
// Types:
// 

struct cXyz {
};

struct cM3dGSph {
};

struct cM3dGCylS {
};

struct cM3dGCyl {
	/* 8026F0A8 */ // False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
//  f32 False
cM3dGCyl(cXyz const*, f32, f32);
	/* 8026F180 */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
//  f32 False
void Set(cXyz const&, f32, f32);
	/* 8026F114 */ // False False
//  cM3dGCylS const& False
// 	 cM3dGCylS const False
// 		 cM3dGCylS False
void Set(cM3dGCylS const&);
	/* 8026F1DC */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
void SetC(cXyz const&);
	/* 8026F1F8 */ // False False
//  f32 False
void SetH(f32);
	/* 8026F200 */ // False False
//  f32 False
void SetR(f32);
	/* 8026F208 */ // False False
//  cM3dGSph const* False
// 	 cM3dGSph const False
// 		 cM3dGSph False
//  cXyz* False
// 	 cXyz False
void cross(cM3dGSph const*, cXyz*) const;
	/* 8026F22C */ // False False
//  cM3dGCyl const* False
// 	 cM3dGCyl const False
// 		 cM3dGCyl False
//  cXyz* False
// 	 cXyz False
void cross(cM3dGCyl const*, cXyz*) const;
	/* 8026F24C */ // False False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
void calcMinMax(cXyz*, cXyz*);
};

struct Vec {
};

// 
// Forward References:
// 


// False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
//  f32 False
extern "C" void __ct__8cM3dGCylFPC4cXyzff();
// False False
//  cM3dGCylS const& False
// 	 cM3dGCylS const False
// 		 cM3dGCylS False
extern "C" void Set__8cM3dGCylFRC9cM3dGCylS();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
//  f32 False
extern "C" void Set__8cM3dGCylFRC4cXyzff();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
extern "C" void SetC__8cM3dGCylFRC4cXyz();
// False False
//  f32 False
extern "C" void SetH__8cM3dGCylFf();
// False False
//  f32 False
extern "C" void SetR__8cM3dGCylFf();
// False False
//  cM3dGSph const* False
// 	 cM3dGSph const False
// 		 cM3dGSph False
//  cXyz* False
// 	 cXyz False
extern "C" void cross__8cM3dGCylCFPC8cM3dGSphP4cXyz();
// False False
//  cM3dGCyl const* False
// 	 cM3dGCyl const False
// 		 cM3dGCyl False
//  cXyz* False
// 	 cXyz False
extern "C" void cross__8cM3dGCylCFPC8cM3dGCylP4cXyz();
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
extern "C" void calcMinMax__8cM3dGCylFP4cXyzP4cXyz();

// 
// External References:
// 

// False False
//  cM3dGCyl const* False
// 	 cM3dGCyl const False
// 		 cM3dGCyl False
//  cM3dGSph const* False
// 	 cM3dGSph const False
// 		 cM3dGSph False
//  Vec* False
// 	 Vec False
//  f32* False
// 	 f32 False
void cM3d_Cross_CylSph(cM3dGCyl const*, cM3dGSph const*, Vec*, f32*);
// False False
//  cM3dGCyl const* False
// 	 cM3dGCyl const False
// 		 cM3dGCyl False
//  cM3dGCyl const* False
// 	 cM3dGCyl const False
// 		 cM3dGCyl False
//  Vec* False
// 	 Vec False
void cM3d_Cross_CylCyl(cM3dGCyl const*, cM3dGCyl const*, Vec*);

// False False
//  cM3dGCyl const* False
// 	 cM3dGCyl const False
// 		 cM3dGCyl False
//  cM3dGSph const* False
// 	 cM3dGSph const False
// 		 cM3dGSph False
//  Vec* False
// 	 Vec False
//  f32* False
// 	 f32 False
extern "C" void cM3d_Cross_CylSph__FPC8cM3dGCylPC8cM3dGSphP3VecPf();
// False False
//  cM3dGCyl const* False
// 	 cM3dGCyl const False
// 		 cM3dGCyl False
//  cM3dGCyl const* False
// 	 cM3dGCyl const False
// 		 cM3dGCyl False
//  Vec* False
// 	 Vec False
extern "C" void cM3d_Cross_CylCyl__FPC8cM3dGCylPC8cM3dGCylP3Vec();
extern "C" extern void* __vt__8cM3dGCyl[3];

// 
// Declarations:
// 

/* 8026F0A8-8026F114 006C+00 s=0 e=1 z=0  None .text      __ct__8cM3dGCylFPC4cXyzff                                    */
//	8026F0CC: 803A720C (__vt__8cM3dGCyl)
//	8026F0D0: 803A720C (__vt__8cM3dGCyl)
//	8026F0D8: 8026F1DC (SetC__8cM3dGCylFRC4cXyz)
//	8026F0E4: 8026F200 (SetR__8cM3dGCylFf)
//	8026F0F0: 8026F1F8 (SetH__8cM3dGCylFf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
//  f32 False
asm cM3dGCyl::cM3dGCyl(cXyz const* param_0, f32 param_1, f32 param_2) {
	nofralloc
#include "asm/SSystem/SComponent/c_m3d_g_cyl/__ct__8cM3dGCylFPC4cXyzff.s"
}
#pragma pop


/* 8026F114-8026F180 006C+00 s=0 e=1 z=4  None .text      Set__8cM3dGCylFRC9cM3dGCylS                                  */
//	8026F14C: 8026F1DC (SetC__8cM3dGCylFRC4cXyz)
//	8026F158: 8026F200 (SetR__8cM3dGCylFf)
//	8026F164: 8026F1F8 (SetH__8cM3dGCylFf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cM3dGCylS const& False
// 	 cM3dGCylS const False
// 		 cM3dGCylS False
asm void cM3dGCyl::Set(cM3dGCylS const& param_0) {
	nofralloc
#include "asm/SSystem/SComponent/c_m3d_g_cyl/Set__8cM3dGCylFRC9cM3dGCylS.s"
}
#pragma pop


/* 8026F180-8026F1DC 005C+00 s=0 e=2 z=1  None .text      Set__8cM3dGCylFRC4cXyzff                                     */
//	8026F1A4: 8026F1DC (SetC__8cM3dGCylFRC4cXyz)
//	8026F1B0: 8026F200 (SetR__8cM3dGCylFf)
//	8026F1BC: 8026F1F8 (SetH__8cM3dGCylFf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  f32 False
//  f32 False
asm void cM3dGCyl::Set(cXyz const& param_0, f32 param_1, f32 param_2) {
	nofralloc
#include "asm/SSystem/SComponent/c_m3d_g_cyl/Set__8cM3dGCylFRC4cXyzff.s"
}
#pragma pop


/* 8026F1DC-8026F1F8 001C+00 s=3 e=13 z=257  None .text      SetC__8cM3dGCylFRC4cXyz                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
asm void cM3dGCyl::SetC(cXyz const& param_0) {
	nofralloc
#include "asm/SSystem/SComponent/c_m3d_g_cyl/SetC__8cM3dGCylFRC4cXyz.s"
}
#pragma pop


/* 8026F1F8-8026F200 0008+00 s=3 e=11 z=197  None .text      SetH__8cM3dGCylFf                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  f32 False
asm void cM3dGCyl::SetH(f32 param_0) {
	nofralloc
#include "asm/SSystem/SComponent/c_m3d_g_cyl/SetH__8cM3dGCylFf.s"
}
#pragma pop


/* 8026F200-8026F208 0008+00 s=3 e=6 z=204  None .text      SetR__8cM3dGCylFf                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  f32 False
asm void cM3dGCyl::SetR(f32 param_0) {
	nofralloc
#include "asm/SSystem/SComponent/c_m3d_g_cyl/SetR__8cM3dGCylFf.s"
}
#pragma pop


/* 8026F208-8026F22C 0024+00 s=0 e=1 z=0  None .text      cross__8cM3dGCylCFPC8cM3dGSphP4cXyz                          */
//	8026F218: 8026BA48 (cM3d_Cross_CylSph__FPC8cM3dGCylPC8cM3dGSphP3VecPf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cM3dGSph const* False
// 	 cM3dGSph const False
// 		 cM3dGSph False
//  cXyz* False
// 	 cXyz False
asm void cM3dGCyl::cross(cM3dGSph const* param_0, cXyz* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_m3d_g_cyl/cross__8cM3dGCylCFPC8cM3dGSphP4cXyz.s"
}
#pragma pop


/* 8026F22C-8026F24C 0020+00 s=0 e=1 z=0  None .text      cross__8cM3dGCylCFPC8cM3dGCylP4cXyz                          */
//	8026F238: 8026C3B4 (cM3d_Cross_CylCyl__FPC8cM3dGCylPC8cM3dGCylP3Vec)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cM3dGCyl const* False
// 	 cM3dGCyl const False
// 		 cM3dGCyl False
//  cXyz* False
// 	 cXyz False
asm void cM3dGCyl::cross(cM3dGCyl const* param_0, cXyz* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_m3d_g_cyl/cross__8cM3dGCylCFPC8cM3dGCylP4cXyz.s"
}
#pragma pop


/* 8026F24C-8026F2A8 005C+00 s=0 e=2 z=0  None .text      calcMinMax__8cM3dGCylFP4cXyzP4cXyz                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cXyz* False
// 	 cXyz False
//  cXyz* False
// 	 cXyz False
asm void cM3dGCyl::calcMinMax(cXyz* param_0, cXyz* param_1) {
	nofralloc
#include "asm/SSystem/SComponent/c_m3d_g_cyl/calcMinMax__8cM3dGCylFP4cXyzP4cXyz.s"
}
#pragma pop


