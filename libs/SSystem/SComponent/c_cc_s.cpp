// 
// Generated By: dol2asm
// Translation Unit: c_cc_s
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "SSystem/SComponent/c_cc_s.h"

// 
// Types:
// 

struct cXyz {
	/* 80009184 */ // False False
~cXyz();
};

struct cM3dGAab {
	/* 8026ECF8 */ // False False
void ClearForMinMax();
	/* 8026ED60 */ // False False
//  cM3dGAab const& False
// 	 cM3dGAab const False
// 		 cM3dGAab False
void SetMinMax(cM3dGAab const&);
	/* 8026EE24 */ // False False
//  cXyz* False
// 	 cXyz False
void CalcCenter(cXyz*) const;
};

struct cCcD_Stts {
	/* 80263934 */ // False False
//  f32 False
//  f32 False
//  f32 False
void PlusCcMove(f32, f32, f32);
	/* 8026395C */ // False False
void ClrCcMove();
	/* 80263970 */ // False False
//  int False
void PlusDmg(int);
	/* 80263984 */ // False False
void GetWeightF() const;
};

struct cCcD_GStts {
};

struct cCcD_Obj {
	/* 80263A48 */ // False False
void GetAc();
};

struct cCcD_GObjInf {
};

struct cCcS {
	/* 80030BDC */ // False False
~cCcS();
	/* 80264A6C */ // False False
cCcS();
	/* 80264A94 */ // False False
void Ct();
	/* 80264B60 */ // False False
void Dt();
	/* 80264B80 */ // True False
//  u8 False
void GetWt(u8) const;
	/* 80264BA8 */ // False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
void Set(cCcD_Obj*);
	/* 80264C5C */ // True False
void ClrCoHitInf();
	/* 80264CF0 */ // True False
void ClrTgHitInf();
	/* 80264D90 */ // True False
void ClrAtHitInf();
	/* 80264E2C */ // True False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_Obj* False
// 	 cCcD_Obj False
void ChkNoHitAtTg(cCcD_Obj*, cCcD_Obj*);
	/* 80264F40 */ // True False
void ChkAtTg();
	/* 8026515C */ // True False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_Obj* False
// 	 cCcD_Obj False
void ChkNoHitCo(cCcD_Obj*, cCcD_Obj*);
	/* 80265230 */ // True False
void ChkCo();
	/* 802653A0 */ // True False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_Stts* False
// 	 cCcD_Stts False
//  cCcD_Stts* False
// 	 cCcD_Stts False
void CalcTgPlusDmg(cCcD_Obj*, cCcD_Obj*, cCcD_Stts*, cCcD_Stts*);
	/* 802653C8 */ // True False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cXyz* False
// 	 cXyz False
void SetAtTgCommonHitInf(cCcD_Obj*, cCcD_Obj*, cXyz*);
	/* 802655E4 */ // True False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cXyz* False
// 	 cXyz False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cXyz* False
// 	 cXyz False
//  f32 False
void SetCoCommonHitInf(cCcD_Obj*, cXyz*, cCcD_Obj*, cXyz*, f32);
	/* 80265750 */ // True False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cXyz* False
// 	 cXyz False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cXyz* False
// 	 cXyz False
//  f32 False
void SetPosCorrect(cCcD_Obj*, cXyz*, cCcD_Obj*, cXyz*, f32);
	/* 80265BB4 */ // True False
void CalcArea();
	/* 80265CCC */ // False False
void Move();
	/* 80265D30 */ // False False
void DrawClear();
	/* 80265DF4 */ // False False
//  void False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_Obj* False
// 	 cCcD_Obj False
void SetCoGCorrectProc(cCcD_Obj*, cCcD_Obj*);
	/* 80265DF8 */ // True False
//  void False
//  bool False
//  bool False
//  cCcD_GObjInf* False
// 	 cCcD_GObjInf False
//  cCcD_GObjInf* False
// 	 cCcD_GObjInf False
//  cCcD_Stts* False
// 	 cCcD_Stts False
//  cCcD_Stts* False
// 	 cCcD_Stts False
//  cCcD_GStts* False
// 	 cCcD_GStts False
//  cCcD_GStts* False
// 	 cCcD_GStts False
void SetCoGObjInf(bool, bool, cCcD_GObjInf*, cCcD_GObjInf*, cCcD_Stts*, cCcD_Stts*, cCcD_GStts*, cCcD_GStts*);
	/* 80265DFC */ // True False
//  void False
//  bool False
//  bool False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_GObjInf* False
// 	 cCcD_GObjInf False
//  cCcD_GObjInf* False
// 	 cCcD_GObjInf False
//  cCcD_Stts* False
// 	 cCcD_Stts False
//  cCcD_Stts* False
// 	 cCcD_Stts False
//  cCcD_GStts* False
// 	 cCcD_GStts False
//  cCcD_GStts* False
// 	 cCcD_GStts False
//  cXyz* False
// 	 cXyz False
void SetAtTgGObjInf(bool, bool, cCcD_Obj*, cCcD_Obj*, cCcD_GObjInf*, cCcD_GObjInf*, cCcD_Stts*, cCcD_Stts*, cCcD_GStts*, cCcD_GStts*, cXyz*);
	/* 80265E00 */ // True False
//  bool False
//  cCcD_GObjInf const* False
// 	 cCcD_GObjInf const False
// 		 cCcD_GObjInf False
//  cCcD_GObjInf const* False
// 	 cCcD_GObjInf const False
// 		 cCcD_GObjInf False
//  cCcD_GStts* False
// 	 cCcD_GStts False
//  cCcD_GStts* False
// 	 cCcD_GStts False
bool ChkNoHitGAtTg(cCcD_GObjInf const*, cCcD_GObjInf const*, cCcD_GStts*, cCcD_GStts*);
	/* 80265E08 */ // True False
//  bool False
//  bool False
//  bool False
//  cCcD_GObjInf const* False
// 	 cCcD_GObjInf const False
// 		 cCcD_GObjInf False
//  cCcD_GObjInf const* False
// 	 cCcD_GObjInf const False
// 		 cCcD_GObjInf False
//  cCcD_Stts* False
// 	 cCcD_Stts False
//  cCcD_Stts* False
// 	 cCcD_Stts False
//  cCcD_GStts* False
// 	 cCcD_GStts False
//  cCcD_GStts* False
// 	 cCcD_GStts False
bool ChkAtTgHitAfterCross(bool, bool, cCcD_GObjInf const*, cCcD_GObjInf const*, cCcD_Stts*, cCcD_Stts*, cCcD_GStts*, cCcD_GStts*);
	/* 80265E10 */ // True False
//  bool False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_Obj* False
// 	 cCcD_Obj False
bool ChkNoHitGCo(cCcD_Obj*, cCcD_Obj*);
	/* 80265E18 */ // True False
//  void False
void MoveAfterCheck();
};

struct cCcD_ObjTg {
	/* 802648C8 */ // False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
void SetHit(cCcD_Obj*);
};

struct cCcD_ObjCo {
	/* 802648D8 */ // False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
void SetHit(cCcD_Obj*);
};

struct cCcD_ObjAt {
	/* 8026483C */ // False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
void SetHit(cCcD_Obj*);
};

struct cCcD_DivideInfo {
	/* 80263368 */ // False False
//  cCcD_DivideInfo const& False
// 	 cCcD_DivideInfo const False
// 		 cCcD_DivideInfo False
void Chk(cCcD_DivideInfo const&) const;
};

struct cCcD_DivideArea {
	/* 802633A8 */ // False False
//  cM3dGAab const& False
// 	 cM3dGAab const False
// 		 cM3dGAab False
void SetArea(cM3dGAab const&);
	/* 802634D4 */ // False False
//  cCcD_DivideInfo* False
// 	 cCcD_DivideInfo False
//  cM3dGAab const& False
// 	 cM3dGAab const False
// 		 cM3dGAab False
//  u32 False
void CalcDivideInfo(cCcD_DivideInfo*, cM3dGAab const&, u32);
};

// 
// Forward References:
// 


// False False
extern "C" void __ct__4cCcSFv();
// False False
extern "C" void Ct__4cCcSFv();
// False False
extern "C" void Dt__4cCcSFv();
// True False
//  u8 False
extern "C" void GetWt__4cCcSCFUc();
// False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
extern "C" void Set__4cCcSFP8cCcD_Obj();
// True False
extern "C" void ClrCoHitInf__4cCcSFv();
// True False
extern "C" void ClrTgHitInf__4cCcSFv();
// True False
extern "C" void ClrAtHitInf__4cCcSFv();
// True False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_Obj* False
// 	 cCcD_Obj False
extern "C" void ChkNoHitAtTg__4cCcSFP8cCcD_ObjP8cCcD_Obj();
// True False
extern "C" void ChkAtTg__4cCcSFv();
// True False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_Obj* False
// 	 cCcD_Obj False
extern "C" void ChkNoHitCo__4cCcSFP8cCcD_ObjP8cCcD_Obj();
// True False
extern "C" void ChkCo__4cCcSFv();
// True False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_Stts* False
// 	 cCcD_Stts False
//  cCcD_Stts* False
// 	 cCcD_Stts False
extern "C" void CalcTgPlusDmg__4cCcSFP8cCcD_ObjP8cCcD_ObjP9cCcD_SttsP9cCcD_Stts();
// True False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cXyz* False
// 	 cXyz False
extern "C" void SetAtTgCommonHitInf__4cCcSFP8cCcD_ObjP8cCcD_ObjP4cXyz();
// True False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cXyz* False
// 	 cXyz False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cXyz* False
// 	 cXyz False
//  f32 False
extern "C" void SetCoCommonHitInf__4cCcSFP8cCcD_ObjP4cXyzP8cCcD_ObjP4cXyzf();
// True False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cXyz* False
// 	 cXyz False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cXyz* False
// 	 cXyz False
//  f32 False
extern "C" void SetPosCorrect__4cCcSFP8cCcD_ObjP4cXyzP8cCcD_ObjP4cXyzf();
// True False
extern "C" void CalcArea__4cCcSFv();
// False False
extern "C" void Move__4cCcSFv();
// False False
extern "C" void DrawClear__4cCcSFv();
// False False
//  void False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_Obj* False
// 	 cCcD_Obj False
extern "C" void SetCoGCorrectProc__4cCcSFP8cCcD_ObjP8cCcD_Obj();
// True False
//  void False
//  bool False
//  bool False
//  cCcD_GObjInf* False
// 	 cCcD_GObjInf False
//  cCcD_GObjInf* False
// 	 cCcD_GObjInf False
//  cCcD_Stts* False
// 	 cCcD_Stts False
//  cCcD_Stts* False
// 	 cCcD_Stts False
//  cCcD_GStts* False
// 	 cCcD_GStts False
//  cCcD_GStts* False
// 	 cCcD_GStts False
extern "C" void SetCoGObjInf__4cCcSFbbP12cCcD_GObjInfP12cCcD_GObjInfP9cCcD_SttsP9cCcD_SttsP10cCcD_GSttsP10cCcD_GStts();
// True False
//  void False
//  bool False
//  bool False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_GObjInf* False
// 	 cCcD_GObjInf False
//  cCcD_GObjInf* False
// 	 cCcD_GObjInf False
//  cCcD_Stts* False
// 	 cCcD_Stts False
//  cCcD_Stts* False
// 	 cCcD_Stts False
//  cCcD_GStts* False
// 	 cCcD_GStts False
//  cCcD_GStts* False
// 	 cCcD_GStts False
//  cXyz* False
// 	 cXyz False
extern "C" void SetAtTgGObjInf__4cCcSFbbP8cCcD_ObjP8cCcD_ObjP12cCcD_GObjInfP12cCcD_GObjInfP9cCcD_SttsP9cCcD_SttsP10cCcD_GSttsP10cCcD_GSttsP4cXyz();
// True False
//  bool False
//  cCcD_GObjInf const* False
// 	 cCcD_GObjInf const False
// 		 cCcD_GObjInf False
//  cCcD_GObjInf const* False
// 	 cCcD_GObjInf const False
// 		 cCcD_GObjInf False
//  cCcD_GStts* False
// 	 cCcD_GStts False
//  cCcD_GStts* False
// 	 cCcD_GStts False
extern "C" bool ChkNoHitGAtTg__4cCcSFPC12cCcD_GObjInfPC12cCcD_GObjInfP10cCcD_GSttsP10cCcD_GStts();
// True False
//  bool False
//  bool False
//  bool False
//  cCcD_GObjInf const* False
// 	 cCcD_GObjInf const False
// 		 cCcD_GObjInf False
//  cCcD_GObjInf const* False
// 	 cCcD_GObjInf const False
// 		 cCcD_GObjInf False
//  cCcD_Stts* False
// 	 cCcD_Stts False
//  cCcD_Stts* False
// 	 cCcD_Stts False
//  cCcD_GStts* False
// 	 cCcD_GStts False
//  cCcD_GStts* False
// 	 cCcD_GStts False
extern "C" bool ChkAtTgHitAfterCross__4cCcSFbbPC12cCcD_GObjInfPC12cCcD_GObjInfP9cCcD_SttsP9cCcD_SttsP10cCcD_GSttsP10cCcD_GStts();
// True False
//  bool False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_Obj* False
// 	 cCcD_Obj False
extern "C" bool ChkNoHitGCo__4cCcSFP8cCcD_ObjP8cCcD_Obj();
// True False
//  void False
extern "C" void MoveAfterCheck__4cCcSFv();
extern "C" extern void* __vt__4cCcS[12];

// 
// External References:
// 


// False False
extern "C" void __dt__4cXyzFv();
// False False
extern "C" void __dt__4cCcSFv();
// False False
//  cCcD_DivideInfo const& False
// 	 cCcD_DivideInfo const False
// 		 cCcD_DivideInfo False
extern "C" void Chk__15cCcD_DivideInfoCFRC15cCcD_DivideInfo();
// False False
//  cM3dGAab const& False
// 	 cM3dGAab const False
// 		 cM3dGAab False
extern "C" void SetArea__15cCcD_DivideAreaFRC8cM3dGAab();
// False False
//  cCcD_DivideInfo* False
// 	 cCcD_DivideInfo False
//  cM3dGAab const& False
// 	 cM3dGAab const False
// 		 cM3dGAab False
//  u32 False
extern "C" void CalcDivideInfo__15cCcD_DivideAreaFP15cCcD_DivideInfoRC8cM3dGAabUl();
// False False
//  f32 False
//  f32 False
//  f32 False
extern "C" void PlusCcMove__9cCcD_SttsFfff();
// False False
extern "C" void ClrCcMove__9cCcD_SttsFv();
// False False
//  int False
extern "C" void PlusDmg__9cCcD_SttsFi();
// False False
extern "C" void GetWeightF__9cCcD_SttsCFv();
// False False
extern "C" void GetAc__8cCcD_ObjFv();
// False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
extern "C" void SetHit__10cCcD_ObjAtFP8cCcD_Obj();
// False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
extern "C" void SetHit__10cCcD_ObjTgFP8cCcD_Obj();
// False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
extern "C" void SetHit__10cCcD_ObjCoFP8cCcD_Obj();
// False False
extern "C" void ClearForMinMax__8cM3dGAabFv();
// False False
//  cM3dGAab const& False
// 	 cM3dGAab const False
// 		 cM3dGAab False
extern "C" void SetMinMax__8cM3dGAabFRC8cM3dGAab();
// False False
//  cXyz* False
// 	 cXyz False
extern "C" void CalcCenter__8cM3dGAabCFP4cXyz();
// False False
extern "C" void PSVECAdd();
// False False
extern "C" void PSVECSubtract();
// False False
extern "C" void PSVECScale();
// False False
extern "C" void PSVECMag();
// False False
extern "C" void __register_global_object();
// False False
extern "C" void _savegpr_21();
// False False
extern "C" void _savegpr_22();
// False False
extern "C" void _savegpr_25();
// False False
extern "C" void _savegpr_27();
// False False
extern "C" void _savegpr_28();
// False False
extern "C" void _savegpr_29();
// False False
extern "C" void _restgpr_21();
// False False
extern "C" void _restgpr_22();
// False False
extern "C" void _restgpr_25();
// False False
extern "C" void _restgpr_27();
// False False
extern "C" void _restgpr_28();
// False False
extern "C" void _restgpr_29();
extern "C" extern void* __vt__15cCcD_DivideArea[3];
extern "C" extern void* __vt__8cM3dGAab[3];
extern "C" extern u32 __float_nan;
extern "C" extern u8 data_80451158[8];
extern "C" extern f32 G_CM3D_F_ABS_MIN[1 + 1 /* padding */];

// 
// Declarations:
// 

/* ############################################################################################## */
/* 803C3748-803C3778 0030+00 s=1 e=2 z=0  None .data      __vt__4cCcS                                                  */
SECTION_DATA void* __vt__4cCcS[12] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)CalcTgPlusDmg__4cCcSFP8cCcD_ObjP8cCcD_ObjP9cCcD_SttsP9cCcD_Stts,
	(void*)SetPosCorrect__4cCcSFP8cCcD_ObjP4cXyzP8cCcD_ObjP4cXyzf,
	(void*)SetCoGObjInf__4cCcSFbbP12cCcD_GObjInfP12cCcD_GObjInfP9cCcD_SttsP9cCcD_SttsP10cCcD_GSttsP10cCcD_GStts,
	(void*)SetAtTgGObjInf__4cCcSFbbP8cCcD_ObjP8cCcD_ObjP12cCcD_GObjInfP12cCcD_GObjInfP9cCcD_SttsP9cCcD_SttsP10cCcD_GSttsP10cCcD_GSttsP4cXyz,
	(void*)ChkNoHitGAtTg__4cCcSFPC12cCcD_GObjInfPC12cCcD_GObjInfP10cCcD_GSttsP10cCcD_GStts,
	(void*)ChkAtTgHitAfterCross__4cCcSFbbPC12cCcD_GObjInfPC12cCcD_GObjInfP9cCcD_SttsP9cCcD_SttsP10cCcD_GSttsP10cCcD_GStts,
	(void*)ChkNoHitGCo__4cCcSFP8cCcD_ObjP8cCcD_Obj,
	(void*)__dt__4cCcSFv,
	(void*)MoveAfterCheck__4cCcSFv,
	(void*)SetCoGCorrectProc__4cCcSFP8cCcD_ObjP8cCcD_Obj,
};

/* 80264A6C-80264A94 0028+00 s=0 e=1 z=0  None .text      __ct__4cCcSFv                                                */
//	80264A6C: 803C3748 (__vt__4cCcS)
//	80264A70: 803C3748 (__vt__4cCcS)
//	80264A78: 803A7218 (__vt__8cM3dGAab)
//	80264A7C: 803A7218 (__vt__8cM3dGAab)
//	80264A84: 803A7200 (__vt__15cCcD_DivideArea)
//	80264A88: 803A7200 (__vt__15cCcD_DivideArea)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm cCcS::cCcS() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_s/__ct__4cCcSFv.s"
}
#pragma pop


/* 80264A94-80264B60 00CC+00 s=1 e=1 z=0  None .text      Ct__4cCcSFv                                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void cCcS::Ct() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_s/Ct__4cCcSFv.s"
}
#pragma pop


/* 80264B60-80264B80 0020+00 s=0 e=1 z=0  None .text      Dt__4cCcSFv                                                  */
//	80264B6C: 80264A94 (Ct__4cCcSFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void cCcS::Dt() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_s/Dt__4cCcSFv.s"
}
#pragma pop


/* 80264B80-80264BA8 0028+00 s=1 e=0 z=0  None .text      GetWt__4cCcSCFUc                                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  u8 False
asm void cCcS::GetWt(u8 param_0) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_s/GetWt__4cCcSCFUc.s"
}
#pragma pop


/* 80264BA8-80264C5C 00B4+00 s=0 e=7 z=454  None .text      Set__4cCcSFP8cCcD_Obj                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
asm void cCcS::Set(cCcD_Obj* param_0) {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_s/Set__4cCcSFP8cCcD_Obj.s"
}
#pragma pop


/* 80264C5C-80264CF0 0094+00 s=1 e=0 z=0  None .text      ClrCoHitInf__4cCcSFv                                         */
//	80264CB8: 8026395C (ClrCcMove__9cCcD_SttsFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void cCcS::ClrCoHitInf() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_s/ClrCoHitInf__4cCcSFv.s"
}
#pragma pop


/* 80264CF0-80264D90 00A0+00 s=1 e=0 z=0  None .text      ClrTgHitInf__4cCcSFv                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void cCcS::ClrTgHitInf() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_s/ClrTgHitInf__4cCcSFv.s"
}
#pragma pop


/* 80264D90-80264E2C 009C+00 s=1 e=0 z=0  None .text      ClrAtHitInf__4cCcSFv                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void cCcS::ClrAtHitInf() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_s/ClrAtHitInf__4cCcSFv.s"
}
#pragma pop


/* 80264E2C-80264F40 0114+00 s=1 e=0 z=0  None .text      ChkNoHitAtTg__4cCcSFP8cCcD_ObjP8cCcD_Obj                     */
//	80264E3C: 803621D4 (_savegpr_27)
//	80264E50: 80263A48 (GetAc__8cCcD_ObjFv)
//	80264E5C: 80263A48 (GetAc__8cCcD_ObjFv)
//	80264F2C: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_Obj* False
// 	 cCcD_Obj False
asm void cCcS::ChkNoHitAtTg(cCcD_Obj* param_0, cCcD_Obj* param_1) {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_s/ChkNoHitAtTg__4cCcSFP8cCcD_ObjP8cCcD_Obj.s"
}
#pragma pop


/* ############################################################################################## */
/* 80430CC0-80430CCC 000C+00 s=1 e=0 z=0  None .bss       @2492                                                        */
static u8 lit_2492[12];

/* 80430CCC-80430CD8 000C+00 s=1 e=0 z=0  None .bss       cross$2491                                                   */
static u8 cross[12];

/* 80455038-8045503C 0004+00 s=2 e=0 z=0  None .sdata2    @2532                                                        */
SECTION_SDATA2 static u8 lit_2532[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 80264F40-8026515C 021C+00 s=1 e=0 z=0  None .text      ChkAtTg__4cCcSFv                                             */
//	80264F50: 803621CC (_savegpr_25)
//	80264F68: 80264D90 (ClrAtHitInf__4cCcSFv)
//	80264F70: 80264CF0 (ClrTgHitInf__4cCcSFv)
//	80264F78: 80430CCC (cross)
//	80264F7C: 80430CCC (cross)
//	80264FDC: 80263368 (Chk__15cCcD_DivideInfoCFRC15cCcD_DivideInfo)
//	80264FF4: 80264E2C (ChkNoHitAtTg__4cCcSFP8cCcD_ObjP8cCcD_Obj)
//	80265018: 80451158 (data_80451158)
//	80265024: 80430CCC (cross)
//	80265028: 80430CCC (cross)
//	8026502C: 80009184 (__dt__4cXyzFv)
//	80265030: 80009184 (__dt__4cXyzFv)
//	80265034: 80430CC0 (lit_2492)
//	80265038: 80430CC0 (lit_2492)
//	8026503C: 80361C24 (__register_global_object)
//	80265044: 80451158 (data_80451158)
//	80265050: 80430CCC (cross)
//	80265054: 80430CCC (cross)
//	802650A8: 80430CCC (cross)
//	802650AC: 80430CCC (cross)
//	802650B0: 802653C8 (SetAtTgCommonHitInf__4cCcSFP8cCcD_ObjP8cCcD_ObjP4cXyz)
//	802650E4: 80455038 (lit_2532)
//	802650E8: 80430CCC (cross)
//	802650EC: 80430CCC (cross)
//	802650FC: 80430CCC (cross)
//	80265100: 80430CCC (cross)
//	80265104: 8026EE24 (CalcCenter__8cM3dGAabCFP4cXyz)
//	80265114: 80430CCC (cross)
//	80265118: 80430CCC (cross)
//	8026511C: 802653C8 (SetAtTgCommonHitInf__4cCcSFP8cCcD_ObjP8cCcD_ObjP4cXyz)
//	80265148: 80362218 (_restgpr_25)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void cCcS::ChkAtTg() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_s/ChkAtTg__4cCcSFv.s"
}
#pragma pop


/* 8026515C-80265230 00D4+00 s=1 e=0 z=0  None .text      ChkNoHitCo__4cCcSFP8cCcD_ObjP8cCcD_Obj                       */
//	8026516C: 803621D8 (_savegpr_28)
//	80265180: 80263A48 (GetAc__8cCcD_ObjFv)
//	8026518C: 80263A48 (GetAc__8cCcD_ObjFv)
//	8026521C: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_Obj* False
// 	 cCcD_Obj False
asm void cCcS::ChkNoHitCo(cCcD_Obj* param_0, cCcD_Obj* param_1) {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_s/ChkNoHitCo__4cCcSFP8cCcD_ObjP8cCcD_Obj.s"
}
#pragma pop


/* 80265230-802653A0 0170+00 s=1 e=0 z=0  None .text      ChkCo__4cCcSFv                                               */
//	80265240: 803621CC (_savegpr_25)
//	80265248: 80264C5C (ClrCoHitInf__4cCcSFv)
//	802652C8: 80263368 (Chk__15cCcD_DivideInfoCFRC15cCcD_DivideInfo)
//	802652E0: 8026515C (ChkNoHitCo__4cCcSFP8cCcD_ObjP8cCcD_Obj)
//	8026536C: 802655E4 (SetCoCommonHitInf__4cCcSFP8cCcD_ObjP4cXyzP8cCcD_ObjP4cXyzf)
//	8026538C: 80362218 (_restgpr_25)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void cCcS::ChkCo() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_s/ChkCo__4cCcSFv.s"
}
#pragma pop


/* 802653A0-802653C8 0028+00 s=1 e=0 z=0  None .text      CalcTgPlusDmg__4cCcSFP8cCcD_ObjP8cCcD_ObjP9cCcD_SttsP9cCcD_Stts */
//	802653B4: 80263970 (PlusDmg__9cCcD_SttsFi)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_Stts* False
// 	 cCcD_Stts False
//  cCcD_Stts* False
// 	 cCcD_Stts False
asm void cCcS::CalcTgPlusDmg(cCcD_Obj* param_0, cCcD_Obj* param_1, cCcD_Stts* param_2, cCcD_Stts* param_3) {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_s/CalcTgPlusDmg__4cCcSFP8cCcD_ObjP8cCcD_ObjP9cCcD_SttsP9cCcD_Stts.s"
}
#pragma pop


/* 802653C8-802655E4 021C+00 s=1 e=0 z=0  None .text      SetAtTgCommonHitInf__4cCcSFP8cCcD_ObjP8cCcD_ObjP4cXyz        */
//	802653D8: 803621BC (_savegpr_21)
//	802654B8: 8026483C (SetHit__10cCcD_ObjAtFP8cCcD_Obj)
//	802654FC: 802648C8 (SetHit__10cCcD_ObjTgFP8cCcD_Obj)
//	802655D0: 80362208 (_restgpr_21)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cXyz* False
// 	 cXyz False
asm void cCcS::SetAtTgCommonHitInf(cCcD_Obj* param_0, cCcD_Obj* param_1, cXyz* param_2) {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_s/SetAtTgCommonHitInf__4cCcSFP8cCcD_ObjP8cCcD_ObjP4cXyz.s"
}
#pragma pop


/* 802655E4-80265750 016C+00 s=1 e=0 z=0  None .text      SetCoCommonHitInf__4cCcSFP8cCcD_ObjP4cXyzP8cCcD_ObjP4cXyzf   */
//	802655F8: 803621C0 (_savegpr_22)
//	8026564C: 802648D8 (SetHit__10cCcD_ObjCoFP8cCcD_Obj)
//	80265660: 802648D8 (SetHit__10cCcD_ObjCoFP8cCcD_Obj)
//	8026573C: 8036220C (_restgpr_22)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cXyz* False
// 	 cXyz False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cXyz* False
// 	 cXyz False
//  f32 False
asm void cCcS::SetCoCommonHitInf(cCcD_Obj* param_0, cXyz* param_1, cCcD_Obj* param_2, cXyz* param_3, f32 param_4) {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_s/SetCoCommonHitInf__4cCcSFP8cCcD_ObjP4cXyzP8cCcD_ObjP4cXyzf.s"
}
#pragma pop


/* ############################################################################################## */
/* 8045503C-80455040 0004+00 s=1 e=0 z=0  None .sdata2    @2759                                                        */
SECTION_SDATA2 static f32 lit_2759 = 1.0f / 125.0f;

/* 80455040-80455044 0004+00 s=1 e=0 z=0  None .sdata2    @2760                                                        */
SECTION_SDATA2 static f32 lit_2760 = 1.0f;

/* 80455044-80455048 0004+00 s=1 e=0 z=0  None .sdata2    @2761                                                        */
SECTION_SDATA2 static f32 lit_2761 = 2.0f;

/* 80455048-80455050 0004+04 s=1 e=0 z=0  None .sdata2    @2762                                                        */
SECTION_SDATA2 static f32 lit_2762[1 + 1 /* padding */] = {
	0.5f,
	/* padding */
	0.0f,
};

/* 80455050-80455058 0008+00 s=1 e=0 z=0  None .sdata2    @2763                                                        */
SECTION_SDATA2 static f64 lit_2763 = 0.5;

/* 80455058-80455060 0008+00 s=1 e=0 z=0  None .sdata2    @2764                                                        */
SECTION_SDATA2 static f64 lit_2764 = 3.0;

/* 80455060-80455068 0008+00 s=1 e=0 z=0  None .sdata2    @2765                                                        */
SECTION_SDATA2 static u8 lit_2765[8] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 80455068-80455070 0004+04 s=1 e=0 z=0  None .sdata2    @2766                                                        */
SECTION_SDATA2 static f32 lit_2766[1 + 1 /* padding */] = {
	-1.0f,
	/* padding */
	0.0f,
};

/* 80265750-80265BB4 0464+00 s=1 e=0 z=0  None .text      SetPosCorrect__4cCcSFP8cCcD_ObjP4cXyzP8cCcD_ObjP4cXyzf       */
//	80265778: 803621CC (_savegpr_25)
//	802657EC: 8045503C (lit_2759)
//	80265840: 80264B80 (GetWt__4cCcSCFUc)
//	80265854: 80264B80 (GetWt__4cCcSCFUc)
//	80265860: 80263984 (GetWeightF__9cCcD_SttsCFv)
//	8026586C: 80263984 (GetWeightF__9cCcD_SttsCFv)
//	8026587C: 80451180 (G_CM3D_F_ABS_MIN)
//	80265888: 80455040 (lit_2760)
//	80265890: 80455044 (lit_2761)
//	80265894: 80455040 (lit_2760)
//	802658AC: 80455038 (lit_2532)
//	802658CC: 80455038 (lit_2532)
//	802658DC: 80455048 (lit_2762)
//	802658E8: 80455038 (lit_2532)
//	8026590C: 80455038 (lit_2532)
//	80265924: 803470B4 (PSVECSubtract)
//	8026592C: 80347150 (PSVECMag)
//	80265944: 80455038 (lit_2532)
//	80265974: 80455050 (lit_2763)
//	8026597C: 80455058 (lit_2764)
//	802659C4: 80455060 (lit_2765)
//	802659D0: 80450AE0 (__float_nan)
//	802659D4: 80450AE0 (__float_nan)
//	80265A40: 80450AE0 (__float_nan)
//	80265A44: 80450AE0 (__float_nan)
//	80265A50: 80451180 (G_CM3D_F_ABS_MIN)
//	80265A70: 803470D8 (PSVECScale)
//	80265A74: 80455068 (lit_2766)
//	80265A88: 803470D8 (PSVECScale)
//	80265A98: 803470D8 (PSVECScale)
//	80265AC8: 80455038 (lit_2532)
//	80265AF4: 80455038 (lit_2532)
//	80265B4C: 80263934 (PlusCcMove__9cCcD_SttsFfff)
//	80265B60: 80263934 (PlusCcMove__9cCcD_SttsFfff)
//	80265B70: 80347090 (PSVECAdd)
//	80265B80: 80347090 (PSVECAdd)
//	80265BA0: 80362218 (_restgpr_25)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cXyz* False
// 	 cXyz False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cXyz* False
// 	 cXyz False
//  f32 False
asm void cCcS::SetPosCorrect(cCcD_Obj* param_0, cXyz* param_1, cCcD_Obj* param_2, cXyz* param_3, f32 param_4) {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_s/SetPosCorrect__4cCcSFP8cCcD_ObjP4cXyzP8cCcD_ObjP4cXyzf.s"
}
#pragma pop


/* 80265BB4-80265CCC 0118+00 s=1 e=0 z=0  None .text      CalcArea__4cCcSFv                                            */
//	80265BC4: 803621DC (_savegpr_29)
//	80265BCC: 803A7218 (__vt__8cM3dGAab)
//	80265BD0: 803A7218 (__vt__8cM3dGAab)
//	80265BDC: 8026ECF8 (ClearForMinMax__8cM3dGAabFv)
//	80265C20: 8026ED60 (SetMinMax__8cM3dGAabFRC8cM3dGAab)
//	80265C48: 802633A8 (SetArea__15cCcD_DivideAreaFRC8cM3dGAab)
//	80265C88: 802634D4 (CalcDivideInfo__15cCcD_DivideAreaFP15cCcD_DivideInfoRC8cM3dGAabUl)
//	80265CA8: 803A7218 (__vt__8cM3dGAab)
//	80265CAC: 803A7218 (__vt__8cM3dGAab)
//	80265CB8: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void cCcS::CalcArea() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_s/CalcArea__4cCcSFv.s"
}
#pragma pop


/* 80265CCC-80265D30 0064+00 s=0 e=1 z=0  None .text      Move__4cCcSFv                                                */
//	80265CE0: 80265BB4 (CalcArea__4cCcSFv)
//	80265CE8: 80264F40 (ChkAtTg__4cCcSFv)
//	80265CF0: 80265230 (ChkCo__4cCcSFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void cCcS::Move() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_s/Move__4cCcSFv.s"
}
#pragma pop


/* 80265D30-80265DF4 00C4+00 s=0 e=1 z=0  None .text      DrawClear__4cCcSFv                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void cCcS::DrawClear() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_s/DrawClear__4cCcSFv.s"
}
#pragma pop


/* 80265DF4-80265DF8 0004+00 s=1 e=1 z=0  None .text      SetCoGCorrectProc__4cCcSFP8cCcD_ObjP8cCcD_Obj                */
// False False
//  void False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_Obj* False
// 	 cCcD_Obj False
void cCcS::SetCoGCorrectProc(cCcD_Obj* param_0, cCcD_Obj* param_1) {
	/* empty function */
}


/* 80265DF8-80265DFC 0004+00 s=1 e=0 z=0  None .text      SetCoGObjInf__4cCcSFbbP12cCcD_GObjInfP12cCcD_GObjInfP9cCcD_SttsP9cCcD_SttsP10cCcD_GSttsP10cCcD_GStts */
// True False
//  void False
//  bool False
//  bool False
//  cCcD_GObjInf* False
// 	 cCcD_GObjInf False
//  cCcD_GObjInf* False
// 	 cCcD_GObjInf False
//  cCcD_Stts* False
// 	 cCcD_Stts False
//  cCcD_Stts* False
// 	 cCcD_Stts False
//  cCcD_GStts* False
// 	 cCcD_GStts False
//  cCcD_GStts* False
// 	 cCcD_GStts False
void cCcS::SetCoGObjInf(bool param_0, bool param_1, cCcD_GObjInf* param_2, cCcD_GObjInf* param_3, cCcD_Stts* param_4, cCcD_Stts* param_5, cCcD_GStts* param_6, cCcD_GStts* param_7) {
	/* empty function */
}


/* 80265DFC-80265E00 0004+00 s=1 e=0 z=0  None .text      SetAtTgGObjInf__4cCcSFbbP8cCcD_ObjP8cCcD_ObjP12cCcD_GObjInfP12cCcD_GObjInfP9cCcD_SttsP9cCcD_SttsP10cCcD_GSttsP10cCcD_GSttsP4cXyz */
// True False
//  void False
//  bool False
//  bool False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_GObjInf* False
// 	 cCcD_GObjInf False
//  cCcD_GObjInf* False
// 	 cCcD_GObjInf False
//  cCcD_Stts* False
// 	 cCcD_Stts False
//  cCcD_Stts* False
// 	 cCcD_Stts False
//  cCcD_GStts* False
// 	 cCcD_GStts False
//  cCcD_GStts* False
// 	 cCcD_GStts False
//  cXyz* False
// 	 cXyz False
void cCcS::SetAtTgGObjInf(bool param_0, bool param_1, cCcD_Obj* param_2, cCcD_Obj* param_3, cCcD_GObjInf* param_4, cCcD_GObjInf* param_5, cCcD_Stts* param_6, cCcD_Stts* param_7, cCcD_GStts* param_8, cCcD_GStts* param_9, cXyz* param_10) {
	/* empty function */
}


/* 80265E00-80265E08 0008+00 s=1 e=0 z=0  None .text      ChkNoHitGAtTg__4cCcSFPC12cCcD_GObjInfPC12cCcD_GObjInfP10cCcD_GSttsP10cCcD_GStts */
// True False
//  bool False
//  cCcD_GObjInf const* False
// 	 cCcD_GObjInf const False
// 		 cCcD_GObjInf False
//  cCcD_GObjInf const* False
// 	 cCcD_GObjInf const False
// 		 cCcD_GObjInf False
//  cCcD_GStts* False
// 	 cCcD_GStts False
//  cCcD_GStts* False
// 	 cCcD_GStts False
bool cCcS::ChkNoHitGAtTg(cCcD_GObjInf const* param_0, cCcD_GObjInf const* param_1, cCcD_GStts* param_2, cCcD_GStts* param_3) {
	return false;
}


/* 80265E08-80265E10 0008+00 s=1 e=0 z=0  None .text      ChkAtTgHitAfterCross__4cCcSFbbPC12cCcD_GObjInfPC12cCcD_GObjInfP9cCcD_SttsP9cCcD_SttsP10cCcD_GSttsP10cCcD_GStts */
// True False
//  bool False
//  bool False
//  bool False
//  cCcD_GObjInf const* False
// 	 cCcD_GObjInf const False
// 		 cCcD_GObjInf False
//  cCcD_GObjInf const* False
// 	 cCcD_GObjInf const False
// 		 cCcD_GObjInf False
//  cCcD_Stts* False
// 	 cCcD_Stts False
//  cCcD_Stts* False
// 	 cCcD_Stts False
//  cCcD_GStts* False
// 	 cCcD_GStts False
//  cCcD_GStts* False
// 	 cCcD_GStts False
bool cCcS::ChkAtTgHitAfterCross(bool param_0, bool param_1, cCcD_GObjInf const* param_2, cCcD_GObjInf const* param_3, cCcD_Stts* param_4, cCcD_Stts* param_5, cCcD_GStts* param_6, cCcD_GStts* param_7) {
	return false;
}


/* 80265E10-80265E18 0008+00 s=1 e=0 z=0  None .text      ChkNoHitGCo__4cCcSFP8cCcD_ObjP8cCcD_Obj                      */
// True False
//  bool False
//  cCcD_Obj* False
// 	 cCcD_Obj False
//  cCcD_Obj* False
// 	 cCcD_Obj False
bool cCcS::ChkNoHitGCo(cCcD_Obj* param_0, cCcD_Obj* param_1) {
	return false;
}


/* 80265E18-80265E1C 0004+00 s=1 e=0 z=0  None .text      MoveAfterCheck__4cCcSFv                                      */
// True False
//  void False
void cCcS::MoveAfterCheck() {
	/* empty function */
}


