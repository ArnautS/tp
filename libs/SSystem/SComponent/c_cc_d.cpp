// 
// Generated By: dol2asm
// Translation Unit: c_cc_d
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "SSystem/SComponent/c_cc_d.h"

// 
// Types:
// 

struct cXyz {
	/* 80009184 */ // False False
~cXyz();
};

struct Vec {
};

struct cM3dGCyl;
struct cM3dGSph {
	/* 8026F710 */ // False False
//  cM3dGSph const* False
// 	 cM3dGSph const False
// 		 cM3dGSph False
//  cXyz* False
// 	 cXyz False
void cross(cM3dGSph const*, cXyz*) const;
	/* 8026F73C */ // False False
//  cM3dGCyl const* False
// 	 cM3dGCyl const False
// 		 cM3dGCyl False
//  cXyz* False
// 	 cXyz False
void cross(cM3dGCyl const*, cXyz*) const;
};

struct cM3dGCyl {
	/* 8026F208 */ // False False
//  cM3dGSph const* False
// 	 cM3dGSph const False
// 		 cM3dGSph False
//  cXyz* False
// 	 cXyz False
void cross(cM3dGSph const*, cXyz*) const;
	/* 8026F22C */ // False False
//  cM3dGCyl const* False
// 	 cM3dGCyl const False
// 		 cM3dGCyl False
//  cXyz* False
// 	 cXyz False
void cross(cM3dGCyl const*, cXyz*) const;
};

struct cM3dGTri {
	/* 8026F7B0 */ // False False
//  cM3dGCyl const* False
// 	 cM3dGCyl const False
// 		 cM3dGCyl False
//  Vec* False
// 	 Vec False
void cross(cM3dGCyl const*, Vec*) const;
};

struct cM3dGCps {
};

struct cM3dGAab {
	/* 8026EC54 */ // False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
void Set(cXyz const*, cXyz const*);
	/* 8026ECF8 */ // False False
void ClearForMinMax();
	/* 8026ED1C */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
void SetMinMax(cXyz const&);
	/* 8026EE68 */ // False False
//  f32 False
void PlusR(f32);
};

struct cCcD_ShapeAttr {
	struct Shape {
	};

	/* 80084E38 */ // False False
void GetCoCP() const;
	/* 80084E2C */ // False False
void GetCoCP();
	/* 8008556C */ // False False
~cCcD_ShapeAttr();
	/* 80263A64 */ // False False
//  cCcD_ShapeAttr::Shape* False
// 	 cCcD_ShapeAttr::Shape False
void getShapeAccess(cCcD_ShapeAttr::Shape*) const;
	/* 802649D8 */ // True False
//  bool False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  cXyz* False
// 	 cXyz False
bool CrossAtTg(cCcD_ShapeAttr const&, cXyz*) const;
	/* 802649E0 */ // True False
//  bool False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_ShapeAttr const&, f32*) const;
};

struct cCcD_SphAttr;
struct cCcD_TriAttr;
struct cCcD_PntAttr {
};

struct cCcD_AabAttr {
};

struct cCcD_CylAttr;
struct cCcD_CpsAttr {
	/* 80263DC0 */ // False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_SphAttr const&, cXyz*) const;
	/* 80263E04 */ // False False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_TriAttr const&, cXyz*) const;
	/* 80084FE4 */ // False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_ShapeAttr const&, cXyz*) const;
	/* 80084FDC */ // False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  cXyz* False
// 	 cXyz False
bool CrossAtTg(cCcD_PntAttr const&, cXyz*) const;
	/* 80084FD4 */ // False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  cXyz* False
// 	 cXyz False
bool CrossAtTg(cCcD_AabAttr const&, cXyz*) const;
	/* 80263D38 */ // False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_CpsAttr const&, cXyz*) const;
	/* 80263D7C */ // False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_CylAttr const&, cXyz*) const;
	/* 80263F24 */ // False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_CylAttr const&, f32*) const;
	/* 80085024 */ // False False
//  bool False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_TriAttr const&, f32*) const;
	/* 8008502C */ // False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_PntAttr const&, f32*) const;
	/* 8008501C */ // False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_AabAttr const&, f32*) const;
	/* 80263ED4 */ // False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_CpsAttr const&, f32*) const;
	/* 80263F74 */ // False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_SphAttr const&, f32*) const;
	/* 80085034 */ // False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_ShapeAttr const&, f32*) const;
	/* 80085450 */ // False False
~cCcD_CpsAttr();
	/* 80263FC4 */ // False False
void CalcAabBox();
	/* 80264014 */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  cXyz* False
// 	 cXyz False
void GetNVec(cXyz const&, cXyz*) const;
};

struct cCcD_CylAttr {
	/* 80084CC0 */ // False False
void GetCoCP() const;
	/* 80037A4C */ // False False
void GetCoCP();
	/* 8026420C */ // False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_SphAttr const&, cXyz*) const;
	/* 802641C8 */ // False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_CylAttr const&, cXyz*) const;
	/* 80084CC8 */ // False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  cXyz* False
// 	 cXyz False
bool CrossAtTg(cCcD_AabAttr const&, cXyz*) const;
	/* 80264250 */ // False False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_TriAttr const&, cXyz*) const;
	/* 80084CD0 */ // False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  cXyz* False
// 	 cXyz False
bool CrossAtTg(cCcD_PntAttr const&, cXyz*) const;
	/* 80084CD8 */ // False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_ShapeAttr const&, cXyz*) const;
	/* 8026417C */ // False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_CpsAttr const&, cXyz*) const;
	/* 80264288 */ // False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_CylAttr const&, f32*) const;
	/* 80264310 */ // False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_CpsAttr const&, f32*) const;
	/* 80084D10 */ // False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_AabAttr const&, f32*) const;
	/* 80084D18 */ // False False
//  bool False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_TriAttr const&, f32*) const;
	/* 80084D20 */ // False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_PntAttr const&, f32*) const;
	/* 80084D28 */ // False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_ShapeAttr const&, f32*) const;
	/* 802642CC */ // False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_SphAttr const&, f32*) const;
	/* 800854E0 */ // False False
~cCcD_CylAttr();
	/* 80264368 */ // False False
void CalcAabBox();
	/* 802643D0 */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  cXyz* False
// 	 cXyz False
void GetNVec(cXyz const&, cXyz*) const;
	/* 802644B8 */ // False False
//  cCcD_ShapeAttr::Shape* False
// 	 cCcD_ShapeAttr::Shape False
void getShapeAccess(cCcD_ShapeAttr::Shape*) const;
};

struct cCcD_SphAttr {
	/* 80084B44 */ // False False
void GetCoCP() const;
	/* 80037A54 */ // False False
void GetCoCP();
	/* 80264538 */ // False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_CylAttr const&, cXyz*) const;
	/* 802645C0 */ // False False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_TriAttr const&, cXyz*) const;
	/* 80084B4C */ // False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  cXyz* False
// 	 cXyz False
bool CrossAtTg(cCcD_AabAttr const&, cXyz*) const;
	/* 80084B54 */ // False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  cXyz* False
// 	 cXyz False
bool CrossAtTg(cCcD_PntAttr const&, cXyz*) const;
	/* 80084B5C */ // False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_ShapeAttr const&, cXyz*) const;
	/* 802644EC */ // False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_CpsAttr const&, cXyz*) const;
	/* 8026457C */ // False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_SphAttr const&, cXyz*) const;
	/* 80264688 */ // False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_CpsAttr const&, f32*) const;
	/* 80084B94 */ // False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_AabAttr const&, f32*) const;
	/* 80084B9C */ // False False
//  bool False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_TriAttr const&, f32*) const;
	/* 80084BA4 */ // False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_PntAttr const&, f32*) const;
	/* 80084BAC */ // False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_ShapeAttr const&, f32*) const;
	/* 80264644 */ // False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_SphAttr const&, f32*) const;
	/* 802645F8 */ // False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_CylAttr const&, f32*) const;
	/* 8008721C */ // False False
~cCcD_SphAttr();
	/* 802646E0 */ // False False
void CalcAabBox();
	/* 8026476C */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  cXyz* False
// 	 cXyz False
void GetNVec(cXyz const&, cXyz*) const;
	/* 80264808 */ // False False
//  cCcD_ShapeAttr::Shape* False
// 	 cCcD_ShapeAttr::Shape False
void getShapeAccess(cCcD_ShapeAttr::Shape*) const;
};

struct cCcD_TriAttr {
	/* 80084E44 */ // False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  cXyz* False
// 	 cXyz False
bool CrossAtTg(cCcD_AabAttr const&, cXyz*) const;
	/* 80263A88 */ // False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_CpsAttr const&, cXyz*) const;
	/* 80263BCC */ // False False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_TriAttr const&, cXyz*) const;
	/* 80084E4C */ // False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  cXyz* False
// 	 cXyz False
bool CrossAtTg(cCcD_PntAttr const&, cXyz*) const;
	/* 80263B90 */ // False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_SphAttr const&, cXyz*) const;
	/* 80084E54 */ // False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_ShapeAttr const&, cXyz*) const;
	/* 80263B58 */ // False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  cXyz* False
// 	 cXyz False
void CrossAtTg(cCcD_CylAttr const&, cXyz*) const;
	/* 80084E9C */ // False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_AabAttr const&, f32*) const;
	/* 80084EBC */ // False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  f32* False
// 	 f32 False
void CrossCo(cCcD_ShapeAttr const&, f32*) const;
	/* 80084EA4 */ // False False
//  bool False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_TriAttr const&, f32*) const;
	/* 80084E8C */ // False False
//  bool False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_SphAttr const&, f32*) const;
	/* 80084EAC */ // False False
//  bool False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_CpsAttr const&, f32*) const;
	/* 80084E94 */ // False False
//  bool False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_CylAttr const&, f32*) const;
	/* 80084EB4 */ // False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  f32* False
// 	 f32 False
bool CrossCo(cCcD_PntAttr const&, f32*) const;
	/* 80263C04 */ // False False
void CalcAabBox();
	/* 80263C9C */ // False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  cXyz* False
// 	 cXyz False
void GetNVec(cXyz const&, cXyz*) const;
	/* 80264938 */ // True False
~cCcD_TriAttr();
};

struct cCcD_Stts {
	/* 801410A4 */ // False False
~cCcD_Stts();
	/* 80263894 */ // False False
//  bool False
bool GetGStts() const;
	/* 8026389C */ // True False
//  bool False
bool GetGStts();
	/* 802638A4 */ // False False
//  int False
//  int False
//  void* False
// 	 void False
//  unsigned int False
void Init(int, int, void*, unsigned int);
	/* 80263904 */ // False False
void Ct();
	/* 80263934 */ // False False
//  f32 False
//  f32 False
//  f32 False
void PlusCcMove(f32, f32, f32);
	/* 8026395C */ // False False
void ClrCcMove();
	/* 80263970 */ // False False
//  int False
void PlusDmg(int);
	/* 80263984 */ // False False
void GetWeightF() const;
	/* 802649E8 */ // True False
//  void False
void ClrAt();
	/* 802649EC */ // True False
void ClrTg();
};

struct cCcD_SrcObjTg {
};

struct cCcD_SrcObjHitInf {
};

struct cCcD_SrcObjAt {
};

struct cCcD_SrcObj {
};

struct cCcD_Obj {
	/* 80263A10 */ // False False
void ct();
	/* 80263A1C */ // False False
//  cCcD_SrcObj const& False
// 	 cCcD_SrcObj const False
// 		 cCcD_SrcObj False
void Set(cCcD_SrcObj const&);
	/* 80263A48 */ // False False
void GetAc();
};

struct cCcD_ObjTg {
	/* 80264880 */ // True False
//  cCcD_SrcObjTg const& False
// 	 cCcD_SrcObjTg const False
// 		 cCcD_SrcObjTg False
void Set(cCcD_SrcObjTg const&);
	/* 80264894 */ // False False
//  u32 False
void SetGrp(u32);
	/* 802648B0 */ // False False
void ClrHit();
	/* 802648C8 */ // False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
void SetHit(cCcD_Obj*);
};

struct cCcD_ObjHitInf {
	/* 802639C4 */ // True False
//  cCcD_SrcObjHitInf const& False
// 	 cCcD_SrcObjHitInf const False
// 		 cCcD_SrcObjHitInf False
void Set(cCcD_SrcObjHitInf const&);
};

struct cCcD_ObjCommonBase {
	/* 802639B0 */ // False False
void ct();
};

struct cCcD_ObjCo {
	/* 802648D8 */ // False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
void SetHit(cCcD_Obj*);
	/* 802648E8 */ // False False
void ClrHit();
	/* 80264900 */ // False False
//  u32 False
void SetIGrp(u32);
	/* 8026491C */ // False False
//  u32 False
void SetVsGrp(u32);
};

struct cCcD_ObjAt {
	/* 8026483C */ // False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
void SetHit(cCcD_Obj*);
	/* 8026484C */ // True False
//  cCcD_SrcObjAt const& False
// 	 cCcD_SrcObjAt const False
// 		 cCcD_SrcObjAt False
void Set(cCcD_SrcObjAt const&);
	/* 80264868 */ // False False
void ClrHit();
};

struct cCcD_DivideInfo {
	/* 80263358 */ // False False
//  u32 False
//  u32 False
//  u32 False
void Set(u32, u32, u32);
	/* 80263368 */ // False False
//  cCcD_DivideInfo const& False
// 	 cCcD_DivideInfo const False
// 		 cCcD_DivideInfo False
void Chk(cCcD_DivideInfo const&) const;
};

struct cCcD_DivideArea {
	/* 802633A8 */ // False False
//  cM3dGAab const& False
// 	 cM3dGAab const False
// 		 cM3dGAab False
void SetArea(cM3dGAab const&);
	/* 802634D4 */ // False False
//  cCcD_DivideInfo* False
// 	 cCcD_DivideInfo False
//  cM3dGAab const& False
// 	 cM3dGAab const False
// 		 cM3dGAab False
//  u32 False
void CalcDivideInfo(cCcD_DivideInfo*, cM3dGAab const&, u32);
	/* 802636A0 */ // False False
//  cCcD_DivideInfo* False
// 	 cCcD_DivideInfo False
//  cM3dGAab const& False
// 	 cM3dGAab const False
// 		 cM3dGAab False
void CalcDivideInfoOverArea(cCcD_DivideInfo*, cM3dGAab const&);
};

// 
// Forward References:
// 


// False False
//  u32 False
//  u32 False
//  u32 False
extern "C" void Set__15cCcD_DivideInfoFUlUlUl();
// False False
//  cCcD_DivideInfo const& False
// 	 cCcD_DivideInfo const False
// 		 cCcD_DivideInfo False
extern "C" void Chk__15cCcD_DivideInfoCFRC15cCcD_DivideInfo();
// False False
//  cM3dGAab const& False
// 	 cM3dGAab const False
// 		 cM3dGAab False
extern "C" void SetArea__15cCcD_DivideAreaFRC8cM3dGAab();
// False False
//  cCcD_DivideInfo* False
// 	 cCcD_DivideInfo False
//  cM3dGAab const& False
// 	 cM3dGAab const False
// 		 cM3dGAab False
//  u32 False
extern "C" void CalcDivideInfo__15cCcD_DivideAreaFP15cCcD_DivideInfoRC8cM3dGAabUl();
// False False
//  cCcD_DivideInfo* False
// 	 cCcD_DivideInfo False
//  cM3dGAab const& False
// 	 cM3dGAab const False
// 		 cM3dGAab False
extern "C" void CalcDivideInfoOverArea__15cCcD_DivideAreaFP15cCcD_DivideInfoRC8cM3dGAab();
// False False
//  bool False
extern "C" bool GetGStts__9cCcD_SttsCFv();
// True False
//  bool False
extern "C" bool GetGStts__9cCcD_SttsFv();
// False False
//  int False
//  int False
//  void* False
// 	 void False
//  unsigned int False
extern "C" void Init__9cCcD_SttsFiiPvUi();
// False False
extern "C" void Ct__9cCcD_SttsFv();
// False False
//  f32 False
//  f32 False
//  f32 False
extern "C" void PlusCcMove__9cCcD_SttsFfff();
// False False
extern "C" void ClrCcMove__9cCcD_SttsFv();
// False False
//  int False
extern "C" void PlusDmg__9cCcD_SttsFi();
// False False
extern "C" void GetWeightF__9cCcD_SttsCFv();
// False False
extern "C" void ct__18cCcD_ObjCommonBaseFv();
// True False
//  cCcD_SrcObjHitInf const& False
// 	 cCcD_SrcObjHitInf const False
// 		 cCcD_SrcObjHitInf False
extern "C" void Set__14cCcD_ObjHitInfFRC17cCcD_SrcObjHitInf();
// False False
extern "C" void ct__8cCcD_ObjFv();
// False False
//  cCcD_SrcObj const& False
// 	 cCcD_SrcObj const False
// 		 cCcD_SrcObj False
extern "C" void Set__8cCcD_ObjFRC11cCcD_SrcObj();
// False False
extern "C" void GetAc__8cCcD_ObjFv();
// False False
//  cCcD_ShapeAttr::Shape* False
// 	 cCcD_ShapeAttr::Shape False
extern "C" void getShapeAccess__14cCcD_ShapeAttrCFPQ214cCcD_ShapeAttr5Shape();
// False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_TriAttrCFRC12cCcD_CpsAttrP4cXyz();
// False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_TriAttrCFRC12cCcD_CylAttrP4cXyz();
// False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_TriAttrCFRC12cCcD_SphAttrP4cXyz();
// False False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_TriAttrCFRC12cCcD_TriAttrP4cXyz();
// False False
extern "C" void CalcAabBox__12cCcD_TriAttrFv();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  cXyz* False
// 	 cXyz False
extern "C" void GetNVec__12cCcD_TriAttrCFRC4cXyzP4cXyz();
// False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_CpsAttrP4cXyz();
// False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_CylAttrP4cXyz();
// False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_SphAttrP4cXyz();
// False False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_TriAttrP4cXyz();
// False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_CpsAttrCFRC12cCcD_CpsAttrPf();
// False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_CpsAttrCFRC12cCcD_CylAttrPf();
// False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_CpsAttrCFRC12cCcD_SphAttrPf();
// False False
extern "C" void CalcAabBox__12cCcD_CpsAttrFv();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  cXyz* False
// 	 cXyz False
extern "C" void GetNVec__12cCcD_CpsAttrCFRC4cXyzP4cXyz();
// False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_CylAttrCFRC12cCcD_CpsAttrP4cXyz();
// False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_CylAttrCFRC12cCcD_CylAttrP4cXyz();
// False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_CylAttrCFRC12cCcD_SphAttrP4cXyz();
// False False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_CylAttrCFRC12cCcD_TriAttrP4cXyz();
// False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_CylAttrCFRC12cCcD_CylAttrPf();
// False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_CylAttrCFRC12cCcD_SphAttrPf();
// False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_CylAttrCFRC12cCcD_CpsAttrPf();
// False False
extern "C" void CalcAabBox__12cCcD_CylAttrFv();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  cXyz* False
// 	 cXyz False
extern "C" void GetNVec__12cCcD_CylAttrCFRC4cXyzP4cXyz();
// False False
//  cCcD_ShapeAttr::Shape* False
// 	 cCcD_ShapeAttr::Shape False
extern "C" void getShapeAccess__12cCcD_CylAttrCFPQ214cCcD_ShapeAttr5Shape();
// False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_SphAttrCFRC12cCcD_CpsAttrP4cXyz();
// False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_SphAttrCFRC12cCcD_CylAttrP4cXyz();
// False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_SphAttrCFRC12cCcD_SphAttrP4cXyz();
// False False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_SphAttrCFRC12cCcD_TriAttrP4cXyz();
// False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_SphAttrCFRC12cCcD_CylAttrPf();
// False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_SphAttrCFRC12cCcD_SphAttrPf();
// False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_SphAttrCFRC12cCcD_CpsAttrPf();
// False False
extern "C" void CalcAabBox__12cCcD_SphAttrFv();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  cXyz* False
// 	 cXyz False
extern "C" void GetNVec__12cCcD_SphAttrCFRC4cXyzP4cXyz();
// False False
//  cCcD_ShapeAttr::Shape* False
// 	 cCcD_ShapeAttr::Shape False
extern "C" void getShapeAccess__12cCcD_SphAttrCFPQ214cCcD_ShapeAttr5Shape();
// False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
extern "C" void SetHit__10cCcD_ObjAtFP8cCcD_Obj();
// True False
//  cCcD_SrcObjAt const& False
// 	 cCcD_SrcObjAt const False
// 		 cCcD_SrcObjAt False
extern "C" void Set__10cCcD_ObjAtFRC13cCcD_SrcObjAt();
// False False
extern "C" void ClrHit__10cCcD_ObjAtFv();
// True False
//  cCcD_SrcObjTg const& False
// 	 cCcD_SrcObjTg const False
// 		 cCcD_SrcObjTg False
extern "C" void Set__10cCcD_ObjTgFRC13cCcD_SrcObjTg();
// False False
//  u32 False
extern "C" void SetGrp__10cCcD_ObjTgFUl();
// False False
extern "C" void ClrHit__10cCcD_ObjTgFv();
// False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
extern "C" void SetHit__10cCcD_ObjTgFP8cCcD_Obj();
// False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
extern "C" void SetHit__10cCcD_ObjCoFP8cCcD_Obj();
// False False
extern "C" void ClrHit__10cCcD_ObjCoFv();
// False False
//  u32 False
extern "C" void SetIGrp__10cCcD_ObjCoFUl();
// False False
//  u32 False
extern "C" void SetVsGrp__10cCcD_ObjCoFUl();
// True False
extern "C" void __dt__12cCcD_TriAttrFv();
// True False
//  bool False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  cXyz* False
// 	 cXyz False
extern "C" bool CrossAtTg__14cCcD_ShapeAttrCFRC14cCcD_ShapeAttrP4cXyz();
// True False
//  bool False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__14cCcD_ShapeAttrCFRC14cCcD_ShapeAttrPf();
// True False
//  void False
extern "C" void ClrAt__9cCcD_SttsFv();
// True False
extern "C" void ClrTg__9cCcD_SttsFv();
// False False
extern "C" void __sinit_c_cc_d_cpp();
// True False
extern "C" static void func_80264A4C();
// True False
extern "C" static void func_80264A54();
// True False
extern "C" static void func_80264A5C();
// True False
extern "C" static void func_80264A64();
extern "C" extern void* __vt__12cCcD_SphAttr[25];
extern "C" extern void* __vt__12cCcD_CylAttr[25];
extern "C" extern void* __vt__12cCcD_CpsAttr[25];
extern "C" extern void* __vt__12cCcD_TriAttr[25];
extern "C" extern void* __vt__14cCcD_ShapeAttr[22];
extern "C" extern void* __vt__9cCcD_Stts[8];
extern "C" extern u8 m_virtual_center__14cCcD_ShapeAttr[12];

// 
// External References:
// 

// False False
//  cM3dGCyl const* False
// 	 cM3dGCyl const False
// 		 cM3dGCyl False
//  cM3dGSph const* False
// 	 cM3dGSph const False
// 		 cM3dGSph False
//  f32* False
// 	 f32 False
void cM3d_Cross_CylSph(cM3dGCyl const*, cM3dGSph const*, f32*);
// False False
//  cM3dGSph const* False
// 	 cM3dGSph const False
// 		 cM3dGSph False
//  cM3dGSph const* False
// 	 cM3dGSph const False
// 		 cM3dGSph False
//  f32* False
// 	 f32 False
void cM3d_Cross_SphSph(cM3dGSph const*, cM3dGSph const*, f32*);
// False False
//  cM3dGSph const* False
// 	 cM3dGSph const False
// 		 cM3dGSph False
//  cM3dGTri const* False
// 	 cM3dGTri const False
// 		 cM3dGTri False
//  Vec* False
// 	 Vec False
void cM3d_Cross_SphTri(cM3dGSph const*, cM3dGTri const*, Vec*);
// False False
//  cM3dGCyl const* False
// 	 cM3dGCyl const False
// 		 cM3dGCyl False
//  cM3dGCyl const* False
// 	 cM3dGCyl const False
// 		 cM3dGCyl False
//  f32* False
// 	 f32 False
void cM3d_Cross_CylCyl(cM3dGCyl const*, cM3dGCyl const*, f32*);
// False False
//  cM3dGCyl const* False
// 	 cM3dGCyl const False
// 		 cM3dGCyl False
//  cM3dGTri const* False
// 	 cM3dGTri const False
// 		 cM3dGTri False
//  Vec* False
// 	 Vec False
void cM3d_Cross_CylTri(cM3dGCyl const*, cM3dGTri const*, Vec*);
// False False
//  cM3dGCps const& False
// 	 cM3dGCps const False
// 		 cM3dGCps False
//  cM3dGCps const& False
// 	 cM3dGCps const False
// 		 cM3dGCps False
//  Vec* False
// 	 Vec False
void cM3d_Cross_CpsCps(cM3dGCps const&, cM3dGCps const&, Vec*);
// False False
//  cM3dGCps const& False
// 	 cM3dGCps const False
// 		 cM3dGCps False
//  cM3dGCyl const& False
// 	 cM3dGCyl const False
// 		 cM3dGCyl False
//  Vec* False
// 	 Vec False
void cM3d_Cross_CpsCyl(cM3dGCps const&, cM3dGCyl const&, Vec*);
// False False
//  cM3dGCps const& False
// 	 cM3dGCps const False
// 		 cM3dGCps False
//  cM3dGSph const& False
// 	 cM3dGSph const False
// 		 cM3dGSph False
//  Vec* False
// 	 Vec False
void cM3d_Cross_CpsSph(cM3dGCps const&, cM3dGSph const&, Vec*);
// False False
//  cM3dGTri const& False
// 	 cM3dGTri const False
// 		 cM3dGTri False
//  cM3dGTri const& False
// 	 cM3dGTri const False
// 		 cM3dGTri False
//  Vec* False
// 	 Vec False
void cM3d_Cross_TriTri(cM3dGTri const&, cM3dGTri const&, Vec*);
// False False
//  cM3dGCps const& False
// 	 cM3dGCps const False
// 		 cM3dGCps False
//  cM3dGTri False
//  Vec* False
// 	 Vec False
void cM3d_Cross_CpsTri(cM3dGCps const&, cM3dGTri, Vec*);
// False False
//  void False
//  void* False
// 	 void False
void operator delete(void*);

// False False
extern "C" void __dt__4cXyzFv();
// False False
extern "C" void GetCoCP__12cCcD_CylAttrFv();
// False False
extern "C" void GetCoCP__12cCcD_SphAttrFv();
// False False
extern "C" void GetCoCP__12cCcD_SphAttrCFv();
// False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  cXyz* False
// 	 cXyz False
extern "C" bool CrossAtTg__12cCcD_SphAttrCFRC12cCcD_AabAttrP4cXyz();
// False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  cXyz* False
// 	 cXyz False
extern "C" bool CrossAtTg__12cCcD_SphAttrCFRC12cCcD_PntAttrP4cXyz();
// False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_SphAttrCFRC14cCcD_ShapeAttrP4cXyz();
// False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_SphAttrCFRC12cCcD_AabAttrPf();
// False False
//  bool False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_SphAttrCFRC12cCcD_TriAttrPf();
// False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_SphAttrCFRC12cCcD_PntAttrPf();
// False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_SphAttrCFRC14cCcD_ShapeAttrPf();
// False False
extern "C" void GetCoCP__12cCcD_CylAttrCFv();
// False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  cXyz* False
// 	 cXyz False
extern "C" bool CrossAtTg__12cCcD_CylAttrCFRC12cCcD_AabAttrP4cXyz();
// False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  cXyz* False
// 	 cXyz False
extern "C" bool CrossAtTg__12cCcD_CylAttrCFRC12cCcD_PntAttrP4cXyz();
// False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_CylAttrCFRC14cCcD_ShapeAttrP4cXyz();
// False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_CylAttrCFRC12cCcD_AabAttrPf();
// False False
//  bool False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_CylAttrCFRC12cCcD_TriAttrPf();
// False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_CylAttrCFRC12cCcD_PntAttrPf();
// False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_CylAttrCFRC14cCcD_ShapeAttrPf();
// False False
extern "C" void GetCoCP__14cCcD_ShapeAttrFv();
// False False
extern "C" void GetCoCP__14cCcD_ShapeAttrCFv();
// False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  cXyz* False
// 	 cXyz False
extern "C" bool CrossAtTg__12cCcD_TriAttrCFRC12cCcD_AabAttrP4cXyz();
// False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  cXyz* False
// 	 cXyz False
extern "C" bool CrossAtTg__12cCcD_TriAttrCFRC12cCcD_PntAttrP4cXyz();
// False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_TriAttrCFRC14cCcD_ShapeAttrP4cXyz();
// False False
//  bool False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_TriAttrCFRC12cCcD_SphAttrPf();
// False False
//  bool False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_TriAttrCFRC12cCcD_CylAttrPf();
// False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_TriAttrCFRC12cCcD_AabAttrPf();
// False False
//  bool False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_TriAttrCFRC12cCcD_TriAttrPf();
// False False
//  bool False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_TriAttrCFRC12cCcD_CpsAttrPf();
// False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_TriAttrCFRC12cCcD_PntAttrPf();
// False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_TriAttrCFRC14cCcD_ShapeAttrPf();
// False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  cXyz* False
// 	 cXyz False
extern "C" bool CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_AabAttrP4cXyz();
// False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  cXyz* False
// 	 cXyz False
extern "C" bool CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_PntAttrP4cXyz();
// False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  cXyz* False
// 	 cXyz False
extern "C" void CrossAtTg__12cCcD_CpsAttrCFRC14cCcD_ShapeAttrP4cXyz();
// False False
//  bool False
//  cCcD_AabAttr const& False
// 	 cCcD_AabAttr const False
// 		 cCcD_AabAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_CpsAttrCFRC12cCcD_AabAttrPf();
// False False
//  bool False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_CpsAttrCFRC12cCcD_TriAttrPf();
// False False
//  bool False
//  cCcD_PntAttr const& False
// 	 cCcD_PntAttr const False
// 		 cCcD_PntAttr False
//  f32* False
// 	 f32 False
extern "C" bool CrossCo__12cCcD_CpsAttrCFRC12cCcD_PntAttrPf();
// False False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  f32* False
// 	 f32 False
extern "C" void CrossCo__12cCcD_CpsAttrCFRC14cCcD_ShapeAttrPf();
// False False
extern "C" void __dt__12cCcD_CpsAttrFv();
// False False
extern "C" void __dt__12cCcD_CylAttrFv();
// False False
extern "C" void __dt__14cCcD_ShapeAttrFv();
// False False
extern "C" void __dt__12cCcD_SphAttrFv();
// False False
extern "C" void __dt__9cCcD_SttsFv();
// False False
//  cM3dGCyl const* False
// 	 cM3dGCyl const False
// 		 cM3dGCyl False
//  cM3dGSph const* False
// 	 cM3dGSph const False
// 		 cM3dGSph False
//  f32* False
// 	 f32 False
extern "C" void cM3d_Cross_CylSph__FPC8cM3dGCylPC8cM3dGSphPf();
// False False
//  cM3dGSph const* False
// 	 cM3dGSph const False
// 		 cM3dGSph False
//  cM3dGSph const* False
// 	 cM3dGSph const False
// 		 cM3dGSph False
//  f32* False
// 	 f32 False
extern "C" void cM3d_Cross_SphSph__FPC8cM3dGSphPC8cM3dGSphPf();
// False False
//  cM3dGSph const* False
// 	 cM3dGSph const False
// 		 cM3dGSph False
//  cM3dGTri const* False
// 	 cM3dGTri const False
// 		 cM3dGTri False
//  Vec* False
// 	 Vec False
extern "C" void cM3d_Cross_SphTri__FPC8cM3dGSphPC8cM3dGTriP3Vec();
// False False
//  cM3dGCyl const* False
// 	 cM3dGCyl const False
// 		 cM3dGCyl False
//  cM3dGCyl const* False
// 	 cM3dGCyl const False
// 		 cM3dGCyl False
//  f32* False
// 	 f32 False
extern "C" void cM3d_Cross_CylCyl__FPC8cM3dGCylPC8cM3dGCylPf();
// False False
//  cM3dGCyl const* False
// 	 cM3dGCyl const False
// 		 cM3dGCyl False
//  cM3dGTri const* False
// 	 cM3dGTri const False
// 		 cM3dGTri False
//  Vec* False
// 	 Vec False
extern "C" void cM3d_Cross_CylTri__FPC8cM3dGCylPC8cM3dGTriP3Vec();
// False False
//  cM3dGCps const& False
// 	 cM3dGCps const False
// 		 cM3dGCps False
//  cM3dGCps const& False
// 	 cM3dGCps const False
// 		 cM3dGCps False
//  Vec* False
// 	 Vec False
extern "C" void cM3d_Cross_CpsCps__FRC8cM3dGCpsRC8cM3dGCpsP3Vec();
// False False
//  cM3dGCps const& False
// 	 cM3dGCps const False
// 		 cM3dGCps False
//  cM3dGCyl const& False
// 	 cM3dGCyl const False
// 		 cM3dGCyl False
//  Vec* False
// 	 Vec False
extern "C" void cM3d_Cross_CpsCyl__FRC8cM3dGCpsRC8cM3dGCylP3Vec();
// False False
//  cM3dGCps const& False
// 	 cM3dGCps const False
// 		 cM3dGCps False
//  cM3dGSph const& False
// 	 cM3dGSph const False
// 		 cM3dGSph False
//  Vec* False
// 	 Vec False
extern "C" void cM3d_Cross_CpsSph__FRC8cM3dGCpsRC8cM3dGSphP3Vec();
// False False
//  cM3dGTri const& False
// 	 cM3dGTri const False
// 		 cM3dGTri False
//  cM3dGTri const& False
// 	 cM3dGTri const False
// 		 cM3dGTri False
//  Vec* False
// 	 Vec False
extern "C" void cM3d_Cross_TriTri__FRC8cM3dGTriRC8cM3dGTriP3Vec();
// False False
//  cM3dGCps const& False
// 	 cM3dGCps const False
// 		 cM3dGCps False
//  cM3dGTri False
//  Vec* False
// 	 Vec False
extern "C" void cM3d_Cross_CpsTri__FRC8cM3dGCps8cM3dGTriP3Vec();
// False False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
//  cXyz const* False
// 	 cXyz const False
// 		 cXyz False
extern "C" void Set__8cM3dGAabFPC4cXyzPC4cXyz();
// False False
extern "C" void ClearForMinMax__8cM3dGAabFv();
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
extern "C" void SetMinMax__8cM3dGAabFRC4cXyz();
// False False
//  f32 False
extern "C" void PlusR__8cM3dGAabFf();
// False False
//  cM3dGSph const* False
// 	 cM3dGSph const False
// 		 cM3dGSph False
//  cXyz* False
// 	 cXyz False
extern "C" void cross__8cM3dGCylCFPC8cM3dGSphP4cXyz();
// False False
//  cM3dGCyl const* False
// 	 cM3dGCyl const False
// 		 cM3dGCyl False
//  cXyz* False
// 	 cXyz False
extern "C" void cross__8cM3dGCylCFPC8cM3dGCylP4cXyz();
// False False
//  cM3dGSph const* False
// 	 cM3dGSph const False
// 		 cM3dGSph False
//  cXyz* False
// 	 cXyz False
extern "C" void cross__8cM3dGSphCFPC8cM3dGSphP4cXyz();
// False False
//  cM3dGCyl const* False
// 	 cM3dGCyl const False
// 		 cM3dGCyl False
//  cXyz* False
// 	 cXyz False
extern "C" void cross__8cM3dGSphCFPC8cM3dGCylP4cXyz();
// False False
//  cM3dGCyl const* False
// 	 cM3dGCyl const False
// 		 cM3dGCyl False
//  Vec* False
// 	 Vec False
extern "C" void cross__8cM3dGTriCFPC8cM3dGCylP3Vec();
// False False
//  void False
//  void* False
// 	 void False
extern "C" void __dl__FPv();
// False False
extern "C" void PSVECAdd();
// False False
extern "C" void PSVECSubtract();
// False False
extern "C" void PSVECScale();
// False False
extern "C" void PSVECNormalize();
// False False
extern "C" void PSVECMag();
// False False
extern "C" void PSVECDotProduct();
// False False
extern "C" void __register_global_object();
// False False
extern "C" void _savegpr_27();
// False False
extern "C" void _savegpr_28();
// False False
extern "C" void _restgpr_27();
// False False
extern "C" void _restgpr_28();
extern "C" extern void* __vt__8cM3dGPla[3];
extern "C" extern void* __vt__8cM3dGAab[3];
extern "C" extern void* __vt__8cM3dGTri[3];
extern "C" extern f32 Zero__4cXyz[3];
extern "C" extern f32 G_CM3D_F_ABS_MIN[1 + 1 /* padding */];

// 
// Declarations:
// 

/* 80263358-80263368 0010+00 s=2 e=1 z=0  None .text      Set__15cCcD_DivideInfoFUlUlUl                                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  u32 False
//  u32 False
//  u32 False
asm void cCcD_DivideInfo::Set(u32 param_0, u32 param_1, u32 param_2) {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/Set__15cCcD_DivideInfoFUlUlUl.s"
}
#pragma pop


/* 80263368-802633A8 0040+00 s=0 e=5 z=0  None .text      Chk__15cCcD_DivideInfoCFRC15cCcD_DivideInfo                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_DivideInfo const& False
// 	 cCcD_DivideInfo const False
// 		 cCcD_DivideInfo False
asm void cCcD_DivideInfo::Chk(cCcD_DivideInfo const& param_0) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/Chk__15cCcD_DivideInfoCFRC15cCcD_DivideInfo.s"
}
#pragma pop


/* ############################################################################################## */
/* 80455018-8045501C 0004+00 s=1 e=0 z=0  None .sdata2    @2305                                                        */
SECTION_SDATA2 static f32 lit_2305 = 0.03125f;

/* 8045501C-80455020 0004+00 s=2 e=0 z=0  None .sdata2    @2306                                                        */
SECTION_SDATA2 static f32 lit_2306 = 1.0f;

/* 802633A8-802634D4 012C+00 s=0 e=2 z=0  None .text      SetArea__15cCcD_DivideAreaFRC8cM3dGAab                       */
//	802633C0: 8026EC54 (Set__8cM3dGAabFPC4cXyzPC4cXyz)
//	802633C4: 80455018 (lit_2305)
//	802633E8: 80451180 (G_CM3D_F_ABS_MIN)
//	80263408: 8045501C (lit_2306)
//	80263418: 80455018 (lit_2305)
//	8026343C: 80451180 (G_CM3D_F_ABS_MIN)
//	8026345C: 8045501C (lit_2306)
//	8026346C: 80455018 (lit_2305)
//	80263490: 80451180 (G_CM3D_F_ABS_MIN)
//	802634B0: 8045501C (lit_2306)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cM3dGAab const& False
// 	 cM3dGAab const False
// 		 cM3dGAab False
asm void cCcD_DivideArea::SetArea(cM3dGAab const& param_0) {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/SetArea__15cCcD_DivideAreaFRC8cM3dGAab.s"
}
#pragma pop


/* ############################################################################################## */
/* 8039A7E8-8039A868 0080+00 s=2 e=0 z=0  None .rodata    l_base                                                       */
SECTION_RODATA static u8 const l_base[128] = {
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0F,
	0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0xFF,
	0x00, 0x00, 0x01, 0xFF, 0x00, 0x00, 0x03, 0xFF, 0x00, 0x00, 0x07, 0xFF, 0x00, 0x00, 0x0F, 0xFF,
	0x00, 0x00, 0x1F, 0xFF, 0x00, 0x00, 0x3F, 0xFF, 0x00, 0x00, 0x7F, 0xFF, 0x00, 0x00, 0xFF, 0xFF,
	0x00, 0x01, 0xFF, 0xFF, 0x00, 0x03, 0xFF, 0xFF, 0x00, 0x07, 0xFF, 0xFF, 0x00, 0x0F, 0xFF, 0xFF,
	0x00, 0x1F, 0xFF, 0xFF, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x7F, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF,
	0x01, 0xFF, 0xFF, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0xFF,
	0x1F, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};

/* 802634D4-802636A0 01CC+00 s=0 e=2 z=0  None .text      CalcDivideInfo__15cCcD_DivideAreaFP15cCcD_DivideInfoRC8cM3dGAabUl */
//	802634F8: 80263358 (Set__15cCcD_DivideInfoFUlUlUl)
//	80263554: 8039A7E8 (l_base)
//	80263558: 8039A7E8 (l_base)
//	802635D4: 8039A7E8 (l_base)
//	802635D8: 8039A7E8 (l_base)
//	80263654: 8039A7E8 (l_base)
//	80263658: 8039A7E8 (l_base)
//	8026368C: 80263358 (Set__15cCcD_DivideInfoFUlUlUl)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_DivideInfo* False
// 	 cCcD_DivideInfo False
//  cM3dGAab const& False
// 	 cM3dGAab const False
// 		 cM3dGAab False
//  u32 False
asm void cCcD_DivideArea::CalcDivideInfo(cCcD_DivideInfo* param_0, cM3dGAab const& param_1, u32 param_2) {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CalcDivideInfo__15cCcD_DivideAreaFP15cCcD_DivideInfoRC8cM3dGAabUl.s"
}
#pragma pop


/* 802636A0-80263894 01F4+00 s=0 e=3 z=0  None .text      CalcDivideInfoOverArea__15cCcD_DivideAreaFP15cCcD_DivideInfoRC8cM3dGAab */
//	80263718: 8039A7E8 (l_base)
//	8026371C: 8039A7E8 (l_base)
//	802637B0: 8039A7E8 (l_base)
//	802637B4: 8039A7E8 (l_base)
//	80263848: 8039A7E8 (l_base)
//	8026384C: 8039A7E8 (l_base)
//	80263880: 80263358 (Set__15cCcD_DivideInfoFUlUlUl)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_DivideInfo* False
// 	 cCcD_DivideInfo False
//  cM3dGAab const& False
// 	 cM3dGAab const False
// 		 cM3dGAab False
asm void cCcD_DivideArea::CalcDivideInfoOverArea(cCcD_DivideInfo* param_0, cM3dGAab const& param_1) {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CalcDivideInfoOverArea__15cCcD_DivideAreaFP15cCcD_DivideInfoRC8cM3dGAab.s"
}
#pragma pop


/* 80263894-8026389C 0008+00 s=1 e=1 z=0  None .text      GetGStts__9cCcD_SttsCFv                                      */
// False False
//  bool False
bool cCcD_Stts::GetGStts() const {
	return false;
}


/* 8026389C-802638A4 0008+00 s=1 e=0 z=0  None .text      GetGStts__9cCcD_SttsFv                                       */
// True False
//  bool False
bool cCcD_Stts::GetGStts() {
	return false;
}


/* 802638A4-80263904 0060+00 s=0 e=1 z=0  None .text      Init__9cCcD_SttsFiiPvUi                                      */
//	802638B4: 803621D4 (_savegpr_27)
//	802638F0: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  int False
//  int False
//  void* False
// 	 void False
//  unsigned int False
asm void cCcD_Stts::Init(int param_0, int param_1, void* param_2, unsigned int param_3) {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/Init__9cCcD_SttsFiiPvUi.s"
}
#pragma pop


/* ############################################################################################## */
/* 80455020-80455028 0004+04 s=13 e=0 z=0  None .sdata2    @2431                                                        */
SECTION_SDATA2 static f32 lit_2431[1 + 1 /* padding */] = {
	0.0f,
	/* padding */
	0.0f,
};

/* 80263904-80263934 0030+00 s=1 e=1 z=0  None .text      Ct__9cCcD_SttsFv                                             */
//	80263904: 80455020 (lit_2431)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void cCcD_Stts::Ct() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/Ct__9cCcD_SttsFv.s"
}
#pragma pop


/* 80263934-8026395C 0028+00 s=0 e=3 z=0  None .text      PlusCcMove__9cCcD_SttsFfff                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  f32 False
//  f32 False
//  f32 False
asm void cCcD_Stts::PlusCcMove(f32 param_0, f32 param_1, f32 param_2) {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/PlusCcMove__9cCcD_SttsFfff.s"
}
#pragma pop


/* 8026395C-80263970 0014+00 s=0 e=10 z=23  None .text      ClrCcMove__9cCcD_SttsFv                                      */
//	8026395C: 80455020 (lit_2431)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void cCcD_Stts::ClrCcMove() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/ClrCcMove__9cCcD_SttsFv.s"
}
#pragma pop


/* 80263970-80263984 0014+00 s=0 e=2 z=0  None .text      PlusDmg__9cCcD_SttsFi                                        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  int False
asm void cCcD_Stts::PlusDmg(int param_0) {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/PlusDmg__9cCcD_SttsFi.s"
}
#pragma pop


/* ############################################################################################## */
/* 80455028-80455030 0008+00 s=1 e=0 z=0  None .sdata2    @2472                                                        */
SECTION_SDATA2 static f64 lit_2472 = 4503601774854144.0 /* cast s32 to float */;

/* 80263984-802639B0 002C+00 s=0 e=1 z=0  None .text      GetWeightF__9cCcD_SttsCFv                                    */
//	8026398C: 80455028 (lit_2472)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void cCcD_Stts::GetWeightF() const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/GetWeightF__9cCcD_SttsCFv.s"
}
#pragma pop


/* 802639B0-802639C4 0014+00 s=0 e=1 z=0  None .text      ct__18cCcD_ObjCommonBaseFv                                   */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void cCcD_ObjCommonBase::ct() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/ct__18cCcD_ObjCommonBaseFv.s"
}
#pragma pop


/* 802639C4-80263A10 004C+00 s=1 e=0 z=0  None .text      Set__14cCcD_ObjHitInfFRC17cCcD_SrcObjHitInf                  */
//	802639E0: 8026484C (Set__10cCcD_ObjAtFRC13cCcD_SrcObjAt)
//	802639EC: 80264880 (Set__10cCcD_ObjTgFRC13cCcD_SrcObjTg)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cCcD_SrcObjHitInf const& False
// 	 cCcD_SrcObjHitInf const False
// 		 cCcD_SrcObjHitInf False
asm void cCcD_ObjHitInf::Set(cCcD_SrcObjHitInf const& param_0) {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/Set__14cCcD_ObjHitInfFRC17cCcD_SrcObjHitInf.s"
}
#pragma pop


/* 80263A10-80263A1C 000C+00 s=0 e=1 z=0  None .text      ct__8cCcD_ObjFv                                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void cCcD_Obj::ct() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/ct__8cCcD_ObjFv.s"
}
#pragma pop


/* 80263A1C-80263A48 002C+00 s=0 e=1 z=0  None .text      Set__8cCcD_ObjFRC11cCcD_SrcObj                               */
//	80263A34: 802639C4 (Set__14cCcD_ObjHitInfFRC17cCcD_SrcObjHitInf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_SrcObj const& False
// 	 cCcD_SrcObj const False
// 		 cCcD_SrcObj False
asm void cCcD_Obj::Set(cCcD_SrcObj const& param_0) {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/Set__8cCcD_ObjFRC11cCcD_SrcObj.s"
}
#pragma pop


/* 80263A48-80263A64 001C+00 s=0 e=9 z=87  None .text      GetAc__8cCcD_ObjFv                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void cCcD_Obj::GetAc() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/GetAc__8cCcD_ObjFv.s"
}
#pragma pop


/* 80263A64-80263A88 0024+00 s=3 e=2 z=0  None .text      getShapeAccess__14cCcD_ShapeAttrCFPQ214cCcD_ShapeAttr5Shape  */
//	80263A6C: 80455020 (lit_2431)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_ShapeAttr::Shape* False
// 	 cCcD_ShapeAttr::Shape False
asm void cCcD_ShapeAttr::getShapeAccess(cCcD_ShapeAttr::Shape* param_0) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/getShapeAccess__14cCcD_ShapeAttrCFPQ214cCcD_ShapeAttr5Shape.s"
}
#pragma pop


/* 80263A88-80263B58 00D0+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_TriAttrCFRC12cCcD_CpsAttrP4cXyz            */
//	80263A94: 803A37C0 (__vt__8cM3dGPla)
//	80263A98: 803A37C0 (__vt__8cM3dGPla)
//	80263AC0: 803ABB84 (__vt__8cM3dGTri)
//	80263AC4: 803ABB84 (__vt__8cM3dGTri)
//	80263B1C: 8026E12C (cM3d_Cross_CpsTri__FRC8cM3dGCps8cM3dGTriP3Vec)
//	80263B20: 803ABB84 (__vt__8cM3dGTri)
//	80263B24: 803ABB84 (__vt__8cM3dGTri)
//	80263B2C: 803A37C0 (__vt__8cM3dGPla)
//	80263B30: 803A37C0 (__vt__8cM3dGPla)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  cXyz* False
// 	 cXyz False
asm void cCcD_TriAttr::CrossAtTg(cCcD_CpsAttr const& param_0, cXyz* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CrossAtTg__12cCcD_TriAttrCFRC12cCcD_CpsAttrP4cXyz.s"
}
#pragma pop


/* 80263B58-80263B90 0038+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_TriAttrCFRC12cCcD_CylAttrP4cXyz            */
//	80263B6C: 8026F7B0 (cross__8cM3dGTriCFPC8cM3dGCylP3Vec)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  cXyz* False
// 	 cXyz False
asm void cCcD_TriAttr::CrossAtTg(cCcD_CylAttr const& param_0, cXyz* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CrossAtTg__12cCcD_TriAttrCFRC12cCcD_CylAttrP4cXyz.s"
}
#pragma pop


/* 80263B90-80263BCC 003C+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_TriAttrCFRC12cCcD_SphAttrP4cXyz            */
//	80263BA8: 8026BF04 (cM3d_Cross_SphTri__FPC8cM3dGSphPC8cM3dGTriP3Vec)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  cXyz* False
// 	 cXyz False
asm void cCcD_TriAttr::CrossAtTg(cCcD_SphAttr const& param_0, cXyz* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CrossAtTg__12cCcD_TriAttrCFRC12cCcD_SphAttrP4cXyz.s"
}
#pragma pop


/* 80263BCC-80263C04 0038+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_TriAttrCFRC12cCcD_TriAttrP4cXyz            */
//	80263BE0: 8026DE2C (cM3d_Cross_TriTri__FRC8cM3dGTriRC8cM3dGTriP3Vec)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  cXyz* False
// 	 cXyz False
asm void cCcD_TriAttr::CrossAtTg(cCcD_TriAttr const& param_0, cXyz* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CrossAtTg__12cCcD_TriAttrCFRC12cCcD_TriAttrP4cXyz.s"
}
#pragma pop


/* 80263C04-80263C9C 0098+00 s=1 e=1 z=0  None .text      CalcAabBox__12cCcD_TriAttrFv                                 */
//	80263C18: 8026ECF8 (ClearForMinMax__8cM3dGAabFv)
//	80263C3C: 8026ED1C (SetMinMax__8cM3dGAabFRC4cXyz)
//	80263C60: 8026ED1C (SetMinMax__8cM3dGAabFRC4cXyz)
//	80263C84: 8026ED1C (SetMinMax__8cM3dGAabFRC4cXyz)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void cCcD_TriAttr::CalcAabBox() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CalcAabBox__12cCcD_TriAttrFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80455030-80455038 0004+04 s=1 e=0 z=0  None .sdata2    @2632                                                        */
SECTION_SDATA2 static f32 lit_2632[1 + 1 /* padding */] = {
	-1.0f,
	/* padding */
	0.0f,
};

/* 80263C9C-80263D38 009C+00 s=1 e=1 z=0  None .text      GetNVec__12cCcD_TriAttrCFRC4cXyzP4cXyz                       */
//	80263CBC: 80347194 (PSVECDotProduct)
//	80263CC8: 80455020 (lit_2431)
//	80263D14: 80455030 (lit_2632)
//	80263D18: 803470D8 (PSVECScale)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  cXyz* False
// 	 cXyz False
asm void cCcD_TriAttr::GetNVec(cXyz const& param_0, cXyz* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/GetNVec__12cCcD_TriAttrCFRC4cXyzP4cXyz.s"
}
#pragma pop


/* 80263D38-80263D7C 0044+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_CpsAttrP4cXyz            */
//	80263D54: 8026D114 (cM3d_Cross_CpsCps__FRC8cM3dGCpsRC8cM3dGCpsP3Vec)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  cXyz* False
// 	 cXyz False
asm void cCcD_CpsAttr::CrossAtTg(cCcD_CpsAttr const& param_0, cXyz* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_CpsAttrP4cXyz.s"
}
#pragma pop


/* 80263D7C-80263DC0 0044+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_CylAttrP4cXyz            */
//	80263D98: 8026D3D4 (cM3d_Cross_CpsCyl__FRC8cM3dGCpsRC8cM3dGCylP3Vec)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  cXyz* False
// 	 cXyz False
asm void cCcD_CpsAttr::CrossAtTg(cCcD_CylAttr const& param_0, cXyz* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_CylAttrP4cXyz.s"
}
#pragma pop


/* 80263DC0-80263E04 0044+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_SphAttrP4cXyz            */
//	80263DDC: 8026DC3C (cM3d_Cross_CpsSph__FRC8cM3dGCpsRC8cM3dGSphP3Vec)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  cXyz* False
// 	 cXyz False
asm void cCcD_CpsAttr::CrossAtTg(cCcD_SphAttr const& param_0, cXyz* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_SphAttrP4cXyz.s"
}
#pragma pop


/* 80263E04-80263ED4 00D0+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_TriAttrP4cXyz            */
//	80263E10: 803A37C0 (__vt__8cM3dGPla)
//	80263E14: 803A37C0 (__vt__8cM3dGPla)
//	80263E3C: 803ABB84 (__vt__8cM3dGTri)
//	80263E40: 803ABB84 (__vt__8cM3dGTri)
//	80263E98: 8026E12C (cM3d_Cross_CpsTri__FRC8cM3dGCps8cM3dGTriP3Vec)
//	80263E9C: 803ABB84 (__vt__8cM3dGTri)
//	80263EA0: 803ABB84 (__vt__8cM3dGTri)
//	80263EA8: 803A37C0 (__vt__8cM3dGPla)
//	80263EAC: 803A37C0 (__vt__8cM3dGPla)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  cXyz* False
// 	 cXyz False
asm void cCcD_CpsAttr::CrossAtTg(cCcD_TriAttr const& param_0, cXyz* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_TriAttrP4cXyz.s"
}
#pragma pop


/* 80263ED4-80263F24 0050+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_CpsAttrCFRC12cCcD_CpsAttrPf                  */
//	80263EE0: 80455020 (lit_2431)
//	80263EFC: 8026D114 (cM3d_Cross_CpsCps__FRC8cM3dGCpsRC8cM3dGCpsP3Vec)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  f32* False
// 	 f32 False
asm void cCcD_CpsAttr::CrossCo(cCcD_CpsAttr const& param_0, f32* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CrossCo__12cCcD_CpsAttrCFRC12cCcD_CpsAttrPf.s"
}
#pragma pop


/* 80263F24-80263F74 0050+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_CpsAttrCFRC12cCcD_CylAttrPf                  */
//	80263F30: 80455020 (lit_2431)
//	80263F4C: 8026D3D4 (cM3d_Cross_CpsCyl__FRC8cM3dGCpsRC8cM3dGCylP3Vec)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  f32* False
// 	 f32 False
asm void cCcD_CpsAttr::CrossCo(cCcD_CylAttr const& param_0, f32* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CrossCo__12cCcD_CpsAttrCFRC12cCcD_CylAttrPf.s"
}
#pragma pop


/* 80263F74-80263FC4 0050+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_CpsAttrCFRC12cCcD_SphAttrPf                  */
//	80263F80: 80455020 (lit_2431)
//	80263F9C: 8026DC3C (cM3d_Cross_CpsSph__FRC8cM3dGCpsRC8cM3dGSphP3Vec)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  f32* False
// 	 f32 False
asm void cCcD_CpsAttr::CrossCo(cCcD_SphAttr const& param_0, f32* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CrossCo__12cCcD_CpsAttrCFRC12cCcD_SphAttrPf.s"
}
#pragma pop


/* 80263FC4-80264014 0050+00 s=1 e=2 z=0  None .text      CalcAabBox__12cCcD_CpsAttrFv                                 */
//	80263FD8: 8026ECF8 (ClearForMinMax__8cM3dGAabFv)
//	80263FE4: 8026ED1C (SetMinMax__8cM3dGAabFRC4cXyz)
//	80263FF0: 8026ED1C (SetMinMax__8cM3dGAabFRC4cXyz)
//	80263FFC: 8026EE68 (PlusR__8cM3dGAabFf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void cCcD_CpsAttr::CalcAabBox() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CalcAabBox__12cCcD_CpsAttrFv.s"
}
#pragma pop


/* 80264014-8026417C 0168+00 s=1 e=1 z=0  None .text      GetNVec__12cCcD_CpsAttrCFRC4cXyzP4cXyz                       */
//	8026402C: 803621D8 (_savegpr_28)
//	8026404C: 803470B4 (PSVECSubtract)
//	80264058: 80347194 (PSVECDotProduct)
//	80264068: 80451180 (G_CM3D_F_ABS_MIN)
//	80264088: 803470B4 (PSVECSubtract)
//	80264094: 80347194 (PSVECDotProduct)
//	8026409C: 80455020 (lit_2431)
//	802640C4: 8045501C (lit_2306)
//	802640F4: 803470D8 (PSVECScale)
//	80264104: 80347090 (PSVECAdd)
//	80264114: 803470B4 (PSVECSubtract)
//	8026411C: 80347150 (PSVECMag)
//	80264128: 80451180 (G_CM3D_F_ABS_MIN)
//	80264134: 80455020 (lit_2431)
//	80264154: 803470F4 (PSVECNormalize)
//	80264168: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  cXyz* False
// 	 cXyz False
asm void cCcD_CpsAttr::GetNVec(cXyz const& param_0, cXyz* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/GetNVec__12cCcD_CpsAttrCFRC4cXyzP4cXyz.s"
}
#pragma pop


/* 8026417C-802641C8 004C+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_CylAttrCFRC12cCcD_CpsAttrP4cXyz            */
//	802641A0: 8026D3D4 (cM3d_Cross_CpsCyl__FRC8cM3dGCpsRC8cM3dGCylP3Vec)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  cXyz* False
// 	 cXyz False
asm void cCcD_CylAttr::CrossAtTg(cCcD_CpsAttr const& param_0, cXyz* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CrossAtTg__12cCcD_CylAttrCFRC12cCcD_CpsAttrP4cXyz.s"
}
#pragma pop


/* 802641C8-8026420C 0044+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_CylAttrCFRC12cCcD_CylAttrP4cXyz            */
//	802641E4: 8026F22C (cross__8cM3dGCylCFPC8cM3dGCylP4cXyz)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  cXyz* False
// 	 cXyz False
asm void cCcD_CylAttr::CrossAtTg(cCcD_CylAttr const& param_0, cXyz* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CrossAtTg__12cCcD_CylAttrCFRC12cCcD_CylAttrP4cXyz.s"
}
#pragma pop


/* 8026420C-80264250 0044+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_CylAttrCFRC12cCcD_SphAttrP4cXyz            */
//	80264228: 8026F208 (cross__8cM3dGCylCFPC8cM3dGSphP4cXyz)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  cXyz* False
// 	 cXyz False
asm void cCcD_CylAttr::CrossAtTg(cCcD_SphAttr const& param_0, cXyz* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CrossAtTg__12cCcD_CylAttrCFRC12cCcD_SphAttrP4cXyz.s"
}
#pragma pop


/* 80264250-80264288 0038+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_CylAttrCFRC12cCcD_TriAttrP4cXyz            */
//	80264264: 8026C5D0 (cM3d_Cross_CylTri__FPC8cM3dGCylPC8cM3dGTriP3Vec)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  cXyz* False
// 	 cXyz False
asm void cCcD_CylAttr::CrossAtTg(cCcD_TriAttr const& param_0, cXyz* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CrossAtTg__12cCcD_CylAttrCFRC12cCcD_TriAttrP4cXyz.s"
}
#pragma pop


/* 80264288-802642CC 0044+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_CylAttrCFRC12cCcD_CylAttrPf                  */
//	802642A4: 8026C22C (cM3d_Cross_CylCyl__FPC8cM3dGCylPC8cM3dGCylPf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  f32* False
// 	 f32 False
asm void cCcD_CylAttr::CrossCo(cCcD_CylAttr const& param_0, f32* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CrossCo__12cCcD_CylAttrCFRC12cCcD_CylAttrPf.s"
}
#pragma pop


/* 802642CC-80264310 0044+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_CylAttrCFRC12cCcD_SphAttrPf                  */
//	802642E8: 8026B8A4 (cM3d_Cross_CylSph__FPC8cM3dGCylPC8cM3dGSphPf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  f32* False
// 	 f32 False
asm void cCcD_CylAttr::CrossCo(cCcD_SphAttr const& param_0, f32* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CrossCo__12cCcD_CylAttrCFRC12cCcD_SphAttrPf.s"
}
#pragma pop


/* 80264310-80264368 0058+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_CylAttrCFRC12cCcD_CpsAttrPf                  */
//	80264320: 80455020 (lit_2431)
//	80264340: 8026D3D4 (cM3d_Cross_CpsCyl__FRC8cM3dGCpsRC8cM3dGCylP3Vec)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  f32* False
// 	 f32 False
asm void cCcD_CylAttr::CrossCo(cCcD_CpsAttr const& param_0, f32* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CrossCo__12cCcD_CylAttrCFRC12cCcD_CpsAttrPf.s"
}
#pragma pop


/* 80264368-802643D0 0068+00 s=1 e=1 z=0  None .text      CalcAabBox__12cCcD_CylAttrFv                                 */
//	802643BC: 8026EC54 (Set__8cM3dGAabFPC4cXyzPC4cXyz)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void cCcD_CylAttr::CalcAabBox() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CalcAabBox__12cCcD_CylAttrFv.s"
}
#pragma pop


/* 802643D0-802644B8 00E8+00 s=1 e=1 z=0  None .text      GetNVec__12cCcD_CylAttrCFRC4cXyzP4cXyz                       */
//	8026445C: 803470B4 (PSVECSubtract)
//	80264464: 80347150 (PSVECMag)
//	80264470: 80451180 (G_CM3D_F_ABS_MIN)
//	8026447C: 80455020 (lit_2431)
//	8026449C: 803470F4 (PSVECNormalize)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  cXyz* False
// 	 cXyz False
asm void cCcD_CylAttr::GetNVec(cXyz const& param_0, cXyz* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/GetNVec__12cCcD_CylAttrCFRC4cXyzP4cXyz.s"
}
#pragma pop


/* 802644B8-802644EC 0034+00 s=1 e=1 z=0  None .text      getShapeAccess__12cCcD_CylAttrCFPQ214cCcD_ShapeAttr5Shape    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_ShapeAttr::Shape* False
// 	 cCcD_ShapeAttr::Shape False
asm void cCcD_CylAttr::getShapeAccess(cCcD_ShapeAttr::Shape* param_0) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/getShapeAccess__12cCcD_CylAttrCFPQ214cCcD_ShapeAttr5Shape.s"
}
#pragma pop


/* 802644EC-80264538 004C+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_SphAttrCFRC12cCcD_CpsAttrP4cXyz            */
//	80264510: 8026DC3C (cM3d_Cross_CpsSph__FRC8cM3dGCpsRC8cM3dGSphP3Vec)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  cXyz* False
// 	 cXyz False
asm void cCcD_SphAttr::CrossAtTg(cCcD_CpsAttr const& param_0, cXyz* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CrossAtTg__12cCcD_SphAttrCFRC12cCcD_CpsAttrP4cXyz.s"
}
#pragma pop


/* 80264538-8026457C 0044+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_SphAttrCFRC12cCcD_CylAttrP4cXyz            */
//	80264554: 8026F73C (cross__8cM3dGSphCFPC8cM3dGCylP4cXyz)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  cXyz* False
// 	 cXyz False
asm void cCcD_SphAttr::CrossAtTg(cCcD_CylAttr const& param_0, cXyz* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CrossAtTg__12cCcD_SphAttrCFRC12cCcD_CylAttrP4cXyz.s"
}
#pragma pop


/* 8026457C-802645C0 0044+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_SphAttrCFRC12cCcD_SphAttrP4cXyz            */
//	80264598: 8026F710 (cross__8cM3dGSphCFPC8cM3dGSphP4cXyz)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  cXyz* False
// 	 cXyz False
asm void cCcD_SphAttr::CrossAtTg(cCcD_SphAttr const& param_0, cXyz* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CrossAtTg__12cCcD_SphAttrCFRC12cCcD_SphAttrP4cXyz.s"
}
#pragma pop


/* 802645C0-802645F8 0038+00 s=1 e=1 z=0  None .text      CrossAtTg__12cCcD_SphAttrCFRC12cCcD_TriAttrP4cXyz            */
//	802645D4: 8026BF04 (cM3d_Cross_SphTri__FPC8cM3dGSphPC8cM3dGTriP3Vec)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_TriAttr const& False
// 	 cCcD_TriAttr const False
// 		 cCcD_TriAttr False
//  cXyz* False
// 	 cXyz False
asm void cCcD_SphAttr::CrossAtTg(cCcD_TriAttr const& param_0, cXyz* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CrossAtTg__12cCcD_SphAttrCFRC12cCcD_TriAttrP4cXyz.s"
}
#pragma pop


/* 802645F8-80264644 004C+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_SphAttrCFRC12cCcD_CylAttrPf                  */
//	8026461C: 8026B8A4 (cM3d_Cross_CylSph__FPC8cM3dGCylPC8cM3dGSphPf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_CylAttr const& False
// 	 cCcD_CylAttr const False
// 		 cCcD_CylAttr False
//  f32* False
// 	 f32 False
asm void cCcD_SphAttr::CrossCo(cCcD_CylAttr const& param_0, f32* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CrossCo__12cCcD_SphAttrCFRC12cCcD_CylAttrPf.s"
}
#pragma pop


/* 80264644-80264688 0044+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_SphAttrCFRC12cCcD_SphAttrPf                  */
//	80264660: 8026BC7C (cM3d_Cross_SphSph__FPC8cM3dGSphPC8cM3dGSphPf)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_SphAttr const& False
// 	 cCcD_SphAttr const False
// 		 cCcD_SphAttr False
//  f32* False
// 	 f32 False
asm void cCcD_SphAttr::CrossCo(cCcD_SphAttr const& param_0, f32* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CrossCo__12cCcD_SphAttrCFRC12cCcD_SphAttrPf.s"
}
#pragma pop


/* 80264688-802646E0 0058+00 s=1 e=1 z=0  None .text      CrossCo__12cCcD_SphAttrCFRC12cCcD_CpsAttrPf                  */
//	80264698: 80455020 (lit_2431)
//	802646B8: 8026DC3C (cM3d_Cross_CpsSph__FRC8cM3dGCpsRC8cM3dGSphP3Vec)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_CpsAttr const& False
// 	 cCcD_CpsAttr const False
// 		 cCcD_CpsAttr False
//  f32* False
// 	 f32 False
asm void cCcD_SphAttr::CrossCo(cCcD_CpsAttr const& param_0, f32* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CrossCo__12cCcD_SphAttrCFRC12cCcD_CpsAttrPf.s"
}
#pragma pop


/* 802646E0-8026476C 008C+00 s=1 e=2 z=0  None .text      CalcAabBox__12cCcD_SphAttrFv                                 */
//	80264758: 8026EC54 (Set__8cM3dGAabFPC4cXyzPC4cXyz)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void cCcD_SphAttr::CalcAabBox() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/CalcAabBox__12cCcD_SphAttrFv.s"
}
#pragma pop


/* 8026476C-80264808 009C+00 s=1 e=1 z=0  None .text      GetNVec__12cCcD_SphAttrCFRC4cXyzP4cXyz                       */
//	802647B4: 80347150 (PSVECMag)
//	802647C0: 80451180 (G_CM3D_F_ABS_MIN)
//	802647CC: 80455020 (lit_2431)
//	802647EC: 803470F4 (PSVECNormalize)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cXyz const& False
// 	 cXyz const False
// 		 cXyz False
//  cXyz* False
// 	 cXyz False
asm void cCcD_SphAttr::GetNVec(cXyz const& param_0, cXyz* param_1) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/GetNVec__12cCcD_SphAttrCFRC4cXyzP4cXyz.s"
}
#pragma pop


/* 80264808-8026483C 0034+00 s=1 e=1 z=0  None .text      getShapeAccess__12cCcD_SphAttrCFPQ214cCcD_ShapeAttr5Shape    */
//	80264830: 80455020 (lit_2431)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_ShapeAttr::Shape* False
// 	 cCcD_ShapeAttr::Shape False
asm void cCcD_SphAttr::getShapeAccess(cCcD_ShapeAttr::Shape* param_0) const {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/getShapeAccess__12cCcD_SphAttrCFPQ214cCcD_ShapeAttr5Shape.s"
}
#pragma pop


/* 8026483C-8026484C 0010+00 s=0 e=1 z=0  None .text      SetHit__10cCcD_ObjAtFP8cCcD_Obj                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
asm void cCcD_ObjAt::SetHit(cCcD_Obj* param_0) {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/SetHit__10cCcD_ObjAtFP8cCcD_Obj.s"
}
#pragma pop


/* 8026484C-80264868 001C+00 s=1 e=0 z=0  None .text      Set__10cCcD_ObjAtFRC13cCcD_SrcObjAt                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cCcD_SrcObjAt const& False
// 	 cCcD_SrcObjAt const False
// 		 cCcD_SrcObjAt False
asm void cCcD_ObjAt::Set(cCcD_SrcObjAt const& param_0) {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/Set__10cCcD_ObjAtFRC13cCcD_SrcObjAt.s"
}
#pragma pop


/* 80264868-80264880 0018+00 s=0 e=2 z=0  None .text      ClrHit__10cCcD_ObjAtFv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void cCcD_ObjAt::ClrHit() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/ClrHit__10cCcD_ObjAtFv.s"
}
#pragma pop


/* 80264880-80264894 0014+00 s=1 e=0 z=0  None .text      Set__10cCcD_ObjTgFRC13cCcD_SrcObjTg                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  cCcD_SrcObjTg const& False
// 	 cCcD_SrcObjTg const False
// 		 cCcD_SrcObjTg False
asm void cCcD_ObjTg::Set(cCcD_SrcObjTg const& param_0) {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/Set__10cCcD_ObjTgFRC13cCcD_SrcObjTg.s"
}
#pragma pop


/* 80264894-802648B0 001C+00 s=0 e=0 z=2  None .text      SetGrp__10cCcD_ObjTgFUl                                      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  u32 False
asm void cCcD_ObjTg::SetGrp(u32 param_0) {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/SetGrp__10cCcD_ObjTgFUl.s"
}
#pragma pop


/* 802648B0-802648C8 0018+00 s=0 e=2 z=0  None .text      ClrHit__10cCcD_ObjTgFv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void cCcD_ObjTg::ClrHit() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/ClrHit__10cCcD_ObjTgFv.s"
}
#pragma pop


/* 802648C8-802648D8 0010+00 s=0 e=1 z=0  None .text      SetHit__10cCcD_ObjTgFP8cCcD_Obj                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
asm void cCcD_ObjTg::SetHit(cCcD_Obj* param_0) {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/SetHit__10cCcD_ObjTgFP8cCcD_Obj.s"
}
#pragma pop


/* 802648D8-802648E8 0010+00 s=0 e=1 z=0  None .text      SetHit__10cCcD_ObjCoFP8cCcD_Obj                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  cCcD_Obj* False
// 	 cCcD_Obj False
asm void cCcD_ObjCo::SetHit(cCcD_Obj* param_0) {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/SetHit__10cCcD_ObjCoFP8cCcD_Obj.s"
}
#pragma pop


/* 802648E8-80264900 0018+00 s=0 e=2 z=0  None .text      ClrHit__10cCcD_ObjCoFv                                       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm void cCcD_ObjCo::ClrHit() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/ClrHit__10cCcD_ObjCoFv.s"
}
#pragma pop


/* 80264900-8026491C 001C+00 s=0 e=1 z=1  None .text      SetIGrp__10cCcD_ObjCoFUl                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  u32 False
asm void cCcD_ObjCo::SetIGrp(u32 param_0) {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/SetIGrp__10cCcD_ObjCoFUl.s"
}
#pragma pop


/* 8026491C-80264938 001C+00 s=0 e=1 z=7  None .text      SetVsGrp__10cCcD_ObjCoFUl                                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  u32 False
asm void cCcD_ObjCo::SetVsGrp(u32 param_0) {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/SetVsGrp__10cCcD_ObjCoFUl.s"
}
#pragma pop


/* ############################################################################################## */
/* 803C3540-803C35A4 0064+00 s=0 e=5 z=332  None .data      __vt__12cCcD_SphAttr                                         */
SECTION_DATA void* __vt__12cCcD_SphAttr[25] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__12cCcD_SphAttrFv,
	(void*)CrossAtTg__12cCcD_SphAttrCFRC14cCcD_ShapeAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_SphAttrCFRC12cCcD_PntAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_SphAttrCFRC12cCcD_CpsAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_SphAttrCFRC12cCcD_TriAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_SphAttrCFRC12cCcD_AabAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_SphAttrCFRC12cCcD_CylAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_SphAttrCFRC12cCcD_SphAttrP4cXyz,
	(void*)CrossCo__12cCcD_SphAttrCFRC14cCcD_ShapeAttrPf,
	(void*)CrossCo__12cCcD_SphAttrCFRC12cCcD_PntAttrPf,
	(void*)CrossCo__12cCcD_SphAttrCFRC12cCcD_CpsAttrPf,
	(void*)CrossCo__12cCcD_SphAttrCFRC12cCcD_TriAttrPf,
	(void*)CrossCo__12cCcD_SphAttrCFRC12cCcD_AabAttrPf,
	(void*)CrossCo__12cCcD_SphAttrCFRC12cCcD_CylAttrPf,
	(void*)CrossCo__12cCcD_SphAttrCFRC12cCcD_SphAttrPf,
	(void*)GetCoCP__12cCcD_SphAttrCFv,
	(void*)GetCoCP__12cCcD_SphAttrFv,
	(void*)CalcAabBox__12cCcD_SphAttrFv,
	(void*)GetNVec__12cCcD_SphAttrCFRC4cXyzP4cXyz,
	(void*)getShapeAccess__12cCcD_SphAttrCFPQ214cCcD_ShapeAttr5Shape,
	(void*)NULL,
	(void*)NULL,
	(void*)func_80264A64,
};

/* 803C35A4-803C3608 0064+00 s=0 e=9 z=448  None .data      __vt__12cCcD_CylAttr                                         */
SECTION_DATA void* __vt__12cCcD_CylAttr[25] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__12cCcD_CylAttrFv,
	(void*)CrossAtTg__12cCcD_CylAttrCFRC14cCcD_ShapeAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_CylAttrCFRC12cCcD_PntAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_CylAttrCFRC12cCcD_CpsAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_CylAttrCFRC12cCcD_TriAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_CylAttrCFRC12cCcD_AabAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_CylAttrCFRC12cCcD_CylAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_CylAttrCFRC12cCcD_SphAttrP4cXyz,
	(void*)CrossCo__12cCcD_CylAttrCFRC14cCcD_ShapeAttrPf,
	(void*)CrossCo__12cCcD_CylAttrCFRC12cCcD_PntAttrPf,
	(void*)CrossCo__12cCcD_CylAttrCFRC12cCcD_CpsAttrPf,
	(void*)CrossCo__12cCcD_CylAttrCFRC12cCcD_TriAttrPf,
	(void*)CrossCo__12cCcD_CylAttrCFRC12cCcD_AabAttrPf,
	(void*)CrossCo__12cCcD_CylAttrCFRC12cCcD_CylAttrPf,
	(void*)CrossCo__12cCcD_CylAttrCFRC12cCcD_SphAttrPf,
	(void*)GetCoCP__12cCcD_CylAttrCFv,
	(void*)GetCoCP__12cCcD_CylAttrFv,
	(void*)CalcAabBox__12cCcD_CylAttrFv,
	(void*)GetNVec__12cCcD_CylAttrCFRC4cXyzP4cXyz,
	(void*)getShapeAccess__12cCcD_CylAttrCFPQ214cCcD_ShapeAttr5Shape,
	(void*)NULL,
	(void*)NULL,
	(void*)func_80264A5C,
};

/* 803C3608-803C366C 0064+00 s=0 e=9 z=26  None .data      __vt__12cCcD_CpsAttr                                         */
SECTION_DATA void* __vt__12cCcD_CpsAttr[25] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__12cCcD_CpsAttrFv,
	(void*)CrossAtTg__12cCcD_CpsAttrCFRC14cCcD_ShapeAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_PntAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_CpsAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_TriAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_AabAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_CylAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_CpsAttrCFRC12cCcD_SphAttrP4cXyz,
	(void*)CrossCo__12cCcD_CpsAttrCFRC14cCcD_ShapeAttrPf,
	(void*)CrossCo__12cCcD_CpsAttrCFRC12cCcD_PntAttrPf,
	(void*)CrossCo__12cCcD_CpsAttrCFRC12cCcD_CpsAttrPf,
	(void*)CrossCo__12cCcD_CpsAttrCFRC12cCcD_TriAttrPf,
	(void*)CrossCo__12cCcD_CpsAttrCFRC12cCcD_AabAttrPf,
	(void*)CrossCo__12cCcD_CpsAttrCFRC12cCcD_CylAttrPf,
	(void*)CrossCo__12cCcD_CpsAttrCFRC12cCcD_SphAttrPf,
	(void*)GetCoCP__14cCcD_ShapeAttrCFv,
	(void*)GetCoCP__14cCcD_ShapeAttrFv,
	(void*)CalcAabBox__12cCcD_CpsAttrFv,
	(void*)GetNVec__12cCcD_CpsAttrCFRC4cXyzP4cXyz,
	(void*)getShapeAccess__14cCcD_ShapeAttrCFPQ214cCcD_ShapeAttr5Shape,
	(void*)NULL,
	(void*)NULL,
	(void*)func_80264A54,
};

/* 803C366C-803C36D0 0064+00 s=1 e=1 z=5  None .data      __vt__12cCcD_TriAttr                                         */
SECTION_DATA void* __vt__12cCcD_TriAttr[25] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__12cCcD_TriAttrFv,
	(void*)CrossAtTg__12cCcD_TriAttrCFRC14cCcD_ShapeAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_TriAttrCFRC12cCcD_PntAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_TriAttrCFRC12cCcD_CpsAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_TriAttrCFRC12cCcD_TriAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_TriAttrCFRC12cCcD_AabAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_TriAttrCFRC12cCcD_CylAttrP4cXyz,
	(void*)CrossAtTg__12cCcD_TriAttrCFRC12cCcD_SphAttrP4cXyz,
	(void*)CrossCo__12cCcD_TriAttrCFRC14cCcD_ShapeAttrPf,
	(void*)CrossCo__12cCcD_TriAttrCFRC12cCcD_PntAttrPf,
	(void*)CrossCo__12cCcD_TriAttrCFRC12cCcD_CpsAttrPf,
	(void*)CrossCo__12cCcD_TriAttrCFRC12cCcD_TriAttrPf,
	(void*)CrossCo__12cCcD_TriAttrCFRC12cCcD_AabAttrPf,
	(void*)CrossCo__12cCcD_TriAttrCFRC12cCcD_CylAttrPf,
	(void*)CrossCo__12cCcD_TriAttrCFRC12cCcD_SphAttrPf,
	(void*)GetCoCP__14cCcD_ShapeAttrCFv,
	(void*)GetCoCP__14cCcD_ShapeAttrFv,
	(void*)CalcAabBox__12cCcD_TriAttrFv,
	(void*)GetNVec__12cCcD_TriAttrCFRC4cXyzP4cXyz,
	(void*)getShapeAccess__14cCcD_ShapeAttrCFPQ214cCcD_ShapeAttr5Shape,
	(void*)NULL,
	(void*)NULL,
	(void*)func_80264A4C,
};

/* 803C36D0-803C3728 0058+00 s=1 e=18 z=761  None .data      __vt__14cCcD_ShapeAttr                                       */
SECTION_DATA void* __vt__14cCcD_ShapeAttr[22] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__14cCcD_ShapeAttrFv,
	(void*)CrossAtTg__14cCcD_ShapeAttrCFRC14cCcD_ShapeAttrP4cXyz,
	(void*)NULL,
	(void*)NULL,
	(void*)NULL,
	(void*)NULL,
	(void*)NULL,
	(void*)NULL,
	(void*)CrossCo__14cCcD_ShapeAttrCFRC14cCcD_ShapeAttrPf,
	(void*)NULL,
	(void*)NULL,
	(void*)NULL,
	(void*)NULL,
	(void*)NULL,
	(void*)NULL,
	(void*)GetCoCP__14cCcD_ShapeAttrCFv,
	(void*)GetCoCP__14cCcD_ShapeAttrFv,
	(void*)NULL,
	(void*)NULL,
	(void*)getShapeAccess__14cCcD_ShapeAttrCFPQ214cCcD_ShapeAttr5Shape,
};

/* 80264938-802649D8 00A0+00 s=2 e=0 z=0  None .text      __dt__12cCcD_TriAttrFv                                       */
//	80264950: 803C366C (__vt__12cCcD_TriAttr)
//	80264954: 803C366C (__vt__12cCcD_TriAttr)
//	8026496C: 803ABB84 (__vt__8cM3dGTri)
//	80264970: 803ABB84 (__vt__8cM3dGTri)
//	80264980: 803A37C0 (__vt__8cM3dGPla)
//	80264984: 803A37C0 (__vt__8cM3dGPla)
//	80264994: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	80264998: 803C36D0 (__vt__14cCcD_ShapeAttr)
//	802649A4: 803A7218 (__vt__8cM3dGAab)
//	802649A8: 803A7218 (__vt__8cM3dGAab)
//	802649BC: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm cCcD_TriAttr::~cCcD_TriAttr() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/__dt__12cCcD_TriAttrFv.s"
}
#pragma pop


/* 802649D8-802649E0 0008+00 s=1 e=0 z=0  None .text      CrossAtTg__14cCcD_ShapeAttrCFRC14cCcD_ShapeAttrP4cXyz        */
// True False
//  bool False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  cXyz* False
// 	 cXyz False
bool cCcD_ShapeAttr::CrossAtTg(cCcD_ShapeAttr const& param_0, cXyz* param_1) const {
	return false;
}


/* 802649E0-802649E8 0008+00 s=1 e=0 z=0  None .text      CrossCo__14cCcD_ShapeAttrCFRC14cCcD_ShapeAttrPf              */
// True False
//  bool False
//  cCcD_ShapeAttr const& False
// 	 cCcD_ShapeAttr const False
// 		 cCcD_ShapeAttr False
//  f32* False
// 	 f32 False
bool cCcD_ShapeAttr::CrossCo(cCcD_ShapeAttr const& param_0, f32* param_1) const {
	return false;
}


/* 802649E8-802649EC 0004+00 s=1 e=0 z=0  None .text      ClrAt__9cCcD_SttsFv                                          */
// True False
//  void False
void cCcD_Stts::ClrAt() {
	/* empty function */
}


/* 802649EC-802649F8 000C+00 s=1 e=0 z=0  None .text      ClrTg__9cCcD_SttsFv                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void cCcD_Stts::ClrTg() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/ClrTg__9cCcD_SttsFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80430CA8-80430CB4 000C+00 s=1 e=0 z=0  None .bss       @2414                                                        */
static u8 lit_2414[12];

/* 80430CB4-80430CC0 000C+00 s=1 e=2 z=0  None .bss       m_virtual_center__14cCcD_ShapeAttr                           */
u8 m_virtual_center__14cCcD_ShapeAttr[12];

/* 802649F8-80264A4C 0054+00 s=0 e=0 z=0  None .text      __sinit_c_cc_d_cpp                                           */
//	80264A04: 80430CF4 (Zero__4cXyz)
//	80264A08: 80430CF4 (Zero__4cXyz)
//	80264A10: 80430CB4 (m_virtual_center__14cCcD_ShapeAttr)
//	80264A14: 80430CB4 (m_virtual_center__14cCcD_ShapeAttr)
//	80264A28: 80009184 (__dt__4cXyzFv)
//	80264A2C: 80009184 (__dt__4cXyzFv)
//	80264A30: 80430CA8 (lit_2414)
//	80264A34: 80430CA8 (lit_2414)
//	80264A38: 80361C24 (__register_global_object)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void __sinit_c_cc_d_cpp() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/__sinit_c_cc_d_cpp.s"
}
#pragma pop

#pragma push
#pragma force_active on
#pragma section ".ctors$15"
__declspec(section ".ctors$15") void* const _ctors_802649F8 = (void*)__sinit_c_cc_d_cpp;
#pragma pop


/* 80264A4C-80264A54 0008+00 s=1 e=0 z=0  None .text      @32@__dt__12cCcD_TriAttrFv                                   */
//	80264A50: 80264938 (__dt__12cCcD_TriAttrFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_80264A4C() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/func_80264A4C.s"
}
#pragma pop


/* 80264A54-80264A5C 0008+00 s=1 e=0 z=0  None .text      @32@__dt__12cCcD_CpsAttrFv                                   */
//	80264A58: 80085450 (__dt__12cCcD_CpsAttrFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_80264A54() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/func_80264A54.s"
}
#pragma pop


/* 80264A5C-80264A64 0008+00 s=1 e=0 z=0  None .text      @32@__dt__12cCcD_CylAttrFv                                   */
//	80264A60: 800854E0 (__dt__12cCcD_CylAttrFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_80264A5C() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/func_80264A5C.s"
}
#pragma pop


/* 80264A64-80264A6C 0008+00 s=1 e=0 z=0  None .text      @32@__dt__12cCcD_SphAttrFv                                   */
//	80264A68: 8008721C (__dt__12cCcD_SphAttrFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void func_80264A64() {
	nofralloc
#include "asm/SSystem/SComponent/c_cc_d/func_80264A64.s"
}
#pragma pop


/* ############################################################################################## */
/* 803C3728-803C3748 0020+00 s=0 e=9 z=611  None .data      __vt__9cCcD_Stts                                             */
SECTION_DATA void* __vt__9cCcD_Stts[8] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__9cCcD_SttsFv,
	(void*)GetGStts__9cCcD_SttsCFv,
	(void*)GetGStts__9cCcD_SttsFv,
	(void*)Ct__9cCcD_SttsFv,
	(void*)ClrAt__9cCcD_SttsFv,
	(void*)ClrTg__9cCcD_SttsFv,
};

