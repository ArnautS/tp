// 
// Generated By: dol2asm
// Translation Unit: Z2Audience
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "Z2AudioLib/Z2Audience.h"

// 
// Types:
// 

struct Vec {
};

struct JASSoundParams {
	/* 8029E3B0 */ // False False
void clamp();
	/* 8029E47C */ // False False
//  JASSoundParams const& False
// 	 JASSoundParams const False
// 		 JASSoundParams False
//  JASSoundParams const& False
// 	 JASSoundParams const False
// 		 JASSoundParams False
void combine(JASSoundParams const&, JASSoundParams const&);
};

struct JGeometry {
	template <typename A1>
	struct TVec3 { };
	/* TVec3<f32> */
	struct TVec3__template0 {
	};

};

struct Z2Audible {
	/* 802BBD94 */ // False True
//  JGeometry::TVec3<f32> const& False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
//  JGeometry::TVec3<f32> const* False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
//  u32 False
//  bool False
Z2Audible(JGeometry::TVec3<f32> const&, JGeometry::TVec3<f32> const*, u32, bool);
	/* 802BBE98 */ // True False
void calc();
	/* 802BBED0 */ // True False
//  int False
void getOuterParams(int);
	/* 802BBEE4 */ // True False
//  JASSoundParams const& False
// 	 JASSoundParams const False
// 		 JASSoundParams False
//  JASSoundParams const& False
// 	 JASSoundParams const False
// 		 JASSoundParams False
//  int False
void setOuterParams(JASSoundParams const&, JASSoundParams const&, int);
	/* 802BC204 */ // True False
//  int False
void getChannel(int);
	/* 802BC218 */ // True False
void getDistVolBit();
	/* 802BD510 */ // True False
~Z2Audible();
};

struct Z2AudioCamera {
	/* 802BC758 */ // True False
Z2AudioCamera();
	/* 802BC788 */ // True False
void init();
	/* 802BC8AC */ // True False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  Vec& False
// 	 Vec False
//  Vec& False
// 	 Vec False
//  f32 False
//  f32 False
//  bool False
//  bool False
void setCameraState(f32 (* )[4], Vec&, Vec&, f32, f32, bool, bool);
	/* 802BC7DC */ // True False
//  f32 const (* )[4] False
// 	 f32 const False
// 		 f32 False
// 	 * False
// 		  False
//  Vec& False
// 	 Vec False
//  bool False
void setCameraState(f32 const (* )[4], Vec&, bool);
	/* 802BCBEC */ // True False
//  Z2Audible* False
// 	 Z2Audible False
//  int False
void convertAbsToRel(Z2Audible*, int);
	/* 802BCC7C */ // True False
//  Vec& False
// 	 Vec False
//  Vec* False
// 	 Vec False
void convertAbsToRel(Vec&, Vec*) const;
	/* 802BCCC0 */ // True False
//  Vec& False
// 	 Vec False
void isInSight(Vec&) const;
};

struct Z2SpotMic {
	/* 802BCD28 */ // True False
Z2SpotMic();
	/* 802BCDA8 */ // True False
//  int False
void clearMicState(int);
	/* 802BCDE8 */ // True False
//  int False
void calcVolumeFactor(int);
	/* 802BCE14 */ // True False
//  Z2AudioCamera* False
// 	 Z2AudioCamera False
//  int False
void setMicState(Z2AudioCamera*, int);
	/* 802BCF5C */ // True False
//  Z2Audible* False
// 	 Z2Audible False
void calcMicDist(Z2Audible*);
	/* 802BCFE4 */ // True False
//  f32 False
void calcMicPriority(f32);
	/* 802BD03C */ // True False
//  f32 False
//  int False
//  f32 False
void calcMicVolume(f32, int, f32);
};

struct JAISoundID {
};

struct Z2SoundInfo {
	/* 802BB158 */ // False False
//  JAISoundID False
void getAudibleSwFull(JAISoundID);
};

struct Z2Calc {
	struct CurveSign {
	};

	/* 802A968C */ // False False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  bool False
void linearTransform(f32, f32, f32, f32, f32, bool);
	/* 802A96F4 */ // False False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  Z2Calc::CurveSign False
void getParamByExp(f32, f32, f32, f32, f32, f32, Z2Calc::CurveSign);
};

struct Z2Audience3DSetting {
	/* 802BC248 */ // True False
Z2Audience3DSetting();
	/* 802BC284 */ // True False
void init();
	/* 802BC308 */ // True False
void initVolumeDist();
	/* 802BC4D0 */ // True False
//  f32 False
void updateVolumeDist(f32);
	/* 802BC6A4 */ // True False
void initDolbyDist();
	/* 802BC6F8 */ // True False
//  f32 False
//  f32 False
void updateDolbyDist(f32, f32);
};

struct Z2AudibleChannel {
	/* 802BBE74 */ // True False
Z2AudibleChannel();
};

struct JAIAudible {
	/* 8029EFAC */ // False False
~JAIAudible();
};

struct Z2Audience {
	/* 802BD130 */ // False False
Z2Audience();
	/* 802BD1FC */ // False False
~Z2Audience();
	/* 802BD2DC */ // False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  Vec& False
// 	 Vec False
//  Vec& False
// 	 Vec False
//  f32 False
//  f32 False
//  bool False
//  int False
//  bool False
void setAudioCamera(f32 (* )[4], Vec&, Vec&, f32, f32, bool, int, bool);
	/* 802BD338 */ // False True
//  JGeometry::TVec3<f32> const& False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
//  JAISoundID False
//  JGeometry::TVec3<f32> const* False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
//  u32 False
void newAudible(JGeometry::TVec3<f32> const&, JAISoundID, JGeometry::TVec3<f32> const*, u32);
	/* 802BD4D4 */ // True False
//  JAIAudible* False
// 	 JAIAudible False
void deleteAudible(JAIAudible*);
	/* 802BD5B8 */ // True False
//  JAIAudible* False
// 	 JAIAudible False
void calcPriority(JAIAudible*);
	/* 802BD704 */ // False False
//  f32 False
void calcOffMicSound(f32);
	/* 802BD71C */ // True False
//  JASSoundParams const& False
// 	 JASSoundParams const False
// 		 JASSoundParams False
//  JAIAudible* False
// 	 JAIAudible False
//  int False
void mixChannelOut(JASSoundParams const&, JAIAudible*, int);
	/* 802BD90C */ // False False
//  f32 False
//  int False
void setTargetVolume(f32, int);
	/* 802BD92C */ // False False
//  Vec& False
// 	 Vec False
//  Vec* False
// 	 Vec False
//  int False
void convertAbsToRel(Vec&, Vec*, int);
	/* 802BD95C */ // False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
//  f32 False
//  int False
void calcRelPosVolume(Vec const&, f32, int);
	/* 802BDA44 */ // False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
//  int False
void calcRelPosPan(Vec const&, int);
	/* 802BDB44 */ // False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
//  int False
void calcRelPosDolby(Vec const&, int);
	/* 802BDBDC */ // True False
//  f32 False
//  int False
void calcVolume_(f32, int) const;
	/* 802BDC44 */ // True False
//  f32 False
//  int False
//  bool False
void calcDeltaPriority_(f32, int, bool) const;
	/* 802BDCB0 */ // False True
//  JGeometry::TVec3<f32> const& False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
//  JGeometry::TVec3<f32> const& False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
//  JGeometry::TVec3<f32> const& False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
//  f32 False
void calcPitchDoppler_(JGeometry::TVec3<f32> const&, JGeometry::TVec3<f32> const&, JGeometry::TVec3<f32> const&, f32) const;
	/* 802BDD00 */ // True False
//  f32 False
//  int False
void calcFxMix_(f32, int) const;
	/* 802BDD48 */ // True False
//  Z2AudibleChannel* False
// 	 Z2AudibleChannel False
//  Z2Audible const* False
// 	 Z2Audible const False
// 		 Z2Audible False
//  Z2AudioCamera const* False
// 	 Z2AudioCamera const False
// 		 Z2AudioCamera False
void calcPitch_(Z2AudibleChannel*, Z2Audible const*, Z2AudioCamera const*) const;
	/* 802BDED4 */ // True False
void getMaxChannels();
};

struct Z2AudibleAbsPos {
	/* 802BBCDC */ // False True
//  JGeometry::TVec3<f32> const& False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
void calc(JGeometry::TVec3<f32> const&);
	/* 802BBD18 */ // False True
//  JGeometry::TVec3<f32>* False
// 	 JGeometry::TVec3<f32> True
// 		 f32 False
//  JGeometry::TVec3<f32> const& False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
//  JGeometry::TVec3<f32> const* False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
void init(JGeometry::TVec3<f32>*, JGeometry::TVec3<f32> const&, JGeometry::TVec3<f32> const*);
};

template <typename A0>
struct JASMemPool { };
/* JASMemPool<Z2Audible> */
struct JASMemPool__template5 {
	/* 802BD288 */ // False True
~JASMemPool__template5();
};

struct JASGenericMemPool {
	/* 80290848 */ // False False
JASGenericMemPool();
	/* 80290860 */ // False False
~JASGenericMemPool();
	/* 80290948 */ // False False
//  u32 False
void alloc(u32);
	/* 80290994 */ // False False
//  void* False
// 	 void False
//  u32 False
void free(void*, u32);
};

struct JAIAudience {
	/* 8029EFF4 */ // False False
~JAIAudience();
};

// 
// Forward References:
// 


// False True
//  JGeometry::TVec3<f32> const& False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
extern "C" void func_802BBCDC();
// False True
//  JGeometry::TVec3<f32>* False
// 	 JGeometry::TVec3<f32> True
// 		 f32 False
//  JGeometry::TVec3<f32> const& False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
//  JGeometry::TVec3<f32> const* False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
extern "C" void func_802BBD18();
// False True
//  JGeometry::TVec3<f32> const& False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
//  JGeometry::TVec3<f32> const* False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
//  u32 False
//  bool False
extern "C" void func_802BBD94();
// True False
extern "C" void __ct__16Z2AudibleChannelFv();
// True False
extern "C" void calc__9Z2AudibleFv();
// True False
//  int False
extern "C" void getOuterParams__9Z2AudibleFi();
// True False
//  JASSoundParams const& False
// 	 JASSoundParams const False
// 		 JASSoundParams False
//  JASSoundParams const& False
// 	 JASSoundParams const False
// 		 JASSoundParams False
//  int False
extern "C" void setOuterParams__9Z2AudibleFRC14JASSoundParamsRC14JASSoundParamsi();
// True False
//  int False
extern "C" void getChannel__9Z2AudibleFi();
// True False
extern "C" void getDistVolBit__9Z2AudibleFv();
// True False
extern "C" void __ct__19Z2Audience3DSettingFv();
// True False
extern "C" void init__19Z2Audience3DSettingFv();
// True False
extern "C" void initVolumeDist__19Z2Audience3DSettingFv();
// True False
//  f32 False
extern "C" void updateVolumeDist__19Z2Audience3DSettingFf();
// True False
extern "C" void initDolbyDist__19Z2Audience3DSettingFv();
// True False
//  f32 False
//  f32 False
extern "C" void updateDolbyDist__19Z2Audience3DSettingFff();
// True False
extern "C" void __ct__13Z2AudioCameraFv();
// True False
extern "C" void init__13Z2AudioCameraFv();
// True False
//  f32 const (* )[4] False
// 	 f32 const False
// 		 f32 False
// 	 * False
// 		  False
//  Vec& False
// 	 Vec False
//  bool False
extern "C" void setCameraState__13Z2AudioCameraFPA4_CfR3Vecb();
// True False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  Vec& False
// 	 Vec False
//  Vec& False
// 	 Vec False
//  f32 False
//  f32 False
//  bool False
//  bool False
extern "C" void setCameraState__13Z2AudioCameraFPA4_fR3VecR3Vecffbb();
// True False
//  Z2Audible* False
// 	 Z2Audible False
//  int False
extern "C" void convertAbsToRel__13Z2AudioCameraFP9Z2Audiblei();
// True False
//  Vec& False
// 	 Vec False
//  Vec* False
// 	 Vec False
extern "C" void convertAbsToRel__13Z2AudioCameraCFR3VecP3Vec();
// True False
//  Vec& False
// 	 Vec False
extern "C" void isInSight__13Z2AudioCameraCFR3Vec();
// True False
extern "C" void __ct__9Z2SpotMicFv();
// True False
//  int False
extern "C" void clearMicState__9Z2SpotMicFi();
// True False
//  int False
extern "C" void calcVolumeFactor__9Z2SpotMicFi();
// True False
//  Z2AudioCamera* False
// 	 Z2AudioCamera False
//  int False
extern "C" void setMicState__9Z2SpotMicFP13Z2AudioCamerai();
// True False
//  Z2Audible* False
// 	 Z2Audible False
extern "C" void calcMicDist__9Z2SpotMicFP9Z2Audible();
// True False
//  f32 False
extern "C" void calcMicPriority__9Z2SpotMicFf();
// True False
//  f32 False
//  int False
//  f32 False
extern "C" void calcMicVolume__9Z2SpotMicFfif();
// False False
extern "C" void __ct__10Z2AudienceFv();
// False False
extern "C" void __dt__10Z2AudienceFv();
// False True
extern "C" void func_802BD288();
// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  Vec& False
// 	 Vec False
//  Vec& False
// 	 Vec False
//  f32 False
//  f32 False
//  bool False
//  int False
//  bool False
extern "C" void setAudioCamera__10Z2AudienceFPA4_fR3VecR3Vecffbib();
// False True
//  JGeometry::TVec3<f32> const& False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
//  JAISoundID False
//  JGeometry::TVec3<f32> const* False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
//  u32 False
extern "C" void func_802BD338();
// True False
//  JAIAudible* False
// 	 JAIAudible False
extern "C" void deleteAudible__10Z2AudienceFP10JAIAudible();
// True False
extern "C" void __dt__9Z2AudibleFv();
// True False
//  JAIAudible* False
// 	 JAIAudible False
extern "C" void calcPriority__10Z2AudienceFP10JAIAudible();
// False False
//  f32 False
extern "C" void calcOffMicSound__10Z2AudienceFf();
// True False
//  JASSoundParams const& False
// 	 JASSoundParams const False
// 		 JASSoundParams False
//  JAIAudible* False
// 	 JAIAudible False
//  int False
extern "C" void mixChannelOut__10Z2AudienceFRC14JASSoundParamsP10JAIAudiblei();
// False False
//  f32 False
//  int False
extern "C" void setTargetVolume__10Z2AudienceFfi();
// False False
//  Vec& False
// 	 Vec False
//  Vec* False
// 	 Vec False
//  int False
extern "C" void convertAbsToRel__10Z2AudienceFR3VecP3Veci();
// False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
//  f32 False
//  int False
extern "C" void calcRelPosVolume__10Z2AudienceFRC3Vecfi();
// False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
//  int False
extern "C" void calcRelPosPan__10Z2AudienceFRC3Veci();
// False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
//  int False
extern "C" void calcRelPosDolby__10Z2AudienceFRC3Veci();
// True False
//  f32 False
//  int False
extern "C" void calcVolume___10Z2AudienceCFfi();
// True False
//  f32 False
//  int False
//  bool False
extern "C" void calcDeltaPriority___10Z2AudienceCFfib();
// False True
//  JGeometry::TVec3<f32> const& False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
//  JGeometry::TVec3<f32> const& False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
//  JGeometry::TVec3<f32> const& False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
//  f32 False
extern "C" void func_802BDCB0();
// True False
//  f32 False
//  int False
extern "C" void calcFxMix___10Z2AudienceCFfi();
// True False
//  Z2AudibleChannel* False
// 	 Z2AudibleChannel False
//  Z2Audible const* False
// 	 Z2Audible const False
// 		 Z2Audible False
//  Z2AudioCamera const* False
// 	 Z2AudioCamera const False
// 		 Z2AudioCamera False
extern "C" void calcPitch___10Z2AudienceCFP16Z2AudibleChannelPC9Z2AudiblePC13Z2AudioCamera();
// True False
extern "C" void getMaxChannels__10Z2AudienceFv();
// False False
extern "C" void __sinit_Z2Audience_cpp();
extern "C" extern void* __vt__10Z2Audience[8];
extern "C" extern void* __vt__9Z2Audible[5 + 1 /* padding */];
extern "C" extern u8 data_804341E4[16 + 4 /* padding */];
extern "C" extern u8 data_80451354[4];
extern "C" extern u8 struct_80451358[8];

// 
// External References:
// 

// False False
//  void False
//  void* False
// 	 void False
void operator delete(void*);

// False False
extern "C" void __ct__17JASGenericMemPoolFv();
// False False
extern "C" void __dt__17JASGenericMemPoolFv();
// False False
//  u32 False
extern "C" void alloc__17JASGenericMemPoolFUl();
// False False
//  void* False
// 	 void False
//  u32 False
extern "C" void free__17JASGenericMemPoolFPvUl();
// False False
extern "C" void clamp__14JASSoundParamsFv();
// False False
//  JASSoundParams const& False
// 	 JASSoundParams const False
// 		 JASSoundParams False
//  JASSoundParams const& False
// 	 JASSoundParams const False
// 		 JASSoundParams False
extern "C" void combine__14JASSoundParamsFRC14JASSoundParamsRC14JASSoundParams();
// False False
extern "C" void __dt__10JAIAudibleFv();
// False False
extern "C" void __dt__11JAIAudienceFv();
// False False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  bool False
extern "C" void linearTransform__6Z2CalcFfffffb();
// False False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  f32 False
//  Z2Calc::CurveSign False
extern "C" void getParamByExp__6Z2CalcFffffffQ26Z2Calc9CurveSign();
// False False
//  JAISoundID False
extern "C" void getAudibleSwFull__11Z2SoundInfoF10JAISoundID();
// False False
//  void False
//  void* False
// 	 void False
extern "C" void __dl__FPv();
// False False
extern "C" void PSMTXIdentity();
// False False
extern "C" void PSMTXRotAxisRad();
// False False
extern "C" void PSMTXMultVec();
// False False
extern "C" void PSVECSubtract();
// False False
extern "C" void PSVECMag();
// False False
extern "C" void __register_global_object();
// False False
extern "C" void __construct_array();
// False False
extern "C" void __cvt_fp2unsigned();
// False False
extern "C" void _savegpr_25();
// False False
extern "C" void _savegpr_26();
// False False
extern "C" void _savegpr_27();
// False False
extern "C" void _savegpr_28();
// False False
extern "C" void _savegpr_29();
// False False
extern "C" void _restgpr_25();
// False False
extern "C" void _restgpr_26();
// False False
extern "C" void _restgpr_27();
// False False
extern "C" void _restgpr_28();
// False False
extern "C" void _restgpr_29();
extern "C" extern void* __vt__10JAIAudible[5 + 1 /* padding */];
extern "C" extern void* __vt__11JAIAudience[8];
extern "C" extern u8 sincosTable___5JMath[65536];
extern "C" extern f32 DISTANCE_MAX__7Z2Param;
extern "C" extern f32 MAX_VOLUME_DISTANCE__7Z2Param;
extern "C" extern f32 DOLBY_CENTER_VALUE__7Z2Param;
extern "C" extern f32 DOLBY_FLONT_DISTANCE_MAX__7Z2Param;
extern "C" extern f32 DOLBY_BEHIND_DISTANCE_MAX__7Z2Param;
extern "C" extern f32 DISTANCE_FX_PARAM__7Z2Param;
extern "C" extern f32 SONIC_SPEED__7Z2Param;
extern "C" extern u32 __float_epsilon;
extern "C" extern u8 data_80450B44[4];
extern "C" extern u8 data_80450B4C[4];
extern "C" extern f32 MIN_DISTANCE_VOLUME__7Z2Param;

// 
// Declarations:
// 

/* 802BBCDC-802BBD18 003C+00 s=1 e=0 z=0  None .text      calc__15Z2AudibleAbsPosFRCQ29JGeometry8TVec3<f>              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False True
//  JGeometry::TVec3<f32> const& False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
asm void Z2AudibleAbsPos::calc(JGeometry::TVec3<f32> const& param_0) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/func_802BBCDC.s"
}
#pragma pop


/* ############################################################################################## */
/* 80455AA0-80455AA4 0004+00 s=19 e=0 z=0  None .sdata2    @848                                                         */
SECTION_SDATA2 static u8 lit_848[4] = {
	0x00, 0x00, 0x00, 0x00,
};

/* 802BBD18-802BBD94 007C+00 s=1 e=0 z=0  None .text      init__15Z2AudibleAbsPosFPQ29JGeometry8TVec3<f>RCQ29JGeometry8TVec3<f>PCQ29JGeometry8TVec3<f> */
//	802BBD80: 80455AA0 (lit_848)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False True
//  JGeometry::TVec3<f32>* False
// 	 JGeometry::TVec3<f32> True
// 		 f32 False
//  JGeometry::TVec3<f32> const& False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
//  JGeometry::TVec3<f32> const* False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
asm void Z2AudibleAbsPos::init(JGeometry::TVec3<f32>* param_0, JGeometry::TVec3<f32> const& param_1, JGeometry::TVec3<f32> const* param_2) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/func_802BBD18.s"
}
#pragma pop


/* ############################################################################################## */
/* 803CAC98-803CACB8 0020+00 s=2 e=0 z=0  None .data      __vt__10Z2Audience                                           */
SECTION_DATA void* __vt__10Z2Audience[8] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__10Z2AudienceFv,
	(void*)func_802BD338,
	(void*)getMaxChannels__10Z2AudienceFv,
	(void*)deleteAudible__10Z2AudienceFP10JAIAudible,
	(void*)calcPriority__10Z2AudienceFP10JAIAudible,
	(void*)mixChannelOut__10Z2AudienceFRC14JASSoundParamsP10JAIAudiblei,
};

/* 803CACB8-803CACD0 0014+04 s=2 e=0 z=0  None .data      __vt__9Z2Audible                                             */
SECTION_DATA void* __vt__9Z2Audible[5 + 1 /* padding */] = {
	(void*)NULL /* RTTI */,
	(void*)NULL,
	(void*)__dt__9Z2AudibleFv,
	(void*)getOuterParams__9Z2AudibleFi,
	(void*)calc__9Z2AudibleFv,
	/* padding */
	NULL,
};

/* 80455AA4-80455AA8 0004+00 s=16 e=0 z=0  None .sdata2    @894                                                         */
SECTION_SDATA2 static f32 lit_894 = 1.0f;

/* 80455AA8-80455AAC 0004+00 s=10 e=0 z=0  None .sdata2    @895                                                         */
SECTION_SDATA2 static f32 lit_895 = 0.5f;

/* 80455AAC-80455AB0 0004+00 s=5 e=0 z=0  None .sdata2    @896                                                         */
SECTION_SDATA2 static f32 lit_896 = -1.0f;

/* 802BBD94-802BBE74 00E0+00 s=1 e=0 z=0  None .text      __ct__9Z2AudibleFRCQ29JGeometry8TVec3<f>PCQ29JGeometry8TVec3<f>Ulb */
//	802BBDA4: 803621D8 (_savegpr_28)
//	802BBDB8: 803C9820 (__vt__10JAIAudible)
//	802BBDBC: 803C9820 (__vt__10JAIAudible)
//	802BBDC4: 803CACB8 (__vt__9Z2Audible)
//	802BBDC8: 803CACB8 (__vt__9Z2Audible)
//	802BBDD4: 802BBE74 (__ct__16Z2AudibleChannelFv)
//	802BBDD8: 802BBE74 (__ct__16Z2AudibleChannelFv)
//	802BBDE8: 80361D60 (__construct_array)
//	802BBE04: 802BBD18 (func_802BBD18)
//	802BBE1C: 80455AA4 (lit_894)
//	802BBE28: 80455AA0 (lit_848)
//	802BBE30: 80455AA8 (lit_895)
//	802BBE3C: 80455AAC (lit_896)
//	802BBE50: 80455AA0 (lit_848)
//	802BBE60: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False True
//  JGeometry::TVec3<f32> const& False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
//  JGeometry::TVec3<f32> const* False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
//  u32 False
//  bool False
asm Z2Audible::Z2Audible(JGeometry::TVec3<f32> const& param_0, JGeometry::TVec3<f32> const* param_1, u32 param_2, bool param_3) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/func_802BBD94.s"
}
#pragma pop


/* 802BBE74-802BBE98 0024+00 s=1 e=0 z=0  None .text      __ct__16Z2AudibleChannelFv                                   */
//	802BBE74: 80455AA4 (lit_894)
//	802BBE80: 80455AA0 (lit_848)
//	802BBE88: 80455AA8 (lit_895)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm Z2AudibleChannel::Z2AudibleChannel() {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/__ct__16Z2AudibleChannelFv.s"
}
#pragma pop


/* 802BBE98-802BBED0 0038+00 s=1 e=0 z=0  None .text      calc__9Z2AudibleFv                                           */
//	802BBEBC: 802BBCDC (func_802BBCDC)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void Z2Audible::calc() {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/calc__9Z2AudibleFv.s"
}
#pragma pop


/* 802BBED0-802BBEE4 0014+00 s=1 e=0 z=0  None .text      getOuterParams__9Z2AudibleFi                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
asm void Z2Audible::getOuterParams(int param_0) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/getOuterParams__9Z2AudibleFi.s"
}
#pragma pop


/* ############################################################################################## */
/* 80455AB0-80455AB4 0004+00 s=4 e=0 z=0  None .sdata2    @998                                                         */
SECTION_SDATA2 static f32 lit_998 = 3.0f;

/* 80455AB4-80455AB8 0004+00 s=1 e=0 z=0  None .sdata2    @999                                                         */
SECTION_SDATA2 static f32 lit_999 = 15.0f;

/* 80455AB8-80455ABC 0004+00 s=4 e=0 z=0  None .sdata2    @1000                                                        */
SECTION_SDATA2 static f32 lit_1000 = 3.0f / 10.0f;

/* 80455ABC-80455AC0 0004+00 s=1 e=0 z=0  None .sdata2    @1001                                                        */
SECTION_SDATA2 static f32 lit_1001 = 0.0010000000474974513f;

/* 80455AC0-80455AC4 0004+00 s=2 e=0 z=0  None .sdata2    @1002                                                        */
SECTION_SDATA2 static f32 lit_1002 = 1.0f / 10.0f;

/* 80455AC4-80455AC8 0004+00 s=1 e=0 z=0  None .sdata2    @1003                                                        */
SECTION_SDATA2 static f32 lit_1003 = 1.0f / 30.0f;

/* 80455AC8-80455AD0 0004+04 s=1 e=0 z=0  None .sdata2    @1004                                                        */
SECTION_SDATA2 static f32 lit_1004[1 + 1 /* padding */] = {
	1.0f / 3.0f,
	/* padding */
	0.0f,
};

/* 80455AD0-80455AD8 0008+00 s=4 e=0 z=0  None .sdata2    @1008                                                        */
SECTION_SDATA2 static f64 lit_1008 = 4503599627370496.0 /* cast u32 to float */;

/* 802BBEE4-802BC204 0320+00 s=1 e=0 z=0  None .text      setOuterParams__9Z2AudibleFRC14JASSoundParamsRC14JASSoundParamsi */
//	802BBF14: 803621DC (_savegpr_29)
//	802BBF3C: 8029E47C (combine__14JASSoundParamsFRC14JASSoundParamsRC14JASSoundParams)
//	802BBF48: 80455AA0 (lit_848)
//	802BBF54: 80455AA4 (lit_894)
//	802BBF70: 8029E47C (combine__14JASSoundParamsFRC14JASSoundParamsRC14JASSoundParams)
//	802BBF78: 80455AA4 (lit_894)
//	802BBF88: 80455AA8 (lit_895)
//	802BBFE4: 80455AB0 (lit_998)
//	802BC004: 80455AA4 (lit_894)
//	802BC008: 80455AD0 (lit_1008)
//	802BC020: 80455AA0 (lit_848)
//	802BC024: 80455AB4 (lit_999)
//	802BC02C: 80455AB8 (lit_1000)
//	802BC034: 802A968C (linearTransform__6Z2CalcFfffffb)
//	802BC048: 80455ABC (lit_1001)
//	802BC058: 80455AB8 (lit_1000)
//	802BC05C: 80455AC0 (lit_1002)
//	802BC060: 80455AA4 (lit_894)
//	802BC068: 802A96F4 (getParamByExp__6Z2CalcFffffffQ26Z2Calc9CurveSign)
//	802BC070: 80455AA0 (lit_848)
//	802BC088: 80455AA0 (lit_848)
//	802BC098: 80455AA4 (lit_894)
//	802BC09C: 80455AC0 (lit_1002)
//	802BC0A4: 80455AA8 (lit_895)
//	802BC0AC: 802A96F4 (getParamByExp__6Z2CalcFffffffQ26Z2Calc9CurveSign)
//	802BC0B8: 80455AAC (lit_896)
//	802BC0BC: 80455AC0 (lit_1002)
//	802BC0C0: 80455AC4 (lit_1003)
//	802BC0C4: 80455AA8 (lit_895)
//	802BC0CC: 802A96F4 (getParamByExp__6Z2CalcFffffffQ26Z2Calc9CurveSign)
//	802BC0DC: 80455AA0 (lit_848)
//	802BC0F0: 80455AA4 (lit_894)
//	802BC11C: 80455AA4 (lit_894)
//	802BC120: 80455AA0 (lit_848)
//	802BC124: 80455AC0 (lit_1002)
//	802BC128: 80455AC4 (lit_1003)
//	802BC12C: 80455AC8 (lit_1004)
//	802BC134: 802A96F4 (getParamByExp__6Z2CalcFffffffQ26Z2Calc9CurveSign)
//	802BC148: 80455AA4 (lit_894)
//	802BC14C: 80455AA0 (lit_848)
//	802BC150: 80455AC0 (lit_1002)
//	802BC154: 80455AC4 (lit_1003)
//	802BC158: 80455AC8 (lit_1004)
//	802BC160: 802A96F4 (getParamByExp__6Z2CalcFffffffQ26Z2Calc9CurveSign)
//	802BC164: 80455AC8 (lit_1004)
//	802BC174: 80455AC8 (lit_1004)
//	802BC1A8: 8029E3B0 (clamp__14JASSoundParamsFv)
//	802BC1B8: 8029E47C (combine__14JASSoundParamsFRC14JASSoundParamsRC14JASSoundParams)
//	802BC1F0: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  JASSoundParams const& False
// 	 JASSoundParams const False
// 		 JASSoundParams False
//  JASSoundParams const& False
// 	 JASSoundParams const False
// 		 JASSoundParams False
//  int False
asm void Z2Audible::setOuterParams(JASSoundParams const& param_0, JASSoundParams const& param_1, int param_2) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/setOuterParams__9Z2AudibleFRC14JASSoundParamsRC14JASSoundParamsi.s"
}
#pragma pop


/* 802BC204-802BC218 0014+00 s=4 e=0 z=0  None .text      getChannel__9Z2AudibleFi                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
asm void Z2Audible::getChannel(int param_0) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/getChannel__9Z2AudibleFi.s"
}
#pragma pop


/* 802BC218-802BC248 0030+00 s=3 e=0 z=0  None .text      getDistVolBit__9Z2AudibleFv                                  */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void Z2Audible::getDistVolBit() {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/getDistVolBit__9Z2AudibleFv.s"
}
#pragma pop


/* 802BC248-802BC284 003C+00 s=1 e=0 z=0  None .text      __ct__19Z2Audience3DSettingFv                                */
//	802BC268: 802BC284 (init__19Z2Audience3DSettingFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm Z2Audience3DSetting::Z2Audience3DSetting() {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/__ct__19Z2Audience3DSettingFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80455AD8-80455ADC 0004+00 s=4 e=0 z=0  None .sdata2    @1036                                                        */
SECTION_SDATA2 static f32 lit_1036 = 1.5f;

/* 802BC284-802BC308 0084+00 s=1 e=0 z=0  None .text      init__19Z2Audience3DSettingFv                                */
//	802BC298: 80451338 (MIN_DISTANCE_VOLUME__7Z2Param)
//	802BC2A0: 804507E8 (DOLBY_BEHIND_DISTANCE_MAX__7Z2Param)
//	802BC2A8: 804507E4 (DOLBY_FLONT_DISTANCE_MAX__7Z2Param)
//	802BC2B0: 804507EC (DISTANCE_FX_PARAM__7Z2Param)
//	802BC2B8: 80455AA0 (lit_848)
//	802BC2C0: 804507E0 (DOLBY_CENTER_VALUE__7Z2Param)
//	802BC2C8: 80455AA8 (lit_895)
//	802BC2D8: 804507F0 (SONIC_SPEED__7Z2Param)
//	802BC2E0: 80455AD8 (lit_1036)
//	802BC2E8: 802BC308 (initVolumeDist__19Z2Audience3DSettingFv)
//	802BC2F0: 802BC6A4 (initDolbyDist__19Z2Audience3DSettingFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void Z2Audience3DSetting::init() {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/init__19Z2Audience3DSettingFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80455ADC-80455AE0 0004+00 s=2 e=0 z=0  None .sdata2    @1058                                                        */
SECTION_SDATA2 static f32 lit_1058 = 1.25f;

/* 80455AE0-80455AE4 0004+00 s=3 e=0 z=0  None .sdata2    @1059                                                        */
SECTION_SDATA2 static f32 lit_1059 = 2.0f;

/* 80455AE4-80455AE8 0004+00 s=2 e=0 z=0  None .sdata2    @1060                                                        */
SECTION_SDATA2 static f32 lit_1060 = 4.0f;

/* 80455AE8-80455AEC 0004+00 s=2 e=0 z=0  None .sdata2    @1061                                                        */
SECTION_SDATA2 static f32 lit_1061 = 6.0f;

/* 80455AEC-80455AF0 0004+00 s=2 e=0 z=0  None .sdata2    @1062                                                        */
SECTION_SDATA2 static f32 lit_1062 = 8.0f;

/* 80455AF0-80455AF4 0004+00 s=2 e=0 z=0  None .sdata2    @1063                                                        */
SECTION_SDATA2 static f32 lit_1063 = 9.0f / 10.0f;

/* 80455AF4-80455AF8 0004+00 s=2 e=0 z=0  None .sdata2    @1064                                                        */
SECTION_SDATA2 static f32 lit_1064 = 4.0f / 5.0f;

/* 80455AF8-80455AFC 0004+00 s=2 e=0 z=0  None .sdata2    @1065                                                        */
SECTION_SDATA2 static f32 lit_1065 = 7.0f / 10.0f;

/* 80455AFC-80455B00 0004+00 s=2 e=0 z=0  None .sdata2    @1066                                                        */
SECTION_SDATA2 static f32 lit_1066 = 3.0f / 5.0f;

/* 80455B00-80455B04 0004+00 s=2 e=0 z=0  None .sdata2    @1067                                                        */
SECTION_SDATA2 static f32 lit_1067 = 2.0f / 5.0f;

/* 802BC308-802BC4D0 01C8+00 s=2 e=0 z=0  None .text      initVolumeDist__19Z2Audience3DSettingFv                      */
//	802BC318: 804507D8 (DISTANCE_MAX__7Z2Param)
//	802BC320: 804507DC (MAX_VOLUME_DISTANCE__7Z2Param)
//	802BC328: 80455ADC (lit_1058)
//	802BC338: 80455AD8 (lit_1036)
//	802BC348: 80455AE0 (lit_1059)
//	802BC358: 80455AB0 (lit_998)
//	802BC368: 80455AE4 (lit_1060)
//	802BC378: 80455AE8 (lit_1061)
//	802BC388: 80455AEC (lit_1062)
//	802BC398: 80455AF0 (lit_1063)
//	802BC3A8: 80455AF4 (lit_1064)
//	802BC3B8: 80455AF8 (lit_1065)
//	802BC3C8: 80455AFC (lit_1066)
//	802BC3D8: 80455AA8 (lit_895)
//	802BC3E8: 80455B00 (lit_1067)
//	802BC3F8: 80455AB8 (lit_1000)
//	802BC40C: 80455AA4 (lit_894)
//	802BC444: 80455AD0 (lit_1008)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void Z2Audience3DSetting::initVolumeDist() {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/initVolumeDist__19Z2Audience3DSettingFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80451350-80451354 0004+00 s=2 e=0 z=0  None .sbss      cNearFarRatio                                                */
static u8 cNearFarRatio[4];

/* 802BC4D0-802BC6A4 01D4+00 s=1 e=0 z=0  None .text      updateVolumeDist__19Z2Audience3DSettingFf                    */
//	802BC4D8: 804507D8 (DISTANCE_MAX__7Z2Param)
//	802BC4E4: 80451350 (cNearFarRatio)
//	802BC4F4: 804507DC (MAX_VOLUME_DISTANCE__7Z2Param)
//	802BC4FC: 80455ADC (lit_1058)
//	802BC50C: 80455AD8 (lit_1036)
//	802BC51C: 80455AE0 (lit_1059)
//	802BC52C: 80455AB0 (lit_998)
//	802BC53C: 80455AE4 (lit_1060)
//	802BC54C: 80455AE8 (lit_1061)
//	802BC55C: 80455AEC (lit_1062)
//	802BC56C: 80455AF0 (lit_1063)
//	802BC57C: 80455AF4 (lit_1064)
//	802BC58C: 80455AF8 (lit_1065)
//	802BC59C: 80455AFC (lit_1066)
//	802BC5AC: 80455AA8 (lit_895)
//	802BC5BC: 80455B00 (lit_1067)
//	802BC5CC: 80455AB8 (lit_1000)
//	802BC5E0: 80455AA4 (lit_894)
//	802BC618: 80455AD0 (lit_1008)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 False
asm void Z2Audience3DSetting::updateVolumeDist(f32 param_0) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/updateVolumeDist__19Z2Audience3DSettingFf.s"
}
#pragma pop


/* 802BC6A4-802BC6F8 0054+00 s=1 e=0 z=0  None .text      initDolbyDist__19Z2Audience3DSettingFv                       */
//	802BC6B0: 804507E4 (DOLBY_FLONT_DISTANCE_MAX__7Z2Param)
//	802BC6B8: 804507E8 (DOLBY_BEHIND_DISTANCE_MAX__7Z2Param)
//	802BC6D4: 80455AA4 (lit_894)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void Z2Audience3DSetting::initDolbyDist() {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/initDolbyDist__19Z2Audience3DSettingFv.s"
}
#pragma pop


/* 802BC6F8-802BC758 0060+00 s=1 e=0 z=0  None .text      updateDolbyDist__19Z2Audience3DSettingFff                    */
//	802BC6F8: 80455AAC (lit_896)
//	802BC6FC: 804507E4 (DOLBY_FLONT_DISTANCE_MAX__7Z2Param)
//	802BC71C: 80455AE0 (lit_1059)
//	802BC734: 804507E8 (DOLBY_BEHIND_DISTANCE_MAX__7Z2Param)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 False
//  f32 False
asm void Z2Audience3DSetting::updateDolbyDist(f32 param_0, f32 param_1) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/updateDolbyDist__19Z2Audience3DSettingFff.s"
}
#pragma pop


/* 802BC758-802BC788 0030+00 s=1 e=0 z=0  None .text      __ct__13Z2AudioCameraFv                                      */
//	802BC758: 80455AA4 (lit_894)
//	802BC760: 80455AA0 (lit_848)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm Z2AudioCamera::Z2AudioCamera() {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/__ct__13Z2AudioCameraFv.s"
}
#pragma pop


/* ############################################################################################## */
/* 80455B04-80455B08 0004+00 s=1 e=0 z=0  None .sdata2    @1135                                                        */
SECTION_SDATA2 static f32 lit_1135 = 100000.0f;

/* 802BC788-802BC7DC 0054+00 s=1 e=0 z=0  None .text      init__13Z2AudioCameraFv                                      */
//	802BC7A0: 80346484 (PSMTXIdentity)
//	802BC7A4: 80455B04 (lit_1135)
//	802BC7C4: 802BC7DC (setCameraState__13Z2AudioCameraFPA4_CfR3Vecb)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void Z2AudioCamera::init() {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/init__13Z2AudioCameraFv.s"
}
#pragma pop


/* 802BC7DC-802BC8AC 00D0+00 s=2 e=0 z=0  None .text      setCameraState__13Z2AudioCameraFPA4_CfR3Vecb                 */
//	802BC844: 80455AA0 (lit_848)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 const (* )[4] False
// 	 f32 const False
// 		 f32 False
// 	 * False
// 		  False
//  Vec& False
// 	 Vec False
//  bool False
asm void Z2AudioCamera::setCameraState(f32 const (* param_0)[4], Vec& param_1, bool param_2) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/setCameraState__13Z2AudioCameraFPA4_CfR3Vecb.s"
}
#pragma pop


/* ############################################################################################## */
/* 8039C220-8039C230 000C+04 s=1 e=0 z=0  None .rodata    @1193                                                        */
SECTION_RODATA static u8 const lit_1193[12 + 4 /* padding */] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	/* padding */
	0x00, 0x00, 0x00, 0x00,
};

/* 80455B08-80455B0C 0004+00 s=1 e=0 z=0  None .sdata2    @1267                                                        */
SECTION_SDATA2 static f32 lit_1267 = -22.755556106567383f;

/* 80455B0C-80455B10 0004+00 s=1 e=0 z=0  None .sdata2    @1268                                                        */
SECTION_SDATA2 static f32 lit_1268 = 22.755556106567383f;

/* 80455B10-80455B14 0004+00 s=1 e=0 z=0  None .sdata2    @1269                                                        */
SECTION_SDATA2 static f32 lit_1269 = 50.0f;

/* 80455B14-80455B18 0004+00 s=1 e=0 z=0  None .sdata2    @1270                                                        */
SECTION_SDATA2 static f32 lit_1270 = 2.1445069313049316f;

/* 80455B18-80455B1C 0004+00 s=2 e=0 z=0  None .sdata2    @1271                                                        */
SECTION_SDATA2 static f32 lit_1271 = 32.0f;

/* 80455B1C-80455B20 0004+00 s=1 e=0 z=0  None .sdata2    @1272                                                        */
SECTION_SDATA2 static f32 lit_1272 = -100.0f;

/* 80455B20-80455B24 0004+00 s=1 e=0 z=0  None .sdata2    @1273                                                        */
SECTION_SDATA2 static f32 lit_1273 = 0.01745329238474369f;

/* 802BC8AC-802BCBEC 0340+00 s=1 e=0 z=0  None .text      setCameraState__13Z2AudioCameraFPA4_fR3VecR3Vecffbb          */
//	802BC8E4: 803621D4 (_savegpr_27)
//	802BC910: 803470B4 (PSVECSubtract)
//	802BC918: 80347150 (PSVECMag)
//	802BC920: 80455AA8 (lit_895)
//	802BC928: 80455AA0 (lit_848)
//	802BC934: 80455B08 (lit_1267)
//	802BC94C: 80439A20 (sincosTable___5JMath)
//	802BC950: 80439A20 (sincosTable___5JMath)
//	802BC960: 80455B0C (lit_1268)
//	802BC978: 80439A20 (sincosTable___5JMath)
//	802BC97C: 80439A20 (sincosTable___5JMath)
//	802BC98C: 80455AA0 (lit_848)
//	802BC99C: 80439A20 (sincosTable___5JMath)
//	802BC9A0: 80439A20 (sincosTable___5JMath)
//	802BC9A4: 80455B0C (lit_1268)
//	802BC9DC: 80455B10 (lit_1269)
//	802BC9EC: 80455AA0 (lit_848)
//	802BC9FC: 80455B14 (lit_1270)
//	802BCA1C: 80455B18 (lit_1271)
//	802BCA20: 80450AEC (__float_epsilon)
//	802BCA24: 80450AEC (__float_epsilon)
//	802BCA34: 80455AA0 (lit_848)
//	802BCA4C: 80455AA0 (lit_848)
//	802BCA58: 804507D8 (DISTANCE_MAX__7Z2Param)
//	802BCA5C: 80455AA4 (lit_894)
//	802BCA70: 80450B44 (data_80450B44)
//	802BCA7C: 802BC4D0 (updateVolumeDist__19Z2Audience3DSettingFf)
//	802BCA84: 80450B44 (data_80450B44)
//	802BCA8C: 802BC308 (initVolumeDist__19Z2Audience3DSettingFv)
//	802BCA9C: 80455AA0 (lit_848)
//	802BCAAC: 80455B1C (lit_1272)
//	802BCAC0: 80450B44 (data_80450B44)
//	802BCAD0: 802BC6F8 (updateDolbyDist__19Z2Audience3DSettingFff)
//	802BCAD8: 8039C220 (lit_1193)
//	802BCADC: 8039C220 (lit_1193)
//	802BCB18: 80455B20 (lit_1273)
//	802BCB1C: 80455AAC (lit_896)
//	802BCB28: 80346878 (PSMTXRotAxisRad)
//	802BCB38: 80346D6C (PSMTXMultVec)
//	802BCB64: 80347150 (PSVECMag)
//	802BCB7C: 80450B44 (data_80450B44)
//	802BCB94: 802BC6F8 (updateDolbyDist__19Z2Audience3DSettingFff)
//	802BCBA8: 802BC7DC (setCameraState__13Z2AudioCameraFPA4_CfR3Vecb)
//	802BCBD8: 80362220 (_restgpr_27)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  Vec& False
// 	 Vec False
//  Vec& False
// 	 Vec False
//  f32 False
//  f32 False
//  bool False
//  bool False
asm void Z2AudioCamera::setCameraState(f32 (* param_0)[4], Vec& param_1, Vec& param_2, f32 param_3, f32 param_4, bool param_5, bool param_6) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/setCameraState__13Z2AudioCameraFPA4_fR3VecR3Vecffbb.s"
}
#pragma pop


/* 802BCBEC-802BCC7C 0090+00 s=2 e=0 z=0  None .text      convertAbsToRel__13Z2AudioCameraFP9Z2Audiblei                */
//	802BCBFC: 803621DC (_savegpr_29)
//	802BCC10: 802BC204 (getChannel__9Z2AudibleFi)
//	802BCC2C: 80346D6C (PSMTXMultVec)
//	802BCC34: 80347150 (PSVECMag)
//	802BCC5C: 80347150 (PSVECMag)
//	802BCC68: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  Z2Audible* False
// 	 Z2Audible False
//  int False
asm void Z2AudioCamera::convertAbsToRel(Z2Audible* param_0, int param_1) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/convertAbsToRel__13Z2AudioCameraFP9Z2Audiblei.s"
}
#pragma pop


/* 802BCC7C-802BCCC0 0044+00 s=2 e=0 z=0  None .text      convertAbsToRel__13Z2AudioCameraCFR3VecP3Vec                 */
//	802BCC98: 80346D6C (PSMTXMultVec)
//	802BCCA4: 802BCCC0 (isInSight__13Z2AudioCameraCFR3Vec)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  Vec& False
// 	 Vec False
//  Vec* False
// 	 Vec False
asm void Z2AudioCamera::convertAbsToRel(Vec& param_0, Vec* param_1) const {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/convertAbsToRel__13Z2AudioCameraCFR3VecP3Vec.s"
}
#pragma pop


/* 802BCCC0-802BCD28 0068+00 s=1 e=0 z=0  None .text      isInSight__13Z2AudioCameraCFR3Vec                            */
//	802BCCC4: 80455AA0 (lit_848)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  Vec& False
// 	 Vec False
asm void Z2AudioCamera::isInSight(Vec& param_0) const {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/isInSight__13Z2AudioCameraCFR3Vec.s"
}
#pragma pop


/* ############################################################################################## */
/* 80455B24-80455B28 0004+00 s=1 e=0 z=0  None .sdata2    @1334                                                        */
SECTION_SDATA2 static f32 lit_1334 = 200.0f;

/* 80455B28-80455B2C 0004+00 s=1 e=0 z=0  None .sdata2    @1335                                                        */
SECTION_SDATA2 static f32 lit_1335 = 400.0f;

/* 80455B2C-80455B30 0004+00 s=2 e=0 z=0  None .sdata2    @1336                                                        */
SECTION_SDATA2 static f32 lit_1336 = 1.0f / 5.0f;

/* 80455B30-80455B34 0004+00 s=1 e=0 z=0  None .sdata2    @1337                                                        */
SECTION_SDATA2 static f32 lit_1337 = 255.0f;

/* 802BCD28-802BCDA8 0080+00 s=1 e=0 z=0  None .text      __ct__9Z2SpotMicFv                                           */
//	802BCD3C: 80455B24 (lit_1334)
//	802BCD44: 80455B28 (lit_1335)
//	802BCD4C: 80455AA0 (lit_848)
//	802BCD54: 80455B2C (lit_1336)
//	802BCD70: 80455B30 (lit_1337)
//	802BCD8C: 802BCDA8 (clearMicState__9Z2SpotMicFi)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm Z2SpotMic::Z2SpotMic() {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/__ct__9Z2SpotMicFv.s"
}
#pragma pop


/* 802BCDA8-802BCDE8 0040+00 s=2 e=0 z=0  None .text      clearMicState__9Z2SpotMicFi                                  */
//	802BCDD4: 802BCDE8 (calcVolumeFactor__9Z2SpotMicFi)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
asm void Z2SpotMic::clearMicState(int param_0) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/clearMicState__9Z2SpotMicFi.s"
}
#pragma pop


/* 802BCDE8-802BCE14 002C+00 s=2 e=0 z=0  None .text      calcVolumeFactor__9Z2SpotMicFi                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  int False
asm void Z2SpotMic::calcVolumeFactor(int param_0) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/calcVolumeFactor__9Z2SpotMicFi.s"
}
#pragma pop


/* 802BCE14-802BCF5C 0148+00 s=1 e=0 z=0  None .text      setMicState__9Z2SpotMicFP13Z2AudioCamerai                    */
//	802BCE24: 803621D8 (_savegpr_28)
//	802BCE58: 802BCDA8 (clearMicState__9Z2SpotMicFi)
//	802BCE68: 802BCC7C (convertAbsToRel__13Z2AudioCameraCFR3VecP3Vec)
//	802BCEAC: 80347150 (PSVECMag)
//	802BCEB0: 80450B44 (data_80450B44)
//	802BCEDC: 80455AA4 (lit_894)
//	802BCEEC: 80455AA4 (lit_894)
//	802BCF0C: 80455AA0 (lit_848)
//	802BCF40: 802BCDE8 (calcVolumeFactor__9Z2SpotMicFi)
//	802BCF48: 80362224 (_restgpr_28)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  Z2AudioCamera* False
// 	 Z2AudioCamera False
//  int False
asm void Z2SpotMic::setMicState(Z2AudioCamera* param_0, int param_1) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/setMicState__9Z2SpotMicFP13Z2AudioCamerai.s"
}
#pragma pop


/* 802BCF5C-802BCFE4 0088+00 s=2 e=0 z=0  None .text      calcMicDist__9Z2SpotMicFP9Z2Audible                          */
//	802BCF74: 80455AA0 (lit_848)
//	802BCF88: 80455AA0 (lit_848)
//	802BCF98: 80455AA0 (lit_848)
//	802BCFD0: 80347150 (PSVECMag)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  Z2Audible* False
// 	 Z2Audible False
asm void Z2SpotMic::calcMicDist(Z2Audible* param_0) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/calcMicDist__9Z2SpotMicFP9Z2Audible.s"
}
#pragma pop


/* 802BCFE4-802BD03C 0058+00 s=1 e=0 z=0  None .text      calcMicPriority__9Z2SpotMicFf                                */
//	802BCFFC: 80450B44 (data_80450B44)
//	802BD028: 803620AC (__cvt_fp2unsigned)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 False
asm void Z2SpotMic::calcMicPriority(f32 param_0) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/calcMicPriority__9Z2SpotMicFf.s"
}
#pragma pop


/* 802BD03C-802BD130 00F4+00 s=1 e=0 z=0  None .text      calcMicVolume__9Z2SpotMicFfif                                */
//	802BD0B0: 80455AAC (lit_896)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 False
//  int False
//  f32 False
asm void Z2SpotMic::calcMicVolume(f32 param_0, int param_1, f32 param_2) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/calcMicVolume__9Z2SpotMicFfif.s"
}
#pragma pop


/* 802BD130-802BD1FC 00CC+00 s=0 e=1 z=0  None .text      __ct__10Z2AudienceFv                                         */
//	802BD144: 803C9838 (__vt__11JAIAudience)
//	802BD148: 803C9838 (__vt__11JAIAudience)
//	802BD15C: 80450B44 (data_80450B44)
//	802BD160: 803CAC98 (__vt__10Z2Audience)
//	802BD164: 803CAC98 (__vt__10Z2Audience)
//	802BD16C: 80455AA4 (lit_894)
//	802BD180: 802BC248 (__ct__19Z2Audience3DSettingFv)
//	802BD188: 802BC758 (__ct__13Z2AudioCameraFv)
//	802BD18C: 802BC758 (__ct__13Z2AudioCameraFv)
//	802BD19C: 80361D60 (__construct_array)
//	802BD1A4: 802BCD28 (__ct__9Z2SpotMicFv)
//	802BD1A8: 802BCD28 (__ct__9Z2SpotMicFv)
//	802BD1B8: 80361D60 (__construct_array)
//	802BD1D0: 802BC788 (init__13Z2AudioCameraFv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm Z2Audience::Z2Audience() {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/__ct__10Z2AudienceFv.s"
}
#pragma pop


/* 802BD1FC-802BD288 008C+00 s=1 e=1 z=0  None .text      __dt__10Z2AudienceFv                                         */
//	802BD21C: 803CAC98 (__vt__10Z2Audience)
//	802BD220: 803CAC98 (__vt__10Z2Audience)
//	802BD23C: 80450B44 (data_80450B44)
//	802BD24C: 80450B44 (data_80450B44)
//	802BD258: 8029EFF4 (__dt__11JAIAudienceFv)
//	802BD268: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
asm Z2Audience::~Z2Audience() {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/__dt__10Z2AudienceFv.s"
}
#pragma pop


/* 802BD288-802BD2DC 0054+00 s=2 e=1 z=0  None .text      __dt__22JASMemPool<9Z2Audible>Fv                             */
//	802BD2AC: 80290860 (__dt__17JASGenericMemPoolFv)
//	802BD2BC: 802CED3C (__dl__FPv)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False True
asm JASMemPool__template5::~JASMemPool__template5() {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/func_802BD288.s"
}
#pragma pop


/* 802BD2DC-802BD338 005C+00 s=0 e=1 z=0  None .text      setAudioCamera__10Z2AudienceFPA4_fR3VecR3Vecffbib            */
//	802BD2EC: 803621DC (_savegpr_29)
//	802BD30C: 802BC8AC (setCameraState__13Z2AudioCameraFPA4_fR3VecR3Vecffbb)
//	802BD31C: 802BCE14 (setMicState__9Z2SpotMicFP13Z2AudioCamerai)
//	802BD324: 80362228 (_restgpr_29)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  f32 (* )[4] False
// 	 f32 False
// 	 * False
// 		  False
//  Vec& False
// 	 Vec False
//  Vec& False
// 	 Vec False
//  f32 False
//  f32 False
//  bool False
//  int False
//  bool False
asm void Z2Audience::setAudioCamera(f32 (* param_0)[4], Vec& param_1, Vec& param_2, f32 param_3, f32 param_4, bool param_5, int param_6, bool param_7) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/setAudioCamera__10Z2AudienceFPA4_fR3VecR3Vecffbib.s"
}
#pragma pop


/* ############################################################################################## */
/* 804341D8-804341E4 000C+00 s=2 e=0 z=0  None .bss       @1539                                                        */
static u8 lit_1539[12];

/* 804341E4-804341F8 0010+04 s=2 e=1 z=0  None .bss       memPool_$localstatic3$getMemPool___30JASPoolAllocObject<9Z2Audible>Fv */
u8 data_804341E4[16 + 4 /* padding */];

/* 80451354-80451358 0004+00 s=2 e=1 z=0  None .sbss      None                                                         */
u8 data_80451354[4];

/* 802BD338-802BD4D4 019C+00 s=1 e=0 z=0  None .text      newAudible__10Z2AudienceFRCQ29JGeometry8TVec3<f>10JAISoundIDPCQ29JGeometry8TVec3<f>Ul */
//	802BD348: 803621D0 (_savegpr_26)
//	802BD38C: 80450B4C (data_80450B4C)
//	802BD394: 802BB158 (getAudibleSwFull__11Z2SoundInfoF10JAISoundID)
//	802BD3AC: 80451354 (data_80451354)
//	802BD3B8: 804341E4 (data_804341E4)
//	802BD3BC: 804341E4 (data_804341E4)
//	802BD3C0: 80290848 (__ct__17JASGenericMemPoolFv)
//	802BD3C4: 804341E4 (data_804341E4)
//	802BD3C8: 804341E4 (data_804341E4)
//	802BD3CC: 802BD288 (func_802BD288)
//	802BD3D0: 802BD288 (func_802BD288)
//	802BD3D4: 804341D8 (lit_1539)
//	802BD3D8: 804341D8 (lit_1539)
//	802BD3DC: 80361C24 (__register_global_object)
//	802BD3E4: 80451354 (data_80451354)
//	802BD3E8: 804341E4 (data_804341E4)
//	802BD3EC: 804341E4 (data_804341E4)
//	802BD3F4: 80290948 (alloc__17JASGenericMemPoolFUl)
//	802BD410: 802BBD94 (func_802BBD94)
//	802BD448: 802BC204 (getChannel__9Z2AudibleFi)
//	802BD458: 802BC218 (getDistVolBit__9Z2AudibleFv)
//	802BD470: 802BCBEC (convertAbsToRel__13Z2AudioCameraFP9Z2Audiblei)
//	802BD484: 802BDC44 (calcDeltaPriority___10Z2AudienceCFfib)
//	802BD4B0: 802BCF5C (calcMicDist__9Z2SpotMicFP9Z2Audible)
//	802BD4C0: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False True
//  JGeometry::TVec3<f32> const& False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
//  JAISoundID False
//  JGeometry::TVec3<f32> const* False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
//  u32 False
asm void Z2Audience::newAudible(JGeometry::TVec3<f32> const& param_0, JAISoundID param_1, JGeometry::TVec3<f32> const* param_2, u32 param_3) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/func_802BD338.s"
}
#pragma pop


/* 802BD4D4-802BD510 003C+00 s=1 e=0 z=0  None .text      deleteAudible__10Z2AudienceFP10JAIAudible                    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  JAIAudible* False
// 	 JAIAudible False
asm void Z2Audience::deleteAudible(JAIAudible* param_0) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/deleteAudible__10Z2AudienceFP10JAIAudible.s"
}
#pragma pop


/* 802BD510-802BD5B8 00A8+00 s=1 e=0 z=0  None .text      __dt__9Z2AudibleFv                                           */
//	802BD530: 803CACB8 (__vt__9Z2Audible)
//	802BD534: 803CACB8 (__vt__9Z2Audible)
//	802BD540: 8029EFAC (__dt__10JAIAudibleFv)
//	802BD54C: 80451354 (data_80451354)
//	802BD558: 804341E4 (data_804341E4)
//	802BD55C: 804341E4 (data_804341E4)
//	802BD560: 80290848 (__ct__17JASGenericMemPoolFv)
//	802BD564: 804341E4 (data_804341E4)
//	802BD568: 804341E4 (data_804341E4)
//	802BD56C: 802BD288 (func_802BD288)
//	802BD570: 802BD288 (func_802BD288)
//	802BD574: 804341D8 (lit_1539)
//	802BD578: 804341D8 (lit_1539)
//	802BD57C: 80361C24 (__register_global_object)
//	802BD584: 80451354 (data_80451354)
//	802BD588: 804341E4 (data_804341E4)
//	802BD58C: 804341E4 (data_804341E4)
//	802BD598: 80290994 (free__17JASGenericMemPoolFPvUl)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm Z2Audible::~Z2Audible() {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/__dt__9Z2AudibleFv.s"
}
#pragma pop


/* 802BD5B8-802BD704 014C+00 s=1 e=0 z=0  None .text      calcPriority__10Z2AudienceFP10JAIAudible                     */
//	802BD5C8: 803621CC (_savegpr_25)
//	802BD5FC: 802BCBEC (convertAbsToRel__13Z2AudioCameraFP9Z2Audiblei)
//	802BD638: 802BC204 (getChannel__9Z2AudibleFi)
//	802BD654: 802BCBEC (convertAbsToRel__13Z2AudioCameraFP9Z2Audiblei)
//	802BD65C: 802BC218 (getDistVolBit__9Z2AudibleFv)
//	802BD680: 802BDC44 (calcDeltaPriority___10Z2AudienceCFfib)
//	802BD6C8: 802BCF5C (calcMicDist__9Z2SpotMicFP9Z2Audible)
//	802BD6D8: 802BCFE4 (calcMicPriority__9Z2SpotMicFf)
//	802BD6F0: 80362218 (_restgpr_25)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  JAIAudible* False
// 	 JAIAudible False
asm void Z2Audience::calcPriority(JAIAudible* param_0) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/calcPriority__10Z2AudienceFP10JAIAudible.s"
}
#pragma pop


/* 802BD704-802BD71C 0018+00 s=1 e=1 z=0  None .text      calcOffMicSound__10Z2AudienceFf                              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  f32 False
asm void Z2Audience::calcOffMicSound(f32 param_0) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/calcOffMicSound__10Z2AudienceFf.s"
}
#pragma pop


/* 802BD71C-802BD90C 01F0+00 s=1 e=0 z=0  None .text      mixChannelOut__10Z2AudienceFRC14JASSoundParamsP10JAIAudiblei */
//	802BD72C: 803621D0 (_savegpr_26)
//	802BD748: 802BC204 (getChannel__9Z2AudibleFi)
//	802BD754: 80455AA4 (lit_894)
//	802BD760: 80455AA0 (lit_848)
//	802BD768: 80455AA8 (lit_895)
//	802BD778: 802BC218 (getDistVolBit__9Z2AudibleFv)
//	802BD798: 802BDBDC (calcVolume___10Z2AudienceCFfi)
//	802BD7B4: 802BD03C (calcMicVolume__9Z2SpotMicFfif)
//	802BD7B8: 80455AA0 (lit_848)
//	802BD7CC: 802BD704 (calcOffMicSound__10Z2AudienceFf)
//	802BD7E4: 80455B2C (lit_1336)
//	802BD7FC: 80455AA4 (lit_894)
//	802BD828: 802BDB44 (calcRelPosDolby__10Z2AudienceFRC3Veci)
//	802BD834: 80455AA8 (lit_895)
//	802BD85C: 80455AA4 (lit_894)
//	802BD864: 80455AA0 (lit_848)
//	802BD87C: 802BDA44 (calcRelPosPan__10Z2AudienceFRC3Veci)
//	802BD888: 80455AA8 (lit_895)
//	802BD8A8: 802BDD48 (calcPitch___10Z2AudienceCFP16Z2AudibleChannelPC9Z2AudiblePC13Z2AudioCamera)
//	802BD8C8: 802BDD00 (calcFxMix___10Z2AudienceCFfi)
//	802BD8D0: 80455AA0 (lit_848)
//	802BD8DC: 8029E3B0 (clamp__14JASSoundParamsFv)
//	802BD8F0: 802BBEE4 (setOuterParams__9Z2AudibleFRC14JASSoundParamsRC14JASSoundParamsi)
//	802BD8F8: 8036221C (_restgpr_26)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  JASSoundParams const& False
// 	 JASSoundParams const False
// 		 JASSoundParams False
//  JAIAudible* False
// 	 JAIAudible False
//  int False
asm void Z2Audience::mixChannelOut(JASSoundParams const& param_0, JAIAudible* param_1, int param_2) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/mixChannelOut__10Z2AudienceFRC14JASSoundParamsP10JAIAudiblei.s"
}
#pragma pop


/* 802BD90C-802BD92C 0020+00 s=0 e=1 z=0  None .text      setTargetVolume__10Z2AudienceFfi                             */
//	802BD90C: 80455AA0 (lit_848)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  f32 False
//  int False
asm void Z2Audience::setTargetVolume(f32 param_0, int param_1) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/setTargetVolume__10Z2AudienceFfi.s"
}
#pragma pop


/* 802BD92C-802BD95C 0030+00 s=0 e=4 z=0  None .text      convertAbsToRel__10Z2AudienceFR3VecP3Veci                    */
//	802BD948: 802BCC7C (convertAbsToRel__13Z2AudioCameraCFR3VecP3Vec)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  Vec& False
// 	 Vec False
//  Vec* False
// 	 Vec False
//  int False
asm void Z2Audience::convertAbsToRel(Vec& param_0, Vec* param_1, int param_2) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/convertAbsToRel__10Z2AudienceFR3VecP3Veci.s"
}
#pragma pop


/* 802BD95C-802BDA44 00E8+00 s=0 e=3 z=0  None .text      calcRelPosVolume__10Z2AudienceFRC3Vecfi                      */
//	802BD9A8: 80455AD8 (lit_1036)
//	802BD9B4: 80347150 (PSVECMag)
//	802BD9DC: 80455AA4 (lit_894)
//	802BD9E4: 80455AA4 (lit_894)
//	802BDA04: 80455AA0 (lit_848)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
//  f32 False
//  int False
asm void Z2Audience::calcRelPosVolume(Vec const& param_0, f32 param_1, int param_2) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/calcRelPosVolume__10Z2AudienceFRC3Vecfi.s"
}
#pragma pop


/* 802BDA44-802BDB44 0100+00 s=1 e=3 z=0  None .text      calcRelPosPan__10Z2AudienceFRC3Veci                          */
//	802BDA78: 80455AA0 (lit_848)
//	802BDA84: 80347150 (PSVECMag)
//	802BDA88: 80455AC0 (lit_1002)
//	802BDA94: 80455AA8 (lit_895)
//	802BDA9C: 80455AA8 (lit_895)
//	802BDAB8: 80455AA0 (lit_848)
//	802BDAE8: 802A96F4 (getParamByExp__6Z2CalcFffffffQ26Z2Calc9CurveSign)
//	802BDAF4: 80455AA4 (lit_894)
//	802BDB04: 802A96F4 (getParamByExp__6Z2CalcFffffffQ26Z2Calc9CurveSign)
//	802BDB08: 80455AA4 (lit_894)
//	802BDB1C: 80455AA0 (lit_848)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
//  int False
asm void Z2Audience::calcRelPosPan(Vec const& param_0, int param_1) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/calcRelPosPan__10Z2AudienceFRC3Veci.s"
}
#pragma pop


/* 802BDB44-802BDBDC 0098+00 s=1 e=3 z=0  None .text      calcRelPosDolby__10Z2AudienceFRC3Veci                        */
//	802BDB70: 80455AA4 (lit_894)
//	802BDB84: 80455AA0 (lit_848)
//	802BDB8C: 80455AA0 (lit_848)
//	802BDB98: 80455AB8 (lit_1000)
//	802BDBA8: 802A96F4 (getParamByExp__6Z2CalcFffffffQ26Z2Calc9CurveSign)
//	802BDBB8: 80455AB8 (lit_1000)
//	802BDBC0: 80455AA4 (lit_894)
//	802BDBC8: 802A96F4 (getParamByExp__6Z2CalcFffffffQ26Z2Calc9CurveSign)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
//  Vec const& False
// 	 Vec const False
// 		 Vec False
//  int False
asm void Z2Audience::calcRelPosDolby(Vec const& param_0, int param_1) {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/calcRelPosDolby__10Z2AudienceFRC3Veci.s"
}
#pragma pop


/* 802BDBDC-802BDC44 0068+00 s=1 e=0 z=0  None .text      calcVolume___10Z2AudienceCFfi                                */
//	802BDC04: 80455AA4 (lit_894)
//	802BDC0C: 80455AA4 (lit_894)
//	802BDC20: 80455AA0 (lit_848)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 False
//  int False
asm void Z2Audience::calcVolume_(f32 param_0, int param_1) const {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/calcVolume___10Z2AudienceCFfi.s"
}
#pragma pop


/* 802BDC44-802BDCB0 006C+00 s=2 e=0 z=0  None .text      calcDeltaPriority___10Z2AudienceCFfib                        */
//	802BDC9C: 803620AC (__cvt_fp2unsigned)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 False
//  int False
//  bool False
asm void Z2Audience::calcDeltaPriority_(f32 param_0, int param_1, bool param_2) const {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/calcDeltaPriority___10Z2AudienceCFfib.s"
}
#pragma pop


/* 802BDCB0-802BDD00 0050+00 s=1 e=0 z=0  None .text      calcPitchDoppler___10Z2AudienceCFRCQ29JGeometry8TVec3<f>RCQ29JGeometry8TVec3<f>RCQ29JGeometry8TVec3<f>f */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False True
//  JGeometry::TVec3<f32> const& False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
//  JGeometry::TVec3<f32> const& False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
//  JGeometry::TVec3<f32> const& False
// 	 JGeometry::TVec3<f32> const False
// 		 JGeometry::TVec3<f32> True
// 			 f32 False
//  f32 False
asm void Z2Audience::calcPitchDoppler_(JGeometry::TVec3<f32> const& param_0, JGeometry::TVec3<f32> const& param_1, JGeometry::TVec3<f32> const& param_2, f32 param_3) const {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/func_802BDCB0.s"
}
#pragma pop


/* 802BDD00-802BDD48 0048+00 s=1 e=0 z=0  None .text      calcFxMix___10Z2AudienceCFfi                                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  f32 False
//  int False
asm void Z2Audience::calcFxMix_(f32 param_0, int param_1) const {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/calcFxMix___10Z2AudienceCFfi.s"
}
#pragma pop


/* ############################################################################################## */
/* 80455B34-80455B38 0004+00 s=1 e=0 z=0  None .sdata2    @1988                                                        */
SECTION_SDATA2 static f32 lit_1988 = 1.0f / 15.0f;

/* 802BDD48-802BDED4 018C+00 s=1 e=0 z=0  None .text      calcPitch___10Z2AudienceCFP16Z2AudibleChannelPC9Z2AudiblePC13Z2AudioCamera */
//	802BDD90: 80455B18 (lit_1271)
//	802BDD94: 80450AEC (__float_epsilon)
//	802BDD98: 80450AEC (__float_epsilon)
//	802BDDAC: 80455AA0 (lit_848)
//	802BDDC0: 80455AA0 (lit_848)
//	802BDDE0: 80455AA8 (lit_895)
//	802BDDE8: 80455AB0 (lit_998)
//	802BDE20: 80455B34 (lit_1988)
//	802BDE2C: 80455AD0 (lit_1008)
//	802BDE58: 802BDCB0 (func_802BDCB0)
//	802BDE60: 80455AA0 (lit_848)
//	802BDEB0: 80455AA4 (lit_894)
//	802BDEB8: 80455AA4 (lit_894)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
//  Z2AudibleChannel* False
// 	 Z2AudibleChannel False
//  Z2Audible const* False
// 	 Z2Audible const False
// 		 Z2Audible False
//  Z2AudioCamera const* False
// 	 Z2AudioCamera const False
// 		 Z2AudioCamera False
asm void Z2Audience::calcPitch_(Z2AudibleChannel* param_0, Z2Audible const* param_1, Z2AudioCamera const* param_2) const {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/calcPitch___10Z2AudienceCFP16Z2AudibleChannelPC9Z2AudiblePC13Z2AudioCamera.s"
}
#pragma pop


/* 802BDED4-802BDEDC 0008+00 s=1 e=0 z=0  None .text      getMaxChannels__10Z2AudienceFv                               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
asm void Z2Audience::getMaxChannels() {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/getMaxChannels__10Z2AudienceFv.s"
}
#pragma pop


/* 802BDEDC-802BDEF0 0014+00 s=0 e=0 z=0  None .text      __sinit_Z2Audience_cpp                                       */
//	802BDEDC: 804507DC (MAX_VOLUME_DISTANCE__7Z2Param)
//	802BDEE0: 804507D8 (DISTANCE_MAX__7Z2Param)
//	802BDEE8: 80451350 (cNearFarRatio)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void __sinit_Z2Audience_cpp() {
	nofralloc
#include "asm/Z2AudioLib/Z2Audience/__sinit_Z2Audience_cpp.s"
}
#pragma pop

#pragma push
#pragma force_active on
#pragma section ".ctors$15"
__declspec(section ".ctors$15") void* const _ctors_802BDEDC = (void*)__sinit_Z2Audience_cpp;
#pragma pop


/* ############################################################################################## */
/* 80451358-80451360 0008+00 s=0 e=1 z=0  None .sbss      None                                                         */
u8 struct_80451358[8];

