//
// Generated By: dol2asm
// Translation Unit: OSMemory
//

#include "dolphin/os/OSMemory.h"
#include "dol2asm.h"
#include "dolphin/types.h"

//
// Forward References:
//

extern "C" static void OnReset();
extern "C" static void MEMIntrruptHandler();
extern "C" void OSProtectRange();
extern "C" static void Config24MB();
extern "C" static void Config48MB();
extern "C" static void RealMode();
extern "C" void __OSInitMemoryProtection();

//
// External References:
//

extern "C" void DCInvalidateRange();
extern "C" void DCFlushRange();
extern "C" void __OSUnhandledException();
extern "C" void OSDisableInterrupts();
extern "C" void OSRestoreInterrupts();
extern "C" void __OSSetInterruptHandler();
extern "C" void __OSMaskInterrupts();
extern "C" void __OSUnmaskInterrupts();
extern "C" void OSRegisterResetFunction();
extern "C" extern u8 __OSErrorTable[68 + 12 /* padding */];

//
// Declarations:
//

/* 8033EC6C-8033ECA8 003C+00 s=1 e=0 z=0  None .text      OnReset */
//	8033EC90: 8033DABC (__OSMaskInterrupts)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void OnReset() {
    nofralloc
#include "asm/dolphin/os/OSMemory/OnReset.s"
}
#pragma pop

/* 8033ECA8-8033ED14 006C+00 s=1 e=0 z=0  None .text      MEMIntrruptHandler */
//	8033ECC4: 8044BAD0 (__OSErrorTable)
//	8033ECCC: 8044BAD0 (__OSErrorTable)
//	8033ED00: 8033C798 (__OSUnhandledException)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void MEMIntrruptHandler() {
    nofralloc
#include "asm/dolphin/os/OSMemory/MEMIntrruptHandler.s"
}
#pragma pop

/* 8033ED14-8033EDD8 00C4+00 s=0 e=1 z=0  None .text      OSProtectRange */
//	8033ED4C: 8033B5AC (DCFlushRange)
//	8033ED50: 8033D6F4 (OSDisableInterrupts)
//	8033ED64: 8033DABC (__OSMaskInterrupts)
//	8033EDB8: 8033DB44 (__OSUnmaskInterrupts)
//	8033EDC0: 8033D71C (OSRestoreInterrupts)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void OSProtectRange() {
    nofralloc
#include "asm/dolphin/os/OSMemory/OSProtectRange.s"
}
#pragma pop

/* 8033EDD8-8033EE58 0080+00 s=1 e=0 z=0  None .text      Config24MB */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void Config24MB() {
    nofralloc
#include "asm/dolphin/os/OSMemory/Config24MB.s"
}
#pragma pop

/* 8033EE58-8033EED8 0080+00 s=1 e=0 z=0  None .text      Config48MB */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void Config48MB() {
    nofralloc
#include "asm/dolphin/os/OSMemory/Config48MB.s"
}
#pragma pop

/* 8033EED8-8033EEF0 0018+00 s=1 e=0 z=0  None .text      RealMode */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm static void RealMode() {
    nofralloc
#include "asm/dolphin/os/OSMemory/RealMode.s"
}
#pragma pop

/* ############################################################################################## */
/* 803D07D8-803D07E8 0010+00 s=1 e=0 z=0  None .data      ResetFunctionInfo */
SECTION_DATA static void* ResetFunctionInfo[4] = {
    (void*)OnReset,
    (void*)0x0000007F,
    (void*)NULL,
    (void*)NULL,
};

/* 8033EEF0-8033F008 0118+00 s=0 e=1 z=0  None .text      __OSInitMemoryProtection */
//	8033EF08: 8033D6F4 (OSDisableInterrupts)
//	8033EF2C: 8033DABC (__OSMaskInterrupts)
//	8033EF30: 8033ECA8 (MEMIntrruptHandler)
//	8033EF34: 8033ECA8 (MEMIntrruptHandler)
//	8033EF40: 8033D740 (__OSSetInterruptHandler)
//	8033EF4C: 8033D740 (__OSSetInterruptHandler)
//	8033EF58: 8033D740 (__OSSetInterruptHandler)
//	8033EF64: 8033D740 (__OSSetInterruptHandler)
//	8033EF70: 8033D740 (__OSSetInterruptHandler)
//	8033EF74: 803D07D8 (ResetFunctionInfo)
//	8033EF78: 803D07D8 (ResetFunctionInfo)
//	8033EF7C: 8033F660 (OSRegisterResetFunction)
//	8033EFA4: 8033B580 (DCInvalidateRange)
//	8033EFBC: 8033EDD8 (Config24MB)
//	8033EFC0: 8033EDD8 (Config24MB)
//	8033EFC4: 8033EED8 (RealMode)
//	8033EFD8: 8033EE58 (Config48MB)
//	8033EFDC: 8033EE58 (Config48MB)
//	8033EFE0: 8033EED8 (RealMode)
//	8033EFE8: 8033DB44 (__OSUnmaskInterrupts)
//	8033EFF0: 8033D71C (OSRestoreInterrupts)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void __OSInitMemoryProtection() {
    nofralloc
#include "asm/dolphin/os/OSMemory/__OSInitMemoryProtection.s"
}
#pragma pop
