// 
// Generated By: dol2asm
// Translation Unit: OSThread
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "dolphin/os/OSThread.h"

// 
// Forward References:
// 


// True False
//  void False
extern "C" static void DefaultSwitchThreadCallback();
// False False
extern "C" void OSSetSwitchThreadCallback();
// False False
extern "C" void __OSThreadInit();
// False False
extern "C" void OSInitThreadQueue();
// False False
extern "C" void OSGetCurrentThread();
// False False
extern "C" void OSIsThreadTerminated();
// False False
extern "C" void OSDisableScheduler();
// False False
extern "C" void OSEnableScheduler();
// True False
extern "C" static void UnsetRun();
// False False
extern "C" void __OSGetEffectivePriority();
// True False
extern "C" static void SetEffectivePriority();
// False False
extern "C" void __OSPromoteThread();
// True False
extern "C" static void SelectThread();
// False False
extern "C" void __OSReschedule();
// False False
extern "C" void OSYieldThread();
// False False
extern "C" void OSCreateThread();
// False False
extern "C" void OSExitThread();
// False False
extern "C" void OSCancelThread();
// False False
extern "C" void OSDetachThread();
// False False
extern "C" void OSResumeThread();
// False False
extern "C" void OSSuspendThread();
// False False
extern "C" void OSSleepThread();
// False False
extern "C" void OSWakeupThread();
// False False
extern "C" void OSSetThreadPriority();
// False False
extern "C" void OSGetThreadPriority();
// True False
extern "C" static void CheckThreadQueue();
// False False
extern "C" void OSCheckActiveThreads();
// True False
extern "C" static void OSClearStack();
extern "C" extern u8 lit_832[11 + 1 /* padding */];
extern "C" extern u8 OSThread__lit_834[95 + 1 /* padding */];
extern "C" extern u8 OSThread__lit_835[70 + 2 /* padding */];
extern "C" extern u8 OSThread__lit_836[126 + 2 /* padding */];
extern "C" extern u8 OSThread__lit_837[126 + 2 /* padding */];
extern "C" extern u8 OSThread__lit_838[122 + 2 /* padding */];
extern "C" extern u8 OSThread__lit_839[122 + 2 /* padding */];
extern "C" extern u8 OSThread__lit_840[81 + 3 /* padding */];
extern "C" extern u8 OSThread__lit_841[113 + 3 /* padding */];
extern "C" extern u8 OSThread__lit_842[57 + 3 /* padding */];
extern "C" extern u8 OSThread__lit_843[73 + 3 /* padding */];
extern "C" extern u8 lit_844[81 + 3 /* padding */];
extern "C" extern u8 OSThread__lit_845[82 + 2 /* padding */];
extern "C" extern u8 lit_846[89 + 3 /* padding */];
extern "C" extern u8 lit_847[66 + 2 /* padding */];
extern "C" extern u8 lit_848[58 + 2 /* padding */];
extern "C" extern u8 OSThread__lit_849[58 + 2 /* padding */];
extern "C" extern u8 OSThread__lit_850[68];
extern "C" extern u8 lit_851[68];
extern "C" extern u8 lit_852[59 + 1 /* padding */];
extern "C" extern u8 OSThread__lit_853[63 + 1 /* padding */];
extern "C" extern u8 OSThread__lit_854[103 + 1 /* padding */];
extern "C" extern u8 OSThread__lit_855[69 + 3 /* padding */];
extern "C" extern u8 lit_856[61 + 3 /* padding */];
extern "C" extern u8 IdleThread[792];
extern "C" extern u8 DefaultThread[792];
extern "C" extern u8 IdleContext[712];
extern "C" extern u8 data_804516D0[8];

// 
// External References:
// 


// False False
extern "C" void OSReport();
// False False
extern "C" void OSPanic();
// False False
extern "C" void OSSetCurrentContext();
// False False
extern "C" void OSGetCurrentContext();
// False False
extern "C" void OSSaveContext();
// False False
extern "C" void OSLoadContext();
// False False
extern "C" void OSGetStackPointer();
// False False
extern "C" void OSClearContext();
// False False
extern "C" void OSInitContext();
// False False
extern "C" void OSDisableInterrupts();
// False False
extern "C" void OSEnableInterrupts();
// False False
extern "C" void OSRestoreInterrupts();
// False False
extern "C" void __OSUnlockAllMutex();
// False False
extern "C" void __OSCheckDeadLock();
// False False
extern "C" void __OSCheckMutexes();
extern "C" extern u8 __OSErrorTable[68 + 12 /* padding */];
extern "C" extern u32 __OSFpscrEnableBits;
// False False
extern "C" void _epilog();

// 
// Declarations:
// 

/* 80340AA4-80340AA8 0004+00 s=2 e=0 z=0  None .text      DefaultSwitchThreadCallback                                  */
// True False
//  void False
extern "C" static void DefaultSwitchThreadCallback() {
	/* empty function */
}


/* ############################################################################################## */
/* 804509B8-804509BC 0004+00 s=3 e=0 z=0  None .sdata     SwitchThreadCallback                                         */
SECTION_SDATA static void* SwitchThreadCallback = (void*)DefaultSwitchThreadCallback;

/* 80340AA8-80340B1C 0074+00 s=0 e=1 z=0  None .text      OSSetSwitchThreadCallback                                    */
//	80340AC0: 8033D6F4 (OSDisableInterrupts)
//	80340AC8: 804509B8 (SwitchThreadCallback)
//	80340AD8: 80340AA4 (DefaultSwitchThreadCallback)
//	80340ADC: 80340AA4 (DefaultSwitchThreadCallback)
//	80340AE0: 804509B8 (SwitchThreadCallback)
//	80340AE4: 8033D71C (OSRestoreInterrupts)
//	80340AE8: 80340AA4 (DefaultSwitchThreadCallback)
//	80340AEC: 80340AA4 (DefaultSwitchThreadCallback)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void OSSetSwitchThreadCallback() {
	nofralloc
#include "asm/dolphin/os/OSThread/OSSetSwitchThreadCallback.s"
}
#pragma pop


/* ############################################################################################## */
/* 8044BB78-8044BC78 0100+00 s=6 e=0 z=0  None .bss       RunQueue                                                     */
static u8 RunQueue[256];

/* 804516C0-804516C4 0004+00 s=7 e=0 z=0  None .sbss      RunQueueBits                                                 */
static u8 RunQueueBits[4];

/* 804516C4-804516C8 0004+00 s=11 e=0 z=0  None .sbss      RunQueueHint                                                 */
static u8 RunQueueHint[4];

/* 804516C8-804516D0 0004+04 s=4 e=0 z=0  None .sbss      Reschedule                                                   */
static u8 Reschedule[4 + 4 /* padding */];

/* 80340B1C-80340C74 0158+00 s=0 e=1 z=0  None .text      __OSThreadInit                                               */
//	80340B20: 8044BB78 (RunQueue)
//	80340B48: 8044BB78 (RunQueue)
//	80340B78: 80340C74 (OSInitThreadQueue)
//	80340B90: 8033C000 (OSClearContext)
//	80340B98: 8033BE38 (OSSetCurrentContext)
//	80340B9C: 80457BC8 (_epilog)
//	80340BA0: 80457BC8 (_epilog)
//	80340BA4: 80456BC8 (???)
//	80340BAC: 80456BC8 (???)
//	80340BC8: 804509B8 (SwitchThreadCallback)
//	80340BE0: 80342650 (OSClearStack)
//	80340BE4: 804516C0 (RunQueueBits)
//	80340BF0: 804516C4 (RunQueueHint)
//	80340BFC: 80340C74 (OSInitThreadQueue)
//	80340C18: 80340C74 (OSInitThreadQueue)
//	80340C4C: 8033C000 (OSClearContext)
//	80340C50: 804516C8 (Reschedule)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void __OSThreadInit() {
	nofralloc
#include "asm/dolphin/os/OSThread/__OSThreadInit.s"
}
#pragma pop


/* 80340C74-80340C84 0010+00 s=1 e=9 z=0  None .text      OSInitThreadQueue                                            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void OSInitThreadQueue() {
	nofralloc
#include "asm/dolphin/os/OSThread/OSInitThreadQueue.s"
}
#pragma pop


/* 80340C84-80340C90 000C+00 s=0 e=20 z=0  None .text      OSGetCurrentThread                                           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void OSGetCurrentThread() {
	nofralloc
#include "asm/dolphin/os/OSThread/OSGetCurrentThread.s"
}
#pragma pop


/* 80340C90-80340CC4 0034+00 s=0 e=1 z=0  None .text      OSIsThreadTerminated                                         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void OSIsThreadTerminated() {
	nofralloc
#include "asm/dolphin/os/OSThread/OSIsThreadTerminated.s"
}
#pragma pop


/* 80340CC4-80340D04 0040+00 s=0 e=8 z=0  None .text      OSDisableScheduler                                           */
//	80340CD4: 8033D6F4 (OSDisableInterrupts)
//	80340CD8: 804516C8 (Reschedule)
//	80340CE0: 804516C8 (Reschedule)
//	80340CE8: 8033D71C (OSRestoreInterrupts)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void OSDisableScheduler() {
	nofralloc
#include "asm/dolphin/os/OSThread/OSDisableScheduler.s"
}
#pragma pop


/* 80340D04-80340D44 0040+00 s=0 e=10 z=0  None .text      OSEnableScheduler                                            */
//	80340D14: 8033D6F4 (OSDisableInterrupts)
//	80340D18: 804516C8 (Reschedule)
//	80340D20: 804516C8 (Reschedule)
//	80340D28: 8033D71C (OSRestoreInterrupts)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void OSEnableScheduler() {
	nofralloc
#include "asm/dolphin/os/OSThread/OSEnableScheduler.s"
}
#pragma pop


/* 80340D44-80340DAC 0068+00 s=3 e=0 z=0  None .text      UnsetRun                                                     */
//	80340D8C: 804516C0 (RunQueueBits)
//	80340D9C: 804516C0 (RunQueueBits)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void UnsetRun() {
	nofralloc
#include "asm/dolphin/os/OSThread/UnsetRun.s"
}
#pragma pop


/* 80340DAC-80340DE8 003C+00 s=4 e=2 z=0  None .text      __OSGetEffectivePriority                                     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void __OSGetEffectivePriority() {
	nofralloc
#include "asm/dolphin/os/OSThread/__OSGetEffectivePriority.s"
}
#pragma pop


/* 80340DE8-80340FA8 01C0+00 s=5 e=0 z=0  None .text      SetEffectivePriority                                         */
//	80340E34: 80340D44 (UnsetRun)
//	80340E3C: 8044BB78 (RunQueue)
//	80340E40: 8044BB78 (RunQueue)
//	80340E8C: 804516C0 (RunQueueBits)
//	80340E9C: 804516C0 (RunQueueBits)
//	80340EA0: 804516C4 (RunQueueHint)
//	80340F84: 804516C4 (RunQueueHint)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void SetEffectivePriority() {
	nofralloc
#include "asm/dolphin/os/OSThread/SetEffectivePriority.s"
}
#pragma pop


/* 80340FA8-80340FF8 0050+00 s=0 e=1 z=0  None .text      __OSPromoteThread                                            */
//	80340FD8: 80340DE8 (SetEffectivePriority)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void __OSPromoteThread() {
	nofralloc
#include "asm/dolphin/os/OSThread/__OSPromoteThread.s"
}
#pragma pop


/* 80340FF8-80341220 0228+00 s=9 e=0 z=0  None .text      SelectThread                                                 */
//	80340FFC: 8044BB78 (RunQueue)
//	8034100C: 8044BB78 (RunQueue)
//	80341018: 804516C8 (Reschedule)
//	8034102C: 8033BE94 (OSGetCurrentContext)
//	80341068: 804516C0 (RunQueueBits)
//	803410D4: 804516C0 (RunQueueBits)
//	803410E4: 804516C0 (RunQueueBits)
//	803410E8: 804516C4 (RunQueueHint)
//	803410F8: 8033BEA0 (OSSaveContext)
//	8034110C: 804516C0 (RunQueueBits)
//	80341118: 804509B8 (SwitchThreadCallback)
//	8034113C: 8033BE38 (OSSetCurrentContext)
//	80341140: 8033D708 (OSEnableInterrupts)
//	80341144: 804516C0 (RunQueueBits)
//	80341150: 8033D6F4 (OSDisableInterrupts)
//	80341154: 804516C0 (RunQueueBits)
//	80341164: 8033C000 (OSClearContext)
//	8034116C: 804516C4 (RunQueueHint)
//	80341170: 804516C0 (RunQueueBits)
//	803411B4: 804516C0 (RunQueueBits)
//	803411C4: 804516C0 (RunQueueBits)
//	803411E0: 804509B8 (SwitchThreadCallback)
//	803411F8: 8033BE38 (OSSetCurrentContext)
//	80341200: 8033BF20 (OSLoadContext)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void SelectThread() {
	nofralloc
#include "asm/dolphin/os/OSThread/SelectThread.s"
}
#pragma pop


/* 80341220-80341250 0030+00 s=0 e=3 z=0  None .text      __OSReschedule                                               */
//	8034122C: 804516C4 (RunQueueHint)
//	8034123C: 80340FF8 (SelectThread)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void __OSReschedule() {
	nofralloc
#include "asm/dolphin/os/OSThread/__OSReschedule.s"
}
#pragma pop


/* 80341250-8034128C 003C+00 s=0 e=2 z=0  None .text      OSYieldThread                                                */
//	80341260: 8033D6F4 (OSDisableInterrupts)
//	8034126C: 80340FF8 (SelectThread)
//	80341274: 8033D71C (OSRestoreInterrupts)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void OSYieldThread() {
	nofralloc
#include "asm/dolphin/os/OSThread/OSYieldThread.s"
}
#pragma pop


/* 8034128C-80341474 01E8+00 s=0 e=5 z=3  None .text      OSCreateThread                                               */
//	80341314: 8033C024 (OSInitContext)
//	80341318: 80341474 (OSExitThread)
//	8034131C: 80341474 (OSExitThread)
//	80341350: 8033D6F4 (OSDisableInterrupts)
//	80341354: 8044BAD0 (__OSErrorTable)
//	80341358: 8044BAD0 (__OSErrorTable)
//	8034138C: 804509A0 (__OSFpscrEnableBits)
//	80341458: 8033D71C (OSRestoreInterrupts)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void OSCreateThread() {
	nofralloc
#include "asm/dolphin/os/OSThread/OSCreateThread.s"
}
#pragma pop


/* 80341474-80341558 00E4+00 s=1 e=1 z=0  None .text      OSExitThread                                                 */
//	80341494: 8033D6F4 (OSDisableInterrupts)
//	803414A8: 8033C000 (OSClearContext)
//	80341508: 8033F1E4 (__OSUnlockAllMutex)
//	80341510: 80341C98 (OSWakeupThread)
//	80341518: 804516C4 (RunQueueHint)
//	8034151C: 804516C4 (RunQueueHint)
//	8034152C: 80340FF8 (SelectThread)
//	80341534: 8033D71C (OSRestoreInterrupts)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void OSExitThread() {
	nofralloc
#include "asm/dolphin/os/OSThread/OSExitThread.s"
}
#pragma pop


/* 80341558-80341714 01BC+00 s=0 e=4 z=3  None .text      OSCancelThread                                               */
//	80341574: 8033D6F4 (OSDisableInterrupts)
//	803415B8: 80340D44 (UnsetRun)
//	803415C4: 804516C4 (RunQueueHint)
//	80341638: 80340DAC (__OSGetEffectivePriority)
//	80341650: 80340DE8 (SetEffectivePriority)
//	80341664: 8033D71C (OSRestoreInterrupts)
//	80341670: 8033C000 (OSClearContext)
//	803416D0: 8033F1E4 (__OSUnlockAllMutex)
//	803416D8: 80341C98 (OSWakeupThread)
//	803416DC: 804516C4 (RunQueueHint)
//	803416EC: 80340FF8 (SelectThread)
//	803416F4: 8033D71C (OSRestoreInterrupts)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void OSCancelThread() {
	nofralloc
#include "asm/dolphin/os/OSThread/OSCancelThread.s"
}
#pragma pop


/* 80341714-803417B4 00A0+00 s=0 e=2 z=0  None .text      OSDetachThread                                               */
//	8034172C: 8033D6F4 (OSDisableInterrupts)
//	80341790: 80341C98 (OSWakeupThread)
//	80341798: 8033D71C (OSRestoreInterrupts)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void OSDetachThread() {
	nofralloc
#include "asm/dolphin/os/OSThread/OSDetachThread.s"
}
#pragma pop


/* 803417B4-80341A3C 0288+00 s=0 e=13 z=3  None .text      OSResumeThread                                               */
//	803417D0: 8033D6F4 (OSDisableInterrupts)
//	80341858: 8044BB78 (RunQueue)
//	8034185C: 8044BB78 (RunQueue)
//	803418A8: 804516C0 (RunQueueBits)
//	803418B8: 804516C0 (RunQueueBits)
//	803418BC: 804516C4 (RunQueueHint)
//	803419DC: 80340DAC (__OSGetEffectivePriority)
//	803419F4: 80340DE8 (SetEffectivePriority)
//	80341A00: 804516C4 (RunQueueHint)
//	80341A10: 80340FF8 (SelectThread)
//	80341A18: 8033D71C (OSRestoreInterrupts)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void OSResumeThread() {
	nofralloc
#include "asm/dolphin/os/OSThread/OSResumeThread.s"
}
#pragma pop


/* 80341A3C-80341BAC 0170+00 s=0 e=7 z=4  None .text      OSSuspendThread                                              */
//	80341A58: 8033D6F4 (OSDisableInterrupts)
//	80341AA4: 804516C4 (RunQueueHint)
//	80341AB4: 80340D44 (UnsetRun)
//	80341B4C: 80340DAC (__OSGetEffectivePriority)
//	80341B64: 80340DE8 (SetEffectivePriority)
//	80341B70: 804516C4 (RunQueueHint)
//	80341B80: 80340FF8 (SelectThread)
//	80341B88: 8033D71C (OSRestoreInterrupts)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void OSSuspendThread() {
	nofralloc
#include "asm/dolphin/os/OSThread/OSSuspendThread.s"
}
#pragma pop


/* 80341BAC-80341C98 00EC+00 s=0 e=12 z=0  None .text      OSSleepThread                                                */
//	80341BC4: 8033D6F4 (OSDisableInterrupts)
//	80341C60: 804516C4 (RunQueueHint)
//	80341C64: 804516C4 (RunQueueHint)
//	80341C74: 80340FF8 (SelectThread)
//	80341C7C: 8033D71C (OSRestoreInterrupts)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void OSSleepThread() {
	nofralloc
#include "asm/dolphin/os/OSThread/OSSleepThread.s"
}
#pragma pop


/* 80341C98-80341D9C 0104+00 s=3 e=13 z=0  None .text      OSWakeupThread                                               */
//	80341CB0: 8033D6F4 (OSDisableInterrupts)
//	80341CB4: 8044BB78 (RunQueue)
//	80341CBC: 8044BB78 (RunQueue)
//	80341D44: 804516C0 (RunQueueBits)
//	80341D54: 804516C0 (RunQueueBits)
//	80341D58: 804516C4 (RunQueueHint)
//	80341D68: 804516C4 (RunQueueHint)
//	80341D78: 80340FF8 (SelectThread)
//	80341D80: 8033D71C (OSRestoreInterrupts)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void OSWakeupThread() {
	nofralloc
#include "asm/dolphin/os/OSThread/OSWakeupThread.s"
}
#pragma pop


/* 80341D9C-80341E5C 00C0+00 s=0 e=1 z=0  None .text      OSSetThreadPriority                                          */
//	80341DD0: 8033D6F4 (OSDisableInterrupts)
//	80341DFC: 80340DAC (__OSGetEffectivePriority)
//	80341E14: 80340DE8 (SetEffectivePriority)
//	80341E20: 804516C4 (RunQueueHint)
//	80341E30: 80340FF8 (SelectThread)
//	80341E38: 8033D71C (OSRestoreInterrupts)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void OSSetThreadPriority() {
	nofralloc
#include "asm/dolphin/os/OSThread/OSSetThreadPriority.s"
}
#pragma pop


/* 80341E5C-80341E64 0008+00 s=0 e=4 z=0  None .text      OSGetThreadPriority                                          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void OSGetThreadPriority() {
	nofralloc
#include "asm/dolphin/os/OSThread/OSGetThreadPriority.s"
}
#pragma pop


/* 80341E64-80341F00 009C+00 s=1 e=0 z=0  None .text      CheckThreadQueue                                             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void CheckThreadQueue() {
	nofralloc
#include "asm/dolphin/os/OSThread/CheckThreadQueue.s"
}
#pragma pop


/* ############################################################################################## */
/* 803D0838-803D0898 005F+01 s=1 e=0 z=0  None .data      @831                                                         */
SECTION_DATA static u8 lit_831[95 + 1 /* padding */] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x52, 0x75, 0x6E,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x5B, 0x70, 0x72, 0x69, 0x6F, 0x5D, 0x2E, 0x68, 0x65, 0x61, 0x64,
	0x20, 0x21, 0x3D, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20, 0x26, 0x26, 0x20, 0x52, 0x75, 0x6E, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x5B, 0x70, 0x72, 0x69, 0x6F, 0x5D, 0x2E, 0x74, 0x61, 0x69, 0x6C, 0x20,
	0x21, 0x3D, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00,
};

/* 804509BC-804509C0 0001+03 s=1 e=0 z=0  None .sdata     @833                                                         */
SECTION_SDATA static u8 lit_833[1 + 3 /* padding */] = {
	0x00,
	/* padding */
	0x00, 0x00, 0x00,
};

/* 80341F00-80342650 0750+00 s=0 e=1 z=0  None .text      OSCheckActiveThreads                                         */
//	80341F04: 803D0838 (lit_831)
//	80341F0C: 8044BB78 (RunQueue)
//	80341F18: 803D0838 (lit_831)
//	80341F1C: 8044BB78 (RunQueue)
//	80341F24: 8033D6F4 (OSDisableInterrupts)
//	80341F38: 804516C0 (RunQueueBits)
//	80341F70: 80006ABC (OSReport)
//	80341F80: 804509BC (lit_833)
//	80341F84: 80006E7C (OSPanic)
//	80341FB0: 80006ABC (OSReport)
//	80341FC0: 804509BC (lit_833)
//	80341FC4: 80006E7C (OSPanic)
//	80341FCC: 80341E64 (CheckThreadQueue)
//	80341FE4: 80006ABC (OSReport)
//	80341FF4: 804509BC (lit_833)
//	80341FF8: 80006E7C (OSPanic)
//	80342034: 80006ABC (OSReport)
//	80342044: 804509BC (lit_833)
//	80342048: 80006E7C (OSPanic)
//	80342078: 80006ABC (OSReport)
//	80342088: 804509BC (lit_833)
//	8034208C: 80006E7C (OSPanic)
//	803420C4: 80006ABC (OSReport)
//	803420D4: 804509BC (lit_833)
//	803420D8: 80006E7C (OSPanic)
//	80342100: 80006ABC (OSReport)
//	80342110: 804509BC (lit_833)
//	80342114: 80006E7C (OSPanic)
//	80342138: 80006ABC (OSReport)
//	80342148: 804509BC (lit_833)
//	8034214C: 80006E7C (OSPanic)
//	80342170: 80006ABC (OSReport)
//	80342180: 804509BC (lit_833)
//	80342184: 80006E7C (OSPanic)
//	803421A0: 80006ABC (OSReport)
//	803421B0: 804509BC (lit_833)
//	803421B4: 80006E7C (OSPanic)
//	803421BC: 80341E64 (CheckThreadQueue)
//	803421D4: 80006ABC (OSReport)
//	803421E4: 804509BC (lit_833)
//	803421E8: 80006E7C (OSPanic)
//	80342250: 80006ABC (OSReport)
//	80342260: 804509BC (lit_833)
//	80342264: 80006E7C (OSPanic)
//	803422AC: 80006ABC (OSReport)
//	803422BC: 804509BC (lit_833)
//	803422C0: 80006E7C (OSPanic)
//	80342310: 80006ABC (OSReport)
//	80342320: 804509BC (lit_833)
//	80342324: 80006E7C (OSPanic)
//	80342344: 80006ABC (OSReport)
//	80342354: 804509BC (lit_833)
//	80342358: 80006E7C (OSPanic)
//	80342374: 80006ABC (OSReport)
//	80342384: 804509BC (lit_833)
//	80342388: 80006E7C (OSPanic)
//	803423D8: 80006ABC (OSReport)
//	803423E8: 804509BC (lit_833)
//	803423EC: 80006E7C (OSPanic)
//	8034240C: 80006ABC (OSReport)
//	8034241C: 804509BC (lit_833)
//	80342420: 80006E7C (OSPanic)
//	80342428: 80341E64 (CheckThreadQueue)
//	80342440: 80006ABC (OSReport)
//	80342450: 804509BC (lit_833)
//	80342454: 80006E7C (OSPanic)
//	80342498: 80006ABC (OSReport)
//	803424A8: 804509BC (lit_833)
//	803424AC: 80006E7C (OSPanic)
//	80342508: 80006ABC (OSReport)
//	80342518: 804509BC (lit_833)
//	8034251C: 80006E7C (OSPanic)
//	8034253C: 80006ABC (OSReport)
//	8034254C: 804509BC (lit_833)
//	80342550: 80006E7C (OSPanic)
//	80342558: 8033F524 (__OSCheckDeadLock)
//	80342570: 80006ABC (OSReport)
//	80342580: 804509BC (lit_833)
//	80342584: 80006E7C (OSPanic)
//	803425B0: 80006ABC (OSReport)
//	803425C0: 804509BC (lit_833)
//	803425C4: 80006E7C (OSPanic)
//	803425D8: 80006ABC (OSReport)
//	803425E8: 804509BC (lit_833)
//	803425EC: 80006E7C (OSPanic)
//	803425F4: 8033F55C (__OSCheckMutexes)
//	8034260C: 80006ABC (OSReport)
//	8034261C: 804509BC (lit_833)
//	80342620: 80006E7C (OSPanic)
//	80342634: 8033D71C (OSRestoreInterrupts)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void OSCheckActiveThreads() {
	nofralloc
#include "asm/dolphin/os/OSThread/OSCheckActiveThreads.s"
}
#pragma pop


/* 80342650-803426FC 00AC+00 s=1 e=0 z=0  None .text      OSClearStack                                                 */
//	80342674: 8033BFF8 (OSGetStackPointer)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// True False
extern "C" asm static void OSClearStack() {
	nofralloc
#include "asm/dolphin/os/OSThread/OSClearStack.s"
}
#pragma pop


/* ############################################################################################## */
/* 803D0898-803D08A4 000B+01 s=0 e=0 z=0  None .data      @832                                                         */
SECTION_DATA u8 lit_832[11 + 1 /* padding */] = {
	0x4F, 0x53, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2E, 0x63, 0x00,
	/* padding */
	0x00,
};

/* 803D08A4-803D0904 005F+01 s=0 e=0 z=0  None .data      @834                                                         */
SECTION_DATA u8 OSThread__lit_834[95 + 1 /* padding */] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x52, 0x75, 0x6E,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x5B, 0x70, 0x72, 0x69, 0x6F, 0x5D, 0x2E, 0x68, 0x65, 0x61, 0x64,
	0x20, 0x3D, 0x3D, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20, 0x26, 0x26, 0x20, 0x52, 0x75, 0x6E, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x5B, 0x70, 0x72, 0x69, 0x6F, 0x5D, 0x2E, 0x74, 0x61, 0x69, 0x6C, 0x20,
	0x3D, 0x3D, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00,
};

/* 803D0904-803D094C 0046+02 s=0 e=0 z=0  None .data      @835                                                         */
SECTION_DATA u8 OSThread__lit_835[70 + 2 /* padding */] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x43, 0x68, 0x65,
	0x63, 0x6B, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x28, 0x26, 0x52,
	0x75, 0x6E, 0x51, 0x75, 0x65, 0x75, 0x65, 0x5B, 0x70, 0x72, 0x69, 0x6F, 0x5D, 0x29, 0x20, 0x69,
	0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00, 0x00,
};

/* 803D094C-803D09CC 007E+02 s=0 e=0 z=0  None .data      @836                                                         */
SECTION_DATA u8 OSThread__lit_836[126 + 2 /* padding */] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x5F, 0x5F, 0x4F,
	0x53, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2E, 0x68, 0x65, 0x61, 0x64, 0x20, 0x3D, 0x3D, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20,
	0x7C, 0x7C, 0x20, 0x5F, 0x5F, 0x4F, 0x53, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2E, 0x68, 0x65, 0x61, 0x64, 0x2D, 0x3E, 0x6C,
	0x69, 0x6E, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2E, 0x70, 0x72, 0x65, 0x76, 0x20, 0x3D,
	0x3D, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00, 0x00,
};

/* 803D09CC-803D0A4C 007E+02 s=0 e=0 z=0  None .data      @837                                                         */
SECTION_DATA u8 OSThread__lit_837[126 + 2 /* padding */] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x5F, 0x5F, 0x4F,
	0x53, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2E, 0x74, 0x61, 0x69, 0x6C, 0x20, 0x3D, 0x3D, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20,
	0x7C, 0x7C, 0x20, 0x5F, 0x5F, 0x4F, 0x53, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2E, 0x74, 0x61, 0x69, 0x6C, 0x2D, 0x3E, 0x6C,
	0x69, 0x6E, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2E, 0x6E, 0x65, 0x78, 0x74, 0x20, 0x3D,
	0x3D, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00, 0x00,
};

/* 803D0A4C-803D0AC8 007A+02 s=0 e=0 z=0  None .data      @838                                                         */
SECTION_DATA u8 OSThread__lit_838[122 + 2 /* padding */] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x2D, 0x3E, 0x6C, 0x69, 0x6E, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2E,
	0x6E, 0x65, 0x78, 0x74, 0x20, 0x3D, 0x3D, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20, 0x7C, 0x7C, 0x20,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x20, 0x3D, 0x3D, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x2D, 0x3E, 0x6C, 0x69, 0x6E, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2E, 0x6E, 0x65, 0x78,
	0x74, 0x2D, 0x3E, 0x6C, 0x69, 0x6E, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2E, 0x70, 0x72,
	0x65, 0x76, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00, 0x00,
};

/* 803D0AC8-803D0B44 007A+02 s=0 e=0 z=0  None .data      @839                                                         */
SECTION_DATA u8 OSThread__lit_839[122 + 2 /* padding */] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x2D, 0x3E, 0x6C, 0x69, 0x6E, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2E,
	0x70, 0x72, 0x65, 0x76, 0x20, 0x3D, 0x3D, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20, 0x7C, 0x7C, 0x20,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x20, 0x3D, 0x3D, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x2D, 0x3E, 0x6C, 0x69, 0x6E, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2E, 0x70, 0x72, 0x65,
	0x76, 0x2D, 0x3E, 0x6C, 0x69, 0x6E, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2E, 0x6E, 0x65,
	0x78, 0x74, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00, 0x00,
};

/* 803D0B44-803D0B98 0051+03 s=0 e=0 z=0  None .data      @840                                                         */
SECTION_DATA u8 OSThread__lit_840[81 + 3 /* padding */] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x2A, 0x28, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x2D, 0x3E, 0x73, 0x74, 0x61, 0x63, 0x6B, 0x45, 0x6E, 0x64, 0x29,
	0x20, 0x3D, 0x3D, 0x20, 0x4F, 0x53, 0x5F, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5F, 0x53, 0x54,
	0x41, 0x43, 0x4B, 0x5F, 0x4D, 0x41, 0x47, 0x49, 0x43, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A,
	0x00,
	/* padding */
	0x00, 0x00, 0x00,
};

/* 803D0B98-803D0C0C 0071+03 s=0 e=0 z=0  None .data      @841                                                         */
SECTION_DATA u8 OSThread__lit_841[113 + 3 /* padding */] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x4F, 0x53, 0x5F,
	0x50, 0x52, 0x49, 0x4F, 0x52, 0x49, 0x54, 0x59, 0x5F, 0x4D, 0x49, 0x4E, 0x20, 0x3C, 0x3D, 0x20,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2D, 0x3E, 0x70, 0x72, 0x69, 0x6F, 0x72, 0x69, 0x74, 0x79,
	0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2D, 0x3E, 0x70, 0x72, 0x69, 0x6F,
	0x72, 0x69, 0x74, 0x79, 0x20, 0x3C, 0x3D, 0x20, 0x4F, 0x53, 0x5F, 0x50, 0x52, 0x49, 0x4F, 0x52,
	0x49, 0x54, 0x59, 0x5F, 0x4D, 0x41, 0x58, 0x2B, 0x31, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A,
	0x00,
	/* padding */
	0x00, 0x00, 0x00,
};

/* 803D0C0C-803D0C48 0039+03 s=0 e=0 z=0  None .data      @842                                                         */
SECTION_DATA u8 OSThread__lit_842[57 + 3 /* padding */] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x30, 0x20, 0x3C,
	0x3D, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2D, 0x3E, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6E,
	0x64, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00, 0x00, 0x00,
};

/* 803D0C48-803D0C94 0049+03 s=0 e=0 z=0  None .data      @843                                                         */
SECTION_DATA u8 OSThread__lit_843[73 + 3 /* padding */] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x43, 0x68, 0x65,
	0x63, 0x6B, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x28, 0x26, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x2D, 0x3E, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4A, 0x6F, 0x69, 0x6E,
	0x29, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00, 0x00, 0x00,
};

/* 803D0C94-803D0CE8 0051+03 s=0 e=0 z=0  None .data      @844                                                         */
SECTION_DATA u8 lit_844[81 + 3 /* padding */] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x2D, 0x3E, 0x71, 0x75, 0x65, 0x75, 0x65, 0x20, 0x3D, 0x3D, 0x20, 0x26, 0x52,
	0x75, 0x6E, 0x51, 0x75, 0x65, 0x75, 0x65, 0x5B, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2D, 0x3E,
	0x70, 0x72, 0x69, 0x6F, 0x72, 0x69, 0x74, 0x79, 0x5D, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A,
	0x00,
	/* padding */
	0x00, 0x00, 0x00,
};

/* 803D0CE8-803D0D3C 0052+02 s=0 e=0 z=0  None .data      @845                                                         */
SECTION_DATA u8 OSThread__lit_845[82 + 2 /* padding */] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x49, 0x73, 0x4D,
	0x65, 0x6D, 0x62, 0x65, 0x72, 0x28, 0x26, 0x52, 0x75, 0x6E, 0x51, 0x75, 0x65, 0x75, 0x65, 0x5B,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2D, 0x3E, 0x70, 0x72, 0x69, 0x6F, 0x72, 0x69, 0x74, 0x79,
	0x5D, 0x2C, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x29, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64,
	0x0A, 0x00,
	/* padding */
	0x00, 0x00,
};

/* 803D0D3C-803D0D98 0059+03 s=0 e=0 z=0  None .data      @846                                                         */
SECTION_DATA u8 lit_846[89 + 3 /* padding */] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x2D, 0x3E, 0x70, 0x72, 0x69, 0x6F, 0x72, 0x69, 0x74, 0x79, 0x20, 0x3D, 0x3D,
	0x20, 0x5F, 0x5F, 0x4F, 0x53, 0x47, 0x65, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x72, 0x69, 0x6F, 0x72, 0x69, 0x74, 0x79, 0x28, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x29, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00, 0x00, 0x00,
};

/* 803D0D98-803D0DDC 0042+02 s=0 e=0 z=0  None .data      @847                                                         */
SECTION_DATA u8 lit_847[66 + 2 /* padding */] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x21, 0x49, 0x73,
	0x53, 0x75, 0x73, 0x70, 0x65, 0x6E, 0x64, 0x65, 0x64, 0x28, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x2D, 0x3E, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6E, 0x64, 0x29, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64,
	0x0A, 0x00,
	/* padding */
	0x00, 0x00,
};

/* 803D0DDC-803D0E18 003A+02 s=0 e=0 z=0  None .data      @848                                                         */
SECTION_DATA u8 lit_848[58 + 2 /* padding */] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x2D, 0x3E, 0x71, 0x75, 0x65, 0x75, 0x65, 0x20, 0x3D, 0x3D, 0x20, 0x4E, 0x55,
	0x4C, 0x4C, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00, 0x00,
};

/* 803D0E18-803D0E54 003A+02 s=0 e=0 z=0  None .data      @849                                                         */
SECTION_DATA u8 OSThread__lit_849[58 + 2 /* padding */] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x2D, 0x3E, 0x71, 0x75, 0x65, 0x75, 0x65, 0x20, 0x21, 0x3D, 0x20, 0x4E, 0x55,
	0x4C, 0x4C, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00, 0x00,
};

/* 803D0E54-803D0E98 0044+00 s=0 e=0 z=0  None .data      @850                                                         */
SECTION_DATA u8 OSThread__lit_850[68] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x43, 0x68, 0x65,
	0x63, 0x6B, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x28, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x2D, 0x3E, 0x71, 0x75, 0x65, 0x75, 0x65, 0x29, 0x20, 0x69, 0x6E, 0x20,
	0x25, 0x64, 0x0A, 0x00,
};

/* 803D0E98-803D0EDC 0044+00 s=0 e=0 z=0  None .data      @851                                                         */
SECTION_DATA u8 lit_851[68] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x49, 0x73, 0x4D,
	0x65, 0x6D, 0x62, 0x65, 0x72, 0x28, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2D, 0x3E, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x2C, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x29, 0x20, 0x69, 0x6E, 0x20,
	0x25, 0x64, 0x0A, 0x00,
};

/* 803D0EDC-803D0F18 003B+01 s=0 e=0 z=0  None .data      @852                                                         */
SECTION_DATA u8 lit_852[59 + 1 /* padding */] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x2D, 0x3E, 0x70, 0x72, 0x69, 0x6F, 0x72, 0x69, 0x74, 0x79, 0x20, 0x3D, 0x3D,
	0x20, 0x33, 0x32, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00,
};

/* 803D0F18-803D0F58 003F+01 s=0 e=0 z=0  None .data      @853                                                         */
SECTION_DATA u8 OSThread__lit_853[63 + 1 /* padding */] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x21, 0x5F, 0x5F,
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x44, 0x65, 0x61, 0x64, 0x4C, 0x6F, 0x63, 0x6B, 0x28,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x29, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00,
};

/* 803D0F58-803D0FC0 0067+01 s=0 e=0 z=0  None .data      @854                                                         */
SECTION_DATA u8 OSThread__lit_854[103 + 1 /* padding */] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x2D, 0x3E, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4D, 0x75, 0x74, 0x65, 0x78, 0x2E,
	0x68, 0x65, 0x61, 0x64, 0x20, 0x3D, 0x3D, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20, 0x26, 0x26, 0x20,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2D, 0x3E, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4D, 0x75, 0x74,
	0x65, 0x78, 0x2E, 0x74, 0x61, 0x69, 0x6C, 0x20, 0x3D, 0x3D, 0x20, 0x4E, 0x55, 0x4C, 0x4C, 0x20,
	0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00,
};

/* 803D0FC0-803D1008 0045+03 s=0 e=0 z=0  None .data      @855                                                         */
SECTION_DATA u8 OSThread__lit_855[69 + 3 /* padding */] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x2E, 0x20, 0x75, 0x6E,
	0x6B, 0x6F, 0x77, 0x6E, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x20, 0x28, 0x25, 0x64, 0x29, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x20, 0x25, 0x70, 0x0A, 0x00,
	/* padding */
	0x00, 0x00, 0x00,
};

/* 803D1008-803D1048 003D+03 s=0 e=0 z=0  None .data      @856                                                         */
SECTION_DATA u8 lit_856[61 + 3 /* padding */] = {
	0x4F, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x3A, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x5F, 0x5F, 0x4F,
	0x53, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x4D, 0x75, 0x74, 0x65, 0x78, 0x65, 0x73, 0x28, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x29, 0x20, 0x69, 0x6E, 0x20, 0x25, 0x64, 0x0A, 0x00,
	/* padding */
	0x00, 0x00, 0x00,
};

/* 8044BC78-8044BF90 0318+00 s=0 e=0 z=0  None .bss       IdleThread                                                   */
u8 IdleThread[792];

/* 8044BF90-8044C2A8 0318+00 s=0 e=0 z=0  None .bss       DefaultThread                                                */
u8 DefaultThread[792];

/* 8044C2A8-8044C570 02C8+00 s=0 e=0 z=0  None .bss       IdleContext                                                  */
u8 IdleContext[712];

/* 804516D0-804516D8 0008+00 s=0 e=2 z=0  None .sbss      None                                                         */
u8 data_804516D0[8];

