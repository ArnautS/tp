// 
// Generated By: dol2asm
// Translation Unit: OSError
// 

#include "dol2asm.h"
#include "dolphin/types.h"
#include "dolphin/os/OSError.h"

// 
// Forward References:
// 


// False False
extern "C" void OSSetErrorHandler();
// False False
extern "C" void __OSUnhandledException();
extern "C" extern u8 lit_14[38 + 2 /* padding */];
extern "C" extern u8 lit_15[28];
extern "C" extern u8 lit_74[29 + 3 /* padding */];
extern "C" extern u8 lit_75[23 + 1 /* padding */];
extern "C" extern u8 lit_77[49 + 3 /* padding */];
extern "C" extern u8 lit_78[16];
extern "C" extern u8 lit_79[96];
extern "C" extern u8 lit_80[76];
extern "C" extern u8 lit_81[98 + 2 /* padding */];
extern "C" extern u8 OSError__lit_82[96];
extern "C" extern u8 lit_83[31 + 1 /* padding */];
extern "C" extern u8 OSError__lit_84[31 + 1 /* padding */];
extern "C" extern u8 OSError__lit_85[27 + 1 /* padding */];
extern "C" extern u8 OSError__lit_86[53 + 3 /* padding */];
extern "C" extern u8 __OSErrorTable[68 + 12 /* padding */];
extern "C" extern u32 __OSFpscrEnableBits;

// 
// External References:
// 


// False False
extern "C" void OSReport();
// False False
extern "C" void PPCMfmsr();
// False False
extern "C" void PPCMtmsr();
// False False
extern "C" void PPCHalt();
// False False
extern "C" void PPCMffpscr();
// False False
extern "C" void PPCMtfpscr();
// False False
extern "C" void OSSaveFPUContext();
// False False
extern "C" void OSLoadContext();
// False False
extern "C" void OSDumpContext();
// False False
extern "C" void OSDisableInterrupts();
// False False
extern "C" void OSRestoreInterrupts();
// False False
extern "C" void OSDisableScheduler();
// False False
extern "C" void OSEnableScheduler();
// False False
extern "C" void __OSReschedule();
// False False
extern "C" void OSGetTime();
extern "C" extern u8 __OSLastInterruptSrr0[4];
extern "C" extern u8 __OSLastInterrupt[2 + 6 /* padding */];
extern "C" extern u8 __OSLastInterruptTime[4];
extern "C" extern u8 data_80451684[4];

// 
// Declarations:
// 

/* ############################################################################################## */
/* 8044BAD0-8044BB20 0044+0C s=2 e=2 z=0  None .bss       __OSErrorTable                                               */
u8 __OSErrorTable[68 + 12 /* padding */];

/* 804509A0-804509A4 0004+00 s=1 e=2 z=0  None .sdata     __OSFpscrEnableBits                                          */
SECTION_SDATA u32 __OSFpscrEnableBits = 0x000000F8;

/* 8033C580-8033C798 0218+00 s=0 e=4 z=0  None .text      OSSetErrorHandler                                            */
//	8033C5A4: 8033D6F4 (OSDisableInterrupts)
//	8033C5A8: 8044BAD0 (__OSErrorTable)
//	8033C5B0: 8044BAD0 (__OSErrorTable)
//	8033C5D0: 80339CC0 (PPCMfmsr)
//	8033C5DC: 80339CC8 (PPCMtmsr)
//	8033C5E0: 80339D44 (PPCMffpscr)
//	8033C6C0: 804509A0 (__OSFpscrEnableBits)
//	8033C6EC: 804509A0 (__OSFpscrEnableBits)
//	8033C760: 80339D64 (PPCMtfpscr)
//	8033C768: 80339CC8 (PPCMtmsr)
//	8033C770: 8033D71C (OSRestoreInterrupts)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void OSSetErrorHandler() {
	nofralloc
#include "asm/dolphin/os/OSError/OSSetErrorHandler.s"
}
#pragma pop


/* ############################################################################################## */
/* 803CF918-803CF930 0016+02 s=1 e=0 z=0  None .data      @13                                                          */
SECTION_DATA static u8 lit_13[22 + 2 /* padding */] = {
	0x20, 0x69, 0x6E, 0x20, 0x22, 0x25, 0x73, 0x22, 0x20, 0x6F, 0x6E, 0x20, 0x6C, 0x69, 0x6E, 0x65,
	0x20, 0x25, 0x64, 0x2E, 0x0A, 0x00,
	/* padding */
	0x00, 0x00,
};

/* 803CF930-803CF958 0026+02 s=0 e=0 z=0  None .data      @14                                                          */
SECTION_DATA u8 lit_14[38 + 2 /* padding */] = {
	0x0A, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x42,
	0x61, 0x63, 0x6B, 0x20, 0x43, 0x68, 0x61, 0x69, 0x6E, 0x20, 0x20, 0x20, 0x20, 0x4C, 0x52, 0x20,
	0x53, 0x61, 0x76, 0x65, 0x0A, 0x00,
	/* padding */
	0x00, 0x00,
};

/* 803CF958-803CF974 001C+00 s=0 e=0 z=0  None .data      @15                                                          */
SECTION_DATA u8 lit_15[28] = {
	0x30, 0x78, 0x25, 0x30, 0x38, 0x78, 0x3A, 0x20, 0x20, 0x20, 0x30, 0x78, 0x25, 0x30, 0x38, 0x78,
	0x20, 0x20, 0x20, 0x20, 0x30, 0x78, 0x25, 0x30, 0x38, 0x78, 0x0A, 0x00,
};

/* 803CF974-803CF994 001D+03 s=0 e=0 z=0  None .data      @74                                                          */
SECTION_DATA u8 lit_74[29 + 3 /* padding */] = {
	0x4E, 0x6F, 0x6E, 0x2D, 0x72, 0x65, 0x63, 0x6F, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6C, 0x65, 0x20,
	0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x25, 0x64, 0x00,
	/* padding */
	0x00, 0x00, 0x00,
};

/* 803CF994-803CF9AC 0017+01 s=0 e=0 z=0  None .data      @75                                                          */
SECTION_DATA u8 lit_75[23 + 1 /* padding */] = {
	0x55, 0x6E, 0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x64, 0x20, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6F, 0x6E, 0x20, 0x25, 0x64, 0x00,
	/* padding */
	0x00,
};

/* 803CF9AC-803CF9E0 0031+03 s=0 e=0 z=0  None .data      @77                                                          */
SECTION_DATA u8 lit_77[49 + 3 /* padding */] = {
	0x0A, 0x44, 0x53, 0x49, 0x53, 0x52, 0x20, 0x3D, 0x20, 0x30, 0x78, 0x25, 0x30, 0x38, 0x78, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x44, 0x41, 0x52, 0x20, 0x20, 0x3D, 0x20, 0x30, 0x78, 0x25, 0x30, 0x38, 0x78, 0x0A,
	0x00,
	/* padding */
	0x00, 0x00, 0x00,
};

/* 803CF9E0-803CF9F0 0010+00 s=0 e=0 z=0  None .data      @78                                                          */
SECTION_DATA u8 lit_78[16] = {
	0x54, 0x42, 0x20, 0x3D, 0x20, 0x30, 0x78, 0x25, 0x30, 0x31, 0x36, 0x6C, 0x6C, 0x78, 0x0A, 0x00,
};

/* 803CF9F0-803CFA50 0060+00 s=0 e=0 z=0  None .data      @79                                                          */
SECTION_DATA u8 lit_79[96] = {
	0x0A, 0x49, 0x6E, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x61, 0x74, 0x20,
	0x30, 0x78, 0x25, 0x78, 0x20, 0x28, 0x72, 0x65, 0x61, 0x64, 0x20, 0x66, 0x72, 0x6F, 0x6D, 0x20,
	0x53, 0x52, 0x52, 0x30, 0x29, 0x20, 0x61, 0x74, 0x74, 0x65, 0x6D, 0x70, 0x74, 0x65, 0x64, 0x20,
	0x74, 0x6F, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x69, 0x6E, 0x76, 0x61, 0x6C, 0x69,
	0x64, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x30, 0x78, 0x25, 0x78, 0x20, 0x28,
	0x72, 0x65, 0x61, 0x64, 0x20, 0x66, 0x72, 0x6F, 0x6D, 0x20, 0x44, 0x41, 0x52, 0x29, 0x0A, 0x00,
};

/* 803CFA50-803CFA9C 004C+00 s=0 e=0 z=0  None .data      @80                                                          */
SECTION_DATA u8 lit_80[76] = {
	0x0A, 0x41, 0x74, 0x74, 0x65, 0x6D, 0x70, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x20, 0x69, 0x6E, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20,
	0x66, 0x72, 0x6F, 0x6D, 0x20, 0x69, 0x6E, 0x76, 0x61, 0x6C, 0x69, 0x64, 0x20, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x20, 0x30, 0x78, 0x25, 0x78, 0x20, 0x28, 0x72, 0x65, 0x61, 0x64, 0x20,
	0x66, 0x72, 0x6F, 0x6D, 0x20, 0x53, 0x52, 0x52, 0x30, 0x29, 0x0A, 0x00,
};

/* 803CFA9C-803CFB00 0062+02 s=0 e=0 z=0  None .data      @81                                                          */
SECTION_DATA u8 lit_81[98 + 2 /* padding */] = {
	0x0A, 0x49, 0x6E, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x61, 0x74, 0x20,
	0x30, 0x78, 0x25, 0x78, 0x20, 0x28, 0x72, 0x65, 0x61, 0x64, 0x20, 0x66, 0x72, 0x6F, 0x6D, 0x20,
	0x53, 0x52, 0x52, 0x30, 0x29, 0x20, 0x61, 0x74, 0x74, 0x65, 0x6D, 0x70, 0x74, 0x65, 0x64, 0x20,
	0x74, 0x6F, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x75, 0x6E, 0x61, 0x6C, 0x69, 0x67,
	0x6E, 0x65, 0x64, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x30, 0x78, 0x25, 0x78,
	0x20, 0x28, 0x72, 0x65, 0x61, 0x64, 0x20, 0x66, 0x72, 0x6F, 0x6D, 0x20, 0x44, 0x41, 0x52, 0x29,
	0x0A, 0x00,
	/* padding */
	0x00, 0x00,
};

/* 803CFB00-803CFB60 0060+00 s=0 e=0 z=0  None .data      @82                                                          */
SECTION_DATA u8 OSError__lit_82[96] = {
	0x0A, 0x50, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x20, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6F, 0x6E, 0x20, 0x3A, 0x20, 0x50, 0x6F, 0x73, 0x73, 0x69, 0x62, 0x6C, 0x65, 0x20, 0x69, 0x6C,
	0x6C, 0x65, 0x67, 0x61, 0x6C, 0x20, 0x69, 0x6E, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6F,
	0x6E, 0x2F, 0x6F, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x61, 0x74, 0x20, 0x6F,
	0x72, 0x20, 0x61, 0x72, 0x6F, 0x75, 0x6E, 0x64, 0x20, 0x30, 0x78, 0x25, 0x78, 0x20, 0x28, 0x72,
	0x65, 0x61, 0x64, 0x20, 0x66, 0x72, 0x6F, 0x6D, 0x20, 0x53, 0x52, 0x52, 0x30, 0x29, 0x0A, 0x00,
};

/* 803CFB60-803CFB80 001F+01 s=0 e=0 z=0  None .data      @83                                                          */
SECTION_DATA u8 lit_83[31 + 1 /* padding */] = {
	0x41, 0x49, 0x20, 0x44, 0x4D, 0x41, 0x20, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x3D,
	0x20, 0x20, 0x20, 0x30, 0x78, 0x25, 0x30, 0x34, 0x78, 0x25, 0x30, 0x34, 0x78, 0x0A, 0x00,
	/* padding */
	0x00,
};

/* 803CFB80-803CFBA0 001F+01 s=0 e=0 z=0  None .data      @84                                                          */
SECTION_DATA u8 OSError__lit_84[31 + 1 /* padding */] = {
	0x41, 0x52, 0x41, 0x4D, 0x20, 0x44, 0x4D, 0x41, 0x20, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x20, 0x3D, 0x20, 0x30, 0x78, 0x25, 0x30, 0x34, 0x78, 0x25, 0x30, 0x34, 0x78, 0x0A, 0x00,
	/* padding */
	0x00,
};

/* 803CFBA0-803CFBBC 001B+01 s=0 e=0 z=0  None .data      @85                                                          */
SECTION_DATA u8 OSError__lit_85[27 + 1 /* padding */] = {
	0x44, 0x49, 0x20, 0x44, 0x4D, 0x41, 0x20, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x3D,
	0x20, 0x20, 0x20, 0x30, 0x78, 0x25, 0x30, 0x38, 0x78, 0x0A, 0x00,
	/* padding */
	0x00,
};

/* 803CFBBC-803CFBF4 0035+03 s=0 e=0 z=0  None .data      @86                                                          */
SECTION_DATA u8 OSError__lit_86[53 + 3 /* padding */] = {
	0x0A, 0x4C, 0x61, 0x73, 0x74, 0x20, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x20,
	0x28, 0x25, 0x64, 0x29, 0x3A, 0x20, 0x53, 0x52, 0x52, 0x30, 0x20, 0x3D, 0x20, 0x30, 0x78, 0x25,
	0x30, 0x38, 0x78, 0x20, 0x20, 0x54, 0x42, 0x20, 0x3D, 0x20, 0x30, 0x78, 0x25, 0x30, 0x31, 0x36,
	0x6C, 0x6C, 0x78, 0x0A, 0x00,
	/* padding */
	0x00, 0x00, 0x00,
};

/* 803CFBF4-803CFC38 0040+04 s=1 e=0 z=0  None .data      @87                                                          */
SECTION_DATA static void* lit_87[16 + 1 /* padding */] = {
	(void*)(((char*)__OSUnhandledException)+0x2B4),
	(void*)(((char*)__OSUnhandledException)+0x2B4),
	(void*)(((char*)__OSUnhandledException)+0x20C),
	(void*)(((char*)__OSUnhandledException)+0x224),
	(void*)(((char*)__OSUnhandledException)+0x2B4),
	(void*)(((char*)__OSUnhandledException)+0x238),
	(void*)(((char*)__OSUnhandledException)+0x250),
	(void*)(((char*)__OSUnhandledException)+0x2B4),
	(void*)(((char*)__OSUnhandledException)+0x2B4),
	(void*)(((char*)__OSUnhandledException)+0x2B4),
	(void*)(((char*)__OSUnhandledException)+0x2B4),
	(void*)(((char*)__OSUnhandledException)+0x2B4),
	(void*)(((char*)__OSUnhandledException)+0x2B4),
	(void*)(((char*)__OSUnhandledException)+0x2B4),
	(void*)(((char*)__OSUnhandledException)+0x2B4),
	(void*)(((char*)__OSUnhandledException)+0x268),
	/* padding */
	NULL,
};

/* 804509A4-804509A8 0002+02 s=1 e=0 z=0  None .sdata     @76                                                          */
SECTION_SDATA static u16 lit_76[1 + 1 /* padding */] = {
	0x0A00,
	/* padding */
	0x0000,
};

/* 8033C798-8033CA80 02E8+00 s=1 e=2 z=0  None .text      __OSUnhandledException                                       */
//	8033C79C: 8044BAD0 (__OSErrorTable)
//	8033C7A4: 803CF918 (lit_13)
//	8033C7C0: 8044BAD0 (__OSErrorTable)
//	8033C7C4: 803CF918 (lit_13)
//	8033C7C8: 803426FC (OSGetTime)
//	8033C7EC: 80006ABC (OSReport)
//	8033C818: 80339CC0 (PPCMfmsr)
//	8033C824: 80339CC8 (PPCMtmsr)
//	8033C838: 8033BE30 (OSSaveFPUContext)
//	8033C83C: 80339D44 (PPCMffpscr)
//	8033C84C: 80339D64 (PPCMtfpscr)
//	8033C854: 80339CC8 (PPCMtmsr)
//	8033C868: 80340CC4 (OSDisableScheduler)
//	8033C8AC: 80340D04 (OSEnableScheduler)
//	8033C8B0: 80341220 (__OSReschedule)
//	8033C8D0: 8033BF20 (OSLoadContext)
//	8033C8EC: 80340CC4 (OSDisableScheduler)
//	8033C910: 80340D04 (OSEnableScheduler)
//	8033C914: 80341220 (__OSReschedule)
//	8033C91C: 8033BF20 (OSLoadContext)
//	8033C930: 8033BF20 (OSLoadContext)
//	8033C940: 80006ABC (OSReport)
//	8033C944: 804509A4 (lit_76)
//	8033C94C: 80006ABC (OSReport)
//	8033C954: 8033C0E0 (OSDumpContext)
//	8033C968: 80006ABC (OSReport)
//	8033C97C: 80006ABC (OSReport)
//	8033C98C: 803CFBF4 (lit_87)
//	8033C990: 803CFBF4 (lit_87)
//	8033C9B4: 80006ABC (OSReport)
//	8033C9C8: 80006ABC (OSReport)
//	8033C9E0: 80006ABC (OSReport)
//	8033C9F8: 80006ABC (OSReport)
//	8033CA00: 804509A4 (lit_76)
//	8033CA08: 80006ABC (OSReport)
//	8033CA24: 80006ABC (OSReport)
//	8033CA38: 80006ABC (OSReport)
//	8033CA48: 80006ABC (OSReport)
//	8033CA4C: 80451678 (__OSLastInterrupt)
//	8033CA58: 80451674 (__OSLastInterruptSrr0)
//	8033CA5C: 80451680 (__OSLastInterruptTime)
//	8033CA60: 80451684 (data_80451684)
//	8033CA64: 80006ABC (OSReport)
//	8033CA68: 80339D00 (PPCHalt)
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// False False
extern "C" asm void __OSUnhandledException() {
	nofralloc
#include "asm/dolphin/os/OSError/__OSUnhandledException.s"
}
#pragma pop


